/******************************************************************************
 *                                                                            *
 * Copyright (c) 2008 Synopsys                        .                       *
 *                                                                            *
 * This file contains confidential, proprietary information and trade         *
 * secrets of Synopsys. No part of this document may be used, reproduced      *
 * or transmitted in any form or by any means without prior written           *
 * permission of Synopsys Incorporated.                                       *
 *                                                                            *
 * DESCRIPTION: Functional Coverage Module for the DDR3 PHY registers         *
 *                                                                            *
 *****************************************************************************/

`include "dictionary.v"
`include "macros_define.v"

`ifdef FUNCOV


typedef enum {RIDR_REG, PIR_REG, PGCR0_REG, PGCR1_REG, PGSR0_REG, PGSR1_REG, PLLCR_REG, 
              PTR0_REG, PTR1_REG, PTR2_REG, PTR3_REG, PTR4_REG, 
              ACMDLR_REG, ACBDLR_REG, ACIOCR_REG, DXCCR_REG, DSGCR_REG, DCR_REG, 
              DTPR0_REG, DTPR1_REG, DTPR2_REG,
              MR0_REG, MR1_REG, MR2_REG, MR3_REG, ODTCR_REG, 

              DTCR_REG, DTAR0_REG, DTAR1_REG, DTAR2_REG, DTDR0_REG, DTDR1_REG, DTEDR0_REG, DTEDR1_REG,
              PGCR2_REG, RDIMMGCR0_REG, RDIMMGCR1_REG, RDIMMCR0_REG, RDIMMCR1_REG,
              
              DCUAR_REG, DCUDR_REG, DCURR_REG, DCULR_REG, DCUGCR_REG, DCUTPR_REG, DCUSR0_REG, DCUSR1_REG, 

              BISTRR_REG, BISTWCR_REG, BISTMSKR0_REG, BISTMSKR1_REG, BISTMSKR2_REG, BISTLSR_REG,
              BISTAR0_REG, BISTAR1_REG, BISTAR2_REG, BISTUDPR_REG, BISTGSR_REG, BISTWER_REG,
              BISTBER0_REG, BISTBER1_REG, BISTBER2_REG, BISTBER3_REG,
              BISTWCSR_REG, BISTFWR0_REG, BISTFWR1_REG, BISTFWR2_REG, 

              GPR0_REG, GPR1_REG,
              ZQ0CR0_REG, ZQ0CR1_REG, ZQ0SR0_REG, ZQ0SR1_REG,
              ZQ1CR0_REG, ZQ1CR1_REG, ZQ1SR0_REG, ZQ1SR1_REG,
              ZQ2CR0_REG, ZQ2CR1_REG, ZQ2SR0_REG, ZQ2SR1_REG,
              ZQ3CR0_REG, ZQ3CR1_REG, ZQ3SR0_REG, ZQ3SR1_REG,
              
              DX0GCR_REG, DX0GSR0_REG, DX0GSR1_REG, DX0BDLR0_REG, DX0BDLR1_REG, DX0BDLR2_REG, DX0BDLR3_REG, DX0BDLR4_REG, 
              DX0LCDLR0_REG, DX0LCDLR1_REG, DX0LCDLR2_REG, DX0MDLR_REG, DX0GTR_REG, DX0GSR2_REG,
              DX1GCR_REG, DX1GSR0_REG, DX1GSR1_REG, DX1BDLR0_REG, DX1BDLR1_REG, DX1BDLR2_REG, DX1BDLR3_REG, DX1BDLR4_REG, 
              DX1LCDLR0_REG, DX1LCDLR1_REG, DX1LCDLR2_REG, DX1MDLR_REG, DX1GTR_REG, DX1GSR2_REG,
              DX2GCR_REG, DX2GSR0_REG, DX2GSR1_REG, DX2BDLR0_REG, DX2BDLR1_REG, DX2BDLR2_REG, DX2BDLR3_REG, DX2BDLR4_REG, 
              DX2LCDLR0_REG, DX2LCDLR1_REG, DX2LCDLR2_REG, DX2MDLR_REG, DX2GTR_REG, DX2GSR2_REG,
              DX3GCR_REG, DX3GSR0_REG, DX3GSR1_REG, DX3BDLR0_REG, DX3BDLR1_REG, DX3BDLR2_REG, DX3BDLR3_REG, DX3BDLR4_REG, 
              DX3LCDLR0_REG, DX3LCDLR1_REG, DX3LCDLR2_REG, DX3MDLR_REG, DX3GTR_REG, DX3GSR2_REG,
              DX4GCR_REG, DX4GSR0_REG, DX4GSR1_REG, DX4BDLR0_REG, DX4BDLR1_REG, DX4BDLR2_REG, DX4BDLR3_REG, DX4BDLR4_REG, 
              DX4LCDLR0_REG, DX4LCDLR1_REG, DX4LCDLR2_REG, DX4MDLR_REG, DX4GTR_REG, DX4GSR2_REG,
              DX5GCR_REG, DX5GSR0_REG, DX5GSR1_REG, DX5BDLR0_REG, DX5BDLR1_REG, DX5BDLR2_REG, DX5BDLR3_REG, DX5BDLR4_REG, 
              DX5LCDLR0_REG, DX5LCDLR1_REG, DX5LCDLR2_REG, DX5MDLR_REG, DX5GTR_REG, DX5GSR2_REG,
              DX6GCR_REG, DX6GSR0_REG, DX6GSR1_REG, DX6BDLR0_REG, DX6BDLR1_REG, DX6BDLR2_REG, DX6BDLR3_REG, DX6BDLR4_REG, 
              DX6LCDLR0_REG, DX6LCDLR1_REG, DX6LCDLR2_REG, DX6MDLR_REG, DX6GTR_REG, DX6GSR2_REG,
              DX7GCR_REG, DX7GSR0_REG, DX7GSR1_REG, DX7BDLR0_REG, DX7BDLR1_REG, DX7BDLR2_REG, DX7BDLR3_REG, DX7BDLR4_REG, 
              DX7LCDLR0_REG, DX7LCDLR1_REG, DX7LCDLR2_REG, DX7MDLR_REG, DX7GTR_REG, DX7GSR2_REG,
              DX8GCR_REG, DX8GSR0_REG, DX8GSR1_REG, DX8BDLR0_REG, DX8BDLR1_REG, DX8BDLR2_REG, DX8BDLR3_REG, DX8BDLR4_REG, 
              DX8LCDLR0_REG, DX8LCDLR1_REG, DX8LCDLR2_REG, DX8MDLR_REG, DX8GTR_REG, DX8GSR2_REG,

              RESERVED_36_REG,RESERVED_37_REG,RESERVED_38_REG,RESERVED_39_REG,RESERVED_40_REG,	
              RESERVED_41_REG,RESERVED_42_REG,RESERVED_43_REG,
              
              RESERVED_56_REG,RESERVED_57_REG,RESERVED_58_REG,RESERVED_59_REG,
              RESERVED_60_REG,RESERVED_61_REG,RESERVED_62_REG,RESERVED_63_REG, 
	 
              RESERVED_84_REG,RESERVED_85_REG,RESERVED_86_REG,RESERVED_87_REG,RESERVED_88_REG,RESERVED_89_REG,
              RESERVED_90_REG,RESERVED_91_REG,RESERVED_92_REG,RESERVED_93_REG,//RESERVED_94_REG,RESERVED_95_REG,
	      
              RESERVED_126_REG,RESERVED_127_REG,
              RESERVED_142_REG,RESERVED_143_REG,             
              RESERVED_158_REG,RESERVED_159_REG,
              RESERVED_174_REG,RESERVED_175_REG,             
              RESERVED_190_REG,RESERVED_191_REG,
              RESERVED_206_REG,RESERVED_207_REG,             
              RESERVED_222_REG,RESERVED_223_REG,
              RESERVED_238_REG,RESERVED_239_REG,            
              RESERVED_254_REG,RESERVED_255_REG }  register_name_e;


`endif
                                                                                                            
module ddr_reg_fcov();

//logic [3:0]a;
//RIDR
   reg [3:0]                PUBMNR_3_0;
   reg [7:4]                PUBMDR_7_4;
   reg [11:8]               PUBMJR_11_8;
   reg [15:12]              PHYMNR_15_12;
   reg [19:16]              PHYMDR_19_16;
   reg [23:20]              PHYMJR_23_20;
   reg [31:24]              UDRID_31_24;
  
//PIR
   reg [0:0]                PHYINIT_0;
   reg [0:0]                ZCAL_1;
   reg [1:0]                PIR_RESERVED_3_2;
   reg [0:0]                PLLINIT_4;
   reg [0:0]                DCAL_5;
   reg [0:0]                PHYRST_6;
   reg [0:0]                DRAMRST_7;
   reg [0:0]                DRAMINIT_8;
   reg [0:0]                WL_9;
   reg [0:0]                QSGATE_10;
   reg [0:0]                WLADJ_11;
   reg [0:0]                RDDSKW_12;
   reg [0:0]                WRDSKW_13;
   reg [0:0]                RDEYE_14;
   reg [0:0]                WREYE_15;
   reg [0:0]                ICPC_16;
   reg [0:0]                PLLBYP_17;
   reg [0:0]                CTLDINIT_18;
   reg [0:0]                RDIMMINIT_19;
   reg [6:0]                PIR_RESERVED_26_20;
   reg [0:0]                CLRSR_27;
   reg [0:0]                LOCKBYP_28;
   reg [0:0]                DCALBYP_29;
   reg [0:0]                ZCALBYP_30;
   reg [0:0]                INITBYP_31;        
   
                 
//PGCR0
   reg [0:0]                WLLVT_0;
   reg [0:0]                WDLVT_1;
   reg [0:0]                RDLVT_2;
   reg [0:0]                RGLVT_3;
   reg [0:0]                WDBVT_4;
   reg [0:0]                RDBVT_5;
   reg [0:0]                DLTMODE_6;
   reg [0:0]                DLTST_7;
   reg [0:0]                OSCEN_8;
   reg [2:0]                OSCDIV_11_9;
   reg [1:0]                OSCWDL_13_12;
   reg [4:0]                DTOSEL_18_14;
   reg [6:0]                PGCR0_RESERVED_25_19;
   reg [5:0]                CKEN_31_26;
      

//PGCR1
   reg [0:0]                PDDISDX_0;
   reg [0:0]                WLMODE_1;
   reg [0:0]                WLSTEP_2;
   reg [0:0]                WLUNCRT_3;
   reg [1:0]                PGCR1_RESERVED_5_4;
   reg [0:0]                WLSELT_6;
   reg [1:0]                IODDRM_8_7;
   reg [0:0]                MDLEN_9;
   reg [0:0]                LPFEN_10;
   reg [1:0]                LPFDEPTH_12_11;
   reg [1:0]                FDEPTH_14_13;
   reg [7:0]                DLDLMT_22_15;
   reg [1:0]                ZCKSEL_24_23;
   reg [0:0]                PHYHRST_25;
   reg [0:0]                INHVT_26;
   reg [0:0]                IOLB_27;
   reg [0:0]                LBDQSS_28;
   reg [1:0]                LBGDQS_30_29;
   reg [0:0]                LBMODE_31;      

//PGSR0
   reg [0:0]                IDONE_0;
   reg [0:0]                PLDONE_1;
   reg [0:0]                DCDONE_2;
   reg [0:0]                ZCDONE_3;
   reg [0:0]                DIDONE_4;
   reg [0:0]                WLDONE_5;
   reg [0:0]                QSGDONE_6;
   reg [0:0]                WLADONE_7;
   reg [0:0]                RDDONE_8;
   reg [0:0]                WDDONE_9;
   reg [0:0]                REDONE_10;
   reg [0:0]                WEDONE_11;
   reg [7:0]                PGSR0_RESERVED_19_12;
   reg [0:0]                ZCERR_20;
   reg [0:0]                WLERR_21;
   reg [0:0]                QSGERR_22;
   reg [0:0]                WLAERR_23;
   reg [0:0]                RDERR_24;
   reg [0:0]                WDERR_25;
   reg [0:0]                REERR_26;
   reg [0:0]                WEERR_27;
   reg [2:0]                PGSR0_RESERVED_30_28;
   reg [0:0]                APLOCK_31;             
  
//PGSR1
   reg [0:0]                DLTDONE_0;
   reg [23:0]               DLTCODE_24_1;
   reg [4:0]                PGSR1_RESERVED_29_25;
   reg [0:0]                VTSTOP_30;
   reg [0:0]                PARERR_31;                                             
   
//PLLCR
   reg [1:0]                DTC_1_0;
   reg [3:0]                ATC_5_2;   
   reg [3:0]                ATOEN_9_6;
   reg [0:0]                GSHIFT_10;
   reg [1:0]                CPIC_12_11;
   reg [3:0]                CPPC_16_13;
   reg [0:0]                QPMODE_17;
   reg [1:0]                FRQSEL_19_18;
   reg [8:0]                PLLCR_RESERVED_28_20;
   reg [0:0]                PLLPD_29;
   reg [0:0]                PLLRST_30;
   reg [0:0]                BYP_31;               
   
//PTR0
   reg [5:0]                tPHYRST_5_0;
   reg [14:0]               tPLLGS_20_6;   
   reg [10:0]               tPLLPD_31_21;

//PTR1
   reg [12:0]               tPLLRST_12_0;
   reg [1:0]                PTR1_RESERVED_14_13;   
   reg [16:0]               tPLLLOCK_31_15;   
   
//PTR2   
   reg [4:0]                tCALON_4_0;   
   reg [4:0]                tCALS_9_5;
   reg [4:0]                tCALH_14_10;   
   reg [4:0]                tWLDLYS_19_15;
   reg [11:0]               PTR2_RESERVED_31_20;

//PTR3
   reg [19:0]               tDINIT0_19_0;
   reg [8:0]                tDINIT1_28_20;
   reg [2:0]                PTR3_RESERVED_31_29;
  
//PTR4
   reg [17:0]               tDINIT2_17_0;
   reg [9:0]                tDINIT3_27_18;
   reg [3:0]                PTR4_RESERVED_31_28;
  
   
//ACMDLR
   reg [7:0]                IPRD_7_0;
   reg [7:0]                TPRD_15_8;
   reg [7:0]                MDLD_23_16;  
   reg [7:0]                ACMDLR_RESERVED_31_24;
   
//ACBDLR
   reg [5:0]                CK0BD_5_0;
   reg [5:0]                CK1BD_11_6;
   reg [5:0]                CK2BD_17_12;   
   reg [5:0]                ACBD_23_18;
   reg [8:0]                ACBDLR_RESERVED_31_24;
   
   
//ACIOCR
   reg [0:0]                ACIOM_0;
   reg [0:0]                ACOE_1;
   reg [0:0]                ACODT_2;
   reg [0:0]                ACPDD_3;
   reg [0:0]                ACPDR_4;
   reg [2:0]                CKODT_7_5;
   reg [2:0]                CKPDD_10_8;
   reg [2:0]                CKPDR_13_11;
   reg [3:0]                RANKODT_17_14;
   reg [3:0]                CSPDD_21_18;
   reg [3:0]                RANKPDR_25_22;      
   reg [0:0]                RSTODT_26;
   reg [0:0]                RSTPDD_27;
   reg [0:0]                RSTPDR_28;
   reg [0:0]                RSTIOM_29;
   reg [1:0]                ACSR_31_30;
   
//DXCCR
   reg [0:0]                DXODT_0;
   reg [0:0]                DXIOM_1;
   reg [0:0]                MDLEN_2;
   reg [0:0]                DXPDD_3;
   reg [0:0]                DXPDR_4;
   reg [3:0]                DQSRES_8_5;
   reg [3:0]                DQSNRES_12_9;
   reg [1:0]                DXSR_14_13;
   reg [2:0]                MSBUDQ_17_15;
   reg [0:0]                UDQODT_18;
   reg [0:0]                UDQPDD_19;
   reg [0:0]                UDQPDR_20;
   reg [0:0]                UDQIOM_21;   
   reg [9:0]                DXCCR_RESERVED_31_22;   

//DSGCR
   reg [0:0]                PUREN_0;
   reg [0:0]                BDISEN_1;
   reg [0:0]                ZUEN_2;
   reg [0:0]                LPIOPD_3;
   reg [0:0]                LPPLLPD_4;
   reg [0:0]                CUAEN_5;
   reg [0:0]                DQSGX_6;
   reg [0:0]                BRRMODE_7;
   reg [3:0]                PUAD_11_8;
   reg [0:0]                DTOODT_12;
   reg [0:0]                DTOPDD_13;
   reg [0:0]                DTOPDR_14;
   reg [0:0]                DTOIOM_15;
   reg [0:0]                DTOOE_16;
   reg [0:0]                ATOAE_17; 
   reg [0:0]                RRMODE_18;
   reg [0:0]                SDRMODE_19;
   reg [3:0]                CKEPDD_23_20;
   reg [3:0]                ODTPDD_27_24;
   reg [0:0]                CKOE_28;
   reg [0:0]                ODTOE_29;
   reg [0:0]                RSTOE_30;
   reg [0:0]                CKEOE_31;            
    
//DCR
   reg [2:0]                DDRMD_2_0;
   reg [0:0]                DDR8BNK_3;
   reg [2:0]                PDQ_6_4;
   reg [0:0]                MPRDQ_7;
   reg [1:0]                DDRTYPE_9_8;
   reg [7:0]                BYTEMASK_17_10;
   reg [8:0]                DCR_RESERVED_26_18;
   reg [0:0]                NOSRA_27;
   reg [0:0]                DDR2T_28;
   reg [0:0]                UDIMM_29;
   reg [1:0]                DCR_RESERVED_31_30;    
   
//DTPR0
   reg [3:0]                tRTP_3_0;
   reg [3:0]                tWTR_7_4;
   reg [3:0]                tRP_11_8;
   reg [3:0]                tRCD_15_12;
   reg [5:0]                tRAS_21_16;
   reg [3:0]                tRRD_25_22;
   reg [5:0]                tRC_31_26; 

//DTPR1
   reg [1:0]                tMRD_1_0;
   reg [2:0]                tMOD_4_2;
   reg [5:0]                tFAW_10_5;
   reg [8:0]                tRFC_19_11;
   reg [5:0]                tWLMRD_25_20;
   reg [3:0]                tWLO_29_26;
   reg [1:0]                tAOND_tAOFD_31_30;

//DTPR2
   reg [9:0]                tXS_9_0;
   reg [4:0]                tXP_14_10;
   reg [3:0]                tCKE_18_15;
   reg [9:0]                tDLLK_28_19;
   reg [0:0]                tRTODT_29;
   reg [0:0]                tRTW_30;
   reg [0:0]                tCCD_31;  

//MR0 for DDR3
   reg [1:0]                MR0_DDR3_BL_1_0;
   reg [0:0]                MR0_DDR3_BT_3;
   reg [0:0]                MR0_DDR3_CL_2;
   reg [2:0]                MR0_DDR3_CL_6_4;
   reg [0:0]                MR0_DDR3_TM_7;
   reg [0:0]                MR0_DDR3_DR_8;
   reg [2:0]                MR0_DDR3_WR_11_9;
   reg [0:0]                MR0_DDR3_PD_12;
   reg [2:0]                MR0_DDR3_RSVD_15_13;
   reg [15:0]               MR0_DDR3_RESERVED_31_16;
   
//MR0 for DDR2
   reg [2:0]                MR0_DDR2_BL_2_0;
   reg [0:0]                MR0_DDR2_BT_3;
   reg [2:0]                MR0_DDR2_CL_6_4;
   reg [0:0]                MR0_DDR2_TM_7;
   reg [0:0]                MR0_DDR2_DR_8;
   reg [2:0]                MR0_DDR2_WR_11_9;
   reg [0:0]                MR0_DDR2_PD_12;
   reg [2:0]                MR0_DDR2_RSVD_15_13;
   reg [15:0]               MR0_DDR2_RESERVED_31_16;
   

//MR1 for DDR3
   reg [0:0]                MR1_DDR3_DE_0;
   reg [0:0]                MR1_DDR3_DIC_1;
   reg [0:0]                MR1_DDR3_RTT_2;
   reg [1:0]                MR1_DDR3_AL_4_3;
   reg [0:0]                MR1_DDR3_DIC_5;
   reg [0:0]                MR1_DDR3_RTT_6;
   reg [0:0]                MR1_DDR3_LEVEL_7;
   reg [0:0]                MR1_DDR3_RSVD_8;
   reg [0:0]                MR1_DDR3_RTT_9;
   reg [0:0]                MR1_DDR3_RSVD_10;
   reg [0:0]                MR1_DDR3_TDQS_11;
   reg [0:0]                MR1_DDR3_QOFF_12;
   reg [2:0]                MR1_DDR3_RSVD_15_13;
   reg [15:0]               MR1_DDR3_RESERVED_31_16;
   
//MR1 for DDR2
   reg [0:0]                MR1_DDR2_DE_0;
   reg [0:0]                MR1_DDR2_DIC_1;
   reg [0:0]                MR1_DDR2_RTT_2;
   reg [2:0]                MR1_DDR2_AL_5_3;
   reg [0:0]                MR1_DDR2_RTT_6;
   reg [2:0]                MR1_DDR2_OCD_9_7;
   reg [0:0]                MR1_DDR2_DQS_10;
   reg [0:0]                MR1_DDR2_RDQS_11;
   reg [0:0]                MR1_DDR2_QOFF_12;
   reg [2:0]                MR1_DDR2_RSVD_15_13;
   reg [15:0]               MR1_DDR2_RESERVED_31_16;
   
//MR2 for DDR3
   reg [2:0]                MR2_DDR3_PASR_2_0;
   reg [2:0]                MR2_DDR3_CWL_5_3;
   reg [0:0]                MR2_DDR3_ASR_6;
   reg [0:0]                MR2_DDR3_SRF_7;
   reg [0:0]                MR2_DDR3_RSVD_8;
   reg [1:0]                MR2_DDR3_RTTWR_10_9;
   reg [4:0]                MR2_DDR3_RSVD_15_11;
   reg [15:0]               MR2_DDR3_RESERVED_31_16;

//MR2 for DDR2
   reg [2:0]                MR2_DDR2_PASR_2_0;
   reg [0:0]                MR2_DDR2_DCC_3;
   reg [2:0]                MR2_DDR2_RSVD_6_4;
   reg [0:0]                MR2_DDR2_SRF_7;
   reg [0:0]                MR2_DDR2_RSVD_8;
   reg [1:0]                MR2_DDR2_RSVD_10_9;
   reg [4:0]                MR2_DDR2_RSVD_15_11;
   reg [15:0]               MR2_DDR2_RESERVED_31_16;
  
//MR3 for DDR3
   reg [1:0]                MR3_DDR3_MPRLOC_1_0;
   reg [0:0]                MR3_DDR3_MPR_2;
   reg [12:0]               MR3_DDR3_RSVD_15_3;
   reg [15:0]               MR3_DDR3_RESERVED_31_16;

//MR3 for DDR2
   reg [15:0]               MR3_DDR2_RSVD_15_0;
   reg [15:0]               MR3_DDR2_RESERVED_31_16;

//ODTCR
   reg [3:0]                RDODT0_3_0;
   reg [3:0]                RDODT1_7_4;
   reg [3:0]                RDODT2_11_8;
   reg [3:0]                RDODT3_15_12;
   reg [3:0]                WRODT0_19_16;
   reg [3:0]                WRODT1_23_20;
   reg [3:0]                WRODT2_27_24;
   reg [3:0]                WRODT3_31_28;

//DTCR
   reg [3:0]                DTRPTN_3_0;
   reg [1:0]                DTRANK_5_4;
   reg [0:0]                DTMPR_6;
   reg [0:0]                DTCMPD_7;
   reg [3:0]                DTWDQM_11_8;
   reg [0:0]                DTWBDDM_12;
   reg [0:0]                DTBDC_13;   
   reg [1:0]                DTCR_RESERVED_15_14;
   reg [3:0]                DTDBS_19_16;
   reg [0:0]                DTDEN_20;
   reg [0:0]                DTDSTP_21;
   reg [0:0]                DTEXD_22;
   reg [0:0]                DTEXG_23;
   reg [3:0]                RANKEN_27_24;
   reg [3:0]                RFSHDT_31_28;        

//DTAR0
   reg [11:0]               DTAR0_DTCOL_11_0;
   reg [15:0]               DTAR0_DTROW_27_12;
   reg [2:0]                DTAR0_DTBANK_30_28;
   reg [0:0]                DTAR0_RESERVED_31;
   
//DTAR1
   reg [11:0]               DTAR1_DTCOL_11_0;
   reg [15:0]               DTAR1_DTROW_27_12;
   reg [2:0]                DTAR1_DTBANK_30_28;
   reg [0:0]                DTAR1_RESERVED_31;
   
//DTAR2
   reg [11:0]               DTAR2_DTCOL_11_0;
   reg [15:0]               DTAR2_DTROW_27_12;
   reg [2:0]                DTAR2_DTBANK_30_28;
   reg [0:0]                DTAR2_RESERVED_31;
   
//DTDR0
   reg [7:0]                DTBYTE0_7_0;
   reg [7:0]                DTBYTE1_15_8;
   reg [7:0]                DTBYTE2_23_16;
   reg [7:0]                DTBYTE3_31_24;

//DTDR1
   reg [7:0]                DTBYTE4_7_0;
   reg [7:0]                DTBYTE5_15_8;
   reg [7:0]                DTBYTE6_23_16;
   reg [7:0]                DTBYTE7_31_24;

//DTEDR0
   reg [7:0]                DTWLMN_7_0;
   reg [7:0]                DTWLMX_15_8;
   reg [7:0]                DTWBMN_23_16;
   reg [7:0]                DTWBMX_31_24;

//DTEDR1  
   reg [7:0]                DTRLMN_7_0;
   reg [7:0]                DTRLMX_15_8;
   reg [7:0]                DTRBMN_23_16;
   reg [7:0]                DTRBMX_31_24;

//PGCR2 
  reg [17:0]                tREFPRD_17_0;
  reg [0:0]                 NOBUB_18;
  reg [0:0]                 FXDLAT_19;  
  reg [11:0]                PGCR2_RESERVED_31_20;
  
//RDIMMGCR0
  reg [0:0]                 RDIMM_0;
  reg [0:0]                 ERRNOREG_1;
  reg [11:0]                RDIMMGCR0_RESERVED_13_2;
  reg [0:0]                 PARINODT_14;
  reg [0:0]                 PARINPDD_15;
  reg [0:0]                 PARINPDR_16;
  reg [0:0]                 PARINIOM_17;
  reg [0:0]                 PARINOE_18;
  reg [0:0]                 ERROUTODT_19;
  reg [0:0]                 ERROUTPDD_20;
  reg [0:0]                 ERROUTPDR_21;
  reg [0:0]                 ERROUTIOM_22;
  reg [0:0]                 ERROUTOE_23;
  reg [0:0]                 RDIMMODT_24;
  reg [0:0]                 RDIMMPDD_25;
  reg [0:0]                 RDIMMPDR_26;
  reg [0:0]                 RDIMMIOM_27;
  reg [0:0]                 QCSENOE_28;
  reg [0:0]                 MIRROROE_29;
  reg [0:0]                 QCSEN_30;
  reg [0:0]                 MIRROR_31;                                 
   
//RDIMMGCR1
  reg [11:0]                tBCSTAB_11_0;
  reg [2:0]                 tBCMRD_14_12;
  reg [0:0]                 RDIMMGCR1_RESERVED_15;
  reg [15:0]                CRINIT_31_16;         
  
//RDIMMCR0
  reg [3:0]                 RC0_3_0;
  reg [3:0]                 RC1_7_4;
  reg [3:0]                 RC2_11_8;
  reg [3:0]                 RC3_15_12;
  reg [3:0]                 RC4_19_16;
  reg [3:0]                 RC5_23_20;
  reg [3:0]                 RC6_27_24;
  reg [3:0]                 RC7_31_28;
  
//RDIMMCR1
  reg [3:0]                 RC8_3_0;
  reg [3:0]                 RC9_7_4;
  reg [3:0]                 RC10_11_8;
  reg [3:0]                 RC11_15_12;
  reg [3:0]                 RC12_19_16;
  reg [3:0]                 RC13_23_20;
  reg [3:0]                 RC14_27_24;
  reg [3:0]                 RC15_31_28;
   
//DCUAR
   reg [3:0]                CWADDR_3_0;
   reg [3:0]                CSADDR_7_4;
   reg [1:0]                CSEL_9_8;
   reg [0:0]                INCA_10;
   reg [0:0]                ATYPE_11;
   reg [11:0]               DCUAR_RESERVED_31_12;

//DCUDR
   reg [31:0]               CDATA_31_0;

//DCURR  
   reg [3:0]                DINST_3_0;
   reg [3:0]                SADDR_7_4;
   reg [3:0]                EADDR_11_8;
   reg [7:0]                NFAIL_19_12;
   reg [0:0]                SONF_20;
   reg [0:0]                SCOF_21;
   reg [0:0]                RCEN_22;
   reg [0:0]                XCEN_23;
   reg [7:0]                DCURR_RESERVED_31_24;

//DCULR
   reg [3:0]                LSADDR_3_0;
   reg [3:0]                LEADDR_7_4;
   reg [7:0]                LCNT_15_8;
   reg [0:0]                LINF_16;
   reg [0:0]                IDA_17;
   reg [9:0]                DCULR_RESERVED_27_18;
   reg [3:0]                XLEADDR_31_28;

//DCUGCR
   reg [15:0]               RCSW_15_0;
   reg [15:0]               DCUGCR_RESERVED_31_16;

//DCUPTR  
   reg [7:0]                tDCUT0_7_0;
   reg [7:0]                tDCUT1_15_8;
   reg [7:0]                tDCUT2_23_16;
   reg [7:0]                tDCUT3_31_24;

//DCUSR0
   reg [0:0]                RDONE_0;
   reg [0:0]                CFAIL_1;
   reg [0:0]                CFULL_2;
   reg [28:0]               DCUSR0_RESERVED_31_3;

//DCUSR1
   reg [15:0]               RDCNT_15_0;
   reg [7:0]                FLCNT_23_16;
   reg [7:0]                LPCNT_31_24;

//BISTRR
   reg [2:0]                BINST_2_0;
   reg [0:0]                BMODE_3;
   reg [0:0]                BINF_4;
   reg [7:0]                NFAIL_12_5;
   reg [0:0]                BSONF_13;
   reg [0:0]                BDXEN_14;
   reg [0:0]                BACEN_15;
   reg [0:0]                BDMEN_16;
   reg [1:0]                BDPAT_18_17;
   reg [3:0]                BDXSEL_22_19;
   reg [1:0]                BCKSEL_24_23;
   reg [1:0]                BCCSEL_26_25;
   reg [4:0]                BISTRR_RESERVED_31_27;

//BISTWCR
   reg [15:0]               BWCNT_15_0;
   reg [15:0]               BISTWCR_RESERVED_31_16;
  
//BISTMSKR0
   reg [15:0]               AMSK_15_0;
   reg [2:0]                BAMSK_18_16;
   reg [0:0]                WEMSK_19;
   reg [3:0]                CKEMSK_23_20;
   reg [3:0]                CSMSK_27_24;
   reg [3:0]                ODTMSK_31_28;
  
//BISTMSKR1
   reg [0:0]                RASMSK_0;
   reg [0:0]                CASMSK_1;
   reg [24:0]               BISTMSKR1_RESERVED_26_2;
   reg [0:0]                PARMSK_27;   
   reg [3:0]                DMMSK_31_28;

//BISTMSKR2
   reg [31:0]               DQMSK_31_0;
  
//BISTLSR
   reg [31:0]               LFSR_SEED_31_0;
  
//BISTAR0
   reg [11:0]               BCOL_11_0;
   reg [15:0]               BROW_27_12;
   reg [2:0]                BBANK_30_28;
   reg [0:0]                BISTAR0_RESERVED_31;
  
//BISTAR1
   reg [1:0]                BRANK_1_0;
   reg [1:0]                BMRANK_3_2;
   reg [11:0]               BAINC_15_4;
   reg [0:0]                BISTAR1_RESERVED_31_16;

//BISTAR2
   reg [11:0]               BMCOL_11_0;
   reg [15:0]               BMROW_27_12;
   reg [2:0]                BMBANK_30_28;
   reg [0:0]                BISTAR2_RESERVED_31;
  
//BISTUDPR
   reg [15:0]               BUDP0_15_0;
   reg [15:0]               BUPD1_31_16;
  
//BISTGSR
   reg [0:0]                BDONE_0;
   reg [0:0]                BACERR_1;
   reg [0:0]                BDXERR_2;
   reg [16:0]               BISTGSR_RESERVED_19_3;
   //reg [1:0]                PARBER_21_20;
   //reg [1:0]                TPDBER_23_22;
   reg [1:0]                DMBER_EVEN_1_BEAT_21_20;
   reg [1:0]                DMBER_EVEN_2_BEAT_23_22;
   reg [1:0]                DMBER_ODD_1_BEAT_25_24;
   reg [1:0]                DMBER_ODD_2_BEAT_27_26;
   reg [1:0]                RASBER_29_28;
   reg [1:0]                CASBER_31_30;

//BISTWER
   reg [15:0]               ACWER_15_0;
   reg [15:0]               DXWER_31_16;
  
//BISTBER0
   reg [1:0]                ABER_A0_1_0;
   reg [1:0]                ABER_A1_3_2;
   reg [1:0]                ABER_A2_5_4;
   reg [1:0]                ABER_A3_7_6;
   reg [1:0]                ABER_A4_9_8;
   reg [1:0]                ABER_A5_11_10;
   reg [1:0]                ABER_A6_13_12;
   reg [1:0]                ABER_A7_15_14;
   reg [1:0]                ABER_A8_17_16;
   reg [1:0]                ABER_A9_19_18;
   reg [1:0]                ABER_A10_21_20;
   reg [1:0]                ABER_A11_23_22;
   reg [1:0]                ABER_A12_25_24;
   reg [1:0]                ABER_A13_27_26;
   reg [1:0]                ABER_A14_29_28;
   reg [1:0]                ABER_A15_31_30;
  
//BISTBER1
   reg [1:0]                BABER_BA0_1_0;  
   reg [1:0]                BABER_BA0_3_2;  
   reg [1:0]                BABER_BA0_5_4;  
   reg [1:0]                WEBER_7_6;  
   reg [1:0]                CKEBER_CK0_9_8;  
   reg [1:0]                CKEBER_CK1_11_10;
   reg [1:0]                CKEBER_CK2_13_12;
   reg [1:0]                CKEBER_CK3_15_14;
   reg [1:0]                CSBER_CS0_17_16;
   reg [1:0]                CSBER_CS1_19_18;
   reg [1:0]                CSBER_CS2_21_20;
   reg [1:0]                CSBER_CS3_23_22;
   reg [1:0]                ODTBER_ODT0_25_24;
   reg [1:0]                ODTBER_ODT1_27_26;
   reg [1:0]                ODTBER_ODT2_29_28;
   reg [1:0]                ODTBER_ODT3_31_30;
  
//BISTBER2
   reg [1:0]                DQBER0_DQ_BIT0_RISEEDGE_1_0;   
   reg [1:0]                DQBER0_DQ_BIT1_RISEEDGE_3_2;   
   reg [1:0]                DQBER0_DQ_BIT2_RISEEDGE_5_4;   
   reg [1:0]                DQBER0_DQ_BIT3_RISEEDGE_7_6;   
   reg [1:0]                DQBER0_DQ_BIT4_RISEEDGE_9_8;   
   reg [1:0]                DQBER0_DQ_BIT5_RISEEDGE_11_10; 
   reg [1:0]                DQBER0_DQ_BIT6_RISEEDGE_13_12; 
   reg [1:0]                DQBER0_DQ_BIT7_RISEEDGE_15_14; 
   reg [1:0]                DQBER0_DQ_BIT0_FALLEDGE_17_16; 
   reg [1:0]                DQBER0_DQ_BIT1_FALLEDGE_19_18; 
   reg [1:0]                DQBER0_DQ_BIT2_FALLEDGE_21_20;
   reg [1:0]                DQBER0_DQ_BIT3_FALLEDGE_23_22;
   reg [1:0]                DQBER0_DQ_BIT4_FALLEDGE_25_24;
   reg [1:0]                DQBER0_DQ_BIT5_FALLEDGE_27_26;
   reg [1:0]                DQBER0_DQ_BIT6_FALLEDGE_29_28;
   reg [1:0]                DQBER0_DQ_BIT7_FALLEDGE_31_30;

//BISTBER3
   reg [1:0]                DQBER1_DQ_BIT0_RISEEDGE_1_0;   
   reg [1:0]                DQBER1_DQ_BIT1_RISEEDGE_3_2;   
   reg [1:0]                DQBER1_DQ_BIT2_RISEEDGE_5_4;   
   reg [1:0]                DQBER1_DQ_BIT3_RISEEDGE_7_6;   
   reg [1:0]                DQBER1_DQ_BIT4_RISEEDGE_9_8;   
   reg [1:0]                DQBER1_DQ_BIT5_RISEEDGE_11_10; 
   reg [1:0]                DQBER1_DQ_BIT6_RISEEDGE_13_12; 
   reg [1:0]                DQBER1_DQ_BIT7_RISEEDGE_15_14; 
   reg [1:0]                DQBER1_DQ_BIT0_FALLEDGE_17_16; 
   reg [1:0]                DQBER1_DQ_BIT1_FALLEDGE_19_18; 
   reg [1:0]                DQBER1_DQ_BIT2_FALLEDGE_21_20;
   reg [1:0]                DQBER1_DQ_BIT3_FALLEDGE_23_22;
   reg [1:0]                DQBER1_DQ_BIT4_FALLEDGE_25_24;
   reg [1:0]                DQBER1_DQ_BIT5_FALLEDGE_27_26;
   reg [1:0]                DQBER1_DQ_BIT6_FALLEDGE_29_28;
   reg [1:0]                DQBER1_DQ_BIT7_FALLEDGE_31_30;
  
//BISTWCSR
   reg [15:0]               ACWCNT_15_0;
   reg [15:0]               DXWCNT_31_16;
  
//BISTFWR0
   reg [15:0]               AWEBS_15_0;
   reg [2:0]                BAWEBS_18_16;
   reg [0:0]                WEWEBS_19;
   reg [3:0]                CKEWEBS_23_20;
   reg [3:0]                CSWEBS_27_24;
   reg [3:0]                ODTWEBS_31_28;
  
//BISTFWR1
   reg [0:0]                RASWEBS_0;
   reg [0:0]                CASWEBS_1;
   reg [25:0]               BISTFWR1_RESERVED_27_2;
   reg [3:0]                DMWEBS_31_28;
  
//BISTFWR2
   reg [0:0]                DQBER0_EVEN_DQ_BIT0_RISEEDGE_0;
   reg [0:0]                DQBER0_EVEN_DQ_BIT1_RISEEDGE_1;
   reg [0:0]                DQBER0_EVEN_DQ_BIT2_RISEEDGE_2;
   reg [0:0]                DQBER0_EVEN_DQ_BIT3_RISEEDGE_3;
   reg [0:0]                DQBER0_EVEN_DQ_BIT4_RISEEDGE_4;
   reg [0:0]                DQBER0_EVEN_DQ_BIT5_RISEEDGE_5;
   reg [0:0]                DQBER0_EVEN_DQ_BIT6_RISEEDGE_6;
   reg [0:0]                DQBER0_EVEN_DQ_BIT7_RISEEDGE_7;
   reg [0:0]                DQBER0_EVEN_DQ_BIT0_FALLEDGE_8;
   reg [0:0]                DQBER0_EVEN_DQ_BIT1_FALLEDGE_9;
   reg [0:0]                DQBER0_EVEN_DQ_BIT2_FALLEDGE_10;
   reg [0:0]                DQBER0_EVEN_DQ_BIT3_FALLEDGE_11;
   reg [0:0]                DQBER0_EVEN_DQ_BIT4_FALLEDGE_12;
   reg [0:0]                DQBER0_EVEN_DQ_BIT5_FALLEDGE_13;
   reg [0:0]                DQBER0_EVEN_DQ_BIT6_FALLEDGE_14;
   reg [0:0]                DQBER0_EVEN_DQ_BIT7_FALLEDGE_15;
   reg [0:0]                DQBER0_ODD_DQ_BIT0_RISEEDGE_16;
   reg [0:0]                DQBER0_ODD_DQ_BIT1_RISEEDGE_17;
   reg [0:0]                DQBER0_ODD_DQ_BIT2_RISEEDGE_18;
   reg [0:0]                DQBER0_ODD_DQ_BIT3_RISEEDGE_19;
   reg [0:0]                DQBER0_ODD_DQ_BIT4_RISEEDGE_20;
   reg [0:0]                DQBER0_ODD_DQ_BIT5_RISEEDGE_21;
   reg [0:0]                DQBER0_ODD_DQ_BIT6_RISEEDGE_22;
   reg [0:0]                DQBER0_ODD_DQ_BIT7_RISEEDGE_23;
   reg [0:0]                DQBER0_ODD_DQ_BIT0_FALLEDGE_24;
   reg [0:0]                DQBER0_ODD_DQ_BIT1_FALLEDGE_25;
   reg [0:0]                DQBER0_ODD_DQ_BIT2_FALLEDGE_26;
   reg [0:0]                DQBER0_ODD_DQ_BIT3_FALLEDGE_27;
   reg [0:0]                DQBER0_ODD_DQ_BIT4_FALLEDGE_28;
   reg [0:0]                DQBER0_ODD_DQ_BIT5_FALLEDGE_29;
   reg [0:0]                DQBER0_ODD_DQ_BIT6_FALLEDGE_30;
   reg [0:0]                DQBER0_ODD_DQ_BIT7_FALLEDGE_31; 
    

//----   

//GPR0
   reg [31:0]               GPR0_31_0;

//GPR1
   reg [31:0]               GPR1_31_0;
  
//ZQ0CR0
   reg [27:0]               ZDATA_27_0_r0;
   reg [0:0]                ZDEN_28_r0;
   reg [0:0]                ZCALBYP_29_r0;
   reg [0:0]                ZCALEN_30_r0;
   reg [0:0]                ZQPD_31_r0;      
   
//ZQ0CR1
   reg [7:0]                ZPROG_7_0_r0;
   reg [23:0]               ZQ0CR1_RESERVED_31_8_r0;      
   
//ZQ0SR0
   reg [27:0]               ZCTRL_27_0_r0;
   reg [1:0]                ZQ0SR0_RESERVED_29_28_r0;
   reg [0:0]                ZERR_30_r0;
   reg [0:0]                ZDONE_31_r0;   

//ZQ0SR1
   reg [1:0]                ZPD_1_0_r0;
   reg [1:0]                ZPU_3_2_r0;
   reg [1:0]                OPD_5_4_r0;
   reg [1:0]                OPU_7_6_r0;
   reg [23:0]               ZQ0SR1_RESERVED_31_8_r0;

//ZQ1CR0
   reg [27:0]               ZDATA_27_0_r1;
   reg [0:0]                ZDEN_28_r1;
   reg [0:0]                ZCALBYP_29_r1;
   reg [0:0]                ZCALEN_30_r1;
   reg [0:0]                ZQPD_31_r1;      
   
//ZQ1CR1
   reg [7:0]                ZPROG_7_0_r1;
   reg [23:0]               ZQ1CR1_RESERVED_31_8_r1;      
   
//ZQ1SR0
   reg [27:0]               ZCTRL_27_0_r1;
   reg [1:0]                ZQ1SR0_RESERVED_29_28_r1;
   reg [0:0]                ZERR_30_r1;
   reg [0:0]                ZDONE_31_r1;   

//ZQ1SR1
   reg [1:0]                ZPD_1_0_r1;
   reg [1:0]                ZPU_3_2_r1;
   reg [1:0]                OPD_5_4_r1;
   reg [1:0]                OPU_7_6_r1;
   reg [23:0]               ZQ1SR1_RESERVED_31_8_r1;

//ZQ2CR0
   reg [27:0]               ZDATA_27_0_r2;
   reg [0:0]                ZDEN_28_r2;
   reg [0:0]                ZCALBYP_29_r2;
   reg [0:0]                ZCALEN_30_r2;
   reg [0:0]                ZQPD_31_r2;      
   
//ZQ2CR1
   reg [7:0]                ZPROG_7_0_r2;
   reg [23:0]               ZQ2CR1_RESERVED_31_8_r2;      
   
//ZQ2SR0
   reg [27:0]               ZCTRL_27_0_r2;
   reg [1:0]                ZQ2SR0_RESERVED_29_28_r2;
   reg [0:0]                ZERR_30_r2;
   reg [0:0]                ZDONE_31_r2;   

//ZQ2SR1
   reg [1:0]                ZPD_1_0_r2;
   reg [1:0]                ZPU_3_2_r2;
   reg [1:0]                OPD_5_4_r2;
   reg [1:0]                OPU_7_6_r2;
   reg [23:0]               ZQ2SR1_RESERVED_31_8_r2;

//ZQ3CR0
   reg [27:0]               ZDATA_27_0_r3;
   reg [0:0]                ZDEN_28_r3;
   reg [0:0]                ZCALBYP_29_r3;
   reg [0:0]                ZCALEN_30_r3;
   reg [0:0]                ZQPD_31_r3;      
   
//ZQ3CR1
   reg [7:0]                ZPROG_7_0_r3;
   reg [23:0]               ZQ3CR1_RESERVED_31_8_r3;      
   
//ZQ3SR0
   reg [27:0]               ZCTRL_27_0_r3;
   reg [1:0]                ZQ3SR0_RESERVED_29_28_r3;
   reg [0:0]                ZERR_30_r3;
   reg [0:0]                ZDONE_31_r3;   

//ZQ3SR1
   reg [1:0]                ZPD_1_0_r3;
   reg [1:0]                ZPU_3_2_r3;
   reg [1:0]                OPD_5_4_r3;
   reg [1:0]                OPU_7_6_r3;
   reg [23:0]               ZQ3SR1_RESERVED_31_8_r3;



//DX0GCR   
   reg [0:0]                DXEN_0_dx0;
   reg [0:0]                DQSODT_1_dx0;
   reg [0:0]                DQODT_2_dx0;
   reg [0:0]                DXIOM_3_dx0;
   reg [0:0]                DXPDD_4_dx0;
   reg [0:0]                DXPDR_5_dx0;
   reg [0:0]                DQSRPD_6_dx0;
   reg [0:0]                DSEN_8_7_dx0;
   reg [0:0]                DQSRTT_9_dx0;
   reg [0:0]                DQRTT_10_dx0;
   reg [1:0]                RTTOH_12_11_dx0;
   reg [0:0]                RTTOAL_13_dx0;
   reg [1:0]                DXOEO_15_14_dx0;
   reg [0:0]                PLLRST_16_dx0;
   reg [0:0]                PLLPD_17_dx0;
   reg [0:0]                GSHIFT_18_dx0;
   reg [0:0]                PLLBYP_19_dx0;
   reg [5:0]                DX0GCR_RESERVED_25_20_dx0;
   reg [3:0]                WLRKEN_29_26_dx0;
   reg [0:0]                MDLEN_30_dx0;
   reg [0:0]                CALBYP_31_dx0;                     
//DX0GSR0
   reg [0:0]                WDQCAL_0_dx0;
   reg [0:0]                RDQSCAL_1_dx0;
   reg [0:0]                RDQSNCAL_2_dx0;
   reg [0:0]                GDQSCAL_3_dx0;
   reg [0:0]                WLCAL_4_dx0;
   reg [0:0]                WLDONE_5_dx0;
   reg [0:0]                WLERR_6_dx0;
   reg [7:0]                WLPRD_14_7_dx0;
   reg [0:0]                DPLOCK_15_dx0;
   reg [7:0]                GDQSPRD_23_16_dx0;
   reg [3:0]                QSGERR_27_24_dx0;
   reg [0:0]                WLDQ_28_dx0;
   reg [2:0]                DX0GSR0_RESERVED_31_29_dx0;
//DX0GSR1 
   reg [0:0]                DLTDONE_0_dx0;
   reg [23:0]               DLTCODE_24_1_dx0;
   reg [6:0]                DX0GSR1_RESERVED_31_25_dx0;
//DX0GSR2
   reg [0:0]                RDERR_0_dx0;
   reg [0:0]                RDWN_1_dx0;
   reg [0:0]                WDERR_2_dx0;
   reg [0:0]                WDWN_3_dx0;
   reg [0:0]                REERR_4_dx0;
   reg [0:0]                REWN_5_dx0;
   reg [0:0]                WEERR_6_dx0;
   reg [0:0]                WEWN_7_dx0;
   reg [3:0]                ESTAT_11_8_dx0;
   reg [19:0]               DX0GSR2_RESERVED_31_12_dx0;  
//DX0BDLR0
   reg [5:0]                DQ0WBD_5_0_dx0;
   reg [5:0]                DQ1WBD_11_6_dx0;
   reg [5:0]                DQ2WBD_17_12_dx0;
   reg [5:0]                DQ3WBD_23_18_dx0;
   reg [5:0]                DQ4WBD_29_24_dx0;
   reg [1:0]                DX0BDLR0_RESERVED_31_30_dx0; 
//DX0BDLR1
   reg [5:0]                DQ5WBD_5_0_dx0;
   reg [5:0]                DQ6WBD_11_6_dx0;
   reg [5:0]                DQ7WBD_17_12_dx0;
   reg [5:0]                DMWBD_23_18_dx0;
   reg [5:0]                DSWBD_29_24_dx0;
   reg [1:0]                DX0BDLR1_RESERVED_31_30_dx0;    
//DX0BDLR2
   reg [5:0]                DSOEBD_5_0_dx0;
   reg [5:0]                DQOEBD_11_6_dx0;
   reg [5:0]                DSRBD_17_12_dx0;
   reg [5:0]                DSNRBD_23_18_dx0;
   reg [7:0]                DX0BDLR2_RESERVED_31_24_dx0;   
//DX0BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx0;
   reg [5:0]                DQ1RBD_11_6_dx0;
   reg [5:0]                DQ2RBD_17_12_dx0;
   reg [5:0]                DQ3RBD_23_18_dx0;
   reg [5:0]                DQ4RBD_29_24_dx0;
   reg [1:0]                DX0BDLR3_RESERVED_31_30_dx0;    
//DX0BDLR4
   reg [5:0]                DQ5RBD_5_0_dx0;
   reg [5:0]                DQ6RBD_11_6_dx0;
   reg [5:0]                DQ7RBD_17_12_dx0;
   reg [5:0]                DMRBD_23_18_dx0;
   reg [7:0]                DX0BDLR4_RESERVED_31_24_dx0;     
//DX0LCDLR0
   reg [7:0]                R0WLD_7_0_dx0;
   reg [7:0]                R1WLD_15_8_dx0;   
   reg [7:0]                R2WLD_23_16_dx0;
   reg [7:0]                R3WLD_31_24_dx0;
//DX0LCDLR1
   reg [7:0]                WDQD_7_0_dx0;
   reg [7:0]                RDQSD_15_8_dx0;   
   reg [7:0]                RDQSND_23_16_dx0;   
   reg [7:0]                DX0LCDLR1_RESERVED_31_24_dx0;
//DX0LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx0;
   reg [7:0]                R1DQSGD_15_8_dx0;   
   reg [7:0]                R2DQSGD_23_16_dx0;
   reg [7:0]                R3DQSGD_31_24_dx0;   
//DX0MDLR
   reg [7:0]                IPRD_7_0_dx0;
   reg [7:0]                TPRD_15_8_dx0;
   reg [7:0]                MDLD_23_16_dx0;  
   reg [7:0]                DX0MDLR_RESERVED_31_24_dx0;  
//DX0GTR       
   reg [2:0]                R0DGSL_2_0_dx0;
   reg [2:0]                R1DGSL_5_3_dx0;
   reg [2:0]                R2DGSL_8_6_dx0;
   reg [2:0]                R3DGSL_11_9_dx0;
   reg [1:0]                R0WLSL_13_12_dx0;
   reg [1:0]                R1WLSL_15_14_dx0;
   reg [1:0]                R2WLSL_17_16_dx0;
   reg [1:0]                R3WLSL_19_18_dx0;
   reg [11:0]               DX0GTR_RESERVED_31_20_dx0;  
 
//----
//DX1GCR   
   reg [0:0]                DXEN_0_dx1;
   reg [0:0]                DQSODT_1_dx1;
   reg [0:0]                DQODT_2_dx1;
   reg [0:0]                DXIOM_3_dx1;
   reg [0:0]                DXPDD_4_dx1;
   reg [0:0]                DXPDR_5_dx1;
   reg [0:0]                DQSRPD_6_dx1;
   reg [0:0]                DSEN_8_7_dx1;
   reg [0:0]                DQSRTT_9_dx1;
   reg [0:0]                DQRTT_10_dx1;
   reg [1:0]                RTTOH_12_11_dx1;
   reg [0:0]                RTTOAL_13_dx1;
   reg [1:0]                DXOEO_15_14_dx1;
   reg [0:0]                PLLRST_16_dx1;
   reg [0:0]                PLLPD_17_dx1;
   reg [0:0]                GSHIFT_18_dx1;
   reg [0:0]                PLLBYP_19_dx1;
   reg [5:0]                DX1GCR_RESERVED_25_20_dx1;
   reg [3:0]                WLRKEN_29_26_dx1;
   reg [0:0]                MDLEN_30_dx1;
   reg [0:0]                CALBYP_31_dx1;
//DX1GSR0
   reg [0:0]                WDQCAL_0_dx1;
   reg [0:0]                RDQSCAL_1_dx1;
   reg [0:0]                RDQSNCAL_2_dx1;
   reg [0:0]                GDQSCAL_3_dx1;
   reg [0:0]                WLCAL_4_dx1;
   reg [0:0]                WLDONE_5_dx1;
   reg [0:0]                WLERR_6_dx1;
   reg [7:0]                WLPRD_14_7_dx1;
   reg [0:0]                DPLOCK_15_dx1;
   reg [7:0]                GDQSPRD_23_16_dx1;
   reg [3:0]                QSGERR_27_24_dx1;
   reg [0:0]                WLDQ_28_dx1;
   reg [2:0]                DX1GSR0_RESERVED_31_29_dx1;
//DX1GSR1 
   reg [0:0]                DLTDONE_0_dx1;
   reg [23:0]               DLTCODE_24_1_dx1;
   reg [6:0]                DX1GSR1_RESERVED_31_25_dx1;
//DX1GSR2
   reg [0:0]                RDERR_0_dx1;
   reg [0:0]                RDWN_1_dx1;
   reg [0:0]                WDERR_2_dx1;
   reg [0:0]                WDWN_3_dx1;
   reg [0:0]                REERR_4_dx1;
   reg [0:0]                REWN_5_dx1;
   reg [0:0]                WEERR_6_dx1;
   reg [0:0]                WEWN_7_dx1;
   reg [3:0]                ESTAT_11_8_dx1;
   reg [19:0]               DX1GSR2_RESERVED_31_12_dx1;  
//DX1BDLR0
   reg [5:0]                DQ0WBD_5_0_dx1;
   reg [5:0]                DQ1WBD_11_6_dx1;
   reg [5:0]                DQ2WBD_17_12_dx1;
   reg [5:0]                DQ3WBD_23_18_dx1;
   reg [5:0]                DQ4WBD_29_24_dx1;
   reg [1:0]                DX1BDLR0_RESERVED_31_30_dx1; 
//DX1BDLR1
   reg [5:0]                DQ5WBD_5_0_dx1;
   reg [5:0]                DQ6WBD_11_6_dx1;
   reg [5:0]                DQ7WBD_17_12_dx1;
   reg [5:0]                DMWBD_23_18_dx1;
   reg [5:0]                DSWBD_29_24_dx1;
   reg [1:0]                DX1BDLR1_RESERVED_31_30_dx1;    
//DX1BDLR2
   reg [5:0]                DSOEBD_5_0_dx1;
   reg [5:0]                DQOEBD_11_6_dx1;
   reg [5:0]                DSRBD_17_12_dx1;
   reg [5:0]                DSNRBD_23_18_dx1;
   reg [7:0]                DX1BDLR2_RESERVED_31_24_dx1;   
//DX1BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx1;
   reg [5:0]                DQ1RBD_11_6_dx1;
   reg [5:0]                DQ2RBD_17_12_dx1;
   reg [5:0]                DQ3RBD_23_18_dx1;
   reg [5:0]                DQ4RBD_29_24_dx1;
   reg [1:0]                DX1BDLR3_RESERVED_31_30_dx1;    
//DX1BDLR4
   reg [5:0]                DQ5RBD_5_0_dx1;
   reg [5:0]                DQ6RBD_11_6_dx1;
   reg [5:0]                DQ7RBD_17_12_dx1;
   reg [5:0]                DMRBD_23_18_dx1;
   reg [7:0]                DX1BDLR4_RESERVED_31_24_dx1;     
//DX1LCDLR0
   reg [7:0]                R0WLD_7_0_dx1;
   reg [7:0]                R1WLD_15_8_dx1;   
   reg [7:0]                R2WLD_23_16_dx1;
   reg [7:0]                R3WLD_31_24_dx1;
//DX1LCDLR1
   reg [7:0]                WDQD_7_0_dx1;
   reg [7:0]                RDQSD_15_8_dx1;   
   reg [7:0]                RDQSND_23_16_dx1;   
   reg [7:0]                DX1LCDLR1_RESERVED_31_24_dx1;
//DX1LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx1;
   reg [7:0]                R1DQSGD_15_8_dx1;   
   reg [7:0]                R2DQSGD_23_16_dx1;
   reg [7:0]                R3DQSGD_31_24_dx1;   
//DX1MDLR
   reg [7:0]                IPRD_7_0_dx1;
   reg [7:0]                TPRD_15_8_dx1;
   reg [7:0]                MDLD_23_16_dx1;  
   reg [7:0]                DX1MDLR_RESERVED_31_24_dx1;  
//DX1GTR       
   reg [2:0]                R0DGSL_2_0_dx1;
   reg [2:0]                R1DGSL_5_3_dx1;
   reg [2:0]                R2DGSL_8_6_dx1;
   reg [2:0]                R3DGSL_11_9_dx1;
   reg [1:0]                R0WLSL_13_12_dx1;
   reg [1:0]                R1WLSL_15_14_dx1;
   reg [1:0]                R2WLSL_17_16_dx1;
   reg [1:0]                R3WLSL_19_18_dx1;
   reg [11:0]               DX1GTR_RESERVED_31_20_dx1;
   
//----
//DX2GCR   
   reg [0:0]                DXEN_0_dx2;
   reg [0:0]                DQSODT_1_dx2;
   reg [0:0]                DQODT_2_dx2;
   reg [0:0]                DXIOM_3_dx2;
   reg [0:0]                DXPDD_4_dx2;
   reg [0:0]                DXPDR_5_dx2;
   reg [0:0]                DQSRPD_6_dx2;
   reg [0:0]                DSEN_8_7_dx2;
   reg [0:0]                DQSRTT_9_dx2;
   reg [0:0]                DQRTT_10_dx2;
   reg [1:0]                RTTOH_12_11_dx2;
   reg [0:0]                RTTOAL_13_dx2;
   reg [1:0]                DXOEO_15_14_dx2;
   reg [0:0]                PLLRST_16_dx2;
   reg [0:0]                PLLPD_17_dx2;
   reg [0:0]                GSHIFT_18_dx2;
   reg [0:0]                PLLBYP_19_dx2;
   reg [5:0]                DX2GCR_RESERVED_25_20_dx2;
   reg [3:0]                WLRKEN_29_26_dx2;
   reg [0:0]                MDLEN_30_dx2;
   reg [0:0]                CALBYP_31_dx2;
//DX2GSR0
   reg [0:0]                WDQCAL_0_dx2;
   reg [0:0]                RDQSCAL_1_dx2;
   reg [0:0]                RDQSNCAL_2_dx2;
   reg [0:0]                GDQSCAL_3_dx2;
   reg [0:0]                WLCAL_4_dx2;
   reg [0:0]                WLDONE_5_dx2;
   reg [0:0]                WLERR_6_dx2;
   reg [7:0]                WLPRD_14_7_dx2;
   reg [0:0]                DPLOCK_15_dx2;
   reg [7:0]                GDQSPRD_23_16_dx2;
   reg [3:0]                QSGERR_27_24_dx2;
   reg [0:0]                WLDQ_28_dx2;
   reg [2:0]                DX2GSR0_RESERVED_31_29_dx2;
//DX2GSR1 
   reg [0:0]                DLTDONE_0_dx2;
   reg [23:0]               DLTCODE_24_1_dx2;
   reg [6:0]                DX2GSR1_RESERVED_31_25_dx2;
//DX2GSR2
   reg [0:0]                RDERR_0_dx2;
   reg [0:0]                RDWN_1_dx2;
   reg [0:0]                WDERR_2_dx2;
   reg [0:0]                WDWN_3_dx2;
   reg [0:0]                REERR_4_dx2;
   reg [0:0]                REWN_5_dx2;
   reg [0:0]                WEERR_6_dx2;
   reg [0:0]                WEWN_7_dx2;
   reg [3:0]                ESTAT_11_8_dx2;
   reg [19:0]               DX2GSR2_RESERVED_31_12_dx2;  
//DX2BDLR0
   reg [5:0]                DQ0WBD_5_0_dx2;
   reg [5:0]                DQ1WBD_11_6_dx2;
   reg [5:0]                DQ2WBD_17_12_dx2;
   reg [5:0]                DQ3WBD_23_18_dx2;
   reg [5:0]                DQ4WBD_29_24_dx2;
   reg [1:0]                DX2BDLR0_RESERVED_31_30_dx2; 
//DX2BDLR1
   reg [5:0]                DQ5WBD_5_0_dx2;
   reg [5:0]                DQ6WBD_11_6_dx2;
   reg [5:0]                DQ7WBD_17_12_dx2;
   reg [5:0]                DMWBD_23_18_dx2;
   reg [5:0]                DSWBD_29_24_dx2;
   reg [1:0]                DX2BDLR1_RESERVED_31_30_dx2;    
//DX2BDLR2
   reg [5:0]                DSOEBD_5_0_dx2;
   reg [5:0]                DQOEBD_11_6_dx2;
   reg [5:0]                DSRBD_17_12_dx2;
   reg [5:0]                DSNRBD_23_18_dx2;
   reg [7:0]                DX2BDLR2_RESERVED_31_24_dx2;   
//DX2BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx2;
   reg [5:0]                DQ1RBD_11_6_dx2;
   reg [5:0]                DQ2RBD_17_12_dx2;
   reg [5:0]                DQ3RBD_23_18_dx2;
   reg [5:0]                DQ4RBD_29_24_dx2;
   reg [1:0]                DX2BDLR3_RESERVED_31_30_dx2;    
//DX2BDLR4
   reg [5:0]                DQ5RBD_5_0_dx2;
   reg [5:0]                DQ6RBD_11_6_dx2;
   reg [5:0]                DQ7RBD_17_12_dx2;
   reg [5:0]                DMRBD_23_18_dx2;
   reg [7:0]                DX2BDLR4_RESERVED_31_24_dx2;     
//DX2LCDLR0
   reg [7:0]                R0WLD_7_0_dx2;
   reg [7:0]                R1WLD_15_8_dx2;   
   reg [7:0]                R2WLD_23_16_dx2;
   reg [7:0]                R3WLD_31_24_dx2;
//DX2LCDLR1
   reg [7:0]                WDQD_7_0_dx2;
   reg [7:0]                RDQSD_15_8_dx2;   
   reg [7:0]                RDQSND_23_16_dx2;   
   reg [7:0]                DX2LCDLR1_RESERVED_31_24_dx2;
//DX2LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx2;
   reg [7:0]                R1DQSGD_15_8_dx2;   
   reg [7:0]                R2DQSGD_23_16_dx2;
   reg [7:0]                R3DQSGD_31_24_dx2;   
//DX2MDLR
   reg [7:0]                IPRD_7_0_dx2;
   reg [7:0]                TPRD_15_8_dx2;
   reg [7:0]                MDLD_23_16_dx2;  
   reg [7:0]                DX2MDLR_RESERVED_31_24_dx2;  
//DX2GTR       
   reg [2:0]                R0DGSL_2_0_dx2;
   reg [2:0]                R1DGSL_5_3_dx2;
   reg [2:0]                R2DGSL_8_6_dx2;
   reg [2:0]                R3DGSL_11_9_dx2;
   reg [1:0]                R0WLSL_13_12_dx2;
   reg [1:0]                R1WLSL_15_14_dx2;
   reg [1:0]                R2WLSL_17_16_dx2;
   reg [1:0]                R3WLSL_19_18_dx2;
   reg [11:0]               DX2GTR_RESERVED_31_20_dx2;
   
//----
//DX3GCR   
   reg [0:0]                DXEN_0_dx3;
   reg [0:0]                DQSODT_1_dx3;
   reg [0:0]                DQODT_2_dx3;
   reg [0:0]                DXIOM_3_dx3;
   reg [0:0]                DXPDD_4_dx3;
   reg [0:0]                DXPDR_5_dx3;
   reg [0:0]                DQSRPD_6_dx3;
   reg [0:0]                DSEN_8_7_dx3;
   reg [0:0]                DQSRTT_9_dx3;
   reg [0:0]                DQRTT_10_dx3;
   reg [1:0]                RTTOH_12_11_dx3;
   reg [0:0]                RTTOAL_13_dx3;
   reg [1:0]                DXOEO_15_14_dx3;
   reg [0:0]                PLLRST_16_dx3;
   reg [0:0]                PLLPD_17_dx3;
   reg [0:0]                GSHIFT_18_dx3;
   reg [0:0]                PLLBYP_19_dx3;
   reg [5:0]                DX3GCR_RESERVED_25_20_dx3;
   reg [3:0]                WLRKEN_29_26_dx3;
   reg [0:0]                MDLEN_30_dx3;
   reg [0:0]                CALBYP_31_dx3;
//DX3GSR0
   reg [0:0]                WDQCAL_0_dx3;
   reg [0:0]                RDQSCAL_1_dx3;
   reg [0:0]                RDQSNCAL_2_dx3;
   reg [0:0]                GDQSCAL_3_dx3;
   reg [0:0]                WLCAL_4_dx3;
   reg [0:0]                WLDONE_5_dx3;
   reg [0:0]                WLERR_6_dx3;
   reg [7:0]                WLPRD_14_7_dx3;
   reg [0:0]                DPLOCK_15_dx3;
   reg [7:0]                GDQSPRD_23_16_dx3;
   reg [3:0]                QSGERR_27_24_dx3;
   reg [0:0]                WLDQ_28_dx3;
   reg [2:0]                DX3GSR0_RESERVED_31_29_dx3;
//DX3GSR1 
   reg [0:0]                DLTDONE_0_dx3;
   reg [23:0]               DLTCODE_24_1_dx3;
   reg [6:0]                DX3GSR1_RESERVED_31_25_dx3;
//DX3GSR2
   reg [0:0]                RDERR_0_dx3;
   reg [0:0]                RDWN_1_dx3;
   reg [0:0]                WDERR_2_dx3;
   reg [0:0]                WDWN_3_dx3;
   reg [0:0]                REERR_4_dx3;
   reg [0:0]                REWN_5_dx3;
   reg [0:0]                WEERR_6_dx3;
   reg [0:0]                WEWN_7_dx3;
   reg [3:0]                ESTAT_11_8_dx3;
   reg [19:0]               DX3GSR2_RESERVED_31_12_dx3;  
//DX3BDLR0
   reg [5:0]                DQ0WBD_5_0_dx3;
   reg [5:0]                DQ1WBD_11_6_dx3;
   reg [5:0]                DQ2WBD_17_12_dx3;
   reg [5:0]                DQ3WBD_23_18_dx3;
   reg [5:0]                DQ4WBD_29_24_dx3;
   reg [1:0]                DX3BDLR0_RESERVED_31_30_dx3; 
//DX3BDLR1
   reg [5:0]                DQ5WBD_5_0_dx3;
   reg [5:0]                DQ6WBD_11_6_dx3;
   reg [5:0]                DQ7WBD_17_12_dx3;
   reg [5:0]                DMWBD_23_18_dx3;
   reg [5:0]                DSWBD_29_24_dx3;
   reg [1:0]                DX3BDLR1_RESERVED_31_30_dx3;    
//DX3BDLR2
   reg [5:0]                DSOEBD_5_0_dx3;
   reg [5:0]                DQOEBD_11_6_dx3;
   reg [5:0]                DSRBD_17_12_dx3;
   reg [5:0]                DSNRBD_23_18_dx3;
   reg [7:0]                DX3BDLR2_RESERVED_31_24_dx3;   
//DX3BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx3;
   reg [5:0]                DQ1RBD_11_6_dx3;
   reg [5:0]                DQ2RBD_17_12_dx3;
   reg [5:0]                DQ3RBD_23_18_dx3;
   reg [5:0]                DQ4RBD_29_24_dx3;
   reg [1:0]                DX3BDLR3_RESERVED_31_30_dx3;    
//DX3BDLR4
   reg [5:0]                DQ5RBD_5_0_dx3;
   reg [5:0]                DQ6RBD_11_6_dx3;
   reg [5:0]                DQ7RBD_17_12_dx3;
   reg [5:0]                DMRBD_23_18_dx3;
   reg [7:0]                DX3BDLR4_RESERVED_31_24_dx3;     
//DX3LCDLR0
   reg [7:0]                R0WLD_7_0_dx3;
   reg [7:0]                R1WLD_15_8_dx3;   
   reg [7:0]                R2WLD_23_16_dx3;
   reg [7:0]                R3WLD_31_24_dx3;
//DX3LCDLR1
   reg [7:0]                WDQD_7_0_dx3;
   reg [7:0]                RDQSD_15_8_dx3;   
   reg [7:0]                RDQSND_23_16_dx3;   
   reg [7:0]                DX3LCDLR1_RESERVED_31_24_dx3;
//DX3LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx3;
   reg [7:0]                R1DQSGD_15_8_dx3;   
   reg [7:0]                R2DQSGD_23_16_dx3;
   reg [7:0]                R3DQSGD_31_24_dx3;   
//DX3MDLR
   reg [7:0]                IPRD_7_0_dx3;
   reg [7:0]                TPRD_15_8_dx3;
   reg [7:0]                MDLD_23_16_dx3;  
   reg [7:0]                DX3MDLR_RESERVED_31_24_dx3;  
//DX3GTR       
   reg [2:0]                R0DGSL_2_0_dx3;
   reg [2:0]                R1DGSL_5_3_dx3;
   reg [2:0]                R2DGSL_8_6_dx3;
   reg [2:0]                R3DGSL_11_9_dx3;
   reg [1:0]                R0WLSL_13_12_dx3;
   reg [1:0]                R1WLSL_15_14_dx3;
   reg [1:0]                R2WLSL_17_16_dx3;
   reg [1:0]                R3WLSL_19_18_dx3;
   reg [11:0]               DX3GTR_RESERVED_31_20_dx3;
   
//----
//DX4GCR   
   reg [0:0]                DXEN_0_dx4;
   reg [0:0]                DQSODT_1_dx4;
   reg [0:0]                DQODT_2_dx4;
   reg [0:0]                DXIOM_3_dx4;
   reg [0:0]                DXPDD_4_dx4;
   reg [0:0]                DXPDR_5_dx4;
   reg [0:0]                DQSRPD_6_dx4;
   reg [0:0]                DSEN_8_7_dx4;
   reg [0:0]                DQSRTT_9_dx4;
   reg [0:0]                DQRTT_10_dx4;
   reg [1:0]                RTTOH_12_11_dx4;
   reg [0:0]                RTTOAL_13_dx4;
   reg [1:0]                DXOEO_15_14_dx4;
   reg [0:0]                PLLRST_16_dx4;
   reg [0:0]                PLLPD_17_dx4;
   reg [0:0]                GSHIFT_18_dx4;
   reg [0:0]                PLLBYP_19_dx4;
   reg [5:0]                DX4GCR_RESERVED_25_20_dx4;
   reg [3:0]                WLRKEN_29_26_dx4;
   reg [0:0]                MDLEN_30_dx4;
   reg [0:0]                CALBYP_31_dx4;
//DX4GSR0
   reg [0:0]                WDQCAL_0_dx4;
   reg [0:0]                RDQSCAL_1_dx4;
   reg [0:0]                RDQSNCAL_2_dx4;
   reg [0:0]                GDQSCAL_3_dx4;
   reg [0:0]                WLCAL_4_dx4;
   reg [0:0]                WLDONE_5_dx4;
   reg [0:0]                WLERR_6_dx4;
   reg [7:0]                WLPRD_14_7_dx4;
   reg [0:0]                DPLOCK_15_dx4;
   reg [7:0]                GDQSPRD_23_16_dx4;
   reg [3:0]                QSGERR_27_24_dx4;
   reg [0:0]                WLDQ_28_dx4;
   reg [2:0]                DX4GSR0_RESERVED_31_29_dx4;
//DX4GSR1 
   reg [0:0]                DLTDONE_0_dx4;
   reg [23:0]               DLTCODE_24_1_dx4;
   reg [6:0]                DX4GSR1_RESERVED_31_25_dx4;
//DX4GSR2
   reg [0:0]                RDERR_0_dx4;
   reg [0:0]                RDWN_1_dx4;
   reg [0:0]                WDERR_2_dx4;
   reg [0:0]                WDWN_3_dx4;
   reg [0:0]                REERR_4_dx4;
   reg [0:0]                REWN_5_dx4;
   reg [0:0]                WEERR_6_dx4;
   reg [0:0]                WEWN_7_dx4;
   reg [3:0]                ESTAT_11_8_dx4;
   reg [19:0]               DX4GSR2_RESERVED_31_12_dx4;  
//DX4BDLR0
   reg [5:0]                DQ0WBD_5_0_dx4;
   reg [5:0]                DQ1WBD_11_6_dx4;
   reg [5:0]                DQ2WBD_17_12_dx4;
   reg [5:0]                DQ3WBD_23_18_dx4;
   reg [5:0]                DQ4WBD_29_24_dx4;
   reg [1:0]                DX4BDLR0_RESERVED_31_30_dx4; 
//DX4BDLR1
   reg [5:0]                DQ5WBD_5_0_dx4;
   reg [5:0]                DQ6WBD_11_6_dx4;
   reg [5:0]                DQ7WBD_17_12_dx4;
   reg [5:0]                DMWBD_23_18_dx4;
   reg [5:0]                DSWBD_29_24_dx4;
   reg [1:0]                DX4BDLR1_RESERVED_31_30_dx4;    
//DX4BDLR2
   reg [5:0]                DSOEBD_5_0_dx4;
   reg [5:0]                DQOEBD_11_6_dx4;
   reg [5:0]                DSRBD_17_12_dx4;
   reg [5:0]                DSNRBD_23_18_dx4;
   reg [7:0]                DX4BDLR2_RESERVED_31_24_dx4;   
//DX4BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx4;
   reg [5:0]                DQ1RBD_11_6_dx4;
   reg [5:0]                DQ2RBD_17_12_dx4;
   reg [5:0]                DQ3RBD_23_18_dx4;
   reg [5:0]                DQ4RBD_29_24_dx4;
   reg [1:0]                DX4BDLR3_RESERVED_31_30_dx4;    
//DX4BDLR4
   reg [5:0]                DQ5RBD_5_0_dx4;
   reg [5:0]                DQ6RBD_11_6_dx4;
   reg [5:0]                DQ7RBD_17_12_dx4;
   reg [5:0]                DMRBD_23_18_dx4;
   reg [7:0]                DX4BDLR4_RESERVED_31_24_dx4;     
//DX4LCDLR0
   reg [7:0]                R0WLD_7_0_dx4;
   reg [7:0]                R1WLD_15_8_dx4;   
   reg [7:0]                R2WLD_23_16_dx4;
   reg [7:0]                R3WLD_31_24_dx4;
//DX4LCDLR1
   reg [7:0]                WDQD_7_0_dx4;
   reg [7:0]                RDQSD_15_8_dx4;   
   reg [7:0]                RDQSND_23_16_dx4;   
   reg [7:0]                DX4LCDLR1_RESERVED_31_24_dx4;
//DX4LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx4;
   reg [7:0]                R1DQSGD_15_8_dx4;   
   reg [7:0]                R2DQSGD_23_16_dx4;
   reg [7:0]                R3DQSGD_31_24_dx4;   
//DX4MDLR
   reg [7:0]                IPRD_7_0_dx4;
   reg [7:0]                TPRD_15_8_dx4;
   reg [7:0]                MDLD_23_16_dx4;  
   reg [7:0]                DX4MDLR_RESERVED_31_24_dx4;  
//DX4GTR       
   reg [2:0]                R0DGSL_2_0_dx4;
   reg [2:0]                R1DGSL_5_3_dx4;
   reg [2:0]                R2DGSL_8_6_dx4;
   reg [2:0]                R3DGSL_11_9_dx4;
   reg [1:0]                R0WLSL_13_12_dx4;
   reg [1:0]                R1WLSL_15_14_dx4;
   reg [1:0]                R2WLSL_17_16_dx4;
   reg [1:0]                R3WLSL_19_18_dx4;
   reg [11:0]               DX4GTR_RESERVED_31_20_dx4;
   
//----
//DX5GCR   
   reg [0:0]                DXEN_0_dx5;
   reg [0:0]                DQSODT_1_dx5;
   reg [0:0]                DQODT_2_dx5;
   reg [0:0]                DXIOM_3_dx5;
   reg [0:0]                DXPDD_4_dx5;
   reg [0:0]                DXPDR_5_dx5;
   reg [0:0]                DQSRPD_6_dx5;
   reg [0:0]                DSEN_8_7_dx5;
   reg [0:0]                DQSRTT_9_dx5;
   reg [0:0]                DQRTT_10_dx5;
   reg [1:0]                RTTOH_12_11_dx5;
   reg [0:0]                RTTOAL_13_dx5;
   reg [1:0]                DXOEO_15_14_dx5;
   reg [0:0]                PLLRST_16_dx5;
   reg [0:0]                PLLPD_17_dx5;
   reg [0:0]                GSHIFT_18_dx5;
   reg [0:0]                PLLBYP_19_dx5;
   reg [5:0]                DX5GCR_RESERVED_25_20_dx5;
   reg [3:0]                WLRKEN_29_26_dx5;
   reg [0:0]                MDLEN_30_dx5;
   reg [0:0]                CALBYP_31_dx5;
//DX5GSR0
   reg [0:0]                WDQCAL_0_dx5;
   reg [0:0]                RDQSCAL_1_dx5;
   reg [0:0]                RDQSNCAL_2_dx5;
   reg [0:0]                GDQSCAL_3_dx5;
   reg [0:0]                WLCAL_4_dx5;
   reg [0:0]                WLDONE_5_dx5;
   reg [0:0]                WLERR_6_dx5;
   reg [7:0]                WLPRD_14_7_dx5;
   reg [0:0]                DPLOCK_15_dx5;
   reg [7:0]                GDQSPRD_23_16_dx5;
   reg [3:0]                QSGERR_27_24_dx5;
   reg [0:0]                WLDQ_28_dx5;
   reg [2:0]                DX5GSR0_RESERVED_31_29_dx5;
//DX5GSR1 
   reg [0:0]                DLTDONE_0_dx5;
   reg [23:0]               DLTCODE_24_1_dx5;
   reg [6:0]                DX5GSR1_RESERVED_31_25_dx5;
//DX5GSR2
   reg [0:0]                RDERR_0_dx5;
   reg [0:0]                RDWN_1_dx5;
   reg [0:0]                WDERR_2_dx5;
   reg [0:0]                WDWN_3_dx5;
   reg [0:0]                REERR_4_dx5;
   reg [0:0]                REWN_5_dx5;
   reg [0:0]                WEERR_6_dx5;
   reg [0:0]                WEWN_7_dx5;
   reg [3:0]                ESTAT_11_8_dx5;
   reg [19:0]               DX5GSR2_RESERVED_31_12_dx5;  
//DX5BDLR0
   reg [5:0]                DQ0WBD_5_0_dx5;
   reg [5:0]                DQ1WBD_11_6_dx5;
   reg [5:0]                DQ2WBD_17_12_dx5;
   reg [5:0]                DQ3WBD_23_18_dx5;
   reg [5:0]                DQ4WBD_29_24_dx5;
   reg [1:0]                DX5BDLR0_RESERVED_31_30_dx5; 
//DX5BDLR1
   reg [5:0]                DQ5WBD_5_0_dx5;
   reg [5:0]                DQ6WBD_11_6_dx5;
   reg [5:0]                DQ7WBD_17_12_dx5;
   reg [5:0]                DMWBD_23_18_dx5;
   reg [5:0]                DSWBD_29_24_dx5;
   reg [1:0]                DX5BDLR1_RESERVED_31_30_dx5;    
//DX5BDLR2
   reg [5:0]                DSOEBD_5_0_dx5;
   reg [5:0]                DQOEBD_11_6_dx5;
   reg [5:0]                DSRBD_17_12_dx5;
   reg [5:0]                DSNRBD_23_18_dx5;
   reg [7:0]                DX5BDLR2_RESERVED_31_24_dx5;   
//DX5BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx5;
   reg [5:0]                DQ1RBD_11_6_dx5;
   reg [5:0]                DQ2RBD_17_12_dx5;
   reg [5:0]                DQ3RBD_23_18_dx5;
   reg [5:0]                DQ4RBD_29_24_dx5;
   reg [1:0]                DX5BDLR3_RESERVED_31_30_dx5;    
//DX5BDLR4
   reg [5:0]                DQ5RBD_5_0_dx5;
   reg [5:0]                DQ6RBD_11_6_dx5;
   reg [5:0]                DQ7RBD_17_12_dx5;
   reg [5:0]                DMRBD_23_18_dx5;
   reg [7:0]                DX5BDLR4_RESERVED_31_24_dx5;     
//DX5LCDLR0
   reg [7:0]                R0WLD_7_0_dx5;
   reg [7:0]                R1WLD_15_8_dx5;   
   reg [7:0]                R2WLD_23_16_dx5;
   reg [7:0]                R3WLD_31_24_dx5;
//DX5LCDLR1
   reg [7:0]                WDQD_7_0_dx5;
   reg [7:0]                RDQSD_15_8_dx5;   
   reg [7:0]                RDQSND_23_16_dx5;   
   reg [7:0]                DX5LCDLR1_RESERVED_31_24_dx5;
//DX5LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx5;
   reg [7:0]                R1DQSGD_15_8_dx5;   
   reg [7:0]                R2DQSGD_23_16_dx5;
   reg [7:0]                R3DQSGD_31_24_dx5;   
//DX5MDLR
   reg [7:0]                IPRD_7_0_dx5;
   reg [7:0]                TPRD_15_8_dx5;
   reg [7:0]                MDLD_23_16_dx5;  
   reg [7:0]                DX5MDLR_RESERVED_31_24_dx5;  
//DX5GTR       
   reg [2:0]                R0DGSL_2_0_dx5;
   reg [2:0]                R1DGSL_5_3_dx5;
   reg [2:0]                R2DGSL_8_6_dx5;
   reg [2:0]                R3DGSL_11_9_dx5;
   reg [1:0]                R0WLSL_13_12_dx5;
   reg [1:0]                R1WLSL_15_14_dx5;
   reg [1:0]                R2WLSL_17_16_dx5;
   reg [1:0]                R3WLSL_19_18_dx5;
   reg [11:0]               DX5GTR_RESERVED_31_20_dx5;
   
//----
//DX6GCR   
   reg [0:0]                DXEN_0_dx6;
   reg [0:0]                DQSODT_1_dx6;
   reg [0:0]                DQODT_2_dx6;
   reg [0:0]                DXIOM_3_dx6;
   reg [0:0]                DXPDD_4_dx6;
   reg [0:0]                DXPDR_5_dx6;
   reg [0:0]                DQSRPD_6_dx6;
   reg [0:0]                DSEN_8_7_dx6;
   reg [0:0]                DQSRTT_9_dx6;
   reg [0:0]                DQRTT_10_dx6;
   reg [1:0]                RTTOH_12_11_dx6;
   reg [0:0]                RTTOAL_13_dx6;
   reg [1:0]                DXOEO_15_14_dx6;
   reg [0:0]                PLLRST_16_dx6;
   reg [0:0]                PLLPD_17_dx6;
   reg [0:0]                GSHIFT_18_dx6;
   reg [0:0]                PLLBYP_19_dx6;
   reg [5:0]                DX6GCR_RESERVED_25_20_dx6;
   reg [3:0]                WLRKEN_29_26_dx6;
   reg [0:0]                MDLEN_30_dx6;
   reg [0:0]                CALBYP_31_dx6;
//DX6GSR0
   reg [0:0]                WDQCAL_0_dx6;
   reg [0:0]                RDQSCAL_1_dx6;
   reg [0:0]                RDQSNCAL_2_dx6;
   reg [0:0]                GDQSCAL_3_dx6;
   reg [0:0]                WLCAL_4_dx6;
   reg [0:0]                WLDONE_5_dx6;
   reg [0:0]                WLERR_6_dx6;
   reg [7:0]                WLPRD_14_7_dx6;
   reg [0:0]                DPLOCK_15_dx6;
   reg [7:0]                GDQSPRD_23_16_dx6;
   reg [3:0]                QSGERR_27_24_dx6;
   reg [0:0]                WLDQ_28_dx6;
   reg [2:0]                DX6GSR0_RESERVED_31_29_dx6;
//DX6GSR1 
   reg [0:0]                DLTDONE_0_dx6;
   reg [23:0]               DLTCODE_24_1_dx6;
   reg [6:0]                DX6GSR1_RESERVED_31_25_dx6;
//DX6GSR2
   reg [0:0]                RDERR_0_dx6;
   reg [0:0]                RDWN_1_dx6;
   reg [0:0]                WDERR_2_dx6;
   reg [0:0]                WDWN_3_dx6;
   reg [0:0]                REERR_4_dx6;
   reg [0:0]                REWN_5_dx6;
   reg [0:0]                WEERR_6_dx6;
   reg [0:0]                WEWN_7_dx6;
   reg [3:0]                ESTAT_11_8_dx6;
   reg [19:0]               DX6GSR2_RESERVED_31_12_dx6;  
//DX6BDLR0
   reg [5:0]                DQ0WBD_5_0_dx6;
   reg [5:0]                DQ1WBD_11_6_dx6;
   reg [5:0]                DQ2WBD_17_12_dx6;
   reg [5:0]                DQ3WBD_23_18_dx6;
   reg [5:0]                DQ4WBD_29_24_dx6;
   reg [1:0]                DX6BDLR0_RESERVED_31_30_dx6; 
//DX6BDLR1
   reg [5:0]                DQ5WBD_5_0_dx6;
   reg [5:0]                DQ6WBD_11_6_dx6;
   reg [5:0]                DQ7WBD_17_12_dx6;
   reg [5:0]                DMWBD_23_18_dx6;
   reg [5:0]                DSWBD_29_24_dx6;
   reg [1:0]                DX6BDLR1_RESERVED_31_30_dx6;    
//DX6BDLR2
   reg [5:0]                DSOEBD_5_0_dx6;
   reg [5:0]                DQOEBD_11_6_dx6;
   reg [5:0]                DSRBD_17_12_dx6;
   reg [5:0]                DSNRBD_23_18_dx6;
   reg [7:0]                DX6BDLR2_RESERVED_31_24_dx6;   
//DX6BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx6;
   reg [5:0]                DQ1RBD_11_6_dx6;
   reg [5:0]                DQ2RBD_17_12_dx6;
   reg [5:0]                DQ3RBD_23_18_dx6;
   reg [5:0]                DQ4RBD_29_24_dx6;
   reg [1:0]                DX6BDLR3_RESERVED_31_30_dx6;    
//DX6BDLR4
   reg [5:0]                DQ5RBD_5_0_dx6;
   reg [5:0]                DQ6RBD_11_6_dx6;
   reg [5:0]                DQ7RBD_17_12_dx6;
   reg [5:0]                DMRBD_23_18_dx6;
   reg [7:0]                DX6BDLR4_RESERVED_31_24_dx6;     
//DX6LCDLR0
   reg [7:0]                R0WLD_7_0_dx6;
   reg [7:0]                R1WLD_15_8_dx6;   
   reg [7:0]                R2WLD_23_16_dx6;
   reg [7:0]                R3WLD_31_24_dx6;
//DX6LCDLR1
   reg [7:0]                WDQD_7_0_dx6;
   reg [7:0]                RDQSD_15_8_dx6;   
   reg [7:0]                RDQSND_23_16_dx6;   
   reg [7:0]                DX6LCDLR1_RESERVED_31_24_dx6;
//DX6LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx6;
   reg [7:0]                R1DQSGD_15_8_dx6;   
   reg [7:0]                R2DQSGD_23_16_dx6;
   reg [7:0]                R3DQSGD_31_24_dx6;   
//DX6MDLR
   reg [7:0]                IPRD_7_0_dx6;
   reg [7:0]                TPRD_15_8_dx6;
   reg [7:0]                MDLD_23_16_dx6;  
   reg [7:0]                DX6MDLR_RESERVED_31_24_dx6;  
//DX6GTR       
   reg [2:0]                R0DGSL_2_0_dx6;
   reg [2:0]                R1DGSL_5_3_dx6;
   reg [2:0]                R2DGSL_8_6_dx6;
   reg [2:0]                R3DGSL_11_9_dx6;
   reg [1:0]                R0WLSL_13_12_dx6;
   reg [1:0]                R1WLSL_15_14_dx6;
   reg [1:0]                R2WLSL_17_16_dx6;
   reg [1:0]                R3WLSL_19_18_dx6;
   reg [11:0]               DX6GTR_RESERVED_31_20_dx6;
   
//----
//DX7GCR   
   reg [0:0]                DXEN_0_dx7;
   reg [0:0]                DQSODT_1_dx7;
   reg [0:0]                DQODT_2_dx7;
   reg [0:0]                DXIOM_3_dx7;
   reg [0:0]                DXPDD_4_dx7;
   reg [0:0]                DXPDR_5_dx7;
   reg [0:0]                DQSRPD_6_dx7;
   reg [0:0]                DSEN_8_7_dx7;
   reg [0:0]                DQSRTT_9_dx7;
   reg [0:0]                DQRTT_10_dx7;
   reg [1:0]                RTTOH_12_11_dx7;
   reg [0:0]                RTTOAL_13_dx7;
   reg [1:0]                DXOEO_15_14_dx7;
   reg [0:0]                PLLRST_16_dx7;
   reg [0:0]                PLLPD_17_dx7;
   reg [0:0]                GSHIFT_18_dx7;
   reg [0:0]                PLLBYP_19_dx7;
   reg [5:0]                DX7GCR_RESERVED_25_20_dx7;
   reg [3:0]                WLRKEN_29_26_dx7;
   reg [0:0]                MDLEN_30_dx7;
   reg [0:0]                CALBYP_31_dx7;
//DX7GSR0
   reg [0:0]                WDQCAL_0_dx7;
   reg [0:0]                RDQSCAL_1_dx7;
   reg [0:0]                RDQSNCAL_2_dx7;
   reg [0:0]                GDQSCAL_3_dx7;
   reg [0:0]                WLCAL_4_dx7;
   reg [0:0]                WLDONE_5_dx7;
   reg [0:0]                WLERR_6_dx7;
   reg [7:0]                WLPRD_14_7_dx7;
   reg [0:0]                DPLOCK_15_dx7;
   reg [7:0]                GDQSPRD_23_16_dx7;
   reg [3:0]                QSGERR_27_24_dx7;
   reg [0:0]                WLDQ_28_dx7;
   reg [2:0]                DX7GSR0_RESERVED_31_29_dx7;
//DX7GSR1 
   reg [0:0]                DLTDONE_0_dx7;
   reg [23:0]               DLTCODE_24_1_dx7;
   reg [6:0]                DX7GSR1_RESERVED_31_25_dx7;
//DX7GSR2
   reg [0:0]                RDERR_0_dx7;
   reg [0:0]                RDWN_1_dx7;
   reg [0:0]                WDERR_2_dx7;
   reg [0:0]                WDWN_3_dx7;
   reg [0:0]                REERR_4_dx7;
   reg [0:0]                REWN_5_dx7;
   reg [0:0]                WEERR_6_dx7;
   reg [0:0]                WEWN_7_dx7;
   reg [3:0]                ESTAT_11_8_dx7;
   reg [19:0]               DX7GSR2_RESERVED_31_12_dx7;  
//DX7BDLR0
   reg [5:0]                DQ0WBD_5_0_dx7;
   reg [5:0]                DQ1WBD_11_6_dx7;
   reg [5:0]                DQ2WBD_17_12_dx7;
   reg [5:0]                DQ3WBD_23_18_dx7;
   reg [5:0]                DQ4WBD_29_24_dx7;
   reg [1:0]                DX7BDLR0_RESERVED_31_30_dx7; 
//DX7BDLR1
   reg [5:0]                DQ5WBD_5_0_dx7;
   reg [5:0]                DQ6WBD_11_6_dx7;
   reg [5:0]                DQ7WBD_17_12_dx7;
   reg [5:0]                DMWBD_23_18_dx7;
   reg [5:0]                DSWBD_29_24_dx7;
   reg [1:0]                DX7BDLR1_RESERVED_31_30_dx7;    
//DX7BDLR2
   reg [5:0]                DSOEBD_5_0_dx7;
   reg [5:0]                DQOEBD_11_6_dx7;
   reg [5:0]                DSRBD_17_12_dx7;
   reg [5:0]                DSNRBD_23_18_dx7;
   reg [7:0]                DX7BDLR2_RESERVED_31_24_dx7;   
//DX7BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx7;
   reg [5:0]                DQ1RBD_11_6_dx7;
   reg [5:0]                DQ2RBD_17_12_dx7;
   reg [5:0]                DQ3RBD_23_18_dx7;
   reg [5:0]                DQ4RBD_29_24_dx7;
   reg [1:0]                DX7BDLR3_RESERVED_31_30_dx7;    
//DX7BDLR4
   reg [5:0]                DQ5RBD_5_0_dx7;
   reg [5:0]                DQ6RBD_11_6_dx7;
   reg [5:0]                DQ7RBD_17_12_dx7;
   reg [5:0]                DMRBD_23_18_dx7;
   reg [7:0]                DX7BDLR4_RESERVED_31_24_dx7;     
//DX7LCDLR0
   reg [7:0]                R0WLD_7_0_dx7;
   reg [7:0]                R1WLD_15_8_dx7;   
   reg [7:0]                R2WLD_23_16_dx7;
   reg [7:0]                R3WLD_31_24_dx7;
//DX7LCDLR1
   reg [7:0]                WDQD_7_0_dx7;
   reg [7:0]                RDQSD_15_8_dx7;   
   reg [7:0]                RDQSND_23_16_dx7;   
   reg [7:0]                DX7LCDLR1_RESERVED_31_24_dx7;
//DX7LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx7;
   reg [7:0]                R1DQSGD_15_8_dx7;   
   reg [7:0]                R2DQSGD_23_16_dx7;
   reg [7:0]                R3DQSGD_31_24_dx7;   
//DX7MDLR
   reg [7:0]                IPRD_7_0_dx7;
   reg [7:0]                TPRD_15_8_dx7;
   reg [7:0]                MDLD_23_16_dx7;  
   reg [7:0]                DX7MDLR_RESERVED_31_24_dx7;  
//DX7GTR       
   reg [2:0]                R0DGSL_2_0_dx7;
   reg [2:0]                R1DGSL_5_3_dx7;
   reg [2:0]                R2DGSL_8_6_dx7;
   reg [2:0]                R3DGSL_11_9_dx7;
   reg [1:0]                R0WLSL_13_12_dx7;
   reg [1:0]                R1WLSL_15_14_dx7;
   reg [1:0]                R2WLSL_17_16_dx7;
   reg [1:0]                R3WLSL_19_18_dx7;
   reg [11:0]               DX7GTR_RESERVED_31_20_dx7;
  
//----
//DX8GCR   
   reg [0:0]                DXEN_0_dx8;
   reg [0:0]                DQSODT_1_dx8;
   reg [0:0]                DQODT_2_dx8;
   reg [0:0]                DXIOM_3_dx8;
   reg [0:0]                DXPDD_4_dx8;
   reg [0:0]                DXPDR_5_dx8;
   reg [0:0]                DQSRPD_6_dx8;
   reg [0:0]                DSEN_8_7_dx8;
   reg [0:0]                DQSRTT_9_dx8;
   reg [0:0]                DQRTT_10_dx8;
   reg [1:0]                RTTOH_12_11_dx8;
   reg [0:0]                RTTOAL_13_dx8;
   reg [1:0]                DXOEO_15_14_dx8;
   reg [0:0]                PLLRST_16_dx8;
   reg [0:0]                PLLPD_17_dx8;
   reg [0:0]                GSHIFT_18_dx8;
   reg [0:0]                PLLBYP_19_dx8;
   reg [5:0]                DX8GCR_RESERVED_25_20_dx8;
   reg [3:0]                WLRKEN_29_26_dx8;
   reg [0:0]                MDLEN_30_dx8;
   reg [0:0]                CALBYP_31_dx8;
//DX8GSR0
   reg [0:0]                WDQCAL_0_dx8;
   reg [0:0]                RDQSCAL_1_dx8;
   reg [0:0]                RDQSNCAL_2_dx8;
   reg [0:0]                GDQSCAL_3_dx8;
   reg [0:0]                WLCAL_4_dx8;
   reg [0:0]                WLDONE_5_dx8;
   reg [0:0]                WLERR_6_dx8;
   reg [7:0]                WLPRD_14_7_dx8;
   reg [0:0]                DPLOCK_15_dx8;
   reg [7:0]                GDQSPRD_23_16_dx8;
   reg [3:0]                QSGERR_27_24_dx8;
   reg [0:0]                WLDQ_28_dx8;
   reg [2:0]                DX8GSR0_RESERVED_31_29_dx8;
//DX8GSR1 
   reg [0:0]                DLTDONE_0_dx8;
   reg [23:0]               DLTCODE_24_1_dx8;
   reg [6:0]                DX8GSR1_RESERVED_31_25_dx8;
//DX8GSR2
   reg [0:0]                RDERR_0_dx8;
   reg [0:0]                RDWN_1_dx8;
   reg [0:0]                WDERR_2_dx8;
   reg [0:0]                WDWN_3_dx8;
   reg [0:0]                REERR_4_dx8;
   reg [0:0]                REWN_5_dx8;
   reg [0:0]                WEERR_6_dx8;
   reg [0:0]                WEWN_7_dx8;
   reg [3:0]                ESTAT_11_8_dx8;
   reg [19:0]               DX8GSR2_RESERVED_31_12_dx8;  
//DX8BDLR0
   reg [5:0]                DQ0WBD_5_0_dx8;
   reg [5:0]                DQ1WBD_11_6_dx8;
   reg [5:0]                DQ2WBD_17_12_dx8;
   reg [5:0]                DQ3WBD_23_18_dx8;
   reg [5:0]                DQ4WBD_29_24_dx8;
   reg [1:0]                DX8BDLR0_RESERVED_31_30_dx8; 
//DX8BDLR1
   reg [5:0]                DQ5WBD_5_0_dx8;
   reg [5:0]                DQ6WBD_11_6_dx8;
   reg [5:0]                DQ7WBD_17_12_dx8;
   reg [5:0]                DMWBD_23_18_dx8;
   reg [5:0]                DSWBD_29_24_dx8;
   reg [1:0]                DX8BDLR1_RESERVED_31_30_dx8;    
//DX8BDLR2
   reg [5:0]                DSOEBD_5_0_dx8;
   reg [5:0]                DQOEBD_11_6_dx8;
   reg [5:0]                DSRBD_17_12_dx8;
   reg [5:0]                DSNRBD_23_18_dx8;
   reg [7:0]                DX8BDLR2_RESERVED_31_24_dx8;   
//DX8BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx8;
   reg [5:0]                DQ1RBD_11_6_dx8;
   reg [5:0]                DQ2RBD_17_12_dx8;
   reg [5:0]                DQ3RBD_23_18_dx8;
   reg [5:0]                DQ4RBD_29_24_dx8;
   reg [1:0]                DX8BDLR3_RESERVED_31_30_dx8;    
//DX8BDLR4
   reg [5:0]                DQ5RBD_5_0_dx8;
   reg [5:0]                DQ6RBD_11_6_dx8;
   reg [5:0]                DQ7RBD_17_12_dx8;
   reg [5:0]                DMRBD_23_18_dx8;
   reg [7:0]                DX8BDLR4_RESERVED_31_24_dx8;     
//DX8LCDLR0
   reg [7:0]                R0WLD_7_0_dx8;
   reg [7:0]                R1WLD_15_8_dx8;   
   reg [7:0]                R2WLD_23_16_dx8;
   reg [7:0]                R3WLD_31_24_dx8;
//DX8LCDLR1
   reg [7:0]                WDQD_7_0_dx8;
   reg [7:0]                RDQSD_15_8_dx8;   
   reg [7:0]                RDQSND_23_16_dx8;   
   reg [7:0]                DX8LCDLR1_RESERVED_31_24_dx8;
//DX8LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx8;
   reg [7:0]                R1DQSGD_15_8_dx8;   
   reg [7:0]                R2DQSGD_23_16_dx8;
   reg [7:0]                R3DQSGD_31_24_dx8;   
//DX8MDLR
   reg [7:0]                IPRD_7_0_dx8;
   reg [7:0]                TPRD_15_8_dx8;
   reg [7:0]                MDLD_23_16_dx8;  
   reg [7:0]                DX8MDLR_RESERVED_31_24_dx8;  
//DX8GTR       
   reg [2:0]                R0DGSL_2_0_dx8;
   reg [2:0]                R1DGSL_5_3_dx8;
   reg [2:0]                R2DGSL_8_6_dx8;
   reg [2:0]                R3DGSL_11_9_dx8;
   reg [1:0]                R0WLSL_13_12_dx8;
   reg [1:0]                R1WLSL_15_14_dx8;
   reg [1:0]                R2WLSL_17_16_dx8;
   reg [1:0]                R3WLSL_19_18_dx8;
   reg [11:0]               DX8GTR_RESERVED_31_20_dx8;  

//----  
// Registers fields that will be used for toggling value
//RIDR
   reg [3:0]                PUBMNR_3_0_T;
   reg [7:4]                PUBMDR_7_4_T;
   reg [11:8]               PUBMJR_11_8_T;
   reg [15:12]              PHYMNR_15_12_T;
   reg [19:16]              PHYMDR_19_16_T;
   reg [23:20]              PHYMJR_23_20_T;
   reg [31:24]              UDRID_31_24_T;

//PIR
   reg [0:0]                PHYINIT_0_T;
   reg [0:0]                ZCAL_1_T;
   reg [1:0]                PIR_RESERVED_3_2_T;
   reg [0:0]                PLLINIT_4_T;
   reg [0:0]                DCAL_5_T;
   reg [0:0]                PHYRST_6_T;
   reg [0:0]                DRAMRST_7_T;
   reg [0:0]                DRAMINIT_8_T;
   reg [0:0]                WL_9_T;
   reg [0:0]                QSGATE_10_T;
   reg [0:0]                WLADJ_11_T;
   reg [0:0]                RDDSKW_12_T;
   reg [0:0]                WRDSKW_13_T;
   reg [0:0]                RDEYE_14_T;
   reg [0:0]                WREYE_15_T;
   reg [0:0]                ICPC_16_T;
   reg [0:0]                PLLBYP_17_T;
   reg [0:0]                CTLDINIT_18_T;
   reg [0:0]                RDIMMINIT_19_T;
   reg [6:0]                PIR_RESERVED_26_20_T;
   reg [0:0]                CLRSR_27_T;
   reg [0:0]                LOCKBYP_28_T;
   reg [0:0]                DCALBYP_29_T;
   reg [0:0]                ZCALBYP_30_T;
   reg [0:0]                INITBYP_31_T;
   
                 
//PGCR0
   reg [0:0]                WLLVT_0_T;
   reg [0:0]                WDLVT_1_T;
   reg [0:0]                RDLVT_2_T;
   reg [0:0]                RGLVT_3_T;
   reg [0:0]                WDBVT_4_T;
   reg [0:0]                RDBVT_5_T;
   reg [0:0]                DLTMODE_6_T;
   reg [0:0]                DLTST_7_T;
   reg [0:0]                OSCEN_8_T;
   reg [2:0]                OSCDIV_11_9_T;
   reg [1:0]                OSCWDL_13_12_T;
   reg [4:0]                DTOSEL_18_14_T;
   reg [6:0]                PGCR0_RESERVED_25_19_T;
   reg [5:0]                CKEN_31_26_T;
      

//PGCR1
   reg [0:0]                PDDISDX_0_T;
   reg [0:0]                WLMODE_1_T;
   reg [0:0]                WLSTEP_2_T;
   reg [0:0]                WLUNCRT_3_T;
   reg [1:0]                PGCR1_RESERVED_5_4_T;
   reg [0:0]                WLSELT_6_T;
   reg [1:0]                IODDRM_8_7_T;
   reg [0:0]                MDLEN_9_T;
   reg [0:0]                LPFEN_10_T;
   reg [1:0]                LPFDEPTH_12_11_T;
   reg [1:0]                FDEPTH_14_13_T;
   reg [7:0]                DLDLMT_22_15_T;
   reg [1:0]                ZCKSEL_24_23_T;
   reg [0:0]                PHYHRST_25_T;
   reg [0:0]                INHVT_26_T;
   reg [0:0]                IOLB_27_T;
   reg [0:0]                LBDQSS_28_T;
   reg [1:0]                LBGDQS_30_29_T;
   reg [0:0]                LBMODE_31_T;

//PGSR0
   reg [0:0]                IDONE_0_T;
   reg [0:0]                PLDONE_1_T;
   reg [0:0]                DCDONE_2_T;
   reg [0:0]                ZCDONE_3_T;
   reg [0:0]                DIDONE_4_T;
   reg [0:0]                WLDONE_5_T;
   reg [0:0]                QSGDONE_6_T;
   reg [0:0]                WLADONE_7_T;
   reg [0:0]                RDDONE_8_T;
   reg [0:0]                WDDONE_9_T;
   reg [0:0]                REDONE_10_T;
   reg [0:0]                WEDONE_11_T;
   reg [7:0]                PGSR0_RESERVED_19_12_T;
   reg [0:0]                ZCERR_20_T;
   reg [0:0]                WLERR_21_T;
   reg [0:0]                QSGERR_22_T;
   reg [0:0]                WLAERR_23_T;
   reg [0:0]                RDERR_24_T;
   reg [0:0]                WDERR_25_T;
   reg [0:0]                REERR_26_T;
   reg [0:0]                WEERR_27_T;
   reg [2:0]                PGSR0_RESERVED_30_28_T;
   reg [0:0]                APLOCK_31_T;
  
//PGSR1
   reg [0:0]                DLTDONE_0_T;
   reg [23:0]               DLTCODE_24_1_T;
   reg [4:0]                PGSR1_RESERVED_29_25_T;
   reg [0:0]                VTSTOP_30_T;
   reg [0:0]                PARERR_31_T;                                             
                                                 
   
//PLLCR
   reg [1:0]                DTC_1_0_T;
   reg [3:0]                ATC_5_2_T;   
   reg [3:0]                ATOEN_9_6_T;
   reg [0:0]                GSHIFT_10_T;
   reg [1:0]                CPIC_12_11_T;
   reg [3:0]                CPPC_16_13_T;
   reg [0:0]                QPMODE_17_T;
   reg [1:0]                FRQSEL_19_18_T;
   reg [8:0]                PLLCR_RESERVED_28_20_T;
   reg [0:0]                PLLPD_29_T;
   reg [0:0]                PLLRST_30_T;
   reg [0:0]                BYP_31_T;
   
//PTR0
   reg [5:0]                tPHYRST_5_0_T;
   reg [14:0]               tPLLGS_20_6_T;   
   reg [10:0]               tPLLPD_31_21_T;

//PTR1
   reg [12:0]               tPLLRST_12_0_T;
   reg [1:0]                PTR1_RESERVED_14_13_T;   
   reg [16:0]               tPLLLOCK_31_15_T;   
   
//PTR2   
   reg [4:0]                tCALON_4_0_T;   
   reg [4:0]                tCALS_9_5_T;
   reg [4:0]                tCALH_14_10_T;   
   reg [4:0]                tWLDLYS_19_15_T;
   reg [11:0]               PTR2_RESERVED_31_20_T;
   

//PTR3
   reg [19:0]               tDINIT0_19_0_T;
   reg [8:0]                tDINIT1_28_20_T;
   reg [2:0]                PTR3_RESERVED_31_29_T;
  
//PTR4
   reg [17:0]               tDINIT2_17_0_T;
   reg [9:0]                tDINIT3_27_18_T;
   reg [3:0]                PTR4_RESERVED_31_28_T;
  
   
//ACMDLR
   reg [7:0]                IPRD_7_0_T;
   reg [7:0]                TPRD_15_8_T;
   reg [7:0]                MDLD_23_16_T;  
   reg [7:0]                ACMDLR_RESERVED_31_24_T;
   
//ACBDLR
   reg [5:0]                CK0BD_5_0_T;
   reg [5:0]                CK1BD_11_6_T;
   reg [5:0]                CK2BD_17_12_T;   
   reg [5:0]                ACBD_23_18_T;
   reg [7:0]                ACBDLR_RESERVED_31_24_T;
   
   
//ACIOCR
   reg [0:0]                ACIOM_0_T;
   reg [0:0]                ACOE_1_T;
   reg [0:0]                ACODT_2_T;
   reg [0:0]                ACPDD_3_T;
   reg [0:0]                ACPDR_4_T;
   reg [2:0]                CKODT_7_5_T;
   reg [2:0]                CKPDD_10_8_T;
   reg [2:0]                CKPDR_13_11_T;
   reg [3:0]                RANKODT_17_14_T;
   reg [3:0]                CSPDD_21_18_T;
   reg [3:0]                RANKPDR_25_22_T;      
   reg [0:0]                RSTODT_26_T;
   reg [0:0]                RSTPDD_27_T;
   reg [0:0]                RSTPDR_28_T;
   reg [0:0]                RSTIOM_29_T;
   reg [1:0]                ACSR_31_30_T;
   
//DXCCR
   reg [0:0]                DXODT_0_T;
   reg [0:0]                DXIOM_1_T;
   reg [0:0]                MDLEN_2_T;
   reg [0:0]                DXPDD_3_T;
   reg [0:0]                DXPDR_4_T;
   reg [3:0]                DQSRES_8_5_T;
   reg [3:0]                DQSNRES_12_9_T;
   reg [1:0]                DXSR_14_13_T;
   reg [2:0]                MSBUDQ_17_15_T;
   reg [0:0]                UDQODT_18_T;
   reg [0:0]                UDQPDD_19_T;
   reg [0:0]                UDQPDR_20_T;
   reg [0:0]                UDQIOM_21_T;
   reg [9:0]                DXCCR_RESERVED_31_22_T;   

//DSGCR
   reg [0:0]                PUREN_0_T;
   reg [0:0]                BDISEN_1_T;
   reg [0:0]                ZUEN_2_T;
   reg [0:0]                LPIOPD_3_T;
   reg [0:0]                LPPLLPD_4_T;
   reg [0:0]                CUAEN_5_T;
   reg [0:0]                DQSGX_6_T;
   reg [0:0]                BRRMODE_7_T;
   reg [3:0]                PUAD_11_8_T;
   reg [0:0]                DTOODT_12_T;
   reg [0:0]                DTOPDD_13_T;
   reg [0:0]                DTOPDR_14_T;
   reg [0:0]                DTOIOM_15_T;
   reg [0:0]                DTOOE_16_T;
   reg [0:0]                ATOAE_17_T;
   reg [0:0]                RRMODE_18_T;
   reg [0:0]                SDRMODE_19_T;
   reg [3:0]                CKEPDD_23_20_T;
   reg [3:0]                ODTPDD_27_24_T;
   reg [0:0]                CKOE_28_T;
   reg [0:0]                ODTOE_29_T;
   reg [0:0]                RSTOE_30_T;
   reg [0:0]                CKEOE_31_T;
    
//DCR
   reg [2:0]                DDRMD_2_0_T;
   reg [0:0]                DDR8BNK_3_T;
   reg [2:0]                PDQ_6_4_T;
   reg [0:0]                MPRDQ_7_T;
   reg [1:0]                DDRTYPE_9_8_T;
   reg [7:0]                BYTEMASK_17_10_T;
   reg [8:0]                DCR_RESERVED_26_18_T;
   reg [0:0]                NOSRA_27_T;
   reg [0:0]                DDR2T_28_T;
   reg [0:0]                UDIMM_29_T;
   reg [1:0]                DCR_RESERVED_31_30_T;
   

//DTPR0
   reg [3:0]                tRTP_3_0_T;
   reg [3:0]                tWTR_7_4_T;
   reg [3:0]                tRP_11_8_T;
   reg [3:0]                tRCD_15_12_T;
   reg [5:0]                tRAS_21_16_T;
   reg [3:0]                tRRD_25_22_T;
   reg [5:0]                tRC_31_26_T;

//DTPR1
   reg [1:0]                tMRD_1_0_T;
   reg [2:0]                tMOD_4_2_T;
   reg [5:0]                tFAW_10_5_T;
   reg [8:0]                tRFC_19_11_T;
   reg [5:0]                tWLMRD_25_20_T;
   reg [3:0]                tWLO_29_26_T;
   reg [1:0]                tAOND_tAOFD_31_30_T;

//DTPR2
   reg [9:0]                tXS_9_0_T;
   reg [4:0]                tXP_14_10_T;
   reg [3:0]                tCKE_18_15_T;
   reg [9:0]                tDLLK_28_19_T;
   reg [0:0]                tRTODT_29_T;
   reg [0:0]                tRTW_30_T;
   reg [0:0]                tCCD_31_T;

//MR0 for DDR3
   reg [1:0]                MR0_DDR3_BL_1_0_T;
   reg [0:0]                MR0_DDR3_BT_3_T;
   reg [0:0]                MR0_DDR3_CL_2_T;
   reg [2:0]                MR0_DDR3_CL_6_4_T;
   reg [0:0]                MR0_DDR3_TM_7_T;
   reg [0:0]                MR0_DDR3_DR_8_T;
   reg [2:0]                MR0_DDR3_WR_11_9_T;
   reg [0:0]                MR0_DDR3_PD_12_T;
   reg [2:0]                MR0_DDR3_RSVD_15_13_T;
   reg [15:0]               MR0_DDR3_RESERVED_31_16_T;
   
//MR0 for DDR2
   reg [2:0]                MR0_DDR2_BL_2_0_T;
   reg [0:0]                MR0_DDR2_BT_3_T;
   reg [2:0]                MR0_DDR2_CL_6_4_T;
   reg [0:0]                MR0_DDR2_TM_7_T;
   reg [0:0]                MR0_DDR2_DR_8_T;
   reg [2:0]                MR0_DDR2_WR_11_9_T;
   reg [0:0]                MR0_DDR2_PD_12_T;
   reg [2:0]                MR0_DDR2_RSVD_15_13_T;
   reg [15:0]               MR0_DDR2_RESERVED_31_16_T;
   

//MR1 for DDR3
   reg [0:0]                MR1_DDR3_DE_0_T;
   reg [0:0]                MR1_DDR3_DIC_1_T;
   reg [0:0]                MR1_DDR3_RTT_2_T;
   reg [1:0]                MR1_DDR3_AL_4_3_T;
   reg [0:0]                MR1_DDR3_DIC_5_T;
   reg [0:0]                MR1_DDR3_RTT_6_T;
   reg [0:0]                MR1_DDR3_LEVEL_7_T;
   reg [0:0]                MR1_DDR3_RSVD_8_T;
   reg [0:0]                MR1_DDR3_RTT_9_T;
   reg [0:0]                MR1_DDR3_RSVD_10_T;
   reg [0:0]                MR1_DDR3_TDQS_11_T;
   reg [0:0]                MR1_DDR3_QOFF_12_T;
   reg [2:0]                MR1_DDR3_RSVD_15_13_T;
   reg [15:0]               MR1_DDR3_RESERVED_31_16_T;
   
//MR1 for DDR2
   reg [0:0]                MR1_DDR2_DE_0_T;
   reg [0:0]                MR1_DDR2_DIC_1_T;
   reg [0:0]                MR1_DDR2_RTT_2_T;
   reg [2:0]                MR1_DDR2_AL_5_3_T;
   reg [0:0]                MR1_DDR2_RTT_6_T;
   reg [2:0]                MR1_DDR2_OCD_9_7_T;
   reg [0:0]                MR1_DDR2_DQS_10_T;
   reg [0:0]                MR1_DDR2_RDQS_11_T;
   reg [0:0]                MR1_DDR2_QOFF_12_T;
   reg [2:0]                MR1_DDR2_RSVD_15_13_T;
   reg [15:0]               MR1_DDR2_RESERVED_31_16_T;
   
//MR2 for DDR3
   reg [2:0]                MR2_DDR3_PASR_2_0_T;
   reg [2:0]                MR2_DDR3_CWL_5_3_T;
   reg [0:0]                MR2_DDR3_ASR_6_T;
   reg [0:0]                MR2_DDR3_SRF_7_T;
   reg [0:0]                MR2_DDR3_RSVD_8_T;
   reg [1:0]                MR2_DDR3_RTTWR_10_9_T;
   reg [4:0]                MR2_DDR3_RSVD_15_11_T;
   reg [15:0]               MR2_DDR3_RESERVED_31_16_T;

//MR2 for DDR2
   reg [2:0]                MR2_DDR2_PASR_2_0_T;
   reg [0:0]                MR2_DDR2_DCC_3_T;
   reg [2:0]                MR2_DDR2_RSVD_6_4_T;
   reg [0:0]                MR2_DDR2_SRF_7_T;
   reg [0:0]                MR2_DDR2_RSVD_8_T;
   reg [1:0]                MR2_DDR2_RSVD_10_9_T;
   reg [4:0]                MR2_DDR2_RSVD_15_11_T;
   reg [15:0]               MR2_DDR2_RESERVED_31_16_T;
  
//MR3 for DDR3
   reg [1:0]                MR3_DDR3_MPRLOC_1_0_T;
   reg [0:0]                MR3_DDR3_MPR_2_T;
   reg [12:0]               MR3_DDR3_RSVD_15_3_T;
   reg [15:0]               MR3_DDR3_RESERVED_31_16_T;

//MR3 for DDR2
   reg [15:0]               MR3_DDR2_RSVD_15_0_T;
   reg [15:0]               MR3_DDR2_RESERVED_31_16_T;

//ODTCR
   reg [3:0]                RDODT0_3_0_T;
   reg [3:0]                RDODT1_7_4_T;
   reg [3:0]                RDODT2_11_8_T;
   reg [3:0]                RDODT3_15_12_T;
   reg [3:0]                WRODT0_19_16_T;
   reg [3:0]                WRODT1_23_20_T;
   reg [3:0]                WRODT2_27_24_T;
   reg [3:0]                WRODT3_31_28_T;

//DTCR
   reg [3:0]                DTRPTN_3_0_T;
   reg [1:0]                DTRANK_5_4_T;
   reg [0:0]                DTMPR_6_T;
   reg [0:0]                DTCMPD_7_T;
   reg [3:0]                DTWDQM_11_8_T;
   reg [0:0]                DTWBDDM_12_T;
   reg [0:0]                DTBDC_13_T;
   reg [1:0]                DTCR_RESERVED_15_14_T;
   reg [3:0]                DTDBS_19_16_T;
   reg [0:0]                DTDEN_20_T;
   reg [0:0]                DTDSTP_21_T;
   reg [0:0]                DTEXD_22_T;
   reg [0:0]                DTEXG_23_T;
   reg [3:0]                RANKEN_27_24_T;
   reg [3:0]                RFSHDT_31_28_T;          

//DTAR0
   reg [11:0]               DTAR0_DTCOL_11_0_T;
   reg [15:0]               DTAR0_DTROW_27_12_T;
   reg [2:0]                DTAR0_DTBANK_30_28_T;
   reg [0:0]                DTAR0_RESERVED_31_T;
   
//DTAR1
   reg [11:0]               DTAR1_DTCOL_11_0_T;
   reg [15:0]               DTAR1_DTROW_27_12_T;
   reg [2:0]                DTAR1_DTBANK_30_28_T;
   reg [0:0]                DTAR1_RESERVED_31_T;
   
//DTAR2
   reg [11:0]               DTAR2_DTCOL_11_0_T;
   reg [15:0]               DTAR2_DTROW_27_12_T;
   reg [2:0]                DTAR2_DTBANK_30_28_T;
   reg [0:0]                DTAR2_RESERVED_31_T;
   
//DTDR0
   reg [7:0]                DTBYTE0_7_0_T;
   reg [7:0]                DTBYTE1_15_8_T;
   reg [7:0]                DTBYTE2_23_16_T;
   reg [7:0]                DTBYTE3_31_24_T;

//DTDR1
   reg [7:0]                DTBYTE4_7_0_T;
   reg [7:0]                DTBYTE5_15_8_T;
   reg [7:0]                DTBYTE6_23_16_T;
   reg [7:0]                DTBYTE7_31_24_T;

//DTEDR0
   reg [7:0]                DTWLMN_7_0_T;
   reg [7:0]                DTWLMX_15_8_T;
   reg [7:0]                DTWBMN_23_16_T;
   reg [7:0]                DTWBMX_31_24_T;

//DTEDR1  
   reg [7:0]                DTRLMN_7_0_T;
   reg [7:0]                DTRLMX_15_8_T;
   reg [7:0]                DTRBMN_23_16_T;
   reg [7:0]                DTRBMX_31_24_T;

//PGCR2 
  reg [17:0]                tREFPRD_17_0_T;
  reg [0:0]                 NOBUB_18_T;
  reg [0:0]                 FXDLAT_19_T;  
  reg [11:0]                PGCR2_RESERVED_31_20_T;
  
//RDIMMGCR0
  reg [0:0]                 RDIMM_0_T;
  reg [0:0]                 ERRNOREG_1_T;
  reg [11:0]                RDIMMGCR0_RESERVED_13_2_T;
  reg [0:0]                 PARINODT_14_T;
  reg [0:0]                 PARINPDD_15_T;
  reg [0:0]                 PARINPDR_16_T;
  reg [0:0]                 PARINIOM_17_T;
  reg [0:0]                 PARINOE_18_T;
  reg [0:0]                 ERROUTODT_19_T;
  reg [0:0]                 ERROUTPDD_20_T;
  reg [0:0]                 ERROUTPDR_21_T;
  reg [0:0]                 ERROUTIOM_22_T;
  reg [0:0]                 ERROUTOE_23_T;
  reg [0:0]                 RDIMMODT_24_T;
  reg [0:0]                 RDIMMPDD_25_T;
  reg [0:0]                 RDIMMPDR_26_T;
  reg [0:0]                 RDIMMIOM_27_T;
  reg [0:0]                 QCSENOE_28_T;
  reg [0:0]                 MIRROROE_29_T;
  reg [0:0]                 QCSEN_30_T;
  reg [0:0]                 MIRROR_31_T;                      
   
//RDIMMGCR1
  reg [11:0]                tBCSTAB_11_0_T;
  reg [2:0]                 tBCMRD_14_12_T;
  reg [0:0]                 RDIMMGCR1_RESERVED_15_T;
  reg [15:0]                CRINIT_31_16_T;
  
//RDIMMCR0
  reg [3:0]                 RC0_3_0_T;
  reg [3:0]                 RC1_7_4_T;
  reg [3:0]                 RC2_11_8_T;
  reg [3:0]                 RC3_15_12_T;
  reg [3:0]                 RC4_19_16_T;
  reg [3:0]                 RC5_23_20_T;
  reg [3:0]                 RC6_27_24_T;
  reg [3:0]                 RC7_31_28_T;
  
//RDIMMCR1
  reg [3:0]                 RC8_3_0_T;
  reg [3:0]                 RC9_7_4_T;
  reg [3:0]                 RC10_11_8_T;
  reg [3:0]                 RC11_15_12_T;
  reg [3:0]                 RC12_19_16_T;
  reg [3:0]                 RC13_23_20_T;
  reg [3:0]                 RC14_27_24_T;
  reg [3:0]                 RC15_31_28_T;
 
  
//DCUAR
   reg [3:0]                CWADDR_3_0_T;
   reg [3:0]                CSADDR_7_4_T;
   reg [1:0]                CSEL_9_8_T;
   reg [0:0]                INCA_10_T;
   reg [0:0]                ATYPE_11_T;
   reg [19:0]               DCUAR_RESERVED_31_12_T;

//DCUDR
   reg [31:0]               CDATA_31_0_T;

//DCURR  
   reg [3:0]                DINST_3_0_T;
   reg [3:0]                SADDR_7_4_T;
   reg [3:0]                EADDR_11_8_T;
   reg [7:0]                NFAIL_19_12_T;
   reg [0:0]                SONF_20_T;
   reg [0:0]                SCOF_21_T;
   reg [0:0]                RCEN_22_T;
   reg [0:0]                XCEN_23_T;
   reg [7:0]                DCURR_RESERVED_31_24_T;

//DCULR
   reg [3:0]                LSADDR_3_0_T;
   reg [3:0]                LEADDR_7_4_T;
   reg [7:0]                LCNT_15_8_T;
   reg [0:0]                LINF_16_T;
   reg [0:0]                IDA_17_T;
   reg [9:0]                DCULR_RESERVED_27_18_T;
   reg [3:0]                XLEADDR_31_28_T;

//DCUGCR
   reg [15:0]               RCSW_15_0_T;
   reg [15:0]               DCUGCR_RESERVED_31_16_T;

//DCUPTR  
   reg [7:0]                tDCUT0_7_0_T;
   reg [7:0]                tDCUT1_15_8_T;
   reg [7:0]                tDCUT2_23_16_T;
   reg [7:0]                tDCUT3_31_24_T;

//DCUSR0
   reg [0:0]                RDONE_0_T;
   reg [0:0]                CFAIL_1_T;
   reg [0:0]                CFULL_2_T;
   reg [28:0]               DCUSR0_RESERVED_31_3_T;

//DCUSR1
   reg [15:0]               RDCNT_15_0_T;
   reg [7:0]                FLCNT_23_16_T;
   reg [7:0]                LPCNT_31_24_T;

//BISTRR
   reg [2:0]                BINST_2_0_T;
   reg [0:0]                BMODE_3_T;
   reg [0:0]                BINF_4_T;
   reg [7:0]                NFAIL_12_5_T;
   reg [0:0]                BSONF_13_T;
   reg [0:0]                BDXEN_14_T;
   reg [0:0]                BACEN_15_T;
   reg [0:0]                BDMEN_16_T;
   reg [1:0]                BDPAT_18_17_T;
   reg [3:0]                BDXSEL_22_19_T;
   reg [1:0]                BCKSEL_24_23_T;
   reg [1:0]                BCCSEL_26_25_T;
   reg [4:0]                BISTRR_RESERVED_31_27_T;

//BISTWCR
   reg [15:0]               BWCNT_15_0_T;
   reg [15:0]               BISTWCR_RESERVED_31_16_T;
  
//BISTMSKR0
   reg [15:0]               AMSK_15_0_T;
   reg [2:0]                BAMSK_18_16_T;
   reg [0:0]                WEMSK_19_T;
   reg [3:0]                CKEMSK_23_20_T;
   reg [3:0]                CSMSK_27_24_T;
   reg [3:0]                ODTMSK_31_28_T;
  
//BISTMSKR1
   reg [0:0]                RASMSK_0_T;
   reg [0:0]                CASMSK_1_T;
   reg [24:0]               BISTMSKR1_RESERVED_26_2_T;
   reg [0:0]                PARMSK_27_T;   
   reg [3:0]                DMMSK_31_28_T;

//BISTMSKR2
   reg [31:0]               DQMSK_31_0_T;
  
//BISTLSR
   reg [31:0]               LFSR_SEED_31_0_T;
  
//BISTAR0
   reg [11:0]               BCOL_11_0_T;
   reg [15:0]               BROW_27_12_T;
   reg [2:0]                BBANK_30_28_T;
   reg [0:0]                BISTAR0_RESERVED_31_T;
  
//BISTAR1
   reg [1:0]                BRANK_1_0_T;
   reg [1:0]                BMRANK_3_2_T;
   reg [11:0]               BAINC_15_4_T;
   reg [0:0]                BISTAR1_RESERVED_31_16_T;

//BISTAR2
   reg [11:0]               BMCOL_11_0_T;
   reg [15:0]               BMROW_27_12_T;
   reg [2:0]                BMBANK_30_28_T;
   reg [0:0]                BISTAR2_RESERVED_31_T;
  
//BISTUDPR
   reg [15:0]               BUDP0_15_0_T;
   reg [15:0]               BUPD1_31_16_T;
  
//BISTGSR
   reg [0:0]                BDONE_0_T;
   reg [0:0]                BACERR_1_T;
   reg [0:0]                BDXERR_2_T;
   reg [16:0]               BISTGSR_RESERVED_19_3_T;
   //reg [1:0]                PARBER_21_20_T;
   //reg [1:0]                TPDBER_23_22_T;
   reg [1:0]                DMBER_EVEN_1_BEAT_21_20_T;
   reg [1:0]                DMBER_EVEN_2_BEAT_23_22_T;
   reg [1:0]                DMBER_ODD_1_BEAT_25_24_T;
   reg [1:0]                DMBER_ODD_2_BEAT_27_26_T;
   reg [1:0]                RASBER_29_28_T;
   reg [1:0]                CASBER_31_30_T;

//BISTWER
   reg [15:0]               ACWER_15_0_T;
   reg [15:0]               DXWER_31_16_T;
  
//BISTBER0
   reg [1:0]                ABER_A0_1_0_T;
   reg [1:0]                ABER_A1_3_2_T;
   reg [1:0]                ABER_A2_5_4_T;
   reg [1:0]                ABER_A3_7_6_T;
   reg [1:0]                ABER_A4_9_8_T;
   reg [1:0]                ABER_A5_11_10_T;
   reg [1:0]                ABER_A6_13_12_T;
   reg [1:0]                ABER_A7_15_14_T;
   reg [1:0]                ABER_A8_17_16_T;
   reg [1:0]                ABER_A9_19_18_T;
   reg [1:0]                ABER_A10_21_20_T;
   reg [1:0]                ABER_A11_23_22_T;
   reg [1:0]                ABER_A12_25_24_T;
   reg [1:0]                ABER_A13_27_26_T;
   reg [1:0]                ABER_A14_29_28_T;
   reg [1:0]                ABER_A15_31_30_T;
  
//BISTBER1
   reg [1:0]                BABER_BA0_1_0_T;  
   reg [1:0]                BABER_BA0_3_2_T;  
   reg [1:0]                BABER_BA0_5_4_T;  
   reg [1:0]                WEBER_7_6_T;  
   reg [1:0]                CKEBER_CK0_9_8_T;  
   reg [1:0]                CKEBER_CK1_11_10_T;
   reg [1:0]                CKEBER_CK2_13_12_T;
   reg [1:0]                CKEBER_CK3_15_14_T;
   reg [1:0]                CSBER_CS0_17_16_T;
   reg [1:0]                CSBER_CS1_19_18_T;
   reg [1:0]                CSBER_CS2_21_20_T;
   reg [1:0]                CSBER_CS3_23_22_T;
   reg [1:0]                ODTBER_ODT0_25_24_T;
   reg [1:0]                ODTBER_ODT1_27_26_T;
   reg [1:0]                ODTBER_ODT2_29_28_T;
   reg [1:0]                ODTBER_ODT3_31_30_T;
  
//BISTBER2
   reg [1:0]                DQBER0_DQ_BIT0_RISEEDGE_1_0_T;   
   reg [1:0]                DQBER0_DQ_BIT1_RISEEDGE_3_2_T;   
   reg [1:0]                DQBER0_DQ_BIT2_RISEEDGE_5_4_T;   
   reg [1:0]                DQBER0_DQ_BIT3_RISEEDGE_7_6_T;   
   reg [1:0]                DQBER0_DQ_BIT4_RISEEDGE_9_8_T;   
   reg [1:0]                DQBER0_DQ_BIT5_RISEEDGE_11_10_T; 
   reg [1:0]                DQBER0_DQ_BIT6_RISEEDGE_13_12_T; 
   reg [1:0]                DQBER0_DQ_BIT7_RISEEDGE_15_14_T; 
   reg [1:0]                DQBER0_DQ_BIT0_FALLEDGE_17_16_T; 
   reg [1:0]                DQBER0_DQ_BIT1_FALLEDGE_19_18_T; 
   reg [1:0]                DQBER0_DQ_BIT2_FALLEDGE_21_20_T;
   reg [1:0]                DQBER0_DQ_BIT3_FALLEDGE_23_22_T;
   reg [1:0]                DQBER0_DQ_BIT4_FALLEDGE_25_24_T;
   reg [1:0]                DQBER0_DQ_BIT5_FALLEDGE_27_26_T;
   reg [1:0]                DQBER0_DQ_BIT6_FALLEDGE_29_28_T;
   reg [1:0]                DQBER0_DQ_BIT7_FALLEDGE_31_30_T;

//BISTBER3
   reg [1:0]                DQBER1_DQ_BIT0_RISEEDGE_1_0_T;   
   reg [1:0]                DQBER1_DQ_BIT1_RISEEDGE_3_2_T;   
   reg [1:0]                DQBER1_DQ_BIT2_RISEEDGE_5_4_T;   
   reg [1:0]                DQBER1_DQ_BIT3_RISEEDGE_7_6_T;   
   reg [1:0]                DQBER1_DQ_BIT4_RISEEDGE_9_8_T;   
   reg [1:0]                DQBER1_DQ_BIT5_RISEEDGE_11_10_T; 
   reg [1:0]                DQBER1_DQ_BIT6_RISEEDGE_13_12_T; 
   reg [1:0]                DQBER1_DQ_BIT7_RISEEDGE_15_14_T; 
   reg [1:0]                DQBER1_DQ_BIT0_FALLEDGE_17_16_T; 
   reg [1:0]                DQBER1_DQ_BIT1_FALLEDGE_19_18_T; 
   reg [1:0]                DQBER1_DQ_BIT2_FALLEDGE_21_20_T;
   reg [1:0]                DQBER1_DQ_BIT3_FALLEDGE_23_22_T;
   reg [1:0]                DQBER1_DQ_BIT4_FALLEDGE_25_24_T;
   reg [1:0]                DQBER1_DQ_BIT5_FALLEDGE_27_26_T;
   reg [1:0]                DQBER1_DQ_BIT6_FALLEDGE_29_28_T;
   reg [1:0]                DQBER1_DQ_BIT7_FALLEDGE_31_30_T;
  
//BISTWCSR
   reg [15:0]               ACWCNT_15_0_T;
   reg [15:0]               DXWCNT_31_16_T;
  
//BISTFWR0
   reg [15:0]               AWEBS_15_0_T;
   reg [2:0]                BAWEBS_18_16_T;
   reg [0:0]                WEWEBS_19_T;
   reg [3:0]                CKEWEBS_23_20_T;
   reg [3:0]                CSWEBS_27_24_T;
   reg [3:0]                ODTWEBS_31_28_T;
  
//BISTFWR1
   reg [0:0]                RASWEBS_0_T;
   reg [0:0]                CASWEBS_1_T;
   reg [25:0]               BISTFWR1_RESERVED_27_2_T;
   reg [3:0]                DMWEBS_31_28_T;
  
//BISTFWR2
   reg [0:0]                DQBER0_EVEN_DQ_BIT0_RISEEDGE_0_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT1_RISEEDGE_1_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT2_RISEEDGE_2_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT3_RISEEDGE_3_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT4_RISEEDGE_4_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT5_RISEEDGE_5_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT6_RISEEDGE_6_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT7_RISEEDGE_7_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT0_FALLEDGE_8_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT1_FALLEDGE_9_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT2_FALLEDGE_10_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT3_FALLEDGE_11_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT4_FALLEDGE_12_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT5_FALLEDGE_13_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT6_FALLEDGE_14_T;
   reg [0:0]                DQBER0_EVEN_DQ_BIT7_FALLEDGE_15_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT0_RISEEDGE_16_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT1_RISEEDGE_17_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT2_RISEEDGE_18_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT3_RISEEDGE_19_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT4_RISEEDGE_20_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT5_RISEEDGE_21_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT6_RISEEDGE_22_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT7_RISEEDGE_23_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT0_FALLEDGE_24_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT1_FALLEDGE_25_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT2_FALLEDGE_26_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT3_FALLEDGE_27_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT4_FALLEDGE_28_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT5_FALLEDGE_29_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT6_FALLEDGE_30_T;
   reg [0:0]                DQBER0_ODD_DQ_BIT7_FALLEDGE_31_T;
    

//----   

//GPR0
   reg [31:0]               GPR0_31_0_T;

//GPR1
   reg [31:0]               GPR1_31_0_T;
  
   
//ZQ0CR0
   reg [27:0]               ZDATA_27_0_r0_T;
   reg [0:0]                ZDEN_28_r0_T;
   reg [0:0]                ZCALBYP_29_r0_T;
   reg [0:0]                ZCALEN_30_r0_T;
   reg [0:0]                ZQPD_31_r0_T;      
   
//ZQ0CR1
   reg [7:0]                ZPROG_7_0_r0_T;
   reg [23:0]               ZQ0CR1_RESERVED_31_8_r0_T;      
   
//ZQ0SR0
   reg [27:0]               ZCTRL_27_0_r0_T;
   reg [1:0]                ZQ0SR0_RESERVED_29_28_r0_T;
   reg [0:0]                ZERR_30_r0_T;
   reg [0:0]                ZDONE_31_r0_T;   

//ZQ0SR1
   reg [1:0]                ZPD_1_0_r0_T;
   reg [1:0]                ZPU_3_2_r0_T;
   reg [1:0]                OPD_5_4_r0_T;
   reg [1:0]                OPU_7_6_r0_T;
   reg [23:0]               ZQ0SR1_RESERVED_31_8_r0_T;

//ZQ1CR0
   reg [27:0]               ZDATA_27_0_r1_T;
   reg [0:0]                ZDEN_28_r1_T;
   reg [0:0]                ZCALBYP_29_r1_T;
   reg [0:0]                ZCALEN_30_r1_T;
   reg [0:0]                ZQPD_31_r1_T;      
   
//ZQ1CR1
   reg [7:0]                ZPROG_7_0_r1_T;
   reg [23:0]               ZQ1CR1_RESERVED_31_8_r1_T;      
   
//ZQ1SR0
   reg [27:0]               ZCTRL_27_0_r1_T;
   reg [1:0]                ZQ1SR0_RESERVED_29_28_r1_T;
   reg [0:0]                ZERR_30_r1_T;
   reg [0:0]                ZDONE_31_r1_T;   

//ZQ1SR1
   reg [1:0]                ZPD_1_0_r1_T;
   reg [1:0]                ZPU_3_2_r1_T;
   reg [1:0]                OPD_5_4_r1_T;
   reg [1:0]                OPU_7_6_r1_T;
   reg [23:0]               ZQ1SR1_RESERVED_31_8_r1_T;

//ZQ2CR0
   reg [27:0]               ZDATA_27_0_r2_T;
   reg [0:0]                ZDEN_28_r2_T;
   reg [0:0]                ZCALBYP_29_r2_T;
   reg [0:0]                ZCALEN_30_r2_T;
   reg [0:0]                ZQPD_31_r2_T;      
   
//ZQ2CR1
   reg [7:0]                ZPROG_7_0_r2_T;
   reg [23:0]               ZQ2CR1_RESERVED_31_8_r2_T;      
   
//ZQ2SR0
   reg [27:0]               ZCTRL_27_0_r2_T;
   reg [1:0]                ZQ2SR0_RESERVED_29_28_r2_T;
   reg [0:0]                ZERR_30_r2_T;
   reg [0:0]                ZDONE_31_r2_T;   

//ZQ2SR1
   reg [1:0]                ZPD_1_0_r2_T;
   reg [1:0]                ZPU_3_2_r2_T;
   reg [1:0]                OPD_5_4_r2_T;
   reg [1:0]                OPU_7_6_r2_T;
   reg [23:0]               ZQ2SR1_RESERVED_31_8_r2_T;

//ZQ3CR0
   reg [27:0]               ZDATA_27_0_r3_T;
   reg [0:0]                ZDEN_28_r3_T;
   reg [0:0]                ZCALBYP_29_r3_T;
   reg [0:0]                ZCALEN_30_r3_T;
   reg [0:0]                ZQPD_31_r3_T;      
   
//ZQ3CR1
   reg [7:0]                ZPROG_7_0_r3_T;
   reg [23:0]               ZQ3CR1_RESERVED_31_8_r3_T;      
   
//ZQ3SR0
   reg [27:0]               ZCTRL_27_0_r3_T;
   reg [1:0]                ZQ3SR0_RESERVED_29_28_r3_T;
   reg [0:0]                ZERR_30_r3_T;
   reg [0:0]                ZDONE_31_r3_T;   

//ZQ3SR1
   reg [1:0]                ZPD_1_0_r3_T;
   reg [1:0]                ZPU_3_2_r3_T;
   reg [1:0]                OPD_5_4_r3_T;
   reg [1:0]                OPU_7_6_r3_T;
   reg [23:0]               ZQ3SR1_RESERVED_31_8_r3_T;



//DX0GCR   
   reg [0:0]                DXEN_0_dx0_T;
   reg [0:0]                DQSODT_1_dx0_T;
   reg [0:0]                DQODT_2_dx0_T;
   reg [0:0]                DXIOM_3_dx0_T;
   reg [0:0]                DXPDD_4_dx0_T;
   reg [0:0]                DXPDR_5_dx0_T;
   reg [0:0]                DQSRPD_6_dx0_T;
   reg [0:0]                DSEN_8_7_dx0_T;
   reg [0:0]                DQSRTT_9_dx0_T;
   reg [0:0]                DQRTT_10_dx0_T;
   reg [1:0]                RTTOH_12_11_dx0_T;
   reg [0:0]                RTTOAL_13_dx0_T;
   reg [1:0]                DXOEO_15_14_dx0_T;
   reg [0:0]                PLLRST_16_dx0_T;
   reg [0:0]                PLLPD_17_dx0_T;
   reg [0:0]                GSHIFT_18_dx0_T;
   reg [0:0]                PLLBYP_19_dx0_T;
   reg [5:0]                DX0GCR_RESERVED_25_20_dx0_T;
   reg [3:0]                WLRKEN_29_26_dx0_T;
   reg [0:0]                MDLEN_30_dx0_T;
   reg [0:0]                CALBYP_31_dx0_T;
//DX0GSR0
   reg [0:0]                WDQCAL_0_dx0_T;
   reg [0:0]                RDQSCAL_1_dx0_T;
   reg [0:0]                RDQSNCAL_2_dx0_T;
   reg [0:0]                GDQSCAL_3_dx0_T;
   reg [0:0]                WLCAL_4_dx0_T;
   reg [0:0]                WLDONE_5_dx0_T;
   reg [0:0]                WLERR_6_dx0_T;
   reg [7:0]                WLPRD_14_7_dx0_T;
   reg [0:0]                DPLOCK_15_dx0_T;
   reg [7:0]                GDQSPRD_23_16_dx0_T;
   reg [3:0]                QSGERR_27_24_dx0_T;
   reg [0:0]                WLDQ_28_dx0_T;
   reg [2:0]                DX0GSR0_RESERVED_31_29_dx0_T;
//DX0GSR1 
   reg [0:0]                DLTDONE_0_dx0_T;
   reg [23:0]               DLTCODE_24_1_dx0_T;
   reg [6:0]                DX0GSR1_RESERVED_31_25_dx0_T;
//DX0GSR2
   reg [0:0]                RDERR_0_dx0_T;
   reg [0:0]                RDWN_1_dx0_T;
   reg [0:0]                WDERR_2_dx0_T;
   reg [0:0]                WDWN_3_dx0_T;
   reg [0:0]                REERR_4_dx0_T;
   reg [0:0]                REWN_5_dx0_T;
   reg [0:0]                WEERR_6_dx0_T;
   reg [0:0]                WEWN_7_dx0_T;
   reg [3:0]                ESTAT_11_8_dx0_T;
   reg [19:0]               DX0GSR2_RESERVED_31_12_dx0_T;  
//DX0BDLR0
   reg [5:0]                DQ0WBD_5_0_dx0_T;
   reg [5:0]                DQ1WBD_11_6_dx0_T;
   reg [5:0]                DQ2WBD_17_12_dx0_T;
   reg [5:0]                DQ3WBD_23_18_dx0_T;
   reg [5:0]                DQ4WBD_29_24_dx0_T;
   reg [1:0]                DX0BDLR0_RESERVED_31_30_dx0_T; 
//DX0BDLR1
   reg [5:0]                DQ5WBD_5_0_dx0_T;
   reg [5:0]                DQ6WBD_11_6_dx0_T;
   reg [5:0]                DQ7WBD_17_12_dx0_T;
   reg [5:0]                DMWBD_23_18_dx0_T;
   reg [5:0]                DSWBD_29_24_dx0_T;
   reg [1:0]                DX0BDLR1_RESERVED_31_30_dx0_T;    
//DX0BDLR2
   reg [5:0]                DSOEBD_5_0_dx0_T;
   reg [5:0]                DQOEBD_11_6_dx0_T;
   reg [5:0]                DSRBD_17_12_dx0_T;
   reg [5:0]                DSNRBD_23_18_dx0_T;
   reg [7:0]                DX0BDLR2_RESERVED_31_24_dx0_T;   
//DX0BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx0_T;
   reg [5:0]                DQ1RBD_11_6_dx0_T;
   reg [5:0]                DQ2RBD_17_12_dx0_T;
   reg [5:0]                DQ3RBD_23_18_dx0_T;
   reg [5:0]                DQ4RBD_29_24_dx0_T;
   reg [1:0]                DX0BDLR3_RESERVED_31_30_dx0_T;    
//DX0BDLR4
   reg [5:0]                DQ5RBD_5_0_dx0_T;
   reg [5:0]                DQ6RBD_11_6_dx0_T;
   reg [5:0]                DQ7RBD_17_12_dx0_T;
   reg [5:0]                DMRBD_23_18_dx0_T;
   reg [7:0]                DX0BDLR4_RESERVED_31_24_dx0_T;     
//DX0LCDLR0
   reg [7:0]                R0WLD_7_0_dx0_T;
   reg [7:0]                R1WLD_15_8_dx0_T;   
   reg [7:0]                R2WLD_23_16_dx0_T;
   reg [7:0]                R3WLD_31_24_dx0_T;
//DX0LCDLR1
   reg [7:0]                WDQD_7_0_dx0_T;
   reg [7:0]                RDQSD_15_8_dx0_T;   
   reg [7:0]                RDQSND_23_16_dx0_T;   
   reg [7:0]                DX0LCDLR1_RESERVED_31_24_dx0_T;
//DX0LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx0_T;
   reg [7:0]                R1DQSGD_15_8_dx0_T;   
   reg [7:0]                R2DQSGD_23_16_dx0_T;
   reg [7:0]                R3DQSGD_31_24_dx0_T;   
//DX0MDLR
   reg [7:0]                IPRD_7_0_dx0_T;
   reg [7:0]                TPRD_15_8_dx0_T;
   reg [7:0]                MDLD_23_16_dx0_T;  
   reg [7:0]                DX0MDLR_RESERVED_31_24_dx0_T;  
//DX0GTR       
   reg [2:0]                R0DGSL_2_0_dx0_T;
   reg [2:0]                R1DGSL_5_3_dx0_T;
   reg [2:0]                R2DGSL_8_6_dx0_T;
   reg [2:0]                R3DGSL_11_9_dx0_T;
   reg [1:0]                R0WLSL_13_12_dx0_T;
   reg [1:0]                R1WLSL_15_14_dx0_T;
   reg [1:0]                R2WLSL_17_16_dx0_T;
   reg [1:0]                R3WLSL_19_18_dx0_T;
   reg [11:0]               DX0GTR_RESERVED_31_20_dx0_T;  
 
//----
//DX1GCR   
   reg [0:0]                DXEN_0_dx1_T;
   reg [0:0]                DQSODT_1_dx1_T;
   reg [0:0]                DQODT_2_dx1_T;
   reg [0:0]                DXIOM_3_dx1_T;
   reg [0:0]                DXPDD_4_dx1_T;
   reg [0:0]                DXPDR_5_dx1_T;
   reg [0:0]                DQSRPD_6_dx1_T;
   reg [0:0]                DSEN_8_7_dx1_T;
   reg [0:0]                DQSRTT_9_dx1_T;
   reg [0:0]                DQRTT_10_dx1_T;
   reg [1:0]                RTTOH_12_11_dx1_T;
   reg [0:0]                RTTOAL_13_dx1_T;
   reg [1:0]                DXOEO_15_14_dx1_T;
   reg [0:0]                PLLRST_16_dx1_T;
   reg [0:0]                PLLPD_17_dx1_T;
   reg [0:0]                GSHIFT_18_dx1_T;
   reg [0:0]                PLLBYP_19_dx1_T;
   reg [5:0]                DX1GCR_RESERVED_25_20_dx1_T;
   reg [3:0]                WLRKEN_29_26_dx1_T;
   reg [0:0]                MDLEN_30_dx1_T;
   reg [0:0]                CALBYP_31_dx1_T;
//DX1GSR0
   reg [0:0]                WDQCAL_0_dx1_T;
   reg [0:0]                RDQSCAL_1_dx1_T;
   reg [0:0]                RDQSNCAL_2_dx1_T;
   reg [0:0]                GDQSCAL_3_dx1_T;
   reg [0:0]                WLCAL_4_dx1_T;
   reg [0:0]                WLDONE_5_dx1_T;
   reg [0:0]                WLERR_6_dx1_T;
   reg [7:0]                WLPRD_14_7_dx1_T;
   reg [0:0]                DPLOCK_15_dx1_T;
   reg [7:0]                GDQSPRD_23_16_dx1_T;
   reg [3:0]                QSGERR_27_24_dx1_T;
   reg [0:0]                WLDQ_28_dx1_T;
   reg [2:0]                DX1GSR0_RESERVED_31_29_dx1_T;
//DX1GSR1 
   reg [0:0]                DLTDONE_0_dx1_T;
   reg [23:0]               DLTCODE_24_1_dx1_T;
   reg [6:0]                DX1GSR1_RESERVED_31_25_dx1_T;
//DX1GSR2
   reg [0:0]                RDERR_0_dx1_T;
   reg [0:0]                RDWN_1_dx1_T;
   reg [0:0]                WDERR_2_dx1_T;
   reg [0:0]                WDWN_3_dx1_T;
   reg [0:0]                REERR_4_dx1_T;
   reg [0:0]                REWN_5_dx1_T;
   reg [0:0]                WEERR_6_dx1_T;
   reg [0:0]                WEWN_7_dx1_T;
   reg [3:0]                ESTAT_11_8_dx1_T;
   reg [19:0]               DX1GSR2_RESERVED_31_12_dx1_T;  
//DX1BDLR0
   reg [5:0]                DQ0WBD_5_0_dx1_T;
   reg [5:0]                DQ1WBD_11_6_dx1_T;
   reg [5:0]                DQ2WBD_17_12_dx1_T;
   reg [5:0]                DQ3WBD_23_18_dx1_T;
   reg [5:0]                DQ4WBD_29_24_dx1_T;
   reg [1:0]                DX1BDLR0_RESERVED_31_30_dx1_T; 
//DX1BDLR1
   reg [5:0]                DQ5WBD_5_0_dx1_T;
   reg [5:0]                DQ6WBD_11_6_dx1_T;
   reg [5:0]                DQ7WBD_17_12_dx1_T;
   reg [5:0]                DMWBD_23_18_dx1_T;
   reg [5:0]                DSWBD_29_24_dx1_T;
   reg [1:0]                DX1BDLR1_RESERVED_31_30_dx1_T;    
//DX1BDLR2
   reg [5:0]                DSOEBD_5_0_dx1_T;
   reg [5:0]                DQOEBD_11_6_dx1_T;
   reg [5:0]                DSRBD_17_12_dx1_T;
   reg [5:0]                DSNRBD_23_18_dx1_T;
   reg [7:0]                DX1BDLR2_RESERVED_31_24_dx1_T;   
//DX1BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx1_T;
   reg [5:0]                DQ1RBD_11_6_dx1_T;
   reg [5:0]                DQ2RBD_17_12_dx1_T;
   reg [5:0]                DQ3RBD_23_18_dx1_T;
   reg [5:0]                DQ4RBD_29_24_dx1_T;
   reg [1:0]                DX1BDLR3_RESERVED_31_30_dx1_T;    
//DX1BDLR4
   reg [5:0]                DQ5RBD_5_0_dx1_T;
   reg [5:0]                DQ6RBD_11_6_dx1_T;
   reg [5:0]                DQ7RBD_17_12_dx1_T;
   reg [5:0]                DMRBD_23_18_dx1_T;
   reg [7:0]                DX1BDLR4_RESERVED_31_24_dx1_T;     
//DX1LCDLR0
   reg [7:0]                R0WLD_7_0_dx1_T;
   reg [7:0]                R1WLD_15_8_dx1_T;   
   reg [7:0]                R2WLD_23_16_dx1_T;
   reg [7:0]                R3WLD_31_24_dx1_T;
//DX1LCDLR1
   reg [7:0]                WDQD_7_0_dx1_T;
   reg [7:0]                RDQSD_15_8_dx1_T;   
   reg [7:0]                RDQSND_23_16_dx1_T;   
   reg [7:0]                DX1LCDLR1_RESERVED_31_24_dx1_T;
//DX1LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx1_T;
   reg [7:0]                R1DQSGD_15_8_dx1_T;   
   reg [7:0]                R2DQSGD_23_16_dx1_T;
   reg [7:0]                R3DQSGD_31_24_dx1_T;   
//DX1MDLR
   reg [7:0]                IPRD_7_0_dx1_T;
   reg [7:0]                TPRD_15_8_dx1_T;
   reg [7:0]                MDLD_23_16_dx1_T;  
   reg [7:0]                DX1MDLR_RESERVED_31_24_dx1_T;  
//DX1GTR       
   reg [2:0]                R0DGSL_2_0_dx1_T;
   reg [2:0]                R1DGSL_5_3_dx1_T;
   reg [2:0]                R2DGSL_8_6_dx1_T;
   reg [2:0]                R3DGSL_11_9_dx1_T;
   reg [1:0]                R0WLSL_13_12_dx1_T;
   reg [1:0]                R1WLSL_15_14_dx1_T;
   reg [1:0]                R2WLSL_17_16_dx1_T;
   reg [1:0]                R3WLSL_19_18_dx1_T;
   reg [11:0]               DX1GTR_RESERVED_31_20_dx1_T;
   
//----
//DX2GCR   
   reg [0:0]                DXEN_0_dx2_T;
   reg [0:0]                DQSODT_1_dx2_T;
   reg [0:0]                DQODT_2_dx2_T;
   reg [0:0]                DXIOM_3_dx2_T;
   reg [0:0]                DXPDD_4_dx2_T;
   reg [0:0]                DXPDR_5_dx2_T;
   reg [0:0]                DQSRPD_6_dx2_T;
   reg [0:0]                DSEN_8_7_dx2_T;
   reg [0:0]                DQSRTT_9_dx2_T;
   reg [0:0]                DQRTT_10_dx2_T;
   reg [1:0]                RTTOH_12_11_dx2_T;
   reg [0:0]                RTTOAL_13_dx2_T;
   reg [1:0]                DXOEO_15_14_dx2_T;
   reg [0:0]                PLLRST_16_dx2_T;
   reg [0:0]                PLLPD_17_dx2_T;
   reg [0:0]                GSHIFT_18_dx2_T;
   reg [0:0]                PLLBYP_19_dx2_T;
   reg [5:0]                DX2GCR_RESERVED_25_20_dx2_T;
   reg [3:0]                WLRKEN_29_26_dx2_T;
   reg [0:0]                MDLEN_30_dx2_T;
   reg [0:0]                CALBYP_31_dx2_T;
//DX2GSR0
   reg [0:0]                WDQCAL_0_dx2_T;
   reg [0:0]                RDQSCAL_1_dx2_T;
   reg [0:0]                RDQSNCAL_2_dx2_T;
   reg [0:0]                GDQSCAL_3_dx2_T;
   reg [0:0]                WLCAL_4_dx2_T;
   reg [0:0]                WLDONE_5_dx2_T;
   reg [0:0]                WLERR_6_dx2_T;
   reg [7:0]                WLPRD_14_7_dx2_T;
   reg [0:0]                DPLOCK_15_dx2_T;
   reg [7:0]                GDQSPRD_23_16_dx2_T;
   reg [3:0]                QSGERR_27_24_dx2_T;
   reg [0:0]                WLDQ_28_dx2_T;
   reg [2:0]                DX2GSR0_RESERVED_31_29_dx2_T;
//DX2GSR1 
   reg [0:0]                DLTDONE_0_dx2_T;
   reg [23:0]               DLTCODE_24_1_dx2_T;
   reg [6:0]                DX2GSR1_RESERVED_31_25_dx2_T;
//DX2GSR2
   reg [0:0]                RDERR_0_dx2_T;
   reg [0:0]                RDWN_1_dx2_T;
   reg [0:0]                WDERR_2_dx2_T;
   reg [0:0]                WDWN_3_dx2_T;
   reg [0:0]                REERR_4_dx2_T;
   reg [0:0]                REWN_5_dx2_T;
   reg [0:0]                WEERR_6_dx2_T;
   reg [0:0]                WEWN_7_dx2_T;
   reg [3:0]                ESTAT_11_8_dx2_T;
   reg [19:0]               DX2GSR2_RESERVED_31_12_dx2_T;  
//DX2BDLR0
   reg [5:0]                DQ0WBD_5_0_dx2_T;
   reg [5:0]                DQ1WBD_11_6_dx2_T;
   reg [5:0]                DQ2WBD_17_12_dx2_T;
   reg [5:0]                DQ3WBD_23_18_dx2_T;
   reg [5:0]                DQ4WBD_29_24_dx2_T;
   reg [1:0]                DX2BDLR0_RESERVED_31_30_dx2_T; 
//DX2BDLR1
   reg [5:0]                DQ5WBD_5_0_dx2_T;
   reg [5:0]                DQ6WBD_11_6_dx2_T;
   reg [5:0]                DQ7WBD_17_12_dx2_T;
   reg [5:0]                DMWBD_23_18_dx2_T;
   reg [5:0]                DSWBD_29_24_dx2_T;
   reg [1:0]                DX2BDLR1_RESERVED_31_30_dx2_T;    
//DX2BDLR2
   reg [5:0]                DSOEBD_5_0_dx2_T;
   reg [5:0]                DQOEBD_11_6_dx2_T;
   reg [5:0]                DSRBD_17_12_dx2_T;
   reg [5:0]                DSNRBD_23_18_dx2_T;
   reg [7:0]                DX2BDLR2_RESERVED_31_24_dx2_T;   
//DX2BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx2_T;
   reg [5:0]                DQ1RBD_11_6_dx2_T;
   reg [5:0]                DQ2RBD_17_12_dx2_T;
   reg [5:0]                DQ3RBD_23_18_dx2_T;
   reg [5:0]                DQ4RBD_29_24_dx2_T;
   reg [1:0]                DX2BDLR3_RESERVED_31_30_dx2_T;    
//DX2BDLR4
   reg [5:0]                DQ5RBD_5_0_dx2_T;
   reg [5:0]                DQ6RBD_11_6_dx2_T;
   reg [5:0]                DQ7RBD_17_12_dx2_T;
   reg [5:0]                DMRBD_23_18_dx2_T;
   reg [7:0]                DX2BDLR4_RESERVED_31_24_dx2_T;     
//DX2LCDLR0
   reg [7:0]                R0WLD_7_0_dx2_T;
   reg [7:0]                R1WLD_15_8_dx2_T;   
   reg [7:0]                R2WLD_23_16_dx2_T;
   reg [7:0]                R3WLD_31_24_dx2_T;
//DX2LCDLR1
   reg [7:0]                WDQD_7_0_dx2_T;
   reg [7:0]                RDQSD_15_8_dx2_T;   
   reg [7:0]                RDQSND_23_16_dx2_T;   
   reg [7:0]                DX2LCDLR1_RESERVED_31_24_dx2_T;
//DX2LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx2_T;
   reg [7:0]                R1DQSGD_15_8_dx2_T;   
   reg [7:0]                R2DQSGD_23_16_dx2_T;
   reg [7:0]                R3DQSGD_31_24_dx2_T;   
//DX2MDLR
   reg [7:0]                IPRD_7_0_dx2_T;
   reg [7:0]                TPRD_15_8_dx2_T;
   reg [7:0]                MDLD_23_16_dx2_T;  
   reg [7:0]                DX2MDLR_RESERVED_31_24_dx2_T;  
//DX2GTR       
   reg [2:0]                R0DGSL_2_0_dx2_T;
   reg [2:0]                R1DGSL_5_3_dx2_T;
   reg [2:0]                R2DGSL_8_6_dx2_T;
   reg [2:0]                R3DGSL_11_9_dx2_T;
   reg [1:0]                R0WLSL_13_12_dx2_T;
   reg [1:0]                R1WLSL_15_14_dx2_T;
   reg [1:0]                R2WLSL_17_16_dx2_T;
   reg [1:0]                R3WLSL_19_18_dx2_T;
   reg [11:0]               DX2GTR_RESERVED_31_20_dx2_T;
   
//----
//DX3GCR   
   reg [0:0]                DXEN_0_dx3_T;
   reg [0:0]                DQSODT_1_dx3_T;
   reg [0:0]                DQODT_2_dx3_T;
   reg [0:0]                DXIOM_3_dx3_T;
   reg [0:0]                DXPDD_4_dx3_T;
   reg [0:0]                DXPDR_5_dx3_T;
   reg [0:0]                DQSRPD_6_dx3_T;
   reg [0:0]                DSEN_8_7_dx3_T;
   reg [0:0]                DQSRTT_9_dx3_T;
   reg [0:0]                DQRTT_10_dx3_T;
   reg [1:0]                RTTOH_12_11_dx3_T;
   reg [0:0]                RTTOAL_13_dx3_T;
   reg [1:0]                DXOEO_15_14_dx3_T;
   reg [0:0]                PLLRST_16_dx3_T;
   reg [0:0]                PLLPD_17_dx3_T;
   reg [0:0]                GSHIFT_18_dx3_T;
   reg [0:0]                PLLBYP_19_dx3_T;
   reg [5:0]                DX3GCR_RESERVED_25_20_dx3_T;
   reg [3:0]                WLRKEN_29_26_dx3_T;
   reg [0:0]                MDLEN_30_dx3_T;
   reg [0:0]                CALBYP_31_dx3_T;
//DX3GSR0
   reg [0:0]                WDQCAL_0_dx3_T;
   reg [0:0]                RDQSCAL_1_dx3_T;
   reg [0:0]                RDQSNCAL_2_dx3_T;
   reg [0:0]                GDQSCAL_3_dx3_T;
   reg [0:0]                WLCAL_4_dx3_T;
   reg [0:0]                WLDONE_5_dx3_T;
   reg [0:0]                WLERR_6_dx3_T;
   reg [7:0]                WLPRD_14_7_dx3_T;
   reg [0:0]                DPLOCK_15_dx3_T;
   reg [7:0]                GDQSPRD_23_16_dx3_T;
   reg [3:0]                QSGERR_27_24_dx3_T;
   reg [0:0]                WLDQ_28_dx3_T;
   reg [2:0]                DX3GSR0_RESERVED_31_29_dx3_T;
//DX3GSR1 
   reg [0:0]                DLTDONE_0_dx3_T;
   reg [23:0]               DLTCODE_24_1_dx3_T;
   reg [6:0]                DX3GSR1_RESERVED_31_25_dx3_T;
//DX3GSR2
   reg [0:0]                RDERR_0_dx3_T;
   reg [0:0]                RDWN_1_dx3_T;
   reg [0:0]                WDERR_2_dx3_T;
   reg [0:0]                WDWN_3_dx3_T;
   reg [0:0]                REERR_4_dx3_T;
   reg [0:0]                REWN_5_dx3_T;
   reg [0:0]                WEERR_6_dx3_T;
   reg [0:0]                WEWN_7_dx3_T;
   reg [3:0]                ESTAT_11_8_dx3_T;
   reg [19:0]               DX3GSR2_RESERVED_31_12_dx3_T;    
//DX3BDLR0
   reg [5:0]                DQ0WBD_5_0_dx3_T;
   reg [5:0]                DQ1WBD_11_6_dx3_T;
   reg [5:0]                DQ2WBD_17_12_dx3_T;
   reg [5:0]                DQ3WBD_23_18_dx3_T;
   reg [5:0]                DQ4WBD_29_24_dx3_T;
   reg [1:0]                DX3BDLR0_RESERVED_31_30_dx3_T; 
//DX3BDLR1
   reg [5:0]                DQ5WBD_5_0_dx3_T;
   reg [5:0]                DQ6WBD_11_6_dx3_T;
   reg [5:0]                DQ7WBD_17_12_dx3_T;
   reg [5:0]                DMWBD_23_18_dx3_T;
   reg [5:0]                DSWBD_29_24_dx3_T;
   reg [1:0]                DX3BDLR1_RESERVED_31_30_dx3_T;    
//DX3BDLR2
   reg [5:0]                DSOEBD_5_0_dx3_T;
   reg [5:0]                DQOEBD_11_6_dx3_T;
   reg [5:0]                DSRBD_17_12_dx3_T;
   reg [5:0]                DSNRBD_23_18_dx3_T;
   reg [7:0]                DX3BDLR2_RESERVED_31_24_dx3_T;   
//DX3BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx3_T;
   reg [5:0]                DQ1RBD_11_6_dx3_T;
   reg [5:0]                DQ2RBD_17_12_dx3_T;
   reg [5:0]                DQ3RBD_23_18_dx3_T;
   reg [5:0]                DQ4RBD_29_24_dx3_T;
   reg [1:0]                DX3BDLR3_RESERVED_31_30_dx3_T;    
//DX3BDLR4
   reg [5:0]                DQ5RBD_5_0_dx3_T;
   reg [5:0]                DQ6RBD_11_6_dx3_T;
   reg [5:0]                DQ7RBD_17_12_dx3_T;
   reg [5:0]                DMRBD_23_18_dx3_T;
   reg [7:0]                DX3BDLR4_RESERVED_31_24_dx3_T;     
//DX3LCDLR0
   reg [7:0]                R0WLD_7_0_dx3_T;
   reg [7:0]                R1WLD_15_8_dx3_T;   
   reg [7:0]                R2WLD_23_16_dx3_T;
   reg [7:0]                R3WLD_31_24_dx3_T;
//DX3LCDLR1
   reg [7:0]                WDQD_7_0_dx3_T;
   reg [7:0]                RDQSD_15_8_dx3_T;   
   reg [7:0]                RDQSND_23_16_dx3_T;   
   reg [7:0]                DX3LCDLR1_RESERVED_31_24_dx3_T;
//DX3LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx3_T;
   reg [7:0]                R1DQSGD_15_8_dx3_T;   
   reg [7:0]                R2DQSGD_23_16_dx3_T;
   reg [7:0]                R3DQSGD_31_24_dx3_T;   
//DX3MDLR
   reg [7:0]                IPRD_7_0_dx3_T;
   reg [7:0]                TPRD_15_8_dx3_T;
   reg [7:0]                MDLD_23_16_dx3_T;  
   reg [7:0]                DX3MDLR_RESERVED_31_24_dx3_T;  
//DX3GTR       
   reg [2:0]                R0DGSL_2_0_dx3_T;
   reg [2:0]                R1DGSL_5_3_dx3_T;
   reg [2:0]                R2DGSL_8_6_dx3_T;
   reg [2:0]                R3DGSL_11_9_dx3_T;
   reg [1:0]                R0WLSL_13_12_dx3_T;
   reg [1:0]                R1WLSL_15_14_dx3_T;
   reg [1:0]                R2WLSL_17_16_dx3_T;
   reg [1:0]                R3WLSL_19_18_dx3_T;
   reg [11:0]               DX3GTR_RESERVED_31_20_dx3_T;
   
//----
//DX4GCR   
   reg [0:0]                DXEN_0_dx4_T;
   reg [0:0]                DQSODT_1_dx4_T;
   reg [0:0]                DQODT_2_dx4_T;
   reg [0:0]                DXIOM_3_dx4_T;
   reg [0:0]                DXPDD_4_dx4_T;
   reg [0:0]                DXPDR_5_dx4_T;
   reg [0:0]                DQSRPD_6_dx4_T;
   reg [0:0]                DSEN_8_7_dx4_T;
   reg [0:0]                DQSRTT_9_dx4_T;
   reg [0:0]                DQRTT_10_dx4_T;
   reg [1:0]                RTTOH_12_11_dx4_T;
   reg [0:0]                RTTOAL_13_dx4_T;
   reg [1:0]                DXOEO_15_14_dx4_T;
   reg [0:0]                PLLRST_16_dx4_T;
   reg [0:0]                PLLPD_17_dx4_T;
   reg [0:0]                GSHIFT_18_dx4_T;
   reg [0:0]                PLLBYP_19_dx4_T;
   reg [5:0]                DX4GCR_RESERVED_25_20_dx4_T;
   reg [3:0]                WLRKEN_29_26_dx4_T;
   reg [0:0]                MDLEN_30_dx4_T;
   reg [0:0]                CALBYP_31_dx4_T;
//DX4GSR0
   reg [0:0]                WDQCAL_0_dx4_T;
   reg [0:0]                RDQSCAL_1_dx4_T;
   reg [0:0]                RDQSNCAL_2_dx4_T;
   reg [0:0]                GDQSCAL_3_dx4_T;
   reg [0:0]                WLCAL_4_dx4_T;
   reg [0:0]                WLDONE_5_dx4_T;
   reg [0:0]                WLERR_6_dx4_T;
   reg [7:0]                WLPRD_14_7_dx4_T;
   reg [0:0]                DPLOCK_15_dx4_T;
   reg [7:0]                GDQSPRD_23_16_dx4_T;
   reg [3:0]                QSGERR_27_24_dx4_T;
   reg [0:0]                WLDQ_28_dx4_T;
   reg [2:0]                DX4GSR0_RESERVED_31_29_dx4_T;
//DX4GSR1 
   reg [0:0]                DLTDONE_0_dx4_T;
   reg [23:0]               DLTCODE_24_1_dx4_T;
   reg [6:0]                DX4GSR1_RESERVED_31_25_dx4_T;
//DX4GSR2
   reg [0:0]                RDERR_0_dx4_T;
   reg [0:0]                RDWN_1_dx4_T;
   reg [0:0]                WDERR_2_dx4_T;
   reg [0:0]                WDWN_3_dx4_T;
   reg [0:0]                REERR_4_dx4_T;
   reg [0:0]                REWN_5_dx4_T;
   reg [0:0]                WEERR_6_dx4_T;
   reg [0:0]                WEWN_7_dx4_T;
   reg [3:0]                ESTAT_11_8_dx4_T;
   reg [19:0]               DX4GSR2_RESERVED_31_12_dx4_T;    
//DX4BDLR0
   reg [5:0]                DQ0WBD_5_0_dx4_T;
   reg [5:0]                DQ1WBD_11_6_dx4_T;
   reg [5:0]                DQ2WBD_17_12_dx4_T;
   reg [5:0]                DQ3WBD_23_18_dx4_T;
   reg [5:0]                DQ4WBD_29_24_dx4_T;
   reg [1:0]                DX4BDLR0_RESERVED_31_30_dx4_T; 
//DX4BDLR1
   reg [5:0]                DQ5WBD_5_0_dx4_T;
   reg [5:0]                DQ6WBD_11_6_dx4_T;
   reg [5:0]                DQ7WBD_17_12_dx4_T;
   reg [5:0]                DMWBD_23_18_dx4_T;
   reg [5:0]                DSWBD_29_24_dx4_T;
   reg [1:0]                DX4BDLR1_RESERVED_31_30_dx4_T;    
//DX4BDLR2
   reg [5:0]                DSOEBD_5_0_dx4_T;
   reg [5:0]                DQOEBD_11_6_dx4_T;
   reg [5:0]                DSRBD_17_12_dx4_T;
   reg [5:0]                DSNRBD_23_18_dx4_T;
   reg [7:0]                DX4BDLR2_RESERVED_31_24_dx4_T;   
//DX4BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx4_T;
   reg [5:0]                DQ1RBD_11_6_dx4_T;
   reg [5:0]                DQ2RBD_17_12_dx4_T;
   reg [5:0]                DQ3RBD_23_18_dx4_T;
   reg [5:0]                DQ4RBD_29_24_dx4_T;
   reg [1:0]                DX4BDLR3_RESERVED_31_30_dx4_T;    
//DX4BDLR4
   reg [5:0]                DQ5RBD_5_0_dx4_T;
   reg [5:0]                DQ6RBD_11_6_dx4_T;
   reg [5:0]                DQ7RBD_17_12_dx4_T;
   reg [5:0]                DMRBD_23_18_dx4_T;
   reg [7:0]                DX4BDLR4_RESERVED_31_24_dx4_T;     
//DX4LCDLR0
   reg [7:0]                R0WLD_7_0_dx4_T;
   reg [7:0]                R1WLD_15_8_dx4_T;   
   reg [7:0]                R2WLD_23_16_dx4_T;
   reg [7:0]                R3WLD_31_24_dx4_T;
//DX4LCDLR1
   reg [7:0]                WDQD_7_0_dx4_T;
   reg [7:0]                RDQSD_15_8_dx4_T;   
   reg [7:0]                RDQSND_23_16_dx4_T;   
   reg [7:0]                DX4LCDLR1_RESERVED_31_24_dx4_T;
//DX4LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx4_T;
   reg [7:0]                R1DQSGD_15_8_dx4_T;   
   reg [7:0]                R2DQSGD_23_16_dx4_T;
   reg [7:0]                R3DQSGD_31_24_dx4_T;   
//DX4MDLR
   reg [7:0]                IPRD_7_0_dx4_T;
   reg [7:0]                TPRD_15_8_dx4_T;
   reg [7:0]                MDLD_23_16_dx4_T;  
   reg [7:0]                DX4MDLR_RESERVED_31_24_dx4_T;  
//DX4GTR       
   reg [2:0]                R0DGSL_2_0_dx4_T;
   reg [2:0]                R1DGSL_5_3_dx4_T;
   reg [2:0]                R2DGSL_8_6_dx4_T;
   reg [2:0]                R3DGSL_11_9_dx4_T;
   reg [1:0]                R0WLSL_13_12_dx4_T;
   reg [1:0]                R1WLSL_15_14_dx4_T;
   reg [1:0]                R2WLSL_17_16_dx4_T;
   reg [1:0]                R3WLSL_19_18_dx4_T;
   reg [11:0]               DX4GTR_RESERVED_31_20_dx4_T;
   
//----
//DX5GCR   
   reg [0:0]                DXEN_0_dx5_T;
   reg [0:0]                DQSODT_1_dx5_T;
   reg [0:0]                DQODT_2_dx5_T;
   reg [0:0]                DXIOM_3_dx5_T;
   reg [0:0]                DXPDD_4_dx5_T;
   reg [0:0]                DXPDR_5_dx5_T;
   reg [0:0]                DQSRPD_6_dx5_T;
   reg [0:0]                DSEN_8_7_dx5_T;
   reg [0:0]                DQSRTT_9_dx5_T;
   reg [0:0]                DQRTT_10_dx5_T;
   reg [1:0]                RTTOH_12_11_dx5_T;
   reg [0:0]                RTTOAL_13_dx5_T;
   reg [1:0]                DXOEO_15_14_dx5_T;
   reg [0:0]                PLLRST_16_dx5_T;
   reg [0:0]                PLLPD_17_dx5_T;
   reg [0:0]                GSHIFT_18_dx5_T;
   reg [0:0]                PLLBYP_19_dx5_T;
   reg [5:0]                DX5GCR_RESERVED_25_20_dx5_T;
   reg [3:0]                WLRKEN_29_26_dx5_T;
   reg [0:0]                MDLEN_30_dx5_T;
   reg [0:0]                CALBYP_31_dx5_T;
//DX5GSR0
   reg [0:0]                WDQCAL_0_dx5_T;
   reg [0:0]                RDQSCAL_1_dx5_T;
   reg [0:0]                RDQSNCAL_2_dx5_T;
   reg [0:0]                GDQSCAL_3_dx5_T;
   reg [0:0]                WLCAL_4_dx5_T;
   reg [0:0]                WLDONE_5_dx5_T;
   reg [0:0]                WLERR_6_dx5_T;
   reg [7:0]                WLPRD_14_7_dx5_T;
   reg [0:0]                DPLOCK_15_dx5_T;
   reg [7:0]                GDQSPRD_23_16_dx5_T;
   reg [3:0]                QSGERR_27_24_dx5_T;
   reg [0:0]                WLDQ_28_dx5_T;
   reg [2:0]                DX5GSR0_RESERVED_31_29_dx5_T;
//DX5GSR1 
   reg [0:0]                DLTDONE_0_dx5_T;
   reg [23:0]               DLTCODE_24_1_dx5_T;
   reg [6:0]                DX5GSR1_RESERVED_31_25_dx5_T;
//DX5GSR2
   reg [0:0]                RDERR_0_dx5_T;
   reg [0:0]                RDWN_1_dx5_T;
   reg [0:0]                WDERR_2_dx5_T;
   reg [0:0]                WDWN_3_dx5_T;
   reg [0:0]                REERR_4_dx5_T;
   reg [0:0]                REWN_5_dx5_T;
   reg [0:0]                WEERR_6_dx5_T;
   reg [0:0]                WEWN_7_dx5_T;
   reg [3:0]                ESTAT_11_8_dx5_T;
   reg [19:0]               DX5GSR2_RESERVED_31_12_dx5_T;    
//DX5BDLR0
   reg [5:0]                DQ0WBD_5_0_dx5_T;
   reg [5:0]                DQ1WBD_11_6_dx5_T;
   reg [5:0]                DQ2WBD_17_12_dx5_T;
   reg [5:0]                DQ3WBD_23_18_dx5_T;
   reg [5:0]                DQ4WBD_29_24_dx5_T;
   reg [1:0]                DX5BDLR0_RESERVED_31_30_dx5_T; 
//DX5BDLR1
   reg [5:0]                DQ5WBD_5_0_dx5_T;
   reg [5:0]                DQ6WBD_11_6_dx5_T;
   reg [5:0]                DQ7WBD_17_12_dx5_T;
   reg [5:0]                DMWBD_23_18_dx5_T;
   reg [5:0]                DSWBD_29_24_dx5_T;
   reg [1:0]                DX5BDLR1_RESERVED_31_30_dx5_T;    
//DX5BDLR2
   reg [5:0]                DSOEBD_5_0_dx5_T;
   reg [5:0]                DQOEBD_11_6_dx5_T;
   reg [5:0]                DSRBD_17_12_dx5_T;
   reg [5:0]                DSNRBD_23_18_dx5_T;
   reg [7:0]                DX5BDLR2_RESERVED_31_24_dx5_T;   
//DX5BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx5_T;
   reg [5:0]                DQ1RBD_11_6_dx5_T;
   reg [5:0]                DQ2RBD_17_12_dx5_T;
   reg [5:0]                DQ3RBD_23_18_dx5_T;
   reg [5:0]                DQ4RBD_29_24_dx5_T;
   reg [1:0]                DX5BDLR3_RESERVED_31_30_dx5_T;    
//DX5BDLR4
   reg [5:0]                DQ5RBD_5_0_dx5_T;
   reg [5:0]                DQ6RBD_11_6_dx5_T;
   reg [5:0]                DQ7RBD_17_12_dx5_T;
   reg [5:0]                DMRBD_23_18_dx5_T;
   reg [7:0]                DX5BDLR4_RESERVED_31_24_dx5_T;     
//DX5LCDLR0
   reg [7:0]                R0WLD_7_0_dx5_T;
   reg [7:0]                R1WLD_15_8_dx5_T;   
   reg [7:0]                R2WLD_23_16_dx5_T;
   reg [7:0]                R3WLD_31_24_dx5_T;
//DX5LCDLR1
   reg [7:0]                WDQD_7_0_dx5_T;
   reg [7:0]                RDQSD_15_8_dx5_T;   
   reg [7:0]                RDQSND_23_16_dx5_T;   
   reg [7:0]                DX5LCDLR1_RESERVED_31_24_dx5_T;
//DX5LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx5_T;
   reg [7:0]                R1DQSGD_15_8_dx5_T;   
   reg [7:0]                R2DQSGD_23_16_dx5_T;
   reg [7:0]                R3DQSGD_31_24_dx5_T;   
//DX5MDLR
   reg [7:0]                IPRD_7_0_dx5_T;
   reg [7:0]                TPRD_15_8_dx5_T;
   reg [7:0]                MDLD_23_16_dx5_T;  
   reg [7:0]                DX5MDLR_RESERVED_31_24_dx5_T;  
//DX5GTR       
   reg [2:0]                R0DGSL_2_0_dx5_T;
   reg [2:0]                R1DGSL_5_3_dx5_T;
   reg [2:0]                R2DGSL_8_6_dx5_T;
   reg [2:0]                R3DGSL_11_9_dx5_T;
   reg [1:0]                R0WLSL_13_12_dx5_T;
   reg [1:0]                R1WLSL_15_14_dx5_T;
   reg [1:0]                R2WLSL_17_16_dx5_T;
   reg [1:0]                R3WLSL_19_18_dx5_T;
   reg [11:0]               DX5GTR_RESERVED_31_20_dx5_T;
   
//----
//DX6GCR   
   reg [0:0]                DXEN_0_dx6_T;
   reg [0:0]                DQSODT_1_dx6_T;
   reg [0:0]                DQODT_2_dx6_T;
   reg [0:0]                DXIOM_3_dx6_T;
   reg [0:0]                DXPDD_4_dx6_T;
   reg [0:0]                DXPDR_5_dx6_T;
   reg [0:0]                DQSRPD_6_dx6_T;
   reg [0:0]                DSEN_8_7_dx6_T;
   reg [0:0]                DQSRTT_9_dx6_T;
   reg [0:0]                DQRTT_10_dx6_T;
   reg [1:0]                RTTOH_12_11_dx6_T;
   reg [0:0]                RTTOAL_13_dx6_T;
   reg [1:0]                DXOEO_15_14_dx6_T;
   reg [0:0]                PLLRST_16_dx6_T;
   reg [0:0]                PLLPD_17_dx6_T;
   reg [0:0]                GSHIFT_18_dx6_T;
   reg [0:0]                PLLBYP_19_dx6_T;
   reg [5:0]                DX6GCR_RESERVED_25_20_dx6_T;
   reg [3:0]                WLRKEN_29_26_dx6_T;
   reg [0:0]                MDLEN_30_dx6_T;
   reg [0:0]                CALBYP_31_dx6_T;
//DX6GSR0
   reg [0:0]                WDQCAL_0_dx6_T;
   reg [0:0]                RDQSCAL_1_dx6_T;
   reg [0:0]                RDQSNCAL_2_dx6_T;
   reg [0:0]                GDQSCAL_3_dx6_T;
   reg [0:0]                WLCAL_4_dx6_T;
   reg [0:0]                WLDONE_5_dx6_T;
   reg [0:0]                WLERR_6_dx6_T;
   reg [7:0]                WLPRD_14_7_dx6_T;
   reg [0:0]                DPLOCK_15_dx6_T;
   reg [7:0]                GDQSPRD_23_16_dx6_T;
   reg [3:0]                QSGERR_27_24_dx6_T;
   reg [0:0]                WLDQ_28_dx6_T;
   reg [2:0]                DX6GSR0_RESERVED_31_29_dx6_T;
//DX6GSR1 
   reg [0:0]                DLTDONE_0_dx6_T;
   reg [23:0]               DLTCODE_24_1_dx6_T;
   reg [6:0]                DX6GSR1_RESERVED_31_25_dx6_T;
//DX6GSR2
   reg [0:0]                RDERR_0_dx6_T;
   reg [0:0]                RDWN_1_dx6_T;
   reg [0:0]                WDERR_2_dx6_T;
   reg [0:0]                WDWN_3_dx6_T;
   reg [0:0]                REERR_4_dx6_T;
   reg [0:0]                REWN_5_dx6_T;
   reg [0:0]                WEERR_6_dx6_T;
   reg [0:0]                WEWN_7_dx6_T;
   reg [3:0]                ESTAT_11_8_dx6_T;
   reg [19:0]               DX6GSR2_RESERVED_31_12_dx6_T;    
//DX6BDLR0
   reg [5:0]                DQ0WBD_5_0_dx6_T;
   reg [5:0]                DQ1WBD_11_6_dx6_T;
   reg [5:0]                DQ2WBD_17_12_dx6_T;
   reg [5:0]                DQ3WBD_23_18_dx6_T;
   reg [5:0]                DQ4WBD_29_24_dx6_T;
   reg [1:0]                DX6BDLR0_RESERVED_31_30_dx6_T; 
//DX6BDLR1
   reg [5:0]                DQ5WBD_5_0_dx6_T;
   reg [5:0]                DQ6WBD_11_6_dx6_T;
   reg [5:0]                DQ7WBD_17_12_dx6_T;
   reg [5:0]                DMWBD_23_18_dx6_T;
   reg [5:0]                DSWBD_29_24_dx6_T;
   reg [1:0]                DX6BDLR1_RESERVED_31_30_dx6_T;    
//DX6BDLR2
   reg [5:0]                DSOEBD_5_0_dx6_T;
   reg [5:0]                DQOEBD_11_6_dx6_T;
   reg [5:0]                DSRBD_17_12_dx6_T;
   reg [5:0]                DSNRBD_23_18_dx6_T;
   reg [7:0]                DX6BDLR2_RESERVED_31_24_dx6_T;   
//DX6BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx6_T;
   reg [5:0]                DQ1RBD_11_6_dx6_T;
   reg [5:0]                DQ2RBD_17_12_dx6_T;
   reg [5:0]                DQ3RBD_23_18_dx6_T;
   reg [5:0]                DQ4RBD_29_24_dx6_T;
   reg [1:0]                DX6BDLR3_RESERVED_31_30_dx6_T;    
//DX6BDLR4
   reg [5:0]                DQ5RBD_5_0_dx6_T;
   reg [5:0]                DQ6RBD_11_6_dx6_T;
   reg [5:0]                DQ7RBD_17_12_dx6_T;
   reg [5:0]                DMRBD_23_18_dx6_T;
   reg [7:0]                DX6BDLR4_RESERVED_31_24_dx6_T;     
//DX6LCDLR0
   reg [7:0]                R0WLD_7_0_dx6_T;
   reg [7:0]                R1WLD_15_8_dx6_T;   
   reg [7:0]                R2WLD_23_16_dx6_T;
   reg [7:0]                R3WLD_31_24_dx6_T;
//DX6LCDLR1
   reg [7:0]                WDQD_7_0_dx6_T;
   reg [7:0]                RDQSD_15_8_dx6_T;   
   reg [7:0]                RDQSND_23_16_dx6_T;   
   reg [7:0]                DX6LCDLR1_RESERVED_31_24_dx6_T;
//DX6LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx6_T;
   reg [7:0]                R1DQSGD_15_8_dx6_T;   
   reg [7:0]                R2DQSGD_23_16_dx6_T;
   reg [7:0]                R3DQSGD_31_24_dx6_T;   
//DX6MDLR
   reg [7:0]                IPRD_7_0_dx6_T;
   reg [7:0]                TPRD_15_8_dx6_T;
   reg [7:0]                MDLD_23_16_dx6_T;  
   reg [7:0]                DX6MDLR_RESERVED_31_24_dx6_T;  
//DX6GTR       
   reg [2:0]                R0DGSL_2_0_dx6_T;
   reg [2:0]                R1DGSL_5_3_dx6_T;
   reg [2:0]                R2DGSL_8_6_dx6_T;
   reg [2:0]                R3DGSL_11_9_dx6_T;
   reg [1:0]                R0WLSL_13_12_dx6_T;
   reg [1:0]                R1WLSL_15_14_dx6_T;
   reg [1:0]                R2WLSL_17_16_dx6_T;
   reg [1:0]                R3WLSL_19_18_dx6_T;
   reg [11:0]               DX6GTR_RESERVED_31_20_dx6_T;
   
//----
//DX7GCR   
   reg [0:0]                DXEN_0_dx7_T;
   reg [0:0]                DQSODT_1_dx7_T;
   reg [0:0]                DQODT_2_dx7_T;
   reg [0:0]                DXIOM_3_dx7_T;
   reg [0:0]                DXPDD_4_dx7_T;
   reg [0:0]                DXPDR_5_dx7_T;
   reg [0:0]                DQSRPD_6_dx7_T;
   reg [0:0]                DSEN_8_7_dx7_T;
   reg [0:0]                DQSRTT_9_dx7_T;
   reg [0:0]                DQRTT_10_dx7_T;
   reg [1:0]                RTTOH_12_11_dx7_T;
   reg [0:0]                RTTOAL_13_dx7_T;
   reg [1:0]                DXOEO_15_14_dx7_T;
   reg [0:0]                PLLRST_16_dx7_T;
   reg [0:0]                PLLPD_17_dx7_T;
   reg [0:0]                GSHIFT_18_dx7_T;
   reg [0:0]                PLLBYP_19_dx7_T;
   reg [5:0]                DX7GCR_RESERVED_25_20_dx7_T;
   reg [3:0]                WLRKEN_29_26_dx7_T;
   reg [0:0]                MDLEN_30_dx7_T;
   reg [0:0]                CALBYP_31_dx7_T;
//DX7GSR0
   reg [0:0]                WDQCAL_0_dx7_T;
   reg [0:0]                RDQSCAL_1_dx7_T;
   reg [0:0]                RDQSNCAL_2_dx7_T;
   reg [0:0]                GDQSCAL_3_dx7_T;
   reg [0:0]                WLCAL_4_dx7_T;
   reg [0:0]                WLDONE_5_dx7_T;
   reg [0:0]                WLERR_6_dx7_T;
   reg [7:0]                WLPRD_14_7_dx7_T;
   reg [0:0]                DPLOCK_15_dx7_T;
   reg [7:0]                GDQSPRD_23_16_dx7_T;
   reg [3:0]                QSGERR_27_24_dx7_T;
   reg [0:0]                WLDQ_28_dx7_T;
   reg [2:0]                DX7GSR0_RESERVED_31_29_dx7_T;
//DX7GSR1 
   reg [0:0]                DLTDONE_0_dx7_T;
   reg [23:0]               DLTCODE_24_1_dx7_T;
   reg [6:0]                DX7GSR1_RESERVED_31_25_dx7_T;
//DX7GSR2
   reg [0:0]                RDERR_0_dx7_T;
   reg [0:0]                RDWN_1_dx7_T;
   reg [0:0]                WDERR_2_dx7_T;
   reg [0:0]                WDWN_3_dx7_T;
   reg [0:0]                REERR_4_dx7_T;
   reg [0:0]                REWN_5_dx7_T;
   reg [0:0]                WEERR_6_dx7_T;
   reg [0:0]                WEWN_7_dx7_T;
   reg [3:0]                ESTAT_11_8_dx7_T;
   reg [19:0]               DX7GSR2_RESERVED_31_12_dx7_T;    
//DX7BDLR0
   reg [5:0]                DQ0WBD_5_0_dx7_T;
   reg [5:0]                DQ1WBD_11_6_dx7_T;
   reg [5:0]                DQ2WBD_17_12_dx7_T;
   reg [5:0]                DQ3WBD_23_18_dx7_T;
   reg [5:0]                DQ4WBD_29_24_dx7_T;
   reg [1:0]                DX7BDLR0_RESERVED_31_30_dx7_T; 
//DX7BDLR1
   reg [5:0]                DQ5WBD_5_0_dx7_T;
   reg [5:0]                DQ6WBD_11_6_dx7_T;
   reg [5:0]                DQ7WBD_17_12_dx7_T;
   reg [5:0]                DMWBD_23_18_dx7_T;
   reg [5:0]                DSWBD_29_24_dx7_T;
   reg [1:0]                DX7BDLR1_RESERVED_31_30_dx7_T;    
//DX7BDLR2
   reg [5:0]                DSOEBD_5_0_dx7_T;
   reg [5:0]                DQOEBD_11_6_dx7_T;
   reg [5:0]                DSRBD_17_12_dx7_T;
   reg [5:0]                DSNRBD_23_18_dx7_T;
   reg [7:0]                DX7BDLR2_RESERVED_31_24_dx7_T;   
//DX7BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx7_T;
   reg [5:0]                DQ1RBD_11_6_dx7_T;
   reg [5:0]                DQ2RBD_17_12_dx7_T;
   reg [5:0]                DQ3RBD_23_18_dx7_T;
   reg [5:0]                DQ4RBD_29_24_dx7_T;
   reg [1:0]                DX7BDLR3_RESERVED_31_30_dx7_T;    
//DX7BDLR4
   reg [5:0]                DQ5RBD_5_0_dx7_T;
   reg [5:0]                DQ6RBD_11_6_dx7_T;
   reg [5:0]                DQ7RBD_17_12_dx7_T;
   reg [5:0]                DMRBD_23_18_dx7_T;
   reg [7:0]                DX7BDLR4_RESERVED_31_24_dx7_T;     
//DX7LCDLR0
   reg [7:0]                R0WLD_7_0_dx7_T;
   reg [7:0]                R1WLD_15_8_dx7_T;   
   reg [7:0]                R2WLD_23_16_dx7_T;
   reg [7:0]                R3WLD_31_24_dx7_T;
//DX7LCDLR1
   reg [7:0]                WDQD_7_0_dx7_T;
   reg [7:0]                RDQSD_15_8_dx7_T;   
   reg [7:0]                RDQSND_23_16_dx7_T;   
   reg [7:0]                DX7LCDLR1_RESERVED_31_24_dx7_T;
//DX7LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx7_T;
   reg [7:0]                R1DQSGD_15_8_dx7_T;   
   reg [7:0]                R2DQSGD_23_16_dx7_T;
   reg [7:0]                R3DQSGD_31_24_dx7_T;   
//DX7MDLR
   reg [7:0]                IPRD_7_0_dx7_T;
   reg [7:0]                TPRD_15_8_dx7_T;
   reg [7:0]                MDLD_23_16_dx7_T;  
   reg [7:0]                DX7MDLR_RESERVED_31_24_dx7_T;  
//DX7GTR       
   reg [2:0]                R0DGSL_2_0_dx7_T;
   reg [2:0]                R1DGSL_5_3_dx7_T;
   reg [2:0]                R2DGSL_8_6_dx7_T;
   reg [2:0]                R3DGSL_11_9_dx7_T;
   reg [1:0]                R0WLSL_13_12_dx7_T;
   reg [1:0]                R1WLSL_15_14_dx7_T;
   reg [1:0]                R2WLSL_17_16_dx7_T;
   reg [1:0]                R3WLSL_19_18_dx7_T;
   reg [11:0]               DX7GTR_RESERVED_31_20_dx7_T;
  
//----
//DX8GCR   
   reg [0:0]                DXEN_0_dx8_T;
   reg [0:0]                DQSODT_1_dx8_T;
   reg [0:0]                DQODT_2_dx8_T;
   reg [0:0]                DXIOM_3_dx8_T;
   reg [0:0]                DXPDD_4_dx8_T;
   reg [0:0]                DXPDR_5_dx8_T;
   reg [0:0]                DQSRPD_6_dx8_T;
   reg [0:0]                DSEN_8_7_dx8_T;
   reg [0:0]                DQSRTT_9_dx8_T;
   reg [0:0]                DQRTT_10_dx8_T;
   reg [1:0]                RTTOH_12_11_dx8_T;
   reg [0:0]                RTTOAL_13_dx8_T;
   reg [1:0]                DXOEO_15_14_dx8_T;
   reg [0:0]                PLLRST_16_dx8_T;
   reg [0:0]                PLLPD_17_dx8_T;
   reg [0:0]                GSHIFT_18_dx8_T;
   reg [0:0]                PLLBYP_19_dx8_T;
   reg [5:0]                DX8GCR_RESERVED_25_20_dx8_T;
   reg [3:0]                WLRKEN_29_26_dx8_T;
   reg [0:0]                MDLEN_30_dx8_T;
   reg [0:0]                CALBYP_31_dx8_T;
//DX8GSR0
   reg [0:0]                WDQCAL_0_dx8_T;
   reg [0:0]                RDQSCAL_1_dx8_T;
   reg [0:0]                RDQSNCAL_2_dx8_T;
   reg [0:0]                GDQSCAL_3_dx8_T;
   reg [0:0]                WLCAL_4_dx8_T;
   reg [0:0]                WLDONE_5_dx8_T;
   reg [0:0]                WLERR_6_dx8_T;
   reg [7:0]                WLPRD_14_7_dx8_T;
   reg [0:0]                DPLOCK_15_dx8_T;
   reg [7:0]                GDQSPRD_23_16_dx8_T;
   reg [3:0]                QSGERR_27_24_dx8_T;
   reg [0:0]                WLDQ_28_dx8_T;
   reg [2:0]                DX8GSR0_RESERVED_31_29_dx8_T;
//DX8GSR1 
   reg [0:0]                DLTDONE_0_dx8_T;
   reg [23:0]               DLTCODE_24_1_dx8_T;
   reg [6:0]                DX8GSR1_RESERVED_31_25_dx8_T;
//DX8GSR2
   reg [0:0]                RDERR_0_dx8_T;
   reg [0:0]                RDWN_1_dx8_T;
   reg [0:0]                WDERR_2_dx8_T;
   reg [0:0]                WDWN_3_dx8_T;
   reg [0:0]                REERR_4_dx8_T;
   reg [0:0]                REWN_5_dx8_T;
   reg [0:0]                WEERR_6_dx8_T;
   reg [0:0]                WEWN_7_dx8_T;
   reg [3:0]                ESTAT_11_8_dx8_T;
   reg [19:0]               DX8GSR2_RESERVED_31_12_dx8_T;    
//DX8BDLR0
   reg [5:0]                DQ0WBD_5_0_dx8_T;
   reg [5:0]                DQ1WBD_11_6_dx8_T;
   reg [5:0]                DQ2WBD_17_12_dx8_T;
   reg [5:0]                DQ3WBD_23_18_dx8_T;
   reg [5:0]                DQ4WBD_29_24_dx8_T;
   reg [1:0]                DX8BDLR0_RESERVED_31_30_dx8_T; 
//DX8BDLR1
   reg [5:0]                DQ5WBD_5_0_dx8_T;
   reg [5:0]                DQ6WBD_11_6_dx8_T;
   reg [5:0]                DQ7WBD_17_12_dx8_T;
   reg [5:0]                DMWBD_23_18_dx8_T;
   reg [5:0]                DSWBD_29_24_dx8_T;
   reg [1:0]                DX8BDLR1_RESERVED_31_30_dx8_T;    
//DX8BDLR2
   reg [5:0]                DSOEBD_5_0_dx8_T;
   reg [5:0]                DQOEBD_11_6_dx8_T;
   reg [5:0]                DSRBD_17_12_dx8_T;
   reg [5:0]                DSNRBD_23_18_dx8_T;
   reg [7:0]                DX8BDLR2_RESERVED_31_24_dx8_T;   
//DX8BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx8_T;
   reg [5:0]                DQ1RBD_11_6_dx8_T;
   reg [5:0]                DQ2RBD_17_12_dx8_T;
   reg [5:0]                DQ3RBD_23_18_dx8_T;
   reg [5:0]                DQ4RBD_29_24_dx8_T;
   reg [1:0]                DX8BDLR3_RESERVED_31_30_dx8_T;    
//DX8BDLR4
   reg [5:0]                DQ5RBD_5_0_dx8_T;
   reg [5:0]                DQ6RBD_11_6_dx8_T;
   reg [5:0]                DQ7RBD_17_12_dx8_T;
   reg [5:0]                DMRBD_23_18_dx8_T;
   reg [7:0]                DX8BDLR4_RESERVED_31_24_dx8_T;     
//DX8LCDLR0
   reg [7:0]                R0WLD_7_0_dx8_T;
   reg [7:0]                R1WLD_15_8_dx8_T;   
   reg [7:0]                R2WLD_23_16_dx8_T;
   reg [7:0]                R3WLD_31_24_dx8_T;
//DX8LCDLR1
   reg [7:0]                WDQD_7_0_dx8_T;
   reg [7:0]                RDQSD_15_8_dx8_T;   
   reg [7:0]                RDQSND_23_16_dx8_T;   
   reg [7:0]                DX8LCDLR1_RESERVED_31_24_dx8_T;
//DX8LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx8_T;
   reg [7:0]                R1DQSGD_15_8_dx8_T;   
   reg [7:0]                R2DQSGD_23_16_dx8_T;
   reg [7:0]                R3DQSGD_31_24_dx8_T;   
//DX8MDLR
   reg [7:0]                IPRD_7_0_dx8_T;
   reg [7:0]                TPRD_15_8_dx8_T;
   reg [7:0]                MDLD_23_16_dx8_T;  
   reg [7:0]                DX8MDLR_RESERVED_31_24_dx8_T;  
//DX8GTR       
   reg [2:0]                R0DGSL_2_0_dx8_T;
   reg [2:0]                R1DGSL_5_3_dx8_T;
   reg [2:0]                R2DGSL_8_6_dx8_T;
   reg [2:0]                R3DGSL_11_9_dx8_T;
   reg [1:0]                R0WLSL_13_12_dx8_T;
   reg [1:0]                R1WLSL_15_14_dx8_T;
   reg [1:0]                R2WLSL_17_16_dx8_T;
   reg [1:0]                R3WLSL_19_18_dx8_T;
   reg [11:0]               DX8GTR_RESERVED_31_20_dx8_T;  


//RESERVED ADDRESSES
   reg [31:0]               BIT_VALUE_RESERVED_36;	              
   reg [31:0]               BIT_VALUE_RESERVED_37;	             
   reg [31:0]               BIT_VALUE_RESERVED_38;	            
   reg [31:0]               BIT_VALUE_RESERVED_39;	             
   reg [31:0]               BIT_VALUE_RESERVED_40;	            
   reg [31:0]               BIT_VALUE_RESERVED_41;	              
   reg [31:0]               BIT_VALUE_RESERVED_42;	             
   reg [31:0]               BIT_VALUE_RESERVED_43;	            
	          
   reg [31:0]               BIT_VALUE_RESERVED_56;	            
   reg [31:0]               BIT_VALUE_RESERVED_57;	             
   reg [31:0]               BIT_VALUE_RESERVED_58;	            
   reg [31:0]               BIT_VALUE_RESERVED_59;	             
   reg [31:0]               BIT_VALUE_RESERVED_60;	            
   reg [31:0]               BIT_VALUE_RESERVED_61;	             
   reg [31:0]               BIT_VALUE_RESERVED_62;	            
   reg [31:0]               BIT_VALUE_RESERVED_63;	           

   reg [31:0]               BIT_VALUE_RESERVED_84;	            
   reg [31:0]               BIT_VALUE_RESERVED_85;	          
   reg [31:0]               BIT_VALUE_RESERVED_86;	            
   reg [31:0]               BIT_VALUE_RESERVED_87;	             
   reg [31:0]               BIT_VALUE_RESERVED_88;	            
   reg [31:0]               BIT_VALUE_RESERVED_89;	            
   reg [31:0]               BIT_VALUE_RESERVED_90;	            
   reg [31:0]               BIT_VALUE_RESERVED_91;	            
   reg [31:0]               BIT_VALUE_RESERVED_92;	              
   reg [31:0]               BIT_VALUE_RESERVED_93;	             
   //reg [31:0]               BIT_VALUE_RESERVED_94;	           
   //reg [31:0]               BIT_VALUE_RESERVED_95;
	             
   reg [31:0]               BIT_VALUE_RESERVED_126;            
   reg [31:0]               BIT_VALUE_RESERVED_127;             

   reg [31:0]               BIT_VALUE_RESERVED_142;             
   reg [31:0]               BIT_VALUE_RESERVED_143;             

   reg [31:0]               BIT_VALUE_RESERVED_158;            
   reg [31:0]               BIT_VALUE_RESERVED_159;            

   reg [31:0]               BIT_VALUE_RESERVED_174;           
   reg [31:0]               BIT_VALUE_RESERVED_175;             

   reg [31:0]               BIT_VALUE_RESERVED_190;              
   reg [31:0]               BIT_VALUE_RESERVED_191;             

   reg [31:0]               BIT_VALUE_RESERVED_206;              
   reg [31:0]               BIT_VALUE_RESERVED_207;             

   reg [31:0]               BIT_VALUE_RESERVED_222;             
   reg [31:0]               BIT_VALUE_RESERVED_223;            

   reg [31:0]               BIT_VALUE_RESERVED_238;             
   reg [31:0]               BIT_VALUE_RESERVED_239;            

   reg [31:0]               BIT_VALUE_RESERVED_254;              
   reg [31:0]               BIT_VALUE_RESERVED_255;  


//Registers for the VT drift special scenarios
   
//ACBDLR
   reg [5:0]                CK0BD_5_0_vt_drift;
   reg [5:0]                CK1BD_11_6_vt_drift;
   reg [5:0]                CK2BD_17_12_vt_drift;   
   reg [5:0]                ACBD_23_18_vt_drift;
   
//DX0BDLR0
   reg [5:0]                DQ0WBD_5_0_dx0_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx0_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx0_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx0_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx0_vt_drift;
//DX0BDLR1
   reg [5:0]                DQ5WBD_5_0_dx0_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx0_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx0_vt_drift;
   reg [5:0]                DMWBD_23_18_dx0_vt_drift;
   reg [5:0]                DSWBD_29_24_dx0_vt_drift;  
//DX0BDLR2
   reg [5:0]                DSOEBD_5_0_dx0_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx0_vt_drift;  
   reg [5:0]                DSRBD_17_12_dx0_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx0_vt_drift;
//DX0BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx0_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx0_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx0_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx0_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx0_vt_drift;     
//DX0BDLR4
   reg [5:0]                DQ5RBD_5_0_dx0_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx0_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx0_vt_drift;
   reg [5:0]                DMRBD_23_18_dx0_vt_drift;
//DX0LCDLR0
   reg [7:0]                R0WLD_7_0_dx0_vt_drift;
   reg [7:0]                R1WLD_15_8_dx0_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx0_vt_drift;
   reg [7:0]                R3WLD_31_24_dx0_vt_drift;
//DX0LCDLR1
   reg [7:0]                WDQD_7_0_dx0_vt_drift;
   reg [7:0]                RDQSD_15_8_dx0_vt_drift;     
   reg [7:0]                RDQSND_23_16_dx0_vt_drift;     
//DX0LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx0_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx0_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx0_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx0_vt_drift;   
//DX0MDLR
   reg [7:0]                IPRD_7_0_dx0_vt_drift;
   reg [7:0]                TPRD_15_8_dx0_vt_drift;
   reg [7:0]                MDLD_23_16_dx0_vt_drift;    
//----

//DX1BDLR0
   reg [5:0]                DQ0WBD_5_0_dx1_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx1_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx1_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx1_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx1_vt_drift; 
//DX1BDLR1
   reg [5:0]                DQ5WBD_5_0_dx1_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx1_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx1_vt_drift;
   reg [5:0]                DMWBD_23_18_dx1_vt_drift;
   reg [5:0]                DSWBD_29_24_dx1_vt_drift;  
//DX1BDLR2
   reg [5:0]                DSOEBD_5_0_dx1_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx1_vt_drift;  
   reg [5:0]                DSRBD_17_12_dx1_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx1_vt_drift;
//DX1BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx1_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx1_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx1_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx1_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx1_vt_drift;     
//DX1BDLR4
   reg [5:0]                DQ5RBD_5_0_dx1_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx1_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx1_vt_drift;
   reg [5:0]                DMRBD_23_18_dx1_vt_drift;
//DX1LCDLR0
   reg [7:0]                R0WLD_7_0_dx1_vt_drift;
   reg [7:0]                R1WLD_15_8_dx1_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx1_vt_drift;
   reg [7:0]                R3WLD_31_24_dx1_vt_drift;
//DX1LCDLR1
   reg [7:0]                WDQD_7_0_dx1_vt_drift;
   reg [7:0]                RDQSD_15_8_dx1_vt_drift;    
   reg [7:0]                RDQSND_23_16_dx1_vt_drift;     
//DX1LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx1_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx1_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx1_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx1_vt_drift;      
//DX1MDLR
   reg [7:0]                IPRD_7_0_dx1_vt_drift;
   reg [7:0]                TPRD_15_8_dx1_vt_drift;
   reg [7:0]                MDLD_23_16_dx1_vt_drift;  
//----
   
//DX2BDLR0
   reg [5:0]                DQ0WBD_5_0_dx2_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx2_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx2_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx2_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx2_vt_drift;  
//DX2BDLR1
   reg [5:0]                DQ5WBD_5_0_dx2_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx2_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx2_vt_drift;
   reg [5:0]                DMWBD_23_18_dx2_vt_drift;
   reg [5:0]                DSWBD_29_24_dx2_vt_drift;  
//DX2BDLR2
   reg [5:0]                DSOEBD_5_0_dx2_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx2_vt_drift; 
   reg [5:0]                DSRBD_17_12_dx2_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx2_vt_drift;
//DX2BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx2_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx2_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx2_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx2_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx2_vt_drift;  
//DX2BDLR4
   reg [5:0]                DQ5RBD_5_0_dx2_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx2_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx2_vt_drift;
   reg [5:0]                DMRBD_23_18_dx2_vt_drift;
//DX2LCDLR0
   reg [7:0]                R0WLD_7_0_dx2_vt_drift;
   reg [7:0]                R1WLD_15_8_dx2_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx2_vt_drift;
   reg [7:0]                R3WLD_31_24_dx2_vt_drift;
//DX2LCDLR1
   reg [7:0]                WDQD_7_0_dx2_vt_drift;
   reg [7:0]                RDQSD_15_8_dx2_vt_drift;      
   reg [7:0]                RDQSND_23_16_dx2_vt_drift;     
//DX2LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx2_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx2_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx2_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx2_vt_drift;      
//DX2MDLR
   reg [7:0]                IPRD_7_0_dx2_vt_drift;
   reg [7:0]                TPRD_15_8_dx2_vt_drift;
   reg [7:0]                MDLD_23_16_dx2_vt_drift;    
//----
   
//DX3BDLR0
   reg [5:0]                DQ0WBD_5_0_dx3_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx3_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx3_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx3_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx3_vt_drift;  
//DX3BDLR1
   reg [5:0]                DQ5WBD_5_0_dx3_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx3_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx3_vt_drift;
   reg [5:0]                DMWBD_23_18_dx3_vt_drift;
   reg [5:0]                DSWBD_29_24_dx3_vt_drift;    
//DX3BDLR2
   reg [5:0]                DSOEBD_5_0_dx3_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx3_vt_drift;  
   reg [5:0]                DSRBD_17_12_dx3_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx3_vt_drift;
//DX3BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx3_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx3_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx3_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx3_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx3_vt_drift;   
//DX3BDLR4
   reg [5:0]                DQ5RBD_5_0_dx3_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx3_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx3_vt_drift;
   reg [5:0]                DMRBD_23_18_dx3_vt_drift;
//DX3LCDLR0
   reg [7:0]                R0WLD_7_0_dx3_vt_drift;
   reg [7:0]                R1WLD_15_8_dx3_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx3_vt_drift;
   reg [7:0]                R3WLD_31_24_dx3_vt_drift;
//DX3LCDLR1
   reg [7:0]                WDQD_7_0_dx3_vt_drift;
   reg [7:0]                RDQSD_15_8_dx3_vt_drift;    
   reg [7:0]                RDQSND_23_16_dx3_vt_drift;     
//DX3LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx3_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx3_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx3_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx3_vt_drift;      
//DX3MDLR
   reg [7:0]                IPRD_7_0_dx3_vt_drift;
   reg [7:0]                TPRD_15_8_dx3_vt_drift;
   reg [7:0]                MDLD_23_16_dx3_vt_drift;   
//----

//DX4BDLR0
   reg [5:0]                DQ0WBD_5_0_dx4_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx4_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx4_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx4_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx4_vt_drift;  
//DX4BDLR1
   reg [5:0]                DQ5WBD_5_0_dx4_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx4_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx4_vt_drift;
   reg [5:0]                DMWBD_23_18_dx4_vt_drift;
   reg [5:0]                DSWBD_29_24_dx4_vt_drift;   
//DX4BDLR2
   reg [5:0]                DSOEBD_5_0_dx4_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx4_vt_drift;    
   reg [5:0]                DSRBD_17_12_dx4_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx4_vt_drift;
//DX4BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx4_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx4_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx4_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx4_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx4_vt_drift;   
//DX4BDLR4
   reg [5:0]                DQ5RBD_5_0_dx4_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx4_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx4_vt_drift;
   reg [5:0]                DMRBD_23_18_dx4_vt_drift;
//DX4LCDLR0
   reg [7:0]                R0WLD_7_0_dx4_vt_drift;
   reg [7:0]                R1WLD_15_8_dx4_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx4_vt_drift;
   reg [7:0]                R3WLD_31_24_dx4_vt_drift;
//DX4LCDLR1
   reg [7:0]                WDQD_7_0_dx4_vt_drift;
   reg [7:0]                RDQSD_15_8_dx4_vt_drift;     
   reg [7:0]                RDQSND_23_16_dx4_vt_drift;     
//DX4LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx4_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx4_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx4_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx4_vt_drift;      
//DX4MDLR
   reg [7:0]                IPRD_7_0_dx4_vt_drift;
   reg [7:0]                TPRD_15_8_dx4_vt_drift;
   reg [7:0]                MDLD_23_16_dx4_vt_drift;    
//----
   
//DX5BDLR0
   reg [5:0]                DQ0WBD_5_0_dx5_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx5_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx5_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx5_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx5_vt_drift;  
//DX5BDLR1
   reg [5:0]                DQ5WBD_5_0_dx5_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx5_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx5_vt_drift;
   reg [5:0]                DMWBD_23_18_dx5_vt_drift;
   reg [5:0]                DSWBD_29_24_dx5_vt_drift;     
//DX5BDLR2
   reg [5:0]                DSOEBD_5_0_dx5_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx5_vt_drift;   
   reg [5:0]                DSRBD_17_12_dx5_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx5_vt_drift;
//DX5BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx5_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx5_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx5_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx5_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx5_vt_drift;    
//DX5BDLR4
   reg [5:0]                DQ5RBD_5_0_dx5_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx5_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx5_vt_drift;
   reg [5:0]                DMRBD_23_18_dx5_vt_drift;
//DX5LCDLR0
   reg [7:0]                R0WLD_7_0_dx5_vt_drift;
   reg [7:0]                R1WLD_15_8_dx5_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx5_vt_drift;
   reg [7:0]                R3WLD_31_24_dx5_vt_drift;
//DX5LCDLR1
   reg [7:0]                WDQD_7_0_dx5_vt_drift;
   reg [7:0]                RDQSD_15_8_dx5_vt_drift;     
   reg [7:0]                RDQSND_23_16_dx5_vt_drift;     
//DX5LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx5_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx5_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx5_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx5_vt_drift;      
//DX5MDLR
   reg [7:0]                IPRD_7_0_dx5_vt_drift;
   reg [7:0]                TPRD_15_8_dx5_vt_drift;
   reg [7:0]                MDLD_23_16_dx5_vt_drift;   
//----

//DX6BDLR0
   reg [5:0]                DQ0WBD_5_0_dx6_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx6_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx6_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx6_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx6_vt_drift;  
//DX6BDLR1
   reg [5:0]                DQ5WBD_5_0_dx6_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx6_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx6_vt_drift;
   reg [5:0]                DMWBD_23_18_dx6_vt_drift;
   reg [5:0]                DSWBD_29_24_dx6_vt_drift;   
//DX6BDLR2
   reg [5:0]                DSOEBD_5_0_dx6_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx6_vt_drift;  
   reg [5:0]                DSRBD_17_12_dx6_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx6_vt_drift;
//DX6BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx6_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx6_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx6_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx6_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx6_vt_drift;     
//DX6BDLR4
   reg [5:0]                DQ5RBD_5_0_dx6_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx6_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx6_vt_drift;
   reg [5:0]                DMRBD_23_18_dx6_vt_drift;
//DX6LCDLR0
   reg [7:0]                R0WLD_7_0_dx6_vt_drift;
   reg [7:0]                R1WLD_15_8_dx6_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx6_vt_drift;
   reg [7:0]                R3WLD_31_24_dx6_vt_drift;
//DX6LCDLR1
   reg [7:0]                WDQD_7_0_dx6_vt_drift;
   reg [7:0]                RDQSD_15_8_dx6_vt_drift;    
   reg [7:0]                RDQSND_23_16_dx6_vt_drift;     
//DX6LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx6_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx6_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx6_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx6_vt_drift;      
//DX6MDLR
   reg [7:0]                IPRD_7_0_dx6_vt_drift;
   reg [7:0]                TPRD_15_8_dx6_vt_drift;
   reg [7:0]                MDLD_23_16_dx6_vt_drift;    
//----

//DX7BDLR0
   reg [5:0]                DQ0WBD_5_0_dx7_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx7_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx7_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx7_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx7_vt_drift;  
//DX7BDLR1
   reg [5:0]                DQ5WBD_5_0_dx7_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx7_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx7_vt_drift;
   reg [5:0]                DMWBD_23_18_dx7_vt_drift;
   reg [5:0]                DSWBD_29_24_dx7_vt_drift;      
//DX7BDLR2
   reg [5:0]                DSOEBD_5_0_dx7_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx7_vt_drift;    
   reg [5:0]                DSRBD_17_12_dx7_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx7_vt_drift;
//DX7BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx7_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx7_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx7_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx7_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx7_vt_drift;    
//DX7BDLR4
   reg [5:0]                DQ5RBD_5_0_dx7_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx7_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx7_vt_drift;
   reg [5:0]                DMRBD_23_18_dx7_vt_drift;
//DX7LCDLR0
   reg [7:0]                R0WLD_7_0_dx7_vt_drift;
   reg [7:0]                R1WLD_15_8_dx7_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx7_vt_drift;
   reg [7:0]                R3WLD_31_24_dx7_vt_drift;
//DX7LCDLR1
   reg [7:0]                WDQD_7_0_dx7_vt_drift;
   reg [7:0]                RDQSD_15_8_dx7_vt_drift;     
   reg [7:0]                RDQSND_23_16_dx7_vt_drift;     
//DX7LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx7_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx7_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx7_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx7_vt_drift;      
//DX7MDLR
   reg [7:0]                IPRD_7_0_dx7_vt_drift;
   reg [7:0]                TPRD_15_8_dx7_vt_drift;
   reg [7:0]                MDLD_23_16_dx7_vt_drift;    
//----

//DX8BDLR0
   reg [5:0]                DQ0WBD_5_0_dx8_vt_drift;
   reg [5:0]                DQ1WBD_11_6_dx8_vt_drift;
   reg [5:0]                DQ2WBD_17_12_dx8_vt_drift;
   reg [5:0]                DQ3WBD_23_18_dx8_vt_drift;
   reg [5:0]                DQ4WBD_29_24_dx8_vt_drift; 
//DX8BDLR1
   reg [5:0]                DQ5WBD_5_0_dx8_vt_drift;
   reg [5:0]                DQ6WBD_11_6_dx8_vt_drift;
   reg [5:0]                DQ7WBD_17_12_dx8_vt_drift;
   reg [5:0]                DMWBD_23_18_dx8_vt_drift;
   reg [5:0]                DSWBD_29_24_dx8_vt_drift;  
//DX8BDLR2
   reg [5:0]                DSOEBD_5_0_dx8_vt_drift;
   reg [5:0]                DQOEBD_11_6_dx8_vt_drift;  
   reg [5:0]                DSRBD_17_12_dx8_vt_drift;
   reg [5:0]                DSNRBD_23_18_dx8_vt_drift;
//DX8BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx8_vt_drift;
   reg [5:0]                DQ1RBD_11_6_dx8_vt_drift;
   reg [5:0]                DQ2RBD_17_12_dx8_vt_drift;
   reg [5:0]                DQ3RBD_23_18_dx8_vt_drift;
   reg [5:0]                DQ4RBD_29_24_dx8_vt_drift;  
//DX8BDLR4
   reg [5:0]                DQ5RBD_5_0_dx8_vt_drift;
   reg [5:0]                DQ6RBD_11_6_dx8_vt_drift;
   reg [5:0]                DQ7RBD_17_12_dx8_vt_drift;
   reg [5:0]                DMRBD_23_18_dx8_vt_drift;
//DX8LCDLR0
   reg [7:0]                R0WLD_7_0_dx8_vt_drift;
   reg [7:0]                R1WLD_15_8_dx8_vt_drift;   
   reg [7:0]                R2WLD_23_16_dx8_vt_drift;
   reg [7:0]                R3WLD_31_24_dx8_vt_drift;
//DX8LCDLR1
   reg [7:0]                WDQD_7_0_dx8_vt_drift;
   reg [7:0]                RDQSD_15_8_dx8_vt_drift;     
   reg [7:0]                RDQSND_23_16_dx8_vt_drift;     
//DX8LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx8_vt_drift;
   reg [7:0]                R1DQSGD_15_8_dx8_vt_drift;   
   reg [7:0]                R2DQSGD_23_16_dx8_vt_drift;
   reg [7:0]                R3DQSGD_31_24_dx8_vt_drift;      
//DX8MDLR
   reg [7:0]                IPRD_7_0_dx8_vt_drift;
   reg [7:0]                TPRD_15_8_dx8_vt_drift;
   reg [7:0]                MDLD_23_16_dx8_vt_drift;   

//----    

    
//ACBDLR
   reg [5:0]                CK0BD_5_0_vt_drift_wo_upd;
   reg [5:0]                CK1BD_11_6_vt_drift_wo_upd;
   reg [5:0]                CK2BD_17_12_vt_drift_wo_upd;   
   reg [5:0]                ACBD_23_18_vt_drift_wo_upd;
   
//DX0BDLR0
   reg [5:0]                DQ0WBD_5_0_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx0_vt_drift_wo_upd;
//DX0BDLR1
   reg [5:0]                DQ5WBD_5_0_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx0_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx0_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx0_vt_drift_wo_upd;  
//DX0BDLR2
   reg [5:0]                DSOEBD_5_0_dx0_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx0_vt_drift_wo_upd;  
   reg [5:0]                DSRBD_17_12_dx0_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx0_vt_drift_wo_upd;
//DX0BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx0_vt_drift_wo_upd;     
//DX0BDLR4
   reg [5:0]                DQ5RBD_5_0_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx0_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx0_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx0_vt_drift_wo_upd;
//DX0LCDLR0
   reg [7:0]                R0WLD_7_0_dx0_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx0_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx0_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx0_vt_drift_wo_upd;
//DX0LCDLR1
   reg [7:0]                WDQD_7_0_dx0_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx0_vt_drift_wo_upd;     
   reg [7:0]                RDQSND_23_16_dx0_vt_drift_wo_upd;     
//DX0LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx0_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx0_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx0_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx0_vt_drift_wo_upd;   
//DX0MDLR
   reg [7:0]                IPRD_7_0_dx0_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx0_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx0_vt_drift_wo_upd;    
//----

//DX1BDLR0
   reg [5:0]                DQ0WBD_5_0_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx1_vt_drift_wo_upd; 
//DX1BDLR1
   reg [5:0]                DQ5WBD_5_0_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx1_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx1_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx1_vt_drift_wo_upd;  
//DX1BDLR2
   reg [5:0]                DSOEBD_5_0_dx1_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx1_vt_drift_wo_upd;  
   reg [5:0]                DSRBD_17_12_dx1_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx1_vt_drift_wo_upd;
//DX1BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx1_vt_drift_wo_upd;     
//DX1BDLR4
   reg [5:0]                DQ5RBD_5_0_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx1_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx1_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx1_vt_drift_wo_upd;
//DX1LCDLR0
   reg [7:0]                R0WLD_7_0_dx1_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx1_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx1_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx1_vt_drift_wo_upd;
//DX1LCDLR1
   reg [7:0]                WDQD_7_0_dx1_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx1_vt_drift_wo_upd;    
   reg [7:0]                RDQSND_23_16_dx1_vt_drift_wo_upd;     
//DX1LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx1_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx1_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx1_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx1_vt_drift_wo_upd;      
//DX1MDLR
   reg [7:0]                IPRD_7_0_dx1_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx1_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx1_vt_drift_wo_upd;  
//----
   
//DX2BDLR0
   reg [5:0]                DQ0WBD_5_0_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx2_vt_drift_wo_upd;  
//DX2BDLR1
   reg [5:0]                DQ5WBD_5_0_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx2_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx2_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx2_vt_drift_wo_upd;  
//DX2BDLR2
   reg [5:0]                DSOEBD_5_0_dx2_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx2_vt_drift_wo_upd; 
   reg [5:0]                DSRBD_17_12_dx2_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx2_vt_drift_wo_upd;
//DX2BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx2_vt_drift_wo_upd;  
//DX2BDLR4
   reg [5:0]                DQ5RBD_5_0_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx2_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx2_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx2_vt_drift_wo_upd;
//DX2LCDLR0
   reg [7:0]                R0WLD_7_0_dx2_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx2_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx2_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx2_vt_drift_wo_upd;
//DX2LCDLR1
   reg [7:0]                WDQD_7_0_dx2_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx2_vt_drift_wo_upd;      
   reg [7:0]                RDQSND_23_16_dx2_vt_drift_wo_upd;     
//DX2LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx2_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx2_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx2_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx2_vt_drift_wo_upd;      
//DX2MDLR
   reg [7:0]                IPRD_7_0_dx2_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx2_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx2_vt_drift_wo_upd;    
//----
   
//DX3BDLR0
   reg [5:0]                DQ0WBD_5_0_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx3_vt_drift_wo_upd;  
//DX3BDLR1
   reg [5:0]                DQ5WBD_5_0_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx3_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx3_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx3_vt_drift_wo_upd;    
//DX3BDLR2
   reg [5:0]                DSOEBD_5_0_dx3_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx3_vt_drift_wo_upd;  
   reg [5:0]                DSRBD_17_12_dx3_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx3_vt_drift_wo_upd;
//DX3BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx3_vt_drift_wo_upd;   
//DX3BDLR4
   reg [5:0]                DQ5RBD_5_0_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx3_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx3_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx3_vt_drift_wo_upd;
//DX3LCDLR0
   reg [7:0]                R0WLD_7_0_dx3_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx3_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx3_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx3_vt_drift_wo_upd;
//DX3LCDLR1
   reg [7:0]                WDQD_7_0_dx3_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx3_vt_drift_wo_upd;    
   reg [7:0]                RDQSND_23_16_dx3_vt_drift_wo_upd;     
//DX3LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx3_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx3_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx3_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx3_vt_drift_wo_upd;      
//DX3MDLR
   reg [7:0]                IPRD_7_0_dx3_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx3_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx3_vt_drift_wo_upd;   
//----

//DX4BDLR0
   reg [5:0]                DQ0WBD_5_0_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx4_vt_drift_wo_upd;  
//DX4BDLR1
   reg [5:0]                DQ5WBD_5_0_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx4_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx4_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx4_vt_drift_wo_upd;   
//DX4BDLR2
   reg [5:0]                DSOEBD_5_0_dx4_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx4_vt_drift_wo_upd;    
   reg [5:0]                DSRBD_17_12_dx4_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx4_vt_drift_wo_upd;
//DX4BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx4_vt_drift_wo_upd;   
//DX4BDLR4
   reg [5:0]                DQ5RBD_5_0_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx4_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx4_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx4_vt_drift_wo_upd;
//DX4LCDLR0
   reg [7:0]                R0WLD_7_0_dx4_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx4_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx4_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx4_vt_drift_wo_upd;
//DX4LCDLR1
   reg [7:0]                WDQD_7_0_dx4_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx4_vt_drift_wo_upd;     
   reg [7:0]                RDQSND_23_16_dx4_vt_drift_wo_upd;     
//DX4LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx4_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx4_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx4_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx4_vt_drift_wo_upd;      
//DX4MDLR
   reg [7:0]                IPRD_7_0_dx4_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx4_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx4_vt_drift_wo_upd;    
//----
   
//DX5BDLR0
   reg [5:0]                DQ0WBD_5_0_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx5_vt_drift_wo_upd;  
//DX5BDLR1
   reg [5:0]                DQ5WBD_5_0_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx5_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx5_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx5_vt_drift_wo_upd;     
//DX5BDLR2
   reg [5:0]                DSOEBD_5_0_dx5_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx5_vt_drift_wo_upd;   
   reg [5:0]                DSRBD_17_12_dx5_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx5_vt_drift_wo_upd;
//DX5BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx5_vt_drift_wo_upd;    
//DX5BDLR4
   reg [5:0]                DQ5RBD_5_0_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx5_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx5_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx5_vt_drift_wo_upd;
//DX5LCDLR0
   reg [7:0]                R0WLD_7_0_dx5_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx5_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx5_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx5_vt_drift_wo_upd;
//DX5LCDLR1
   reg [7:0]                WDQD_7_0_dx5_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx5_vt_drift_wo_upd;     
   reg [7:0]                RDQSND_23_16_dx5_vt_drift_wo_upd;     
//DX5LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx5_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx5_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx5_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx5_vt_drift_wo_upd;      
//DX5MDLR
   reg [7:0]                IPRD_7_0_dx5_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx5_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx5_vt_drift_wo_upd;   
//----

//DX6BDLR0
   reg [5:0]                DQ0WBD_5_0_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx6_vt_drift_wo_upd;  
//DX6BDLR1
   reg [5:0]                DQ5WBD_5_0_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx6_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx6_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx6_vt_drift_wo_upd;   
//DX6BDLR2
   reg [5:0]                DSOEBD_5_0_dx6_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx6_vt_drift_wo_upd;  
   reg [5:0]                DSRBD_17_12_dx6_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx6_vt_drift_wo_upd;
//DX6BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx6_vt_drift_wo_upd;     
//DX6BDLR4
   reg [5:0]                DQ5RBD_5_0_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx6_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx6_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx6_vt_drift_wo_upd;
//DX6LCDLR0
   reg [7:0]                R0WLD_7_0_dx6_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx6_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx6_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx6_vt_drift_wo_upd;
//DX6LCDLR1
   reg [7:0]                WDQD_7_0_dx6_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx6_vt_drift_wo_upd;    
   reg [7:0]                RDQSND_23_16_dx6_vt_drift_wo_upd;     
//DX6LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx6_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx6_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx6_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx6_vt_drift_wo_upd;      
//DX6MDLR
   reg [7:0]                IPRD_7_0_dx6_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx6_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx6_vt_drift_wo_upd;    
//----

//DX7BDLR0
   reg [5:0]                DQ0WBD_5_0_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx7_vt_drift_wo_upd;  
//DX7BDLR1
   reg [5:0]                DQ5WBD_5_0_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx7_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx7_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx7_vt_drift_wo_upd;      
//DX7BDLR2
   reg [5:0]                DSOEBD_5_0_dx7_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx7_vt_drift_wo_upd;    
   reg [5:0]                DSRBD_17_12_dx7_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx7_vt_drift_wo_upd;
//DX7BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx7_vt_drift_wo_upd;    
//DX7BDLR4
   reg [5:0]                DQ5RBD_5_0_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx7_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx7_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx7_vt_drift_wo_upd;
//DX7LCDLR0
   reg [7:0]                R0WLD_7_0_dx7_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx7_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx7_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx7_vt_drift_wo_upd;
//DX7LCDLR1
   reg [7:0]                WDQD_7_0_dx7_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx7_vt_drift_wo_upd;     
   reg [7:0]                RDQSND_23_16_dx7_vt_drift_wo_upd;     
//DX7LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx7_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx7_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx7_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx7_vt_drift_wo_upd;      
//DX7MDLR
   reg [7:0]                IPRD_7_0_dx7_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx7_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx7_vt_drift_wo_upd;    
//----

//DX8BDLR0
   reg [5:0]                DQ0WBD_5_0_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ1WBD_11_6_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ2WBD_17_12_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ3WBD_23_18_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ4WBD_29_24_dx8_vt_drift_wo_upd; 
//DX8BDLR1
   reg [5:0]                DQ5WBD_5_0_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ6WBD_11_6_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ7WBD_17_12_dx8_vt_drift_wo_upd;
   reg [5:0]                DMWBD_23_18_dx8_vt_drift_wo_upd;
   reg [5:0]                DSWBD_29_24_dx8_vt_drift_wo_upd;  
//DX8BDLR2
   reg [5:0]                DSOEBD_5_0_dx8_vt_drift_wo_upd;
   reg [5:0]                DQOEBD_11_6_dx8_vt_drift_wo_upd;  
   reg [5:0]                DSRBD_17_12_dx8_vt_drift_wo_upd;
   reg [5:0]                DSNRBD_23_18_dx8_vt_drift_wo_upd;
//DX8BDLR3 
   reg [5:0]                DQ0RBD_5_0_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ1RBD_11_6_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ2RBD_17_12_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ3RBD_23_18_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ4RBD_29_24_dx8_vt_drift_wo_upd;  
//DX8BDLR4
   reg [5:0]                DQ5RBD_5_0_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ6RBD_11_6_dx8_vt_drift_wo_upd;
   reg [5:0]                DQ7RBD_17_12_dx8_vt_drift_wo_upd;
   reg [5:0]                DMRBD_23_18_dx8_vt_drift_wo_upd;
//DX8LCDLR0
   reg [7:0]                R0WLD_7_0_dx8_vt_drift_wo_upd;
   reg [7:0]                R1WLD_15_8_dx8_vt_drift_wo_upd;   
   reg [7:0]                R2WLD_23_16_dx8_vt_drift_wo_upd;
   reg [7:0]                R3WLD_31_24_dx8_vt_drift_wo_upd;
//DX8LCDLR1
   reg [7:0]                WDQD_7_0_dx8_vt_drift_wo_upd;
   reg [7:0]                RDQSD_15_8_dx8_vt_drift_wo_upd;     
   reg [7:0]                RDQSND_23_16_dx8_vt_drift_wo_upd;     
//DX8LCDLR2
   reg [7:0]                R0DQSGD_7_0_dx8_vt_drift_wo_upd;
   reg [7:0]                R1DQSGD_15_8_dx8_vt_drift_wo_upd;   
   reg [7:0]                R2DQSGD_23_16_dx8_vt_drift_wo_upd;
   reg [7:0]                R3DQSGD_31_24_dx8_vt_drift_wo_upd;      
//DX8MDLR
   reg [7:0]                IPRD_7_0_dx8_vt_drift_wo_upd;
   reg [7:0]                TPRD_15_8_dx8_vt_drift_wo_upd;
   reg [7:0]                MDLD_23_16_dx8_vt_drift_wo_upd;   

//----      

   
`ifdef FUNCOV
  
////////////////////////////////////////
////////////////////////////////////////
// Objects from the typdef enumeration
////////////////////////////////////////
////////////////////////////////////////   
 
register_name_e  reg_name;
vt_drift_scn_e1   vt_drift_scn1; 
vt_drift_scn_e2   vt_drift_scn2;
vt_upd_req_scn_e  vt_upd_req_scn;
  
/////////////////////////////////////
/////////////////////////////////////
//Cover Groups for registers
/////////////////////////////////////
/////////////////////////////////////

  
 
   covergroup register_read_access;
      type_option.goal = 100;
      coverpoint reg_name;      
      option.comment = "Coverage for Register access read";  
   endgroup // register_read_access    
   
   //---------------------------------------------------------
   // Coverage group for vt drift scenario
   //---------------------------------------------------------

   covergroup vt_drift_scenario;      
      type_option.goal = 100; 
      coverpoint vt_drift_scn1;
      coverpoint vt_drift_scn2;             
      option.comment = "Coverage for VT drift scenarios";                                        
   endgroup // vt_drift_scenario

   covergroup vt_upd_req_scenario;
      type_option.goal = 100; 
      coverpoint vt_upd_req_scn;
      option.comment = "Coverage for VT Update Request scenarios";                                        
   endgroup // vt_upd_req_scenario

          
   covergroup RIDR;
      type_option.goal = 100;
      coverpoint PUBMNR_3_0 { 
         bins PUBMNR_3_0_value_0   = {0};                              
      }
      coverpoint PUBMDR_7_4 {
         bins PUBMDR_7_4_value_1   = {1};                             
      }
      coverpoint PUBMJR_11_8 {
         bins PUBMJR_11_8_value_2  = {2};                             
      }
      coverpoint  PHYMNR_15_12 { 
         bins PHYMNR_15_12_value_0 = {0};                              
      }                             
      coverpoint PHYMDR_19_16 { 
         bins PHYMDR_19_16_value_0 = {0};                              
      }                             
      coverpoint PHYMJR_23_20 { 
         bins PHYMJR_23_20_value_1 = {1};                              
      }                            
      coverpoint UDRID_31_24 { 
         bins UDRID_31_24_value_0  = {0};                              
      }                            
 
      //Toggling coverpoints
      `COVERPOINT_4BITS_TOGGLING(PUBMNR_3_0_T)   
      `COVERPOINT_4BITS_TOGGLING(PUBMDR_7_4_T)   
      `COVERPOINT_4BITS_TOGGLING(PUBMJR_11_8_T)   
      `COVERPOINT_4BITS_TOGGLING(PHYMNR_15_12_T)   
      `COVERPOINT_4BITS_TOGGLING(PHYMDR_19_16_T)   
      `COVERPOINT_4BITS_TOGGLING(PHYMJR_23_20_T)   
      `COVERPOINT_8BITS_TOGGLING(UDRID_31_24_T)
      option.comment = "Coverage for RIDR register";  
   endgroup // RIDR

   covergroup PIR;
      type_option.goal = 100;
      coverpoint  PHYINIT_0;         
      coverpoint  ZCAL_1;            
      //coverpoint  PIR_RESERVED_3_2;  
      coverpoint  PLLINIT_4;         
      coverpoint  DCAL_5;            
      coverpoint  PHYRST_6;          
      coverpoint  DRAMRST_7;         
      coverpoint  DRAMINIT_8;        
      coverpoint  WL_9;              
      coverpoint  QSGATE_10;         
      coverpoint  WLADJ_11;          
      coverpoint  RDDSKW_12;         
      coverpoint  WRDSKW_13;         
      coverpoint  RDEYE_14;          
      coverpoint  WREYE_15;          
      coverpoint  ICPC_16;           
      coverpoint  PLLBYP_17;         
      coverpoint  CTLDINIT_18;
      coverpoint  RDIMMINIT_19;
      //coverpoint  PIR_RESERVED_26_20;
      coverpoint  CLRSR_27;          
      coverpoint  LOCKBYP_28;        
      coverpoint  DCALBYP_29;        
      coverpoint  ZCALBYP_30;        
      coverpoint  INITBYP_31;          
       
      //Toggling coverpoints
      coverpoint  PHYINIT_0_T;         
      coverpoint  ZCAL_1_T;            
      `COVERPOINT_2BITS_TOGGLING(PIR_RESERVED_3_2_T)  
      coverpoint  PLLINIT_4_T;         
      coverpoint  DCAL_5_T;            
      coverpoint  PHYRST_6_T;          
      coverpoint  DRAMRST_7_T;         
      coverpoint  DRAMINIT_8_T;        
      coverpoint  WL_9_T;              
      coverpoint  QSGATE_10_T;         
      coverpoint  WLADJ_11_T;          
      coverpoint  RDDSKW_12_T;         
      coverpoint  WRDSKW_13_T;         
      coverpoint  RDEYE_14_T;          
      coverpoint  WREYE_15_T;          
      coverpoint  ICPC_16_T;           
      coverpoint  PLLBYP_17_T;         
      coverpoint  CTLDINIT_18_T;
      coverpoint  RDIMMINIT_19_T;
      `COVERPOINT_7BITS_TOGGLING(PIR_RESERVED_26_20_T)
      coverpoint  CLRSR_27_T;          
      coverpoint  LOCKBYP_28_T;        
      coverpoint  DCALBYP_29_T;        
      coverpoint  ZCALBYP_30_T;        
      coverpoint  INITBYP_31_T;
      option.comment = "Coverage for PIR register"; 
   endgroup // PIR
   
   covergroup PGCR0;
     type_option.goal = 100; 
     coverpoint  WLLVT_0;      
     coverpoint  WDLVT_1;
     coverpoint  RDLVT_2;
     coverpoint  RGLVT_3;
     coverpoint  WDBVT_4;
     coverpoint  RDBVT_5;
     coverpoint  DLTMODE_6;
     coverpoint  DLTST_7;
     coverpoint  OSCEN_8;
     coverpoint  OSCDIV_11_9;
     coverpoint  OSCWDL_13_12;      
     `COVERPOINT_SPECIAL_RANGE1(DTOSEL_18_14)
     //coverpoint  PGCR0_RESERVED_25_19;
     coverpoint  CKEN_31_26;
      
     //Toggling coverpoints
     coverpoint  WLLVT_0_T;      
     coverpoint  WDLVT_1_T;
     coverpoint  RDLVT_2_T;
     coverpoint  RGLVT_3_T;
     coverpoint  WDBVT_4_T;
     coverpoint  RDBVT_5_T;
     coverpoint  DLTMODE_6_T;
     coverpoint  DLTST_7_T;
     coverpoint  OSCEN_8_T;
     `COVERPOINT_3BITS_TOGGLING(OSCDIV_11_9_T) 
     `COVERPOINT_2BITS_TOGGLING(OSCWDL_13_12_T)
     `COVERPOINT_5BITS_TOGGLING(DTOSEL_18_14_T)   
     `COVERPOINT_7BITS_TOGGLING(PGCR0_RESERVED_25_19_T)
     `COVERPOINT_6BITS_TOGGLING(CKEN_31_26_T)      

     cross  OSCDIV_11_9, OSCWDL_13_12 {
        ignore_bins OSCDIV_OSCWDL_0 = ((binsof(OSCDIV_11_9) intersect {1,2,3,4,5,6}) && (binsof(OSCWDL_13_12) intersect {1,2,3}));
        ignore_bins OSCDIV_OSCWDL_1 = ((binsof(OSCDIV_11_9) intersect {7})           && (binsof(OSCWDL_13_12) intersect {0,1,2}));
     }
     
     option.comment = "Coverage for PGCR0 register";      
   endgroup // PGCR0   
   
   covergroup PGCR1;
     type_option.goal = 100;      
     coverpoint  PDDISDX_0;      
     coverpoint  WLMODE_1;       
     coverpoint  WLSTEP_2;       
     coverpoint  WLUNCRT_3 {
        bins value_0 = {0};
     }      
     //coverpoint  PGCR1_RESERVED_5_4;     
     coverpoint  WLSELT_6;       
     coverpoint  IODDRM_8_7;     
     coverpoint  MDLEN_9;        
     coverpoint  LPFEN_10;       
     coverpoint  LPFDEPTH_12_11; 
     coverpoint  FDEPTH_14_13;   
     coverpoint  DLDLMT_22_15;   
     coverpoint  ZCKSEL_24_23;   
     coverpoint  PHYHRST_25;     
     coverpoint  INHVT_26;       
     coverpoint  IOLB_27;        
     coverpoint  LBDQSS_28;      
     coverpoint  LBGDQS_30_29;   
     coverpoint  LBMODE_31;      

     //Toggling coverpoints
     coverpoint  PDDISDX_0_T;      
     coverpoint  WLMODE_1_T;       
     coverpoint  WLSTEP_2_T;       
     coverpoint  WLUNCRT_3_T;
     `COVERPOINT_2BITS_TOGGLING(PGCR1_RESERVED_5_4_T)     
     coverpoint  WLSELT_6_T;    
     `COVERPOINT_2BITS_TOGGLING(IODDRM_8_7_T)     
     coverpoint  MDLEN_9_T;     
     coverpoint  LPFEN_10_T;    
     `COVERPOINT_2BITS_TOGGLING(LPFDEPTH_12_11_T) 
     `COVERPOINT_2BITS_TOGGLING(FDEPTH_14_13_T) 
     `COVERPOINT_8BITS_TOGGLING(DLDLMT_22_15_T)   
     `COVERPOINT_2BITS_TOGGLING(ZCKSEL_24_23_T)   
     coverpoint  PHYHRST_25_T;  
     coverpoint  INHVT_26_T;    
     coverpoint  IOLB_27_T;     
     coverpoint  LBDQSS_28_T;   
     `COVERPOINT_2BITS_TOGGLING(LBGDQS_30_29_T)   
     coverpoint  LBMODE_31_T;
     option.comment = "Coverage for PGCR1 register";       
   endgroup // PGCR1
   
   covergroup PGSR0;
     type_option.goal = 100;
     coverpoint  IDONE_0;               
     coverpoint  PLDONE_1;              
     coverpoint  DCDONE_2;              
     coverpoint  ZCDONE_3;              
     coverpoint  DIDONE_4;              
     coverpoint  WLDONE_5;              
     coverpoint  QSGDONE_6;             
     coverpoint  WLADONE_7;             
     coverpoint  RDDONE_8;              
     coverpoint  WDDONE_9;              
     coverpoint  REDONE_10;             
     coverpoint  WEDONE_11;             
     //coverpoint  PGSR0_RESERVED_19_12;  
     coverpoint  ZCERR_20;              
     coverpoint  WLERR_21;              
     coverpoint  QSGERR_22;             
     coverpoint  WLAERR_23;             
     coverpoint  RDERR_24;              
     coverpoint  WDERR_25;              
     coverpoint  REERR_26;              
     coverpoint  WEERR_27;              
     //coverpoint  PGSR0_RESERVED_30_28;           
     coverpoint  APLOCK_31;             

     //Toggling coverpoints 
     coverpoint  IDONE_0_T;               
     coverpoint  PLDONE_1_T;              
     coverpoint  DCDONE_2_T;              
     coverpoint  ZCDONE_3_T;              
     coverpoint  DIDONE_4_T;              
     coverpoint  WLDONE_5_T;              
     coverpoint  QSGDONE_6_T;             
     coverpoint  WLADONE_7_T;             
     coverpoint  RDDONE_8_T;              
     coverpoint  WDDONE_9_T;              
     coverpoint  REDONE_10_T;             
     coverpoint  WEDONE_11_T;             
     `COVERPOINT_8BITS_TOGGLING(PGSR0_RESERVED_19_12_T)  
     coverpoint  ZCERR_20_T;              
     coverpoint  WLERR_21_T;              
     coverpoint  QSGERR_22_T;             
     coverpoint  WLAERR_23_T;             
     coverpoint  RDERR_24_T;              
     coverpoint  WDERR_25_T;              
     coverpoint  REERR_26_T;              
     coverpoint  WEERR_27_T;              
     `COVERPOINT_3BITS_TOGGLING(PGSR0_RESERVED_30_28_T)           
     coverpoint  APLOCK_31_T;             
     option.comment = "Coverage for PGSR0 register";       
   endgroup // PGSR0
   
   covergroup PGSR1;
     type_option.goal = 100;
     coverpoint  DLTDONE_0;
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1) 
     //coverpoint  PGSR1_RESERVED_29_25;
     coverpoint  VTSTOP_30;
     coverpoint  PARERR_31;

     //Toggling coverpoints   
     coverpoint  DLTDONE_0_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_T)  
     `COVERPOINT_5BITS_TOGGLING(PGSR1_RESERVED_29_25_T)
     coverpoint  VTSTOP_30_T;
     coverpoint  PARERR_31_T;       
     option.comment = "Coverage for PGSR1 register";       
   endgroup // PGSR1                                                     
      
   covergroup PLLCR;
     type_option.goal = 100;
     coverpoint  DTC_1_0;
     `COVERPOINT_SPECIAL_RANGE3(ATC_5_2)
     `COVERPOINT_SPECIAL_RANGE3(ATOEN_9_6)
     coverpoint  GSHIFT_10;
     `COVERPOINT_2BITS_ONE_HOT(CPIC_12_11)
     `COVERPOINT_4BITS_ONE_HOT(CPPC_16_13)
     coverpoint  QPMODE_17;
     coverpoint  FRQSEL_19_18;
     //coverpoint  PLLCR_RESERVED_28_20; 
     coverpoint  PLLPD_29;             
     coverpoint  PLLRST_30;            
     coverpoint  BYP_31;               
     
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(DTC_1_0_T) 
     `COVERPOINT_4BITS_TOGGLING(ATC_5_2_T)
     `COVERPOINT_4BITS_TOGGLING(ATOEN_9_6_T)               
     coverpoint  GSHIFT_10_T;
     `COVERPOINT_2BITS_TOGGLING(CPIC_12_11_T)      
     `COVERPOINT_4BITS_TOGGLING(CPPC_16_13_T)    
     coverpoint  QPMODE_17_T;
     `COVERPOINT_2BITS_TOGGLING(FRQSEL_19_18_T)
     `COVERPOINT_9BITS_TOGGLING(PLLCR_RESERVED_28_20_T)
     coverpoint  PLLPD_29_T;             
     coverpoint  PLLRST_30_T;            
     coverpoint  BYP_31_T;               
     option.comment = "Coverage for PLLCR register";       
   endgroup // PLLCR   
 
   covergroup PTR0;
     type_option.goal = 100;
     coverpoint  tPHYRST_5_0 {
        bins tPHYRST_5_0_value1 = {1};
        bins tPHYRST_5_0_value2 = {2};        
        bins tPHYRST_5_0_value30 = {30};
        bins tPHYRST_5_0_value31 = {31};
        bins tPHYRST_5_0_value32 = {32};
        bins tPHYRST_5_0_value63 = {63};        
     }
     coverpoint  tPLLGS_20_6 {
        bins tPLLGS_20_6_value0 = {0};
        bins tPLLGS_20_6_value1 = {1};
        bins tPLLGS_20_6_value2 = {2};
        bins tPLLGS_20_6_value16000 = {16000};        
        bins tPLLGS_20_6_value16383 = {16383};
        bins tPLLGS_20_6_value16384 = {16384};
        bins tPLLGS_20_6_value16385 = {16385};
        bins tPLLGS_20_6_value32767 = {32767}; 
     }                              

     coverpoint tPLLPD_31_21 {
        bins tPLLPD_31_21_value0 = {0};
        bins tPLLPD_31_21_value1 = {1};
        bins tPLLPD_31_21_value2 = {2};
        bins tPLLPD_31_21_value400 = {400};        
        bins tPLLPD_31_21_value1022 = {1022};
        bins tPLLPD_31_21_value1023 = {1023};
        bins tPLLPD_31_21_value1024 = {1024};
        bins tPLLPD_31_21_value2047 = {2047}; 
     }

     // Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(tPHYRST_5_0_T)  
     `COVERPOINT_15BITS_TOGGLING(tPLLGS_20_6_T)
     `COVERPOINT_11BITS_TOGGLING(tPLLPD_31_21_T)    
     option.comment = "Coverage for PTR0 register";       
   endgroup // PTR0
   
   covergroup PTR1;
     type_option.goal = 100;
     coverpoint tPLLRST_12_0 {
        bins tPLLRST_12_0_value0 = {0};
        bins tPLLRST_12_0_value1 = {1};
        bins tPLLRST_12_0_value2 = {2};
        bins tPLLRST_12_0_value1200 = {1200};        
        bins tPLLRST_12_0_value4094 = {4094};
        bins tPLLRST_12_0_value4095 = {4095};
        bins tPLLRST_12_0_value4096 = {4096};
        bins tPLLRST_12_0_value8191 = {8191}; 
     }     
     //coverpoint  PTR1_RESERVED_15_13;
     coverpoint tPLLLOCK_31_15 {     
        bins tPLLLOCK_31_15_value0 = {0};
        bins tPLLLOCK_31_15_value1 = {1};
        bins tPLLLOCK_31_15_value2 = {2};
        bins tPLLLOCK_31_15_value4000 = {4000};        
        bins tPLLLOCK_31_15_value32766 = {32766};
        bins tPLLLOCK_31_15_value32767 = {32767};
        bins tPLLLOCK_31_15_value32768 = {32768};
        bins tPLLLOCK_31_15_value65535 = {65535}; 
     }         

     //Toggling coverpoints
     `COVERPOINT_13BITS_TOGGLING(tPLLRST_12_0_T)    
     `COVERPOINT_2BITS_TOGGLING(PTR1_RESERVED_14_13_T)
     `COVERPOINT_16BITS_TOGGLING(tPLLLOCK_31_15_T)   
     option.comment = "Coverage for PTR1 register";       
   endgroup // PTR1
   
   covergroup PTR2;
     type_option.goal = 100;
     `COVERPOINT_SPECIAL_RANGE6_wo_0(tCALON_4_0)
     `COVERPOINT_SPECIAL_RANGE6(tCALS_9_5)
     `COVERPOINT_SPECIAL_RANGE6_wo_0(tCALH_14_10)
     `COVERPOINT_SPECIAL_RANGE6(tWLDLYS_19_15)
     //coverpoint  PTR2_RESERVED_31_20; 

     //Toggling coverpoints
     `COVERPOINT_5BITS_TOGGLING(tCALON_4_0_T)
     `COVERPOINT_5BITS_TOGGLING(tCALS_9_5_T)  
     `COVERPOINT_5BITS_TOGGLING(tCALH_14_10_T)
     `COVERPOINT_5BITS_TOGGLING(tWLDLYS_19_15_T)
     `COVERPOINT_12BITS_TOGGLING(PTR2_RESERVED_31_20_T)     
     option.comment = "Coverage for PTR2 register";       
   endgroup // PTR2   

   covergroup PTR3;
     type_option.goal = 100;
     coverpoint tDINIT0_19_0 {
        bins tDINIT0_19_0_value0 = {0};
        bins tDINIT0_19_0_value1 = {1};
        bins tDINIT0_19_0_value2 = {2};
        bins tDINIT0_19_0_value524287 = {524287};
        bins tDINIT0_19_0_value524288 = {524288};
        bins tDINIT0_19_0_value524289 = {524289};
        bins tDINIT0_19_0_value533334 = {533334};        
        bins tDINIT0_19_0_value1048575 = {1048575};                               
     }
                              
     `COVERPOINT_SPECIAL_RANGE9(tDINIT1_28_20)
     //coverpoint  PTR3_RESERVED_31_29; 

     //Toggling coverpoints
     `COVERPOINT_20BITS_TOGGLING(tDINIT0_19_0_T)
     `COVERPOINT_9BITS_TOGGLING(tDINIT1_28_20_T)
     `COVERPOINT_3BITS_TOGGLING(PTR3_RESERVED_31_29_T)     
     option.comment = "Coverage for PTR3 register";       
   endgroup // PTR3   
   
   covergroup PTR4;
     type_option.goal = 100;
     coverpoint tDINIT2_17_0 {
        bins tDINIT2_17_0_value0 = {0};
        bins tDINIT2_17_0_value1 = {1};
        bins tDINIT2_17_0_value2 = {2};
        bins tDINIT2_17_0_value131071 = {131071};
        bins tDINIT2_17_0_value131072 = {131072};
        bins tDINIT2_17_0_value131073 = {131073};        
        bins tDINIT2_17_0_value262143 = {262143};                               
     }
                              
     `COVERPOINT_SPECIAL_RANGE10(tDINIT3_27_18)
     //coverpoint  PTR3_RESERVED_31_28; 

     //Toggling coverpoints
     `COVERPOINT_18BITS_TOGGLING(tDINIT2_17_0_T)
     `COVERPOINT_10BITS_TOGGLING(tDINIT3_27_18_T)
     `COVERPOINT_4BITS_TOGGLING(PTR4_RESERVED_31_28_T)       
     option.comment = "Coverage for PTR4 register";       
   endgroup // PTR4   

   
   covergroup ACMDLR;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0) 
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16)
     //coverpoint  ACMDLR_RESERVED_31_24;

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(ACMDLR_RESERVED_31_24_T)                            
     option.comment = "Coverage for ACMDLR register";       
   endgroup // ACMDLR
   
   covergroup ACBDLR;
     type_option.goal = 100;
     coverpoint  CK0BD_5_0;
     coverpoint  CK1BD_11_6;
     coverpoint  CK2BD_17_12;   
     coverpoint  ACBD_23_18;
     //coverpoint  ACBDLR_RESERVED_31_24;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(CK0BD_5_0_T)
     `COVERPOINT_6BITS_TOGGLING(CK1BD_11_6_T)
     `COVERPOINT_6BITS_TOGGLING(CK2BD_17_12_T)
     `COVERPOINT_6BITS_TOGGLING(ACBD_23_18_T)                           
     `COVERPOINT_8BITS_TOGGLING(ACBDLR_RESERVED_31_24_T)   

     coverpoint  CK0BD_5_0_vt_drift;
     coverpoint  CK1BD_11_6_vt_drift;
     coverpoint  CK2BD_17_12_vt_drift;   
     coverpoint  ACBD_23_18_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(CK0BD_5_0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(CK1BD_11_6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(CK2BD_17_12_vt_drift_wo_upd)  
     `COVERPOINT_4_16BIT_RANGE(ACBD_23_18_vt_drift_wo_upd)
      
     //cross  CK0BD_5_0_vt_drift , vt_drift_scn1;
     //cross  CK1BD_11_6_vt_drift, vt_drift_scn1;
     //cross  CK2BD_17_12_vt_drift, vt_drift_scn1;   
     //cross  ACBD_23_18_vt_drift, vt_drift_scn1;

     //cross  CK0BD_5_0_vt_drift_wo_upd , vt_drift_scn2;
     //cross  CK1BD_11_6_vt_drift_wo_upd, vt_drift_scn2;
     //cross  CK2BD_17_12_vt_drift_wo_upd, vt_drift_scn2;   
     //cross  ACBD_23_18_vt_drift_wo_upd, vt_drift_scn2;
      
     option.comment = "Coverage for ACBDLR register";       
   endgroup // ACBDLR
   
   covergroup ACIOCR;
     type_option.goal = 100;
     coverpoint  ACIOM_0;
     coverpoint  ACOE_1;
     coverpoint  ACODT_2;
     coverpoint  ACPDD_3;
     coverpoint  ACPDR_4;
     `COVERPOINT_3BITS_ONE_HOT(CKODT_7_5)
     `COVERPOINT_3BITS_ONE_HOT(CKPDD_10_8)
     `COVERPOINT_3BITS_ONE_HOT(CKPDR_13_11)
     `COVERPOINT_4BITS_ONE_HOT(RANKODT_17_14)
     `COVERPOINT_4BITS_ONE_HOT(CSPDD_21_18)
     `COVERPOINT_4BITS_ONE_HOT(RANKPDR_25_22) 
     coverpoint  RSTODT_26;
     coverpoint  RSTPDD_27;
     coverpoint  RSTPDR_28;
     coverpoint  RSTIOM_29;
     coverpoint  ACSR_31_30;

     //Toggling coverpoints
     coverpoint  ACIOM_0_T;
     coverpoint  ACOE_1_T;
     coverpoint  ACODT_2_T;
     coverpoint  ACPDD_3_T;
     coverpoint  ACPDR_4_T;
     `COVERPOINT_3BITS_TOGGLING(CKODT_7_5_T)
     `COVERPOINT_3BITS_TOGGLING(CKPDD_10_8_T)
     `COVERPOINT_3BITS_TOGGLING(CKPDR_13_11_T)
     `COVERPOINT_4BITS_TOGGLING(RANKODT_17_14_T)  
     `COVERPOINT_4BITS_TOGGLING(CSPDD_21_18_T)
     `COVERPOINT_4BITS_TOGGLING(RANKPDR_25_22_T)
     coverpoint  RSTODT_26_T;
     coverpoint  RSTPDD_27_T;
     coverpoint  RSTPDR_28_T;
     coverpoint  RSTIOM_29_T;
     `COVERPOINT_2BITS_TOGGLING(ACSR_31_30_T)                                
     option.comment = "Coverage for ACIOCR register";       
   endgroup // ACIOCR
   
   covergroup DXCCR;
     type_option.goal = 100;
     coverpoint  DXODT_0;
     coverpoint  DXIOM_1;
     coverpoint  MDLEN_2;
     coverpoint  DXPDD_3;
     coverpoint  DXPDR_4;
     `COVERPOINT_4BITS_8MSB_VALUES_MSB0(DQSRES_8_5)
     `COVERPOINT_4BITS_8MSB_VALUES_MSB1(DQSNRES_12_9)
     coverpoint  DXSR_14_13;
     coverpoint  MSBUDQ_17_15;
     coverpoint  UDQODT_18;
     coverpoint  UDQPDD_19;
     coverpoint  UDQPDR_20;
     coverpoint  UDQIOM_21;  
     //coverpoint DXCCR_RESERVED_31_22;

     //Toggling coverpoints
     coverpoint  DXODT_0_T;
     coverpoint  DXIOM_1_T;      
     coverpoint  MDLEN_2_T;      
     coverpoint  DXPDD_3_T;      
     coverpoint  DXPDR_4_T;      
     `COVERPOINT_4BITS_TOGGLING(DQSRES_8_5_T)
     `COVERPOINT_4BITS_TOGGLING(DQSNRES_12_9_T)
     `COVERPOINT_2BITS_TOGGLING(DXSR_14_13_T)       
     `COVERPOINT_3BITS_TOGGLING(MSBUDQ_17_15_T)
     coverpoint  UDQODT_18_T;
     coverpoint  UDQPDD_19_T;
     coverpoint  UDQPDR_20_T;
     coverpoint  UDQIOM_21_T;  
     `COVERPOINT_10BITS_TOGGLING(DXCCR_RESERVED_31_22_T)   
     option.comment = "Coverage for DXCCR register";       
   endgroup // DXCCR

   covergroup DSGCR;
     type_option.goal = 100;
     coverpoint  PUREN_0;             
     coverpoint  BDISEN_1;            
     coverpoint  ZUEN_2;              
     coverpoint  LPIOPD_3;            
     coverpoint  LPPLLPD_4;           
     coverpoint  CUAEN_5;             
     coverpoint  DQSGX_6;             
     coverpoint  BRRMODE_7;
     coverpoint  PUAD_11_8;
     coverpoint  DTOODT_12;
     coverpoint  DTOPDD_13;
     coverpoint  DTOPDR_14;
     coverpoint  DTOIOM_15;
     coverpoint  DTOOE_16; 
     coverpoint  ATOAE_17; 
     coverpoint  RRMODE_18;           
     coverpoint  SDRMODE_19 {
        // This bit is not used, so only 1'b0 as default                     
        bins  SDRMODE_19_value_0   = {0};         
     }
     coverpoint  CKEPDD_23_20;        
     coverpoint  ODTPDD_27_24;        
     coverpoint  CKOE_28;             
     coverpoint  ODTOE_29;            
     coverpoint  RSTOE_30;            
     coverpoint  CKEOE_31;               
  
     //Toggling coverpoints
     coverpoint  PUREN_0_T;             
     coverpoint  BDISEN_1_T;            
     coverpoint  ZUEN_2_T;              
     coverpoint  LPIOPD_3_T;            
     coverpoint  LPPLLPD_4_T;           
     coverpoint  CUAEN_5_T;             
     coverpoint  DQSGX_6_T;             
     coverpoint  BRRMODE_7_T;
     coverpoint  PUAD_11_8_T;
     coverpoint  DTOODT_12_T;
     coverpoint  DTOPDD_13_T;
     coverpoint  DTOPDR_14_T;
     coverpoint  DTOIOM_15_T;
     coverpoint  DTOOE_16_T; 
     coverpoint  ATOAE_17_T; 
     coverpoint  RRMODE_18_T;           
     coverpoint  SDRMODE_19_T;          
     `COVERPOINT_4BITS_TOGGLING(CKEPDD_23_20_T)        
     `COVERPOINT_4BITS_TOGGLING(ODTPDD_27_24_T)        
     coverpoint  CKOE_28_T;             
     coverpoint  ODTOE_29_T;            
     coverpoint  RSTOE_30_T;            
     coverpoint  CKEOE_31_T;        

     option.comment = "Coverage for DSGCR register";       
   endgroup // DSGCR

     
   covergroup DCR;
     type_option.goal = 100;
     coverpoint  DDRMD_2_0 {
        bins DDRMD_2_0_ddr2_value_2 = {2};
        bins DDRMD_2_0_ddr3_value_3 = {3};
     }
     coverpoint  DDR8BNK_3;          
     coverpoint  PDQ_6_4;            
     coverpoint  MPRDQ_7;            
     coverpoint  DDRTYPE_9_8 {
        bins DDRTYPE_9_8_value_0  = {0};
     }        
     coverpoint  BYTEMASK_17_10;     
     //coverpoint  DCR_RESERVED_26_18; 
     coverpoint  NOSRA_27;           
     coverpoint  DDR2T_28;           
     coverpoint  UDIMM_29;           
     //coverpoint  DCR_RESERVED_31_30;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(DDRMD_2_0_T)          
     coverpoint  DDR8BNK_3_T;        
     `COVERPOINT_3BITS_TOGGLING(PDQ_6_4_T)            
     coverpoint  MPRDQ_7_T;          
     `COVERPOINT_2BITS_TOGGLING(DDRTYPE_9_8_T)        
     `COVERPOINT_8BITS_TOGGLING(BYTEMASK_17_10_T)     
     `COVERPOINT_9BITS_TOGGLING(DCR_RESERVED_26_18_T)
     coverpoint  NOSRA_27_T;           
     coverpoint  DDR2T_28_T;           
     coverpoint  UDIMM_29_T;           
     coverpoint  DCR_RESERVED_31_30_T;

     option.comment = "Coverage for DCR register";       
   endgroup // DCR

   covergroup DTPR0;
     type_option.goal = 100;
     coverpoint  tRTP_3_0 {
        bins tRTP_3_0_value2 = {2};
        bins tRTP_3_0_value3 = {3};
        bins tRTP_3_0_value4 = {4};
        bins tRTP_3_0_value5 = {5};
        bins tRTP_3_0_value6 = {6};
     }  
     coverpoint  tWTR_7_4 {
        bins tWTR_7_4_value1 = {1};
        bins tWTR_7_4_value2 = {2};
        bins tWTR_7_4_value3 = {3};
        bins tWTR_7_4_value4 = {4};
        bins tWTR_7_4_value5 = {5};
        bins tWTR_7_4_value6 = {6};
     }
                     
     coverpoint  tRP_11_8 {
        bins tRP_11_8_value2  = {2};
        bins tRP_11_8_value3  = {3};
        bins tRP_11_8_value4  = {4};
        bins tRP_11_8_value5  = {5};
        bins tRP_11_8_value6  = {6};
        bins tRP_11_8_value7  = {7};
        bins tRP_11_8_value8  = {8};
        bins tRP_11_8_value9  = {9};
        bins tRP_11_8_value10 = {10};
        bins tRP_11_8_value11 = {11};
     }
         
     coverpoint  tRCD_15_12 {
        bins tRCD_15_12_value2  = {2};
        bins tRCD_15_12_value3  = {3};
        bins tRCD_15_12_value4  = {4};
        bins tRCD_15_12_value5  = {5};
        bins tRCD_15_12_value6  = {6};
        bins tRCD_15_12_value7  = {7};
        bins tRCD_15_12_value8  = {8};
        bins tRCD_15_12_value9  = {9};
        bins tRCD_15_12_value10 = {10};
        bins tRCD_15_12_value11 = {11};
     }
                       
     coverpoint  tRAS_21_16 {
        bins tRAS_21_16_value2   = {2};
        bins tRAS_21_16_value3   = {3};
        bins tRAS_21_16_value4   = {4};
        bins tRAS_21_16_value5   = {5};
        bins tRAS_21_16_value6   = {6};
        bins tRAS_21_16_value7   = {7};
        bins tRAS_21_16_value8   = {8};
        bins tRAS_21_16_value9   = {9};
        bins tRAS_21_16_value10  = {10};
        bins tRAS_21_16_value11  = {11};
        bins tRAS_21_16_value12  = {12};
        bins tRAS_21_16_value13  = {13};
        bins tRAS_21_16_value14  = {14};
        bins tRAS_21_16_value15  = {15};
        bins tRAS_21_16_value16  = {16};
        bins tRAS_21_16_value17  = {17};
        bins tRAS_21_16_value18  = {18};
        bins tRAS_21_16_value19  = {19};
        bins tRAS_21_16_value20  = {20};
        bins tRAS_21_16_value21  = {21};
        bins tRAS_21_16_value22  = {22};
        bins tRAS_21_16_value23  = {23};
        bins tRAS_21_16_value24  = {24};
        bins tRAS_21_16_value25  = {25};
        bins tRAS_21_16_value26  = {26};
        bins tRAS_21_16_value27  = {27};
        bins tRAS_21_16_value28  = {28};
        bins tRAS_21_16_value29  = {29};
        bins tRAS_21_16_value30  = {30};
        bins tRAS_21_16_value31  = {31};
     }                           
     coverpoint  tRRD_25_22 {
        bins tRRD_25_22_value1  = {1};
        bins tRRD_25_22_value2  = {2};
        bins tRRD_25_22_value3  = {3};
        bins tRRD_25_22_value4  = {4};
        bins tRRD_25_22_value5  = {5};
        bins tRRD_25_22_value6  = {6};
        bins tRRD_25_22_value7  = {7};
        bins tRRD_25_22_value8  = {8};
     }                             
     coverpoint  tRC_31_26 {
        bins tRC_31_26_value2   = {2};
        bins tRC_31_26_value3   = {3};
        bins tRC_31_26_value4   = {4};
        bins tRC_31_26_value5   = {5};
        bins tRC_31_26_value6   = {6};
        bins tRC_31_26_value7   = {7};
        bins tRC_31_26_value8   = {8};
        bins tRC_31_26_value9   = {9};
        bins tRC_31_26_value10  = {10};
        bins tRC_31_26_value11  = {11};
        bins tRC_31_26_value12  = {12};
        bins tRC_31_26_value13  = {13};
        bins tRC_31_26_value14  = {14};
        bins tRC_31_26_value15  = {15};
        bins tRC_31_26_value16  = {16};
        bins tRC_31_26_value17  = {17};
        bins tRC_31_26_value18  = {18};
        bins tRC_31_26_value19  = {19};
        bins tRC_31_26_value20  = {20};
        bins tRC_31_26_value21  = {21};
        bins tRC_31_26_value22  = {22};
        bins tRC_31_26_value23  = {23};
        bins tRC_31_26_value24  = {24};
        bins tRC_31_26_value25  = {25};
        bins tRC_31_26_value26  = {26};
        bins tRC_31_26_value27  = {27};
        bins tRC_31_26_value28  = {28};
        bins tRC_31_26_value29  = {29};
        bins tRC_31_26_value30  = {30};
        bins tRC_31_26_value31  = {31};
        bins tRC_31_26_value32  = {32};
        bins tRC_31_26_value33  = {33};
        bins tRC_31_26_value34  = {34};
        bins tRC_31_26_value35  = {35};
        bins tRC_31_26_value36  = {36};
        bins tRC_31_26_value37  = {37};
        bins tRC_31_26_value38  = {38};
        bins tRC_31_26_value39  = {39};
        bins tRC_31_26_value40  = {40};
        bins tRC_31_26_value41  = {41};
        bins tRC_31_26_value42  = {42};
     }                            
  
     //Toggling coverpoints
    `COVERPOINT_4BITS_TOGGLING(tRTP_3_0_T)   
    `COVERPOINT_4BITS_TOGGLING(tWTR_7_4_T)  
    `COVERPOINT_4BITS_TOGGLING(tRP_11_8_T)  
    `COVERPOINT_4BITS_TOGGLING(tRCD_15_12_T)
    `COVERPOINT_6BITS_TOGGLING(tRAS_21_16_T)
    `COVERPOINT_4BITS_TOGGLING(tRRD_25_22_T)
    `COVERPOINT_6BITS_TOGGLING(tRC_31_26_T)
     option.comment = "Coverage for DTPR0 register";       
   endgroup // DTPR0

   covergroup DTPR1;
     type_option.goal = 100;
     coverpoint  tMRD_1_0;          
     coverpoint  tMOD_4_2 {
        bins tMOD_4_2_value_0 = {0};
        bins tMOD_4_2_value_1 = {1};
        bins tMOD_4_2_value_2 = {2};
        bins tMOD_4_2_value_3 = {3};
        bins tMOD_4_2_value_4 = {4};
        bins tMOD_4_2_value_5 = {5};
     }         
     coverpoint  tFAW_10_5;        
     coverpoint  tRFC_19_11;       
     coverpoint  tWLMRD_25_20;     
     coverpoint  tWLO_29_26;       
     coverpoint  tAOND_tAOFD_31_30;
  
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(tMRD_1_0_T)          
     `COVERPOINT_3BITS_TOGGLING(tMOD_4_2_T)         
     `COVERPOINT_6BITS_TOGGLING(tFAW_10_5_T)        
     `COVERPOINT_9BITS_TOGGLING(tRFC_19_11_T)       
     `COVERPOINT_6BITS_TOGGLING(tWLMRD_25_20_T)     
     `COVERPOINT_4BITS_TOGGLING(tWLO_29_26_T)       
     `COVERPOINT_2BITS_TOGGLING(tAOND_tAOFD_31_30_T)
     option.comment = "Coverage for DTPR1 register";       
   endgroup // DTPR1

   covergroup DTPR2;
     type_option.goal = 100;
     coverpoint  tXS_9_0 {
        ignore_bins tXS_9_0 = {0,1};
     }                          
     coverpoint  tXP_14_10 {
        ignore_bins tXP_14_10 = {0,1};
     }
     coverpoint  tCKE_18_15 {
        ignore_bins tCKE_18_15 = {0,1};
     }
     coverpoint  tDLLK_28_19 {
        ignore_bins tDLLK_28_19 = {0,1};
     }
     coverpoint  tRTODT_29;
     coverpoint  tRTW_30;
     coverpoint  tCCD_31;
  
     //coverpoint DTPR2_RESERVED_31_29;
     //Toggling coverpoints
     `COVERPOINT_10BITS_TOGGLING(tXS_9_0_T)             
     `COVERPOINT_5BITS_TOGGLING(tXP_14_10_T)           
     `COVERPOINT_4BITS_TOGGLING(tCKE_18_15_T)          
     `COVERPOINT_10BITS_TOGGLING(tDLLK_28_19_T)         
     coverpoint  tRTODT_29_T;
     coverpoint  tRTW_30_T;
     coverpoint  tCCD_31_T;
     option.comment = "Coverage for DTPR2 register";       
   endgroup // DTPR2   

   covergroup MR0_DDR3;
     type_option.goal = 100;
     coverpoint MR0_DDR3_BL_1_0 {
        bins MR0_DDR3_BL_value_0 = {0};     // 8 Fixed
        bins MR0_DDR3_BL_value_1 = {1};     // 4 or 4OTF
        bins MR0_DDR3_BL_value_2 = {2};     // 4 Fixed
        //bins MR0_DDR3_BL_value_3 = {3};   // Reserved
     }                    
     coverpoint MR0_DDR3_CL_2;
     coverpoint MR0_DDR3_BT_3;
     coverpoint MR0_DDR3_CL_6_4;

     cross MR0_DDR3_CL_6_4, MR0_DDR3_CL_2 {
        bins MR0_DDR3_CL_value_5  = ((binsof(MR0_DDR3_CL_6_4) intersect {1}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_6  = ((binsof(MR0_DDR3_CL_6_4) intersect {2}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_7  = ((binsof(MR0_DDR3_CL_6_4) intersect {3}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_8  = ((binsof(MR0_DDR3_CL_6_4) intersect {4}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_9  = ((binsof(MR0_DDR3_CL_6_4) intersect {5}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_10 = ((binsof(MR0_DDR3_CL_6_4) intersect {6}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_11 = ((binsof(MR0_DDR3_CL_6_4) intersect {7}) && (binsof(MR0_DDR3_CL_2) intersect {0}));
        bins MR0_DDR3_CL_value_12 = ((binsof(MR0_DDR3_CL_6_4) intersect {0}) && (binsof(MR0_DDR3_CL_2) intersect {1}));
        bins MR0_DDR3_CL_value_13 = ((binsof(MR0_DDR3_CL_6_4) intersect {1}) && (binsof(MR0_DDR3_CL_2) intersect {1}));
        bins MR0_DDR3_CL_value_14 = ((binsof(MR0_DDR3_CL_6_4) intersect {2}) && (binsof(MR0_DDR3_CL_2) intersect {1}));
     }
     coverpoint MR0_DDR3_TM_7;
     coverpoint MR0_DDR3_DR_8;
     coverpoint MR0_DDR3_WR_11_9 {
        bins MR0_DDR3_WR_value_5  = {1};                                  
        bins MR0_DDR3_WR_value_6  = {2};                                  
        bins MR0_DDR3_WR_value_7  = {3};                                  
        bins MR0_DDR3_WR_value_8  = {4};                                  
        bins MR0_DDR3_WR_value_10 = {5};                                  
        bins MR0_DDR3_WR_value_12 = {6};                                  
      }
     coverpoint MR0_DDR3_PD_12;
     //coverpoint MR0_DDR3_RSVD_15_13;
     //coverpoint MR0_DDR3_RESERVED_31_16;

     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(MR0_DDR3_BL_1_0_T)
     coverpoint MR0_DDR3_CL_2_T;  
     coverpoint MR0_DDR3_BT_3_T;
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR3_CL_6_4_T)
     coverpoint MR0_DDR3_TM_7_T;
     coverpoint MR0_DDR3_DR_8_T;
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR3_WR_11_9_T)
     coverpoint MR0_DDR3_PD_12_T;
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR3_RSVD_15_13_T)
     `COVERPOINT_16BITS_TOGGLING(MR0_DDR3_RESERVED_31_16_T)
     option.comment = "Coverage for MR0 register on DDR3 mode";       
   endgroup // MR0_DDR3  

   covergroup MR0_DDR2;
     type_option.goal = 100;
     coverpoint MR0_DDR2_BL_2_0 {
        bins MR0_DDR2_BL_value_2 = {2};     // 4 Fixed
        bins MR0_DDR2_BL_value_3 = {3};     // 8 Fixed
     }                    
     coverpoint MR0_DDR2_BT_3;
     coverpoint MR0_DDR2_CL_6_4 {
        bins MR0_DDR2_CL_value_2  = {2};
        bins MR0_DDR2_CL_value_3  = {3};
        bins MR0_DDR2_CL_value_4  = {4};
        bins MR0_DDR2_CL_value_5  = {5};
        bins MR0_DDR2_CL_value_6  = {6};
     }
     coverpoint MR0_DDR2_TM_7 {
        ignore_bins MR0_DDR2_TM_7 = {1};    // TM Test mode
     }                       
     coverpoint MR0_DDR2_DR_8;
     coverpoint MR0_DDR2_WR_11_9{
        bins MR0_DDR2_WR_value_2  = {1};                                  
        bins MR0_DDR2_WR_value_3  = {2};                                  
        bins MR0_DDR2_WR_value_4  = {3};                                  
        bins MR0_DDR2_WR_value_5  = {4};                                  
        bins MR0_DDR2_WR_value_6  = {5};                                  
      }
     coverpoint MR0_DDR2_PD_12;
     //coverpoint MR0_DDR2_MR0_RSVD_15_13;
     //coverpoint MR0_DDR2_MR0_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR2_BL_2_0_T)
     coverpoint MR0_DDR2_BT_3_T;
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR2_CL_6_4_T)
     coverpoint MR0_DDR2_TM_7_T;
     coverpoint MR0_DDR2_DR_8_T;
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR2_WR_11_9_T)
     coverpoint MR0_DDR2_PD_12_T;
     `COVERPOINT_3BITS_TOGGLING(MR0_DDR2_RSVD_15_13_T)
     `COVERPOINT_16BITS_TOGGLING(MR0_DDR2_RESERVED_31_16_T)
     option.comment = "Coverage for MR0 register on DDR2 mode";       
   endgroup // MR0_DDR2 

   covergroup MR1_DDR3;
     type_option.goal = 100;
     coverpoint MR1_DDR3_DE_0;              
     coverpoint MR1_DDR3_DIC_1 {
        bins MR1_DDR3_BL_value_RZQ6 = {0};     // Reserved for RZQ6
        bins MR1_DDR3_BL_value_RZQ7 = {1};     // Reserved for RZQ6
     }        
     coverpoint MR1_DDR3_RTT_2;             
     coverpoint MR1_DDR3_AL_4_3 {
        bins MR1_DDR3_AL_value_0 = {0};
        bins MR1_DDR3_AL_value_1 = {1};
        bins MR1_DDR3_AL_value_2 = {2};
     }            
     coverpoint MR1_DDR3_DIC_5 {
        bins MR1_DDR3_DIC_value_0   = {0};
     }      
     coverpoint MR1_DDR3_RTT_6;             
     coverpoint MR1_DDR3_LEVEL_7;           
     //coverpoint MR1_DDR3_RSVD_8;        
     coverpoint MR1_DDR3_RTT_9;             
     //coverpoint MR1_DDR3_RSVD_10;       
     coverpoint MR1_DDR3_TDQS_11;      
     coverpoint MR1_DDR3_QOFF_12;           
     //coverpoint MR1_DDR3_RSVD_15_13;    
     //coverpoint MR1_DDR3_RESERVED_31_16;

     cross MR1_DDR3_DIC_5, MR1_DDR3_DIC_1 {
       bins MR1_DDR3_DIC_value_0 = ((binsof(MR1_DDR3_DIC_5) intersect {0}) && (binsof(MR1_DDR3_DIC_1) intersect {0}));
       bins MR1_DDR3_DIC_value_1 = ((binsof(MR1_DDR3_DIC_5) intersect {0}) && (binsof(MR1_DDR3_DIC_1) intersect {1}));
     }
     cross  MR1_DDR3_RTT_9, MR1_DDR3_RTT_6, MR1_DDR3_RTT_2 {
       bins MR1_DDR3_RTT_value_ODT_DIS    = ((binsof(MR1_DDR3_RTT_9) intersect {0}) && (binsof(MR1_DDR3_RTT_6) intersect {0}) &&  (binsof(MR1_DDR3_RTT_2) intersect {0}));
       bins MR1_DDR3_RTT_value_RZQ_DIV_4  = ((binsof(MR1_DDR3_RTT_9) intersect {0}) && (binsof(MR1_DDR3_RTT_6) intersect {0}) &&  (binsof(MR1_DDR3_RTT_2) intersect {1}));
       bins MR1_DDR3_RTT_value_RZQ_DIV_2  = ((binsof(MR1_DDR3_RTT_9) intersect {0}) && (binsof(MR1_DDR3_RTT_6) intersect {1}) &&  (binsof(MR1_DDR3_RTT_2) intersect {0}));
       bins MR1_DDR3_RTT_value_RZQ_DIV_6  = ((binsof(MR1_DDR3_RTT_9) intersect {0}) && (binsof(MR1_DDR3_RTT_6) intersect {1}) &&  (binsof(MR1_DDR3_RTT_2) intersect {1}));
       bins MR1_DDR3_RTT_value_RZQ_DIV_12 = ((binsof(MR1_DDR3_RTT_9) intersect {1}) && (binsof(MR1_DDR3_RTT_6) intersect {0}) &&  (binsof(MR1_DDR3_RTT_2) intersect {0}));
       bins MR1_DDR3_RTT_value_RZQ_DIV_8  = ((binsof(MR1_DDR3_RTT_9) intersect {1}) && (binsof(MR1_DDR3_RTT_6) intersect {0}) &&  (binsof(MR1_DDR3_RTT_2) intersect {1}));
     }
     //Toggling coverpoints
     coverpoint MR1_DDR3_DE_0_T;              
     coverpoint MR1_DDR3_DIC_1_T;             
     coverpoint MR1_DDR3_RTT_2_T;             
     `COVERPOINT_2BITS_TOGGLING(MR1_DDR3_AL_4_3_T)            
     coverpoint MR1_DDR3_DIC_5_T;             
     coverpoint MR1_DDR3_RTT_6_T;             
     coverpoint MR1_DDR3_LEVEL_7_T;           
     coverpoint MR1_DDR3_RSVD_8_T;        
     coverpoint MR1_DDR3_RTT_9_T;             
     coverpoint MR1_DDR3_RSVD_10_T;       
     coverpoint MR1_DDR3_TDQS_11_T;      
     coverpoint MR1_DDR3_QOFF_12_T;           
     `COVERPOINT_3BITS_TOGGLING(MR1_DDR3_RSVD_15_13_T)    
     `COVERPOINT_16BITS_TOGGLING(MR1_DDR3_RESERVED_31_16_T)
     option.comment = "Coverage for MR1 register on DDR3 mode";       
   endgroup //  MR1_DDR3  


   covergroup MR1_DDR2;
     type_option.goal = 100;
     coverpoint MR1_DDR2_DE_0;              
     coverpoint MR1_DDR2_DIC_1;             
     coverpoint MR1_DDR2_RTT_2;             
     coverpoint MR1_DDR2_AL_5_3{
        bins MR1_DDR2_AL_value_0 = {0};
        bins MR1_DDR2_AL_value_1 = {1};
        bins MR1_DDR2_AL_value_2 = {2};
        bins MR1_DDR2_AL_value_3 = {3};
        bins MR1_DDR2_AL_value_4 = {4};
        bins MR1_DDR2_AL_value_5 = {5};
     }                        
     coverpoint MR1_DDR2_RTT_6;             
     coverpoint MR1_DDR2_OCD_9_7 {
        bins MR1_DDR2_OCD_value_0  = {0};
        bins MR1_DDR2_OCD_value_1  = {1};
        bins MR1_DDR2_OCD_value_2  = {2};
        bins MR1_DDR2_OCD_value_4  = {4};
        bins MR1_DDR2_OCD_value_7  = {7};
     }          
     coverpoint MR1_DDR2_DQS_10;            
     coverpoint MR1_DDR2_RDQS_11;      
     coverpoint MR1_DDR2_QOFF_12;           
     //coverpoint MR1_DDR2_MR1_RSVD_15_13;    
     //coverpoint MR1_DDR2_MR1_RESERVED_31_16;

     cross  MR1_DDR2_RTT_6, MR1_DDR2_RTT_2 {
       bins MR1_DDR2_RTT_value_ODT_DIS   = ((binsof(MR1_DDR2_RTT_6) intersect {0}) &&  (binsof(MR1_DDR2_RTT_2) intersect {0}));
       bins MR1_DDR2_RTT_value_75_Ohm    = ((binsof(MR1_DDR2_RTT_6) intersect {0}) &&  (binsof(MR1_DDR2_RTT_2) intersect {1}));
       bins MR1_DDR2_RTT_value_150_Ohm   = ((binsof(MR1_DDR2_RTT_6) intersect {1}) &&  (binsof(MR1_DDR2_RTT_2) intersect {0}));
       bins MR1_DDR2_RTT_value_50_Ohm    = ((binsof(MR1_DDR2_RTT_6) intersect {1}) &&  (binsof(MR1_DDR2_RTT_2) intersect {1}));
     }

     //Toggling coverpoints
     coverpoint MR1_DDR2_DE_0_T;              
     coverpoint MR1_DDR2_DIC_1_T;             
     coverpoint MR1_DDR2_RTT_2_T;             
     `COVERPOINT_3BITS_TOGGLING(MR1_DDR2_AL_5_3_T)           
     coverpoint MR1_DDR2_RTT_6_T;             
     `COVERPOINT_3BITS_TOGGLING(MR1_DDR2_OCD_9_7_T)    
     coverpoint MR1_DDR2_DQS_10_T;            
     coverpoint MR1_DDR2_RDQS_11_T;      
     coverpoint MR1_DDR2_QOFF_12_T;           
     `COVERPOINT_3BITS_TOGGLING(MR1_DDR2_RSVD_15_13_T)    
     `COVERPOINT_16BITS_TOGGLING(MR1_DDR2_RESERVED_31_16_T)
     option.comment = "Coverage for MR1 register on DDR2 mode";       
   endgroup //  MR1_DDR2  

   covergroup MR2_DDR3;
     type_option.goal = 100;
     coverpoint MR2_DDR3_PASR_2_0;                
     coverpoint MR2_DDR3_CWL_5_3 {
        bins MR2_DDR3_CWL_value_0 = {0};                
        bins MR2_DDR3_CWL_value_1 = {1};                
        bins MR2_DDR3_CWL_value_2 = {2};                
        bins MR2_DDR3_CWL_value_3 = {3};                
        bins MR2_DDR3_CWL_value_4 = {4};                
        bins MR2_DDR3_CWL_value_5 = {5};                
        bins MR2_DDR3_CWL_value_6 = {6};                
        bins MR2_DDR3_CWL_value_7 = {7};                
     }    
     coverpoint MR2_DDR3_ASR_6;             
     coverpoint MR2_DDR3_SRF_7;             
     //coverpoint MR2_DDR3_RSVD_8;        
     coverpoint MR2_DDR3_RTTWR_10_9 {
        bins MR2_DDR3_RTTWR_value_0 = {0};                
        bins MR2_DDR3_RTTWR_value_1 = {1};                
        bins MR2_DDR3_RTTWR_value_2 = {2};                
        //bins MR2_DDR3_RTTWR_value_3 = {3};                
     }         
     //coverpoint MR2_DDR3_RSVD_15_11;    
     //coverpoint MR2_DDR3_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(MR2_DDR3_PASR_2_0_T)                
     `COVERPOINT_3BITS_TOGGLING(MR2_DDR3_CWL_5_3_T)           
     coverpoint MR2_DDR3_ASR_6_T;             
     coverpoint MR2_DDR3_SRF_7_T;             
     coverpoint MR2_DDR3_RSVD_8_T;        
     `COVERPOINT_2BITS_TOGGLING(MR2_DDR3_RTTWR_10_9_T)        
     `COVERPOINT_5BITS_TOGGLING(MR2_DDR3_RSVD_15_11_T)    
     `COVERPOINT_16BITS_TOGGLING(MR2_DDR3_RESERVED_31_16_T)
     //Toggling coverpoints
     option.comment = "Coverage for MR2 register on DDR3 mode";       
   endgroup // MR2_DDR3   

   covergroup MR2_DDR2;
     type_option.goal = 100;
     coverpoint MR2_DDR2_PASR_2_0;                
     coverpoint MR2_DDR2_DCC_3;             
     //coverpoint MR2_DDR2_MR2_RSVD_6_4;      
     coverpoint MR2_DDR2_SRF_7;             
     //coverpoint MR2_DDR2_RSVD_8;        
     //coverpoint MR2_DDR2_RSVD_10_9;        
     //coverpoint MR2_DDR2_RSVD_15_11;    
     //coverpoint MR2_DDR2_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(MR2_DDR2_PASR_2_0_T)               
     coverpoint MR2_DDR2_DCC_3_T;             
     `COVERPOINT_3BITS_TOGGLING(MR2_DDR2_RSVD_6_4_T)      
     coverpoint MR2_DDR2_SRF_7_T;             
     coverpoint MR2_DDR2_RSVD_8_T; 
     `COVERPOINT_2BITS_TOGGLING(MR2_DDR2_RSVD_10_9_T)        
     `COVERPOINT_5BITS_TOGGLING(MR2_DDR2_RSVD_15_11_T)    
     `COVERPOINT_16BITS_TOGGLING(MR2_DDR2_RESERVED_31_16_T)
     option.comment = "Coverage for MR2 register on DDR2 mode";       
   endgroup // MR2_DDR2   

   covergroup MR3_DDR3;
     type_option.goal = 100;
     coverpoint MR3_DDR3_MPRLOC_1_0 {
        bins MR3_DDR3_MPRLOC_value_0 = {0};
     }
     coverpoint MR3_DDR3_MPR_2;
     //coverpoint MR3_DDR3_RSVD_15_3;  
     //coverpoint MR3_DDR3_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(MR3_DDR3_MPRLOC_1_0_T)
     coverpoint MR3_DDR3_MPR_2_T;
     `COVERPOINT_13BITS_TOGGLING(MR3_DDR3_RSVD_15_3_T)  
     `COVERPOINT_16BITS_TOGGLING(MR3_DDR3_RESERVED_31_16_T)
     option.comment = "Coverage for MR3 register on DDR3 mode";       
   endgroup // MR3_DDR3   

   covergroup MR3_DDR2;
     type_option.goal = 100;
     //coverpoint MR3_DDR2_RSVD_15_0;
     //coverpoint MR3_DDR2_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(MR3_DDR2_RSVD_15_0_T)
     `COVERPOINT_16BITS_TOGGLING(MR3_DDR2_RESERVED_31_16_T)
     option.comment = "Coverage for MR3 register on DDR2 mode";       
   endgroup // MR3_DDR2   

// ----   
   covergroup ODTCR;
     type_option.goal = 100;
     `COVERPOINT_4BITS_TOGGLING(RDODT0_3_0)
     `COVERPOINT_4BITS_TOGGLING(RDODT1_7_4)
     `COVERPOINT_4BITS_TOGGLING(RDODT2_11_8)
     `COVERPOINT_4BITS_TOGGLING(RDODT3_15_12)
     `COVERPOINT_4BITS_TOGGLING(WRODT0_19_16)
     `COVERPOINT_4BITS_TOGGLING(WRODT1_23_20)
     `COVERPOINT_4BITS_TOGGLING(WRODT2_27_24)
     `COVERPOINT_4BITS_TOGGLING(WRODT3_31_28)
    //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(RDODT0_3_0_T)
     `COVERPOINT_4BITS_TOGGLING(RDODT1_7_4_T)
     `COVERPOINT_4BITS_TOGGLING(RDODT2_11_8_T)
     `COVERPOINT_4BITS_TOGGLING(RDODT3_15_12_T)
     `COVERPOINT_4BITS_TOGGLING(WRODT0_19_16_T)
     `COVERPOINT_4BITS_TOGGLING(WRODT1_23_20_T)
     `COVERPOINT_4BITS_TOGGLING(WRODT2_27_24_T)
     `COVERPOINT_4BITS_TOGGLING(WRODT3_31_28_T)
      option.comment = "Coverage for ODTCR register";       
   endgroup // ODTCR   

   covergroup DTCR;
     type_option.goal = 100;
     coverpoint  DTRPTN_3_0;          
     coverpoint  DTRANK_5_4;          
     coverpoint  DTMPR_6;             
     coverpoint  DTCMPD_7;            
     coverpoint  DTWDQM_11_8;         
     coverpoint  DTWBDDM_12;          
     coverpoint  DTBDC_13;          
     //coverpoint  DTCR_RESERVED_15_14; 
     coverpoint  DTDBS_19_16;         
     coverpoint  DTDEN_20;
     coverpoint  DTDSTP_21;
     coverpoint  DTEXD_22;    
     coverpoint  DTEXG_23;            
     coverpoint  RANKEN_27_24;        
     coverpoint  RFSHDT_31_28;        

     //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(DTRPTN_3_0_T)          
     `COVERPOINT_2BITS_TOGGLING(DTRANK_5_4_T)          
     coverpoint  DTMPR_6_T;     
     coverpoint  DTCMPD_7_T;    
     `COVERPOINT_4BITS_TOGGLING(DTWDQM_11_8_T)         
     coverpoint  DTWBDDM_12_T;  
     coverpoint  DTBDC_13_T;          
     `COVERPOINT_2BITS_TOGGLING(DTCR_RESERVED_15_14_T) 
     `COVERPOINT_4BITS_TOGGLING(DTDBS_19_16_T)         
     coverpoint  DTDEN_20_T;            
     coverpoint  DTDSTP_21_T;            
     coverpoint  DTEXD_22_T;    
     coverpoint  DTEXG_23_T;            
     `COVERPOINT_4BITS_TOGGLING(RANKEN_27_24_T)        
     `COVERPOINT_4BITS_TOGGLING(RFSHDT_31_28_T)        
     option.comment = "Coverage for DTCR register";       
   endgroup // DTCR 

   covergroup DTAR0;
     type_option.goal = 100;
     coverpoint DTAR0_DTCOL_11_0;
     coverpoint DTAR0_DTROW_27_12;
     coverpoint DTAR0_DTBANK_30_28;
     //coverpoint DTAR0_RESERVED_31;     
     //Toggling coverpoints
     `COVERPOINT_12BITS_TOGGLING(DTAR0_DTCOL_11_0_T)
     `COVERPOINT_16BITS_TOGGLING(DTAR0_DTROW_27_12_T)
     `COVERPOINT_3BITS_TOGGLING(DTAR0_DTBANK_30_28_T)
     coverpoint DTAR0_RESERVED_31_T;
     option.comment = "Coverage for DTAR0 register";       
   endgroup // DTAR0
     
   covergroup DTAR1;
     type_option.goal = 100;
     coverpoint DTAR1_DTCOL_11_0;
     coverpoint DTAR1_DTROW_27_12;
     coverpoint DTAR1_DTBANK_30_28;
     //coverpoint DTAR1_RESERVED_31;     
     //Toggling coverpoints
     `COVERPOINT_12BITS_TOGGLING(DTAR1_DTCOL_11_0_T)
     `COVERPOINT_16BITS_TOGGLING(DTAR1_DTROW_27_12_T)
     `COVERPOINT_3BITS_TOGGLING(DTAR1_DTBANK_30_28_T)
     coverpoint DTAR1_RESERVED_31_T;
     option.comment = "Coverage for DTAR1 register";       
   endgroup // DTAR1 
     //   
   covergroup DTAR2;
     type_option.goal = 100;
     coverpoint DTAR2_DTCOL_11_0;
     coverpoint DTAR2_DTROW_27_12;
     coverpoint DTAR2_DTBANK_30_28;
     //coverpoint DTAR2_RESERVED_31;     
     //Toggling coverpoints
     `COVERPOINT_12BITS_TOGGLING(DTAR2_DTCOL_11_0_T)
     `COVERPOINT_16BITS_TOGGLING(DTAR2_DTROW_27_12_T)
     `COVERPOINT_3BITS_TOGGLING(DTAR2_DTBANK_30_28_T)
     coverpoint DTAR2_RESERVED_31_T;
     option.comment = "Coverage for DTAR2 register";       
   endgroup // DTAR2
     
   covergroup DTDR0;
     type_option.goal = 100;
     coverpoint DTBYTE0_7_0;
     coverpoint DTBYTE1_15_8;
     coverpoint DTBYTE2_23_16;
     coverpoint DTBYTE3_31_24;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(DTBYTE0_7_0_T)
     `COVERPOINT_8BITS_TOGGLING(DTBYTE1_15_8_T)
     `COVERPOINT_8BITS_TOGGLING(DTBYTE2_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(DTBYTE3_31_24_T)
     option.comment = "Coverage for DTDR0 register";       
   endgroup // DTDR0   

   covergroup DTDR1;
     type_option.goal = 100;
     coverpoint DTBYTE4_7_0;
     coverpoint DTBYTE5_15_8;
     coverpoint DTBYTE6_23_16;
     coverpoint DTBYTE7_31_24;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(DTBYTE4_7_0_T)
     `COVERPOINT_8BITS_TOGGLING(DTBYTE5_15_8_T)
     `COVERPOINT_8BITS_TOGGLING(DTBYTE6_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(DTBYTE7_31_24_T)
     option.comment = "Coverage for DTDR1 register";       
   endgroup // DTDR1   

   covergroup DTEDR0;
     type_option.goal = 100;
     coverpoint  DTWLMN_7_0;   
     coverpoint  DTWLMX_15_8; 
     coverpoint  DTWBMN_23_16;
     coverpoint  DTWBMX_31_24;
  
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(DTWLMN_7_0_T)   
     `COVERPOINT_8BITS_TOGGLING(DTWLMX_15_8_T) 
     `COVERPOINT_8BITS_TOGGLING(DTWBMN_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(DTWBMX_31_24_T)
     option.comment = "Coverage for DTEDR0 register";       
   endgroup // DTEDR0

   covergroup DTEDR1;
     type_option.goal = 100;
     coverpoint  DTRLMN_7_0;   
     coverpoint  DTRLMX_15_8; 
     coverpoint  DTRBMN_23_16;
     coverpoint  DTRBMX_31_24;
  
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(DTRLMN_7_0_T)   
     `COVERPOINT_8BITS_TOGGLING(DTRLMX_15_8_T) 
     `COVERPOINT_8BITS_TOGGLING(DTRBMN_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(DTRBMX_31_24_T)
     option.comment = "Coverage for DTEDR1 register";       
   endgroup // DTEDR1


   covergroup PGCR2;
     type_option.goal = 100;
     coverpoint  tREFPRD_17_0;
     coverpoint  NOBUB_18;
     coverpoint  FXDLAT_19;
     //coverpoint  PGCR2_RESERVED_31_20;
  
     //Toggling coverpoints
     coverpoint  tREFPRD_17_0_T;
     coverpoint  NOBUB_18_T;
     coverpoint  FXDLAT_19_T;
     `COVERPOINT_12BITS_TOGGLING(PGCR2_RESERVED_31_20_T)
     option.comment = "Coverage for PGCR2 register";       
   endgroup // PGCR2
     

   covergroup RDIMMGCR0;
     type_option.goal = 100;
     coverpoint  RDIMM_0;                  
     coverpoint  ERRNOREG_1;               
     //coverpoint  RDIMMGCR0_RESERVED_13_2;  
     coverpoint  PARINODT_14;              
     coverpoint  PARINPDD_15;              
     coverpoint  PARINPDR_16;              
     coverpoint  PARINIOM_17;              
     coverpoint  PARINOE_18;               
     coverpoint  ERROUTODT_19;             
     coverpoint  ERROUTPDD_20;             
     coverpoint  ERROUTPDR_21;             
     coverpoint  ERROUTIOM_22;             
     coverpoint  ERROUTOE_23;              
     coverpoint  RDIMMODT_24;              
     coverpoint  RDIMMPDD_25;              
     coverpoint  RDIMMPDR_26;              
     coverpoint  RDIMMIOM_27;              
     coverpoint  QCSENOE_28;               
     coverpoint  MIRROROE_29;              
     coverpoint  QCSEN_30;                 
     coverpoint  MIRROR_31;                
  
     //Toggling coverpoints
     coverpoint  RDIMM_0_T;                  
     coverpoint  ERRNOREG_1_T;               
     `COVERPOINT_12BITS_TOGGLING(RDIMMGCR0_RESERVED_13_2_T)  
     coverpoint  PARINODT_14_T;              
     coverpoint  PARINPDD_15_T;              
     coverpoint  PARINPDR_16_T;              
     coverpoint  PARINIOM_17_T;              
     coverpoint  PARINOE_18_T;               
     coverpoint  ERROUTODT_19_T;             
     coverpoint  ERROUTPDD_20_T;             
     coverpoint  ERROUTPDR_21_T;             
     coverpoint  ERROUTIOM_22_T;             
     coverpoint  ERROUTOE_23_T;              
     coverpoint  RDIMMODT_24_T;              
     coverpoint  RDIMMPDD_25_T;              
     coverpoint  RDIMMPDR_26_T;              
     coverpoint  RDIMMIOM_27_T;              
     coverpoint  QCSENOE_28_T;               
     coverpoint  MIRROROE_29_T;              
     coverpoint  QCSEN_30_T;                 
     coverpoint  MIRROR_31_T;                
     option.comment = "Coverage for RDIMMGCR0 register";       
   endgroup


   covergroup RDIMMGCR1;
     type_option.goal = 100;
     coverpoint  tBCSTAB_11_0;          
     coverpoint  tBCMRD_14_12;         
     //coverpoint  RDIMMGCR1_RESERVED_15;  
     coverpoint  CRINIT_31_16;            
  
     //Toggling coverpoints
     coverpoint  tBCSTAB_11_0_T;          
     coverpoint  tBCMRD_14_12_T;         
     coverpoint  RDIMMGCR1_RESERVED_15_T;  
     coverpoint  CRINIT_31_16_T;         
     option.comment = "Coverage for RDIMMGCR1 register";       
   endgroup // RDIMMGCR1
     
   
   covergroup RDIMMCR0;
     type_option.goal = 100;
     coverpoint  RC0_3_0;  
     coverpoint  RC1_7_4;  
     coverpoint  RC2_11_8; 
     coverpoint  RC3_15_12;
     coverpoint  RC4_19_16;
     coverpoint  RC5_23_20;
     //coverpoint  RC6_27_24;
     //coverpoint  RC7_31_28;  
  
     //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(RC0_3_0_T)  
     `COVERPOINT_4BITS_TOGGLING(RC1_7_4_T)  
     `COVERPOINT_4BITS_TOGGLING(RC2_11_8_T) 
     `COVERPOINT_4BITS_TOGGLING(RC3_15_12_T)
     `COVERPOINT_4BITS_TOGGLING(RC4_19_16_T)
     `COVERPOINT_4BITS_TOGGLING(RC5_23_20_T)
     //`COVERPOINT_4BITS_TOGGLING(RC6_27_24_T)
     //`COVERPOINT_4BITS_TOGGLING(RC7_31_28_T)  
     option.comment = "Coverage for RDIMMCR0 register";       
   endgroup // RDIMMCR0

   
   covergroup RDIMMCR1;
     type_option.goal = 100;
     coverpoint  RC8_3_0;  
     coverpoint  RC9_7_4;  
     coverpoint  RC10_11_8; 
     coverpoint  RC11_15_12;
     //coverpoint  RC12_19_16;
     //coverpoint  RC13_23_20;
     //coverpoint  RC14_27_24;
     //coverpoint  RC15_31_28;  
  
     //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(RC8_3_0_T)  
     `COVERPOINT_4BITS_TOGGLING(RC9_7_4_T)  
     `COVERPOINT_4BITS_TOGGLING(RC10_11_8_T) 
     `COVERPOINT_4BITS_TOGGLING(RC11_15_12_T)
     //`COVERPOINT_4BITS_TOGGLING(RC12_19_16_T)
     //`COVERPOINT_4BITS_TOGGLING(RC13_23_20_T)
     //`COVERPOINT_4BITS_TOGGLING(RC14_27_24_T)
     //`COVERPOINT_4BITS_TOGGLING(RC15_31_28_T)  
     option.comment = "Coverage for RDIMMCR1 register";       
   endgroup // RDIMMCR1

// ----   
   covergroup DCUAR;
     type_option.goal = 100;
     coverpoint CWADDR_3_0;
     coverpoint CSADDR_7_4;
     coverpoint CSEL_9_8 {
        bins CSEL_value_0 = {0};
        bins CSEL_value_1 = {1};
        bins CSEL_value_2 = {2};
     }                    
     coverpoint INCA_10;
     coverpoint ATYPE_11;
     //coverpoint DCUAR_RESERVED_31_12;
     //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(CWADDR_3_0_T)
     `COVERPOINT_4BITS_TOGGLING(CSADDR_7_4_T)
     `COVERPOINT_2BITS_TOGGLING(CSEL_9_8_T)
     coverpoint INCA_10_T;
     coverpoint ATYPE_11_T;
     `COVERPOINT_20BITS_TOGGLING(DCUAR_RESERVED_31_12_T)
     option.comment = "Coverage for DCUAR register";       
   endgroup // DCUAR   

   covergroup DCUDR;
     type_option.goal = 100;
     coverpoint CDATA_31_0;
     //Toggling coverpoints
     `COVERPOINT_32BITS_TOGGLING(CDATA_31_0_T)
     option.comment = "Coverage for DCUDR register";       
   endgroup // DCUDR    

   covergroup DCURR;
     type_option.goal = 100;
     coverpoint DINST_3_0 {
        bins DCU_DINST_value_0   = {0};
        bins DCU_DINST_value_1   = {1};
        bins DCU_DINST_value_2   = {2};
        bins DCU_DINST_value_3   = {3};
        bins DCU_DINST_value_4   = {4};
     }
     coverpoint SADDR_7_4;
     coverpoint EADDR_11_8;
     coverpoint NFAIL_19_12;
     coverpoint SONF_20;
     coverpoint SCOF_21;
     coverpoint RCEN_22;
     coverpoint XCEN_23;
     //coverpoint DCURR_RESERVED_31_24;
     //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(DINST_3_0_T)
     `COVERPOINT_4BITS_TOGGLING(SADDR_7_4_T)
     `COVERPOINT_4BITS_TOGGLING(EADDR_11_8_T)
     `COVERPOINT_8BITS_TOGGLING(NFAIL_19_12_T)
     coverpoint SONF_20_T;
     coverpoint SCOF_21_T;
     coverpoint RCEN_22_T;
     coverpoint XCEN_23_T;
     `COVERPOINT_8BITS_TOGGLING(DCURR_RESERVED_31_24_T)
     option.comment = "Coverage for DCURR register";       
   endgroup // DCURR   

   covergroup DCULR;
     type_option.goal = 100;
     coverpoint LSADDR_3_0;
     coverpoint LEADDR_7_4;
     coverpoint LCNT_15_8;
     coverpoint LINF_16;
     coverpoint IDA_17;
     //coverpoint DCULR_RESERVED_27_18;
     coverpoint XLEADDR_31_28;       
     //Toggling coverpoints
     `COVERPOINT_4BITS_TOGGLING(LSADDR_3_0_T)
     `COVERPOINT_4BITS_TOGGLING(LEADDR_7_4_T)
     `COVERPOINT_8BITS_TOGGLING(LCNT_15_8_T)
     coverpoint LINF_16_T;
     coverpoint IDA_17_T;
     `COVERPOINT_10BITS_TOGGLING(DCULR_RESERVED_27_18_T)
     `COVERPOINT_4BITS_TOGGLING(XLEADDR_31_28_T)
     option.comment = "Coverage for DCULR register";       
   endgroup // DCULR   

   covergroup DCUGCR;
     type_option.goal = 100;
     coverpoint RCSW_15_0;
     //coverpoint DCUGCR_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(RCSW_15_0_T)
     `COVERPOINT_16BITS_TOGGLING(DCUGCR_RESERVED_31_16_T)
     option.comment = "Coverage for DCUGCR register";       
   endgroup // DCUGCR   

   covergroup DCUTPR;
     type_option.goal = 100;
     coverpoint tDCUT0_7_0;
     coverpoint tDCUT1_15_8;
     coverpoint tDCUT2_23_16;
     coverpoint tDCUT3_31_24;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(tDCUT0_7_0_T)
     `COVERPOINT_8BITS_TOGGLING(tDCUT1_15_8_T)
     `COVERPOINT_8BITS_TOGGLING(tDCUT2_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(tDCUT3_31_24_T)
     option.comment = "Coverage for DCUTPR register";       
   endgroup // DCUTPR   

   covergroup DCUSR0;
     type_option.goal = 100;
     coverpoint RDONE_0;
     coverpoint CFAIL_1;
     coverpoint CFULL_2;
     //coverpoint DCUSR0_RESERVED_31_3;
     //Toggling coverpoints
     coverpoint RDONE_0_T;
     coverpoint CFAIL_1_T;
     coverpoint CFULL_2_T;
     `COVERPOINT_29BITS_TOGGLING(DCUSR0_RESERVED_31_3_T)
     option.comment = "Coverage for DCUSR0 register";       
   endgroup // DCUSR0   

   covergroup DCUSR1;
     type_option.goal = 100;
     coverpoint RDCNT_15_0 {
        bins RDCNT_value_0           = {0};
        bins RDCNT_value_1           = {1};
        bins RDCNT_value_2           = {2};
        bins RDCNT_value_3           = {3};
        bins RDCNT_value_4           = {4};
        bins RDCNT_value_5           = {5};
        bins RDCNT_value_6           = {6};
        bins RDCNT_value_7           = {7};
        bins RDCNT_value_8_32767     = {[8:32767]};
        bins RDCNT_value_32768_65534 = {[32768:65534]};
        bins RDCNT_value_65535       = {65535};
     }                            
     coverpoint FLCNT_23_16;
     coverpoint LPCNT_31_24;
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(RDCNT_15_0_T)
     `COVERPOINT_8BITS_TOGGLING(FLCNT_23_16_T)
     `COVERPOINT_8BITS_TOGGLING(LPCNT_31_24_T)
     option.comment = "Coverage for DCUSR1 register";       
   endgroup // DCUSR1    

//----    
   covergroup BISTRR;
     type_option.goal = 100;
     coverpoint BINST_2_0 {
        bins BINST_value_0  = {0};
        bins BINST_value_1  = {1};
        bins BINST_value_2  = {2};
        bins BINST_value_3  = {3};
     }                    
     coverpoint BMODE_3;
     coverpoint BINF_4;
     coverpoint NFAIL_12_5;
     coverpoint BSONF_13;
     coverpoint BDXEN_14;
     coverpoint BACEN_15;
     coverpoint BDMEN_16;
     coverpoint BDPAT_18_17;
     coverpoint BDXSEL_22_19 {
        bins BDXSEL_value_0 = {0};
        bins BDXSEL_value_1 = {1};
        bins BDXSEL_value_2 = {2};
        bins BDXSEL_value_3 = {3};
        bins BDXSEL_value_4 = {4};
        bins BDXSEL_value_5 = {5};
        bins BDXSEL_value_6 = {6};
        bins BDXSEL_value_7 = {7};
        bins BDXSEL_value_8 = {8};
     }                              
     coverpoint BCKSEL_24_23 {
        bins BCKSEL_value_0 = {0};
        bins BCKSEL_value_1 = {1};
        bins BCKSEL_value_2 = {2};
     }
     coverpoint BCCSEL_26_25;
     //coverpoint BISTRR_RESERVED_31_27;

     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(BINST_2_0_T)  // dont care about bit 2.
     coverpoint BMODE_3_T;
     coverpoint BINF_4_T;
     `COVERPOINT_8BITS_TOGGLING(NFAIL_12_5_T)
     coverpoint BSONF_13_T;
     coverpoint BDXEN_14_T;
     coverpoint BACEN_15_T;
     coverpoint BDMEN_16_T;
     `COVERPOINT_2BITS_TOGGLING(BDPAT_18_17_T)
     `COVERPOINT_4BITS_TOGGLING(BDXSEL_22_19_T)
     `COVERPOINT_2BITS_TOGGLING(BCKSEL_24_23_T)
     `COVERPOINT_2BITS_TOGGLING(BCCSEL_26_25_T)
     `COVERPOINT_5BITS_TOGGLING(BISTRR_RESERVED_31_27_T)
     option.comment = "Coverage for BISTRR register";       
   endgroup // BISTRR   

   covergroup BISTWCR;
     type_option.goal = 100;
     coverpoint BWCNT_15_0;
     //coverpoint BISTWCR_RESERVED_31_16;
  
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(BWCNT_15_0_T)
     `COVERPOINT_16BITS_TOGGLING(BISTWCR_RESERVED_31_16_T)
     option.comment = "Coverage for BISTWCR register";       
   endgroup // BISTWCR    

   covergroup BISTMSKR0;
     type_option.goal = 100;
     `COVERPOINT_16BITS_TOGGLING(AMSK_15_0)
     `COVERPOINT_3BITS_TOGGLING(BAMSK_18_16)
     coverpoint WEMSK_19;
     `COVERPOINT_4BITS_TOGGLING(CKEMSK_23_20)
     `COVERPOINT_4BITS_TOGGLING(CSMSK_27_24)
     `COVERPOINT_4BITS_TOGGLING(ODTMSK_31_28)
       
    //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(AMSK_15_0_T)
     `COVERPOINT_3BITS_TOGGLING(BAMSK_18_16_T)
     coverpoint WEMSK_19_T;
     `COVERPOINT_4BITS_TOGGLING(CKEMSK_23_20_T)
     `COVERPOINT_4BITS_TOGGLING(CSMSK_27_24_T)
     `COVERPOINT_4BITS_TOGGLING(ODTMSK_31_28_T)
     option.comment = "Coverage for BISTMSKR0 register";       
   endgroup // BISTMSKR0   

   covergroup BISTMSKR1;
     type_option.goal = 100;
     coverpoint RASMSK_0;
     coverpoint CASMSK_1;
     //coverpoint BISTMSKR1_RESERVED_26_2;
     coverpoint PARMSK_27;  
     `COVERPOINT_4BITS_TOGGLING(DMMSK_31_28)      // check only mask one bit at a time

      //Toggling coverpoints
     coverpoint RASMSK_0_T;
     coverpoint CASMSK_1_T;
     `COVERPOINT_25BITS_TOGGLING(BISTMSKR1_RESERVED_26_2_T)
     coverpoint PARMSK_27_T;  
     `COVERPOINT_4BITS_TOGGLING(DMMSK_31_28_T)
     option.comment = "Coverage for BISTMSKR1 register";       
   endgroup // BISTMSKR1   

   covergroup BISTMSKR2;
     type_option.goal = 100;
     `COVERPOINT_32BITS_TOGGLING(DQMSK_31_0)

      //Toggling coverpoints
     `COVERPOINT_32BITS_TOGGLING(DQMSK_31_0_T)
     option.comment = "Coverage for BISTMSKR2 register";       
   endgroup // BISTMSKR2   
     
   covergroup BISTLSR;
     type_option.goal = 100;
     `COVERPOINT_32BITS_TOGGLING(LFSR_SEED_31_0)   // check only toggling per bit
       
     //Toggling coverpoints
     `COVERPOINT_32BITS_TOGGLING(LFSR_SEED_31_0_T)
     option.comment = "Coverage for BISTLSR register";       
   endgroup // BISTLSR   

   covergroup BISTAR0;
     type_option.goal = 100;
     coverpoint BCOL_11_0 {
        // only col width of upto 10 bits are used, bit number 10 and 11 are not accessed
        // ie: For bit width 11: only DDR3_8Gbx8 will contribute, no x4 or DDR3_256Mbx16. 
        //         bit width 12: DDR3_8Gbx4 not included.
        wildcard ignore_bins BCOL_11_0_value_2048_4095 = {12'b1???_????_????};   
     }                        
     coverpoint BROW_27_12;
     coverpoint BBANK_30_28;
     //coverpoint BISTAR0_RESERVED_31;
  
     //Toggling coverpoints
     `COVERPOINT_12BITS_TOGGLING(BCOL_11_0_T)
     `COVERPOINT_16BITS_TOGGLING(BROW_27_12_T)
     `COVERPOINT_3BITS_TOGGLING(BBANK_30_28_T)
     coverpoint BISTAR0_RESERVED_31_T;
     option.comment = "Coverage for BISTAR0 register";       
   endgroup // BISTAR0   

   covergroup BISTAR1;
     type_option.goal = 100;
     coverpoint BRANK_1_0;
     coverpoint BMRANK_3_2;
     coverpoint BAINC_15_4 {
        // only col width of upto 10 bits are used, bit number 10 and 11 are not accessed
        // ie: For bit width 11: only DDR3_8Gbx8 will contribute, no x4 or DDR3_256Mbx16. 
        //         bit width 12: DDR3_8Gbx4 not included.
        wildcard ignore_bins BAINC_15_4_value_2048_4095 = {12'b1???_????_????};   
     }
     //coverpoint BISTAR1_RESERVED_31_16;
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(BRANK_1_0_T)
     `COVERPOINT_2BITS_TOGGLING(BMRANK_3_2_T)
     `COVERPOINT_11BITS_TOGGLING(BAINC_15_4_T)  // bit 11 not included in regression
     coverpoint BISTAR1_RESERVED_31_16_T;
     option.comment = "Coverage for BISTAR1 register";       
   endgroup // BISTAR1   

   covergroup BISTAR2;
     type_option.goal = 100;
     coverpoint BMCOL_11_0 {
        // only col width of upto 10 bits are used, bit number 10 and 11 are not accessed
        // ie: For bit width 11: only DDR3_8Gbx8 will contribute, no x4 or DDR3_256Mbx16. 
        //         bit width 12: DDR3_8Gbx4 not included.
        wildcard ignore_bins BMCOL_11_0_value_2048_4095 = {12'b1???_????_????};   
     }
     coverpoint BMROW_27_12;
     coverpoint BMBANK_30_28;
     //coverpoint BISTAR2_RESERVED_31;
     //Toggling coverpoints
     `COVERPOINT_12BITS_TOGGLING(BMCOL_11_0_T)
     `COVERPOINT_16BITS_TOGGLING(BMROW_27_12_T)
     `COVERPOINT_3BITS_TOGGLING(BMBANK_30_28_T)
     coverpoint BISTAR2_RESERVED_31_T;
     option.comment = "Coverage for BISTAR2 register";       
   endgroup // BISTAR2   

   covergroup BISTUDPR;
     type_option.goal = 100;
     coverpoint BUDP0_15_0;
     coverpoint BUPD1_31_16;
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(BUDP0_15_0_T)
     `COVERPOINT_16BITS_TOGGLING(BUPD1_31_16_T)
     option.comment = "Coverage for BISTUDPR register";       
   endgroup // BISTUDPR   

   covergroup BISTGSR;
     type_option.goal = 100;
     coverpoint BDONE_0;
     coverpoint BACERR_1;
     coverpoint BDXERR_2;
     //coverpoint BISTGSR_RESERVED_19_3;
     //coverpoint PARBER_21_20;
     //coverpoint TPDBER_23_22;
     coverpoint DMBER_EVEN_1_BEAT_21_20;
     coverpoint DMBER_EVEN_2_BEAT_23_22;
     coverpoint DMBER_ODD_1_BEAT_25_24;
     coverpoint DMBER_ODD_2_BEAT_27_26;
     coverpoint RASBER_29_28;
     coverpoint CASBER_31_30;           

     //Toggling coverpoints
     coverpoint BDONE_0_T;
     coverpoint BACERR_1_T;
     coverpoint BDXERR_2_T;
     `COVERPOINT_17BITS_TOGGLING(BISTGSR_RESERVED_19_3_T)
     //`COVERPOINT_2BITS_TOGGLING(PARBER_21_20_T)
     //`COVERPOINT_2BITS_TOGGLING(TPDBER_23_22_T)
     `COVERPOINT_2BITS_TOGGLING(DMBER_EVEN_1_BEAT_21_20_T)
     `COVERPOINT_2BITS_TOGGLING(DMBER_EVEN_2_BEAT_23_22_T)
     `COVERPOINT_2BITS_TOGGLING(DMBER_ODD_1_BEAT_25_24_T)
     `COVERPOINT_2BITS_TOGGLING(DMBER_ODD_2_BEAT_27_26_T)
     `COVERPOINT_2BITS_TOGGLING(RASBER_29_28_T)
     `COVERPOINT_2BITS_TOGGLING(CASBER_31_30_T)
     option.comment = "Coverage for BISTGSR register";       
   endgroup // BISTGSR   

   covergroup BISTWER;
     type_option.goal = 100;
     coverpoint ACWER_15_0;
     coverpoint DXWER_31_16;
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(ACWER_15_0_T)
     `COVERPOINT_16BITS_TOGGLING(DXWER_31_16_T)
     option.comment = "Coverage for BISTWER register";       
   endgroup // BISTWER   

   covergroup BISTBER0;
     type_option.goal = 100;
     `COVERPOINT_2BITS_TOGGLING(ABER_A0_1_0)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A1_3_2)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A2_5_4)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A3_7_6)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A4_9_8)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A5_11_10) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A6_13_12) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A7_15_14) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A8_17_16) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A9_19_18)
     `COVERPOINT_2BITS_TOGGLING(ABER_A10_21_20)
     `COVERPOINT_2BITS_TOGGLING(ABER_A11_23_22)
     `COVERPOINT_2BITS_TOGGLING(ABER_A12_25_24)
     `COVERPOINT_2BITS_TOGGLING(ABER_A13_27_26)
     `COVERPOINT_2BITS_TOGGLING(ABER_A14_29_28)
     `COVERPOINT_2BITS_TOGGLING(ABER_A15_31_30)
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(ABER_A0_1_0_T)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A1_3_2_T)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A2_5_4_T)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A3_7_6_T)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A4_9_8_T)   
     `COVERPOINT_2BITS_TOGGLING(ABER_A5_11_10_T) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A6_13_12_T) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A7_15_14_T) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A8_17_16_T) 
     `COVERPOINT_2BITS_TOGGLING(ABER_A9_19_18_T)
     `COVERPOINT_2BITS_TOGGLING(ABER_A10_21_20_T)
     `COVERPOINT_2BITS_TOGGLING(ABER_A11_23_22_T)
     `COVERPOINT_2BITS_TOGGLING(ABER_A12_25_24_T)
     `COVERPOINT_2BITS_TOGGLING(ABER_A13_27_26_T)
     `COVERPOINT_2BITS_TOGGLING(ABER_A14_29_28_T)
     `COVERPOINT_2BITS_TOGGLING(ABER_A15_31_30_T)
     option.comment = "Coverage for BISTBER0 register";       
   endgroup // BISTBER0   

   covergroup BISTBER1;
     type_option.goal = 100;
     `COVERPOINT_2BITS_TOGGLING(BABER_BA0_1_0)    
     `COVERPOINT_2BITS_TOGGLING(BABER_BA0_3_2)    
     `COVERPOINT_2BITS_TOGGLING(BABER_BA0_5_4)    
     `COVERPOINT_2BITS_TOGGLING(WEBER_7_6)        
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK0_9_8)   
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK1_11_10) 
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK2_13_12) 
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK3_15_14) 
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS0_17_16)  
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS1_19_18)  
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS2_21_20)  
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS3_23_22)  
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT0_25_24)
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT1_27_26)
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT2_29_28)
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT3_31_30)
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(BABER_BA0_1_0_T)    
     `COVERPOINT_2BITS_TOGGLING(BABER_BA0_3_2_T)    
     `COVERPOINT_2BITS_TOGGLING(BABER_BA0_5_4_T)    
     `COVERPOINT_2BITS_TOGGLING(WEBER_7_6_T)        
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK0_9_8_T)   
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK1_11_10_T) 
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK2_13_12_T) 
     `COVERPOINT_2BITS_TOGGLING(CKEBER_CK3_15_14_T) 
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS0_17_16_T)  
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS1_19_18_T)  
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS2_21_20_T)  
     `COVERPOINT_2BITS_TOGGLING(CSBER_CS3_23_22_T)  
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT0_25_24_T)
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT1_27_26_T)
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT2_29_28_T)
     `COVERPOINT_2BITS_TOGGLING(ODTBER_ODT3_31_30_T)
     option.comment = "Coverage for BISTBER1 register";       
   endgroup // BISTBER1    

   covergroup BISTBER2;
     type_option.goal = 100;
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT0_RISEEDGE_1_0)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT1_RISEEDGE_3_2)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT2_RISEEDGE_5_4)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT3_RISEEDGE_7_6)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT4_RISEEDGE_9_8)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT5_RISEEDGE_11_10)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT6_RISEEDGE_13_12)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT7_RISEEDGE_15_14)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT0_FALLEDGE_17_16)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT1_FALLEDGE_19_18)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT2_FALLEDGE_21_20)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT3_FALLEDGE_23_22)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT4_FALLEDGE_25_24)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT5_FALLEDGE_27_26)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT6_FALLEDGE_29_28)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT7_FALLEDGE_31_30)
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT0_RISEEDGE_1_0_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT1_RISEEDGE_3_2_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT2_RISEEDGE_5_4_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT3_RISEEDGE_7_6_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT4_RISEEDGE_9_8_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT5_RISEEDGE_11_10_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT6_RISEEDGE_13_12_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT7_RISEEDGE_15_14_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT0_FALLEDGE_17_16_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT1_FALLEDGE_19_18_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT2_FALLEDGE_21_20_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT3_FALLEDGE_23_22_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT4_FALLEDGE_25_24_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT5_FALLEDGE_27_26_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT6_FALLEDGE_29_28_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER0_DQ_BIT7_FALLEDGE_31_30_T)
     option.comment = "Coverage for BISTBER2 register";       
   endgroup // BISTBER2
     
   covergroup BISTBER3;
     type_option.goal = 100;
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT0_RISEEDGE_1_0)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT1_RISEEDGE_3_2)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT2_RISEEDGE_5_4)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT3_RISEEDGE_7_6)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT4_RISEEDGE_9_8)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT5_RISEEDGE_11_10)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT6_RISEEDGE_13_12)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT7_RISEEDGE_15_14)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT0_FALLEDGE_17_16)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT1_FALLEDGE_19_18)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT2_FALLEDGE_21_20)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT3_FALLEDGE_23_22)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT4_FALLEDGE_25_24)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT5_FALLEDGE_27_26)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT6_FALLEDGE_29_28)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT7_FALLEDGE_31_30)
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT0_RISEEDGE_1_0_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT1_RISEEDGE_3_2_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT2_RISEEDGE_5_4_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT3_RISEEDGE_7_6_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT4_RISEEDGE_9_8_T)  
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT5_RISEEDGE_11_10_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT6_RISEEDGE_13_12_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT7_RISEEDGE_15_14_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT0_FALLEDGE_17_16_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT1_FALLEDGE_19_18_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT2_FALLEDGE_21_20_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT3_FALLEDGE_23_22_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT4_FALLEDGE_25_24_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT5_FALLEDGE_27_26_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT6_FALLEDGE_29_28_T)
     `COVERPOINT_2BITS_TOGGLING(DQBER1_DQ_BIT7_FALLEDGE_31_30_T)
     option.comment = "Coverage for BISTBER3 register";       
   endgroup // BISTBER3   

   covergroup BISTWCSR;
     type_option.goal = 100;
     coverpoint ACWCNT_15_0;
     coverpoint DXWCNT_31_16;
     //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(ACWCNT_15_0_T)
     `COVERPOINT_16BITS_TOGGLING(DXWCNT_31_16_T)
     option.comment = "Coverage for BISTWCSR register";       
   endgroup // BISTWCSR   

   covergroup BISTFWR0;
     type_option.goal = 100;
     `COVERPOINT_16BITS_TOGGLING(AWEBS_15_0)
     `COVERPOINT_3BITS_TOGGLING(BAWEBS_18_16)
     coverpoint WEWEBS_19;
     `COVERPOINT_4BITS_TOGGLING(CKEWEBS_23_20)
     `COVERPOINT_4BITS_TOGGLING(CSWEBS_27_24)
     `COVERPOINT_4BITS_TOGGLING(ODTWEBS_31_28)
      //Toggling coverpoints
     `COVERPOINT_16BITS_TOGGLING(AWEBS_15_0_T)
     `COVERPOINT_3BITS_TOGGLING(BAWEBS_18_16_T)
     coverpoint WEWEBS_19_T;
     `COVERPOINT_4BITS_TOGGLING(CKEWEBS_23_20_T)
     `COVERPOINT_4BITS_TOGGLING(CSWEBS_27_24_T)
     `COVERPOINT_4BITS_TOGGLING(ODTWEBS_31_28_T)
     option.comment = "Coverage for BISTFWR0 register";       
   endgroup // BISTFWR0   

   covergroup BISTFWR1;
     type_option.goal = 100;
     coverpoint RASWEBS_0;
     coverpoint CASWEBS_1;
     //coverpoint BISTFWR1_RESERVED_27_2;
     coverpoint DMWEBS_31_28;

     //Toggling coverpoints
     coverpoint RASWEBS_0_T;
     coverpoint CASWEBS_1_T;
     `COVERPOINT_26BITS_TOGGLING(BISTFWR1_RESERVED_27_2_T)
     `COVERPOINT_4BITS_TOGGLING(DMWEBS_31_28_T)
     option.comment = "Coverage for BISTFWR1 register";       
   endgroup // BISTFWR1   

   covergroup BISTFWR2;
     type_option.goal = 100;
     coverpoint  DQBER0_EVEN_DQ_BIT0_RISEEDGE_0; 
     coverpoint  DQBER0_EVEN_DQ_BIT1_RISEEDGE_1; 
     coverpoint  DQBER0_EVEN_DQ_BIT2_RISEEDGE_2; 
     coverpoint  DQBER0_EVEN_DQ_BIT3_RISEEDGE_3; 
     coverpoint  DQBER0_EVEN_DQ_BIT4_RISEEDGE_4; 
     coverpoint  DQBER0_EVEN_DQ_BIT5_RISEEDGE_5; 
     coverpoint  DQBER0_EVEN_DQ_BIT6_RISEEDGE_6; 
     coverpoint  DQBER0_EVEN_DQ_BIT7_RISEEDGE_7; 
     coverpoint  DQBER0_EVEN_DQ_BIT0_FALLEDGE_8; 
     coverpoint  DQBER0_EVEN_DQ_BIT1_FALLEDGE_9; 
     coverpoint  DQBER0_EVEN_DQ_BIT2_FALLEDGE_10;
     coverpoint  DQBER0_EVEN_DQ_BIT3_FALLEDGE_11;
     coverpoint  DQBER0_EVEN_DQ_BIT4_FALLEDGE_12;
     coverpoint  DQBER0_EVEN_DQ_BIT5_FALLEDGE_13;
     coverpoint  DQBER0_EVEN_DQ_BIT6_FALLEDGE_14;
     coverpoint  DQBER0_EVEN_DQ_BIT7_FALLEDGE_15;
     coverpoint  DQBER0_ODD_DQ_BIT0_RISEEDGE_16; 
     coverpoint  DQBER0_ODD_DQ_BIT1_RISEEDGE_17; 
     coverpoint  DQBER0_ODD_DQ_BIT2_RISEEDGE_18; 
     coverpoint  DQBER0_ODD_DQ_BIT3_RISEEDGE_19; 
     coverpoint  DQBER0_ODD_DQ_BIT4_RISEEDGE_20; 
     coverpoint  DQBER0_ODD_DQ_BIT5_RISEEDGE_21; 
     coverpoint  DQBER0_ODD_DQ_BIT6_RISEEDGE_22; 
     coverpoint  DQBER0_ODD_DQ_BIT7_RISEEDGE_23; 
     coverpoint  DQBER0_ODD_DQ_BIT0_FALLEDGE_24; 
     coverpoint  DQBER0_ODD_DQ_BIT1_FALLEDGE_25; 
     coverpoint  DQBER0_ODD_DQ_BIT2_FALLEDGE_26; 
     coverpoint  DQBER0_ODD_DQ_BIT3_FALLEDGE_27; 
     coverpoint  DQBER0_ODD_DQ_BIT4_FALLEDGE_28; 
     coverpoint  DQBER0_ODD_DQ_BIT5_FALLEDGE_29; 
     coverpoint  DQBER0_ODD_DQ_BIT6_FALLEDGE_30; 
     coverpoint  DQBER0_ODD_DQ_BIT7_FALLEDGE_31; 

     //Toggling coverpoints
     coverpoint  DQBER0_EVEN_DQ_BIT0_RISEEDGE_0_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT1_RISEEDGE_1_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT2_RISEEDGE_2_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT3_RISEEDGE_3_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT4_RISEEDGE_4_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT5_RISEEDGE_5_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT6_RISEEDGE_6_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT7_RISEEDGE_7_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT0_FALLEDGE_8_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT1_FALLEDGE_9_T; 
     coverpoint  DQBER0_EVEN_DQ_BIT2_FALLEDGE_10_T;
     coverpoint  DQBER0_EVEN_DQ_BIT3_FALLEDGE_11_T;
     coverpoint  DQBER0_EVEN_DQ_BIT4_FALLEDGE_12_T;
     coverpoint  DQBER0_EVEN_DQ_BIT5_FALLEDGE_13_T;
     coverpoint  DQBER0_EVEN_DQ_BIT6_FALLEDGE_14_T;
     coverpoint  DQBER0_EVEN_DQ_BIT7_FALLEDGE_15_T;
     coverpoint  DQBER0_ODD_DQ_BIT0_RISEEDGE_16_T; 
     coverpoint  DQBER0_ODD_DQ_BIT1_RISEEDGE_17_T; 
     coverpoint  DQBER0_ODD_DQ_BIT2_RISEEDGE_18_T; 
     coverpoint  DQBER0_ODD_DQ_BIT3_RISEEDGE_19_T; 
     coverpoint  DQBER0_ODD_DQ_BIT4_RISEEDGE_20_T; 
     coverpoint  DQBER0_ODD_DQ_BIT5_RISEEDGE_21_T; 
     coverpoint  DQBER0_ODD_DQ_BIT6_RISEEDGE_22_T; 
     coverpoint  DQBER0_ODD_DQ_BIT7_RISEEDGE_23_T; 
     coverpoint  DQBER0_ODD_DQ_BIT0_FALLEDGE_24_T; 
     coverpoint  DQBER0_ODD_DQ_BIT1_FALLEDGE_25_T; 
     coverpoint  DQBER0_ODD_DQ_BIT2_FALLEDGE_26_T; 
     coverpoint  DQBER0_ODD_DQ_BIT3_FALLEDGE_27_T; 
     coverpoint  DQBER0_ODD_DQ_BIT4_FALLEDGE_28_T; 
     coverpoint  DQBER0_ODD_DQ_BIT5_FALLEDGE_29_T; 
     coverpoint  DQBER0_ODD_DQ_BIT6_FALLEDGE_30_T; 
     coverpoint  DQBER0_ODD_DQ_BIT7_FALLEDGE_31_T; 
     option.comment = "Coverage for BISTFWR2 register";       
   endgroup // BISTFWR2   
   


// ----   
   covergroup GPR0;
     type_option.goal = 100;
     coverpoint  GPR0_31_0;

     //Toggling coverpoints
     coverpoint  GPR0_31_0_T;
     option.comment = "Coverage for GPR0 register";       
   endgroup // GPR0

   covergroup GPR1;
     type_option.goal = 100;
     coverpoint  GPR1_31_0;

     //Toggling coverpoints
     coverpoint  GPR1_31_0_T;
     option.comment = "Coverage for GPR1 register";       
   endgroup // GPR1


   covergroup ZQ0CR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZDATA_27_0_r0)
     coverpoint  ZDEN_28_r0;
     coverpoint  ZCALBYP_29_r0;
     coverpoint  ZCALEN_30_r0;
     coverpoint  ZQPD_31_r0;

     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZDATA_27_0_r0_T)
     coverpoint  ZDEN_28_r0_T;
     coverpoint  ZCALBYP_29_r0_T;
     coverpoint  ZCALEN_30_r0_T;
     coverpoint  ZQPD_31_r0_T; 
     option.comment = "Coverage for ZQ0CR0 register";       
   endgroup // ZQ0CR0
   
   covergroup ZQ0CR1;
     type_option.goal = 100;
     `COVERPOINT_8BITS_ONE_HOT(ZPROG_7_0_r0)     
     //coverpoint ZQ0CR1_RESERVED_31_8_r0;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(ZPROG_7_0_r0_T)     
     `COVERPOINT_24BITS_TOGGLING(ZQ0CR1_RESERVED_31_8_r0_T)
     option.comment = "Coverage for ZQ0CR1 register";       
   endgroup // ZQ0CR1
   
   covergroup ZQ0SR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZCTRL_27_0_r0)      
     //coverpoint  ZQ0SR0_RESERVED_29_28_r0;
     coverpoint  ZERR_30_r0;
     coverpoint  ZDONE_31_r0;
     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZCTRL_27_0_r0_T)      
     `COVERPOINT_2BITS_TOGGLING(ZQ0SR0_RESERVED_29_28_r0_T)
     coverpoint  ZERR_30_r0_T;
     coverpoint  ZDONE_31_r0_T;       
     option.comment = "Coverage for ZQ0SR0 register";      
   endgroup // ZQ0SR0
   
   covergroup ZQ0SR1;
     type_option.goal = 100;
     coverpoint  ZPD_1_0_r0;      
     coverpoint  ZPU_3_2_r0;
     coverpoint  OPD_5_4_r0;
     coverpoint  OPU_7_6_r0;
     //coverpoint  ZQ0SR_RESERVED_31_8_r0;
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(ZPD_1_0_r0_T)      
     `COVERPOINT_2BITS_TOGGLING(ZPU_3_2_r0_T)
     `COVERPOINT_2BITS_TOGGLING(OPD_5_4_r0_T)
     `COVERPOINT_2BITS_TOGGLING(OPU_7_6_r0_T)
     `COVERPOINT_24BITS_TOGGLING(ZQ0SR1_RESERVED_31_8_r0_T)
     option.comment = "Coverage for ZQ0SR1 register";      
   endgroup // ZQ0SR1

// ----   
   covergroup ZQ1CR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZDATA_27_0_r1)
     coverpoint  ZDEN_28_r1;
     coverpoint  ZCALBYP_29_r1;
     coverpoint  ZCALEN_30_r1;
     coverpoint  ZQPD_31_r1;

     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZDATA_27_0_r1_T)
     coverpoint  ZDEN_28_r1_T;
     coverpoint  ZCALBYP_29_r1_T;
     coverpoint  ZCALEN_30_r1_T;
     coverpoint  ZQPD_31_r1_T; 
     option.comment = "Coverage for ZQ1CR0 register";       
   endgroup // ZQ1CR0
   
   covergroup ZQ1CR1;
     type_option.goal = 100;
     `COVERPOINT_8BITS_ONE_HOT(ZPROG_7_0_r1)     
     //coverpoint ZQ1CR1_RESERVED_31_8_r1;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(ZPROG_7_0_r1_T)     
     `COVERPOINT_24BITS_TOGGLING(ZQ1CR1_RESERVED_31_8_r1_T)
     option.comment = "Coverage for ZQ1CR1 register";       
   endgroup // ZQ1CR1
   
   covergroup ZQ1SR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZCTRL_27_0_r1)      
     //coverpoint  ZQ1SR0_RESERVED_29_28_r1;
     coverpoint  ZERR_30_r1;
     coverpoint  ZDONE_31_r1;
     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZCTRL_27_0_r1_T)      
     `COVERPOINT_2BITS_TOGGLING(ZQ1SR0_RESERVED_29_28_r1_T)
     coverpoint  ZERR_30_r1_T;
     coverpoint  ZDONE_31_r1_T;       
     option.comment = "Coverage for ZQ1SR0 register";      
   endgroup // ZQ1SR0
   
   covergroup ZQ1SR1;
     type_option.goal = 100;
     coverpoint  ZPD_1_0_r1;      
     coverpoint  ZPU_3_2_r1;
     coverpoint  OPD_5_4_r1;
     coverpoint  OPU_7_6_r1;
     //coverpoint  ZQ1SR_RESERVED_31_8_r1;
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(ZPD_1_0_r1_T)      
     `COVERPOINT_2BITS_TOGGLING(ZPU_3_2_r1_T)
     `COVERPOINT_2BITS_TOGGLING(OPD_5_4_r1_T)
     `COVERPOINT_2BITS_TOGGLING(OPU_7_6_r1_T)
     `COVERPOINT_24BITS_TOGGLING(ZQ1SR1_RESERVED_31_8_r1_T)
     option.comment = "Coverage for ZQ1SR1 register";      
   endgroup // ZQ1SR1

// ----   
   covergroup ZQ2CR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZDATA_27_0_r2)
     coverpoint  ZDEN_28_r2;
     coverpoint  ZCALBYP_29_r2;
     coverpoint  ZCALEN_30_r2;
     coverpoint  ZQPD_31_r2;

     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZDATA_27_0_r2_T)
     coverpoint  ZDEN_28_r2_T;
     coverpoint  ZCALBYP_29_r2_T;
     coverpoint  ZCALEN_30_r2_T;
     coverpoint  ZQPD_31_r2_T; 
     option.comment = "Coverage for ZQ2CR0 register";       
   endgroup // ZQ2CR0
   
   covergroup ZQ2CR1;
     type_option.goal = 100;
     `COVERPOINT_8BITS_ONE_HOT(ZPROG_7_0_r2)     
     //coverpoint ZQ2CR1_RESERVED_31_8_r2;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(ZPROG_7_0_r2_T)     
     `COVERPOINT_24BITS_TOGGLING(ZQ2CR1_RESERVED_31_8_r2_T)
     option.comment = "Coverage for ZQ2CR1 register";       
   endgroup // ZQ2CR1
   
   covergroup ZQ2SR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZCTRL_27_0_r2)      
     //coverpoint  ZQ2SR0_RESERVED_29_28_r2;
     coverpoint  ZERR_30_r2;
     coverpoint  ZDONE_31_r2;
     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZCTRL_27_0_r2_T)      
     `COVERPOINT_2BITS_TOGGLING(ZQ2SR0_RESERVED_29_28_r2_T)
     coverpoint  ZERR_30_r2_T;
     coverpoint  ZDONE_31_r2_T;       
     option.comment = "Coverage for ZQ2SR0 register";      
   endgroup // ZQ2SR0
   
   covergroup ZQ2SR1;
     type_option.goal = 100;
     coverpoint  ZPD_1_0_r2;      
     coverpoint  ZPU_3_2_r2;
     coverpoint  OPD_5_4_r2;
     coverpoint  OPU_7_6_r2;
     //coverpoint  ZQ2SR_RESERVED_31_8_r2;
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(ZPD_1_0_r2_T)      
     `COVERPOINT_2BITS_TOGGLING(ZPU_3_2_r2_T)
     `COVERPOINT_2BITS_TOGGLING(OPD_5_4_r2_T)
     `COVERPOINT_2BITS_TOGGLING(OPU_7_6_r2_T)
     `COVERPOINT_24BITS_TOGGLING(ZQ2SR1_RESERVED_31_8_r2_T)
     option.comment = "Coverage for ZQ2SR1 register";      
   endgroup // ZQ2SR1

// ----   
   covergroup ZQ3CR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZDATA_27_0_r3)
     coverpoint  ZDEN_28_r3;
     coverpoint  ZCALBYP_29_r3;
     coverpoint  ZCALEN_30_r3;
     coverpoint  ZQPD_31_r3;

     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZDATA_27_0_r3_T)
     coverpoint  ZDEN_28_r3_T;
     coverpoint  ZCALBYP_29_r3_T;
     coverpoint  ZCALEN_30_r3_T;
     coverpoint  ZQPD_31_r3_T; 
     option.comment = "Coverage for ZQ3CR0 register";       
   endgroup // ZQ3CR0
   
   covergroup ZQ3CR1;
     type_option.goal = 100;
     `COVERPOINT_8BITS_ONE_HOT(ZPROG_7_0_r3)     
     //coverpoint ZQ3CR1_RESERVED_31_8_r3;
     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(ZPROG_7_0_r3_T)     
     `COVERPOINT_24BITS_TOGGLING(ZQ3CR1_RESERVED_31_8_r3_T)
     option.comment = "Coverage for ZQ3CR1 register";       
   endgroup // ZQ3CR1
   
   covergroup ZQ3SR0;
     type_option.goal = 100;
     `COVERPOINT_28BITS_ONE_HOT(ZCTRL_27_0_r3)      
     //coverpoint  ZQ3SR0_RESERVED_29_28_r3;
     coverpoint  ZERR_30_r3;
     coverpoint  ZDONE_31_r3;
     //Toggling coverpoints
     `COVERPOINT_28BITS_TOGGLING(ZCTRL_27_0_r3_T)      
     `COVERPOINT_2BITS_TOGGLING(ZQ3SR0_RESERVED_29_28_r3_T)
     coverpoint  ZERR_30_r3_T;
     coverpoint  ZDONE_31_r3_T;       
     option.comment = "Coverage for ZQ3SR0 register";      
   endgroup // ZQ3SR0
   
   covergroup ZQ3SR1;
     type_option.goal = 100;
     coverpoint  ZPD_1_0_r3;      
     coverpoint  ZPU_3_2_r3;
     coverpoint  OPD_5_4_r3;
     coverpoint  OPU_7_6_r3;
     //coverpoint  ZQ3SR_RESERVED_31_8_r3;
     //Toggling coverpoints
     `COVERPOINT_2BITS_TOGGLING(ZPD_1_0_r3_T)      
     `COVERPOINT_2BITS_TOGGLING(ZPU_3_2_r3_T)
     `COVERPOINT_2BITS_TOGGLING(OPD_5_4_r3_T)
     `COVERPOINT_2BITS_TOGGLING(OPU_7_6_r3_T)
     `COVERPOINT_24BITS_TOGGLING(ZQ3SR1_RESERVED_31_8_r3_T)
     option.comment = "Coverage for ZQ3SR1 register";      
   endgroup // ZQ3SR1
 


   
// ----   
   covergroup DX0GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx0;
     coverpoint  DQSODT_1_dx0;               
     coverpoint  DQODT_2_dx0;                
     coverpoint  DXIOM_3_dx0;                
     coverpoint  DXPDD_4_dx0;                
     coverpoint  DXPDR_5_dx0;                
     coverpoint  DQSRPD_6_dx0;               
     coverpoint  DSEN_8_7_dx0;               
     coverpoint  DQSRTT_9_dx0;               
     coverpoint  DQRTT_10_dx0;               
     coverpoint  RTTOH_12_11_dx0;            
     coverpoint  RTTOAL_13_dx0;              
     coverpoint  DXOEO_15_14_dx0;  
     coverpoint  PLLRST_16_dx0;              
     coverpoint  PLLPD_17_dx0;               
     coverpoint  GSHIFT_18_dx0;              
     coverpoint  PLLBYP_19_dx0;              
     //coverpoint  DX0GCR_RESERVED_25_20_dx0;  
     coverpoint  WLRKEN_29_26_dx0;           
     coverpoint  MDLEN_30_dx0;               
     coverpoint  CALBYP_31_dx0;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx0_T;
     coverpoint  DQSODT_1_dx0_T;               
     coverpoint  DQODT_2_dx0_T;                
     coverpoint  DXIOM_3_dx0_T;                
     coverpoint  DXPDD_4_dx0_T;                
     coverpoint  DXPDR_5_dx0_T;                
     coverpoint  DQSRPD_6_dx0_T;               
     coverpoint  DSEN_8_7_dx0_T;               
     coverpoint  DQSRTT_9_dx0_T;               
     coverpoint  DQRTT_10_dx0_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx0_T)            
     coverpoint  RTTOAL_13_dx0_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx0_T)  
     coverpoint  PLLRST_16_dx0_T;              
     coverpoint  PLLPD_17_dx0_T;               
     coverpoint  GSHIFT_18_dx0_T;              
     coverpoint  PLLBYP_19_dx0_T;              
     `COVERPOINT_6BITS_TOGGLING(DX0GCR_RESERVED_25_20_dx0_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx0_T)           
     coverpoint  MDLEN_30_dx0_T;               
     coverpoint  CALBYP_31_dx0_T;              
     option.comment = "Coverage for DX0GCR register";       
   endgroup // DX0GCR
   
   covergroup DX0GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx0;
     coverpoint  RDQSCAL_1_dx0;
     coverpoint  RDQSNCAL_2_dx0;
     coverpoint  GDQSCAL_3_dx0;
     coverpoint  WLCAL_4_dx0;
     coverpoint  WLDONE_5_dx0;
     coverpoint  WLERR_6_dx0;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx0)     
     coverpoint  DPLOCK_15_dx0;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx0)
     coverpoint  QSGERR_27_24_dx0;
     coverpoint  WLDQ_28_dx0;
     //coverpoint  DX0GSR0_RESERVED_31_29_dx0;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx0_T;
     coverpoint  RDQSCAL_1_dx0_T;
     coverpoint  RDQSNCAL_2_dx0_T;
     coverpoint  GDQSCAL_3_dx0_T;
     coverpoint  WLCAL_4_dx0_T;
     coverpoint  WLDONE_5_dx0_T;
     coverpoint  WLERR_6_dx0_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx0_T)     
     coverpoint  DPLOCK_15_dx0_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx0_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx0_T)
     coverpoint  WLDQ_28_dx0_T;
     `COVERPOINT_3BITS_TOGGLING(DX0GSR0_RESERVED_31_29_dx0_T)     
     option.comment = "Coverage for DX0GSR0 register";       
   endgroup // DX0GSR0
   
   covergroup DX0GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx0;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx0) 
     //coverpoint  DX0GSR1_RESERVED_31_25_dx0;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx0_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx0_T) 
     `COVERPOINT_7BITS_TOGGLING(DX0GSR1_RESERVED_31_25_dx0_T)
     option.comment = "Coverage for DX0GSR1 register";       
   endgroup // DX0GSR1
   
   covergroup DX0BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx0;
     coverpoint  DQ1WBD_11_6_dx0;
     coverpoint  DQ2WBD_17_12_dx0;
     coverpoint  DQ3WBD_23_18_dx0;
     coverpoint  DQ4WBD_29_24_dx0;
     //coverpoint  DX0BDLR0_RESERVED_31_30_dx0;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx0_T)
     `COVERPOINT_2BITS_TOGGLING(DX0BDLR0_RESERVED_31_30_dx0_T)

     coverpoint  DQ0WBD_5_0_dx0_vt_drift;
     coverpoint  DQ1WBD_11_6_dx0_vt_drift;
     coverpoint  DQ2WBD_17_12_dx0_vt_drift;
     coverpoint  DQ3WBD_23_18_dx0_vt_drift;
     coverpoint  DQ4WBD_29_24_dx0_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx0_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx0_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx0_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx0_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx0_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx0_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx0_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX0BDLR0 register";       
   endgroup // DX0BDLR0
      
   covergroup DX0BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx0;
     coverpoint  DQ6WBD_11_6_dx0;
     coverpoint  DQ7WBD_17_12_dx0;
     coverpoint  DMWBD_23_18_dx0;
     coverpoint  DSWBD_29_24_dx0;
     //coverpoint  DX0BDLR1_RESERVED_31_30_dx0; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx0_T)
     `COVERPOINT_2BITS_TOGGLING(DX0BDLR1_RESERVED_31_30_dx0_T)       

     coverpoint  DQ5WBD_5_0_dx0_vt_drift;
     coverpoint  DQ6WBD_11_6_dx0_vt_drift;
     coverpoint  DQ7WBD_17_12_dx0_vt_drift;
     coverpoint  DMWBD_23_18_dx0_vt_drift;
     coverpoint  DSWBD_29_24_dx0_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx0_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx0_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx0_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx0_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx0_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx0_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX0BDLR1 register";       
   endgroup // DX0BDLR1   
      
   covergroup DX0BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx0;
     coverpoint  DQOEBD_11_6_dx0;
     coverpoint  DSRBD_17_12_dx0; 
     coverpoint  DSNRBD_23_18_dx0;
     //coverpoint  DX0BDLR2_RESERVED_31_24_dx0;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx0_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx0_T)  
     `COVERPOINT_8BITS_TOGGLING(DX0BDLR2_RESERVED_31_24_dx0_T)      

     coverpoint  DSOEBD_5_0_dx0_vt_drift;
     coverpoint  DQOEBD_11_6_dx0_vt_drift;
     coverpoint  DSRBD_17_12_dx0_vt_drift; 
     coverpoint  DSNRBD_23_18_dx0_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx0_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx0_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx0_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx0_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx0_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx0_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx0_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx0_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX0BDLR2 register";       
   endgroup // DX0BDLR2
   
   covergroup DX0BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx0;
     coverpoint  DQ1RBD_11_6_dx0;
     coverpoint  DQ2RBD_17_12_dx0;
     coverpoint  DQ3RBD_23_18_dx0;
     coverpoint  DQ4RBD_29_24_dx0;
     //coverpoint  DX0BDLR3_RESERVED_31_30_dx0;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx0_T)
     `COVERPOINT_2BITS_TOGGLING(DX0BDLR3_RESERVED_31_30_dx0_T)       

     coverpoint  DQ0RBD_5_0_dx0_vt_drift;
     coverpoint  DQ1RBD_11_6_dx0_vt_drift;
     coverpoint  DQ2RBD_17_12_dx0_vt_drift;
     coverpoint  DQ3RBD_23_18_dx0_vt_drift;
     coverpoint  DQ4RBD_29_24_dx0_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx0_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx0_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx0_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx0_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx0_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx0_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx0_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX0BDLR3 register";       
   endgroup // DX0BDLR3
   
   covergroup DX0BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx0;
     coverpoint  DQ6RBD_11_6_dx0;
     coverpoint  DQ7RBD_17_12_dx0;
     coverpoint  DMRBD_23_18_dx0;
     //coverpoint  DX0BDLR4_RESERVED_31_24_dx0; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx0_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(DX0BDLR4_RESERVED_31_24_dx0_T)      

     coverpoint  DQ5RBD_5_0_dx0_vt_drift;
     coverpoint  DQ6RBD_11_6_dx0_vt_drift;
     coverpoint  DQ7RBD_17_12_dx0_vt_drift;
     coverpoint  DMRBD_23_18_dx0_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx0_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx0_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx0_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx0_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx0_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx0_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX0BDLR4 register";       
   endgroup // DX0BDLR4  
 
   covergroup DX0LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx0) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx0)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx0)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx0)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx0_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx0_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx0_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx0_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx0_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx0_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx0_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx0_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx0_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx0_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx0_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx0_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx0_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx0_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX0LCDLR0 register";       
   endgroup // DX0LCDLR0
   
   covergroup DX0LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx0) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx0)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx0)      
     //coverpoint  DX0LCDLR1_RESERVED_31_24_dx0;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx0_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx0_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx0_T)      
     `COVERPOINT_8BITS_TOGGLING(DX0LCDLR1_RESERVED_31_24_dx0_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx0_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx0_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx0_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx0_vt_drift_wo_upd)

     cross WDQD_7_0_dx0_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx0_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx0_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx0_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx0_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx0_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX0LCDLR1 register";       
   endgroup // DX0LCDLR1
   
   covergroup DX0LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx0) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx0)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx0)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx0) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx0_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx0_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx0_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx0_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx0_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx0_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx0_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx0_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx0_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx0_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx0_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx0_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx0_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx0_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx0_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX0LCDLR2 register";       
   endgroup // DX0LCDLR2
   
   covergroup DX0MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx0)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx0)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx0)           
     //coverpoint  DX0MDLR_RESERVED_31_24_dx0;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx0_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx0_T) 
     `COVERPOINT_8BITS_TOGGLING(DX0MDLR_RESERVED_31_24_dx0_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx0_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx0_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx0_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx0_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx0_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx0_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx0_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx0_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx0_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx0_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx0_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX0MDLR register";       
   endgroup // DX0MDLR


   covergroup DX0GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx0;           
     coverpoint  R1DGSL_5_3_dx0;           
     coverpoint  R2DGSL_8_6_dx0;           
     coverpoint  R3DGSL_11_9_dx0;          
     coverpoint  R0WLSL_13_12_dx0 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx0  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx0 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx0 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX0GTR_RESERVED_31_20_dx0;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx0_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx0_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx0_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx0_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx0_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx0_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx0_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx0_T)         
     `COVERPOINT_12BITS_TOGGLING(DX0GTR_RESERVED_31_20_dx0_T)
     option.comment = "Coverage for DX0GTR register";       
   endgroup // DX0GTR

   covergroup DX0GSR2;
  
     type_option.goal = 100;
     coverpoint  RDERR_0_dx0;                   
     coverpoint  RDWN_1_dx0;                  
     coverpoint  WDERR_2_dx0;                 
     coverpoint  WDWN_3_dx0;                  
     coverpoint  REERR_4_dx0;                 
     coverpoint  REWN_5_dx0;                  
     coverpoint  WEERR_6_dx0;                 
     coverpoint  WEWN_7_dx0;                  
     coverpoint  ESTAT_11_8_dx0;                 
     //coverpoint  DX0GSR2_RESERVED_31_12_dx0;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx0_T;                   
     coverpoint  RDWN_1_dx0_T;                  
     coverpoint  WDERR_2_dx0_T;                 
     coverpoint  WDWN_3_dx0_T;                  
     coverpoint  REERR_4_dx0_T;                 
     coverpoint  REWN_5_dx0_T;                  
     coverpoint  WEERR_6_dx0_T;                 
     coverpoint  WEWN_7_dx0_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx0_T)                
     `COVERPOINT_20BITS_TOGGLING(DX0GSR2_RESERVED_31_12_dx0_T)  
     option.comment = "Coverage for DX0GSR2 register";       
   endgroup 
   

    
// ----   
   covergroup DX1GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx1;
     coverpoint  DQSODT_1_dx1;               
     coverpoint  DQODT_2_dx1;                
     coverpoint  DXIOM_3_dx1;                
     coverpoint  DXPDD_4_dx1;                
     coverpoint  DXPDR_5_dx1;                
     coverpoint  DQSRPD_6_dx1;               
     coverpoint  DSEN_8_7_dx1;               
     coverpoint  DQSRTT_9_dx1;               
     coverpoint  DQRTT_10_dx1;               
     coverpoint  RTTOH_12_11_dx1;            
     coverpoint  RTTOAL_13_dx1;              
     coverpoint  DXOEO_15_14_dx1;  
     coverpoint  PLLRST_16_dx1;              
     coverpoint  PLLPD_17_dx1;               
     coverpoint  GSHIFT_18_dx1;              
     coverpoint  PLLBYP_19_dx1;              
     //coverpoint  DX1GCR_RESERVED_25_20_dx1;  
     coverpoint  WLRKEN_29_26_dx1;           
     coverpoint  MDLEN_30_dx1;               
     coverpoint  CALBYP_31_dx1;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx1_T;
     coverpoint  DQSODT_1_dx1_T;               
     coverpoint  DQODT_2_dx1_T;                
     coverpoint  DXIOM_3_dx1_T;                
     coverpoint  DXPDD_4_dx1_T;                
     coverpoint  DXPDR_5_dx1_T;                
     coverpoint  DQSRPD_6_dx1_T;               
     coverpoint  DSEN_8_7_dx1_T;               
     coverpoint  DQSRTT_9_dx1_T;               
     coverpoint  DQRTT_10_dx1_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx1_T)            
     coverpoint  RTTOAL_13_dx1_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx1_T)  
     coverpoint  PLLRST_16_dx1_T;              
     coverpoint  PLLPD_17_dx1_T;               
     coverpoint  GSHIFT_18_dx1_T;              
     coverpoint  PLLBYP_19_dx1_T;              
     `COVERPOINT_6BITS_TOGGLING(DX1GCR_RESERVED_25_20_dx1_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx1_T)           
     coverpoint  MDLEN_30_dx1_T;               
     coverpoint  CALBYP_31_dx1_T;              
     option.comment = "Coverage for DX1GCR register";       
   endgroup // DX1GCR
   
   covergroup DX1GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx1;
     coverpoint  RDQSCAL_1_dx1;
     coverpoint  RDQSNCAL_2_dx1;
     coverpoint  GDQSCAL_3_dx1;
     coverpoint  WLCAL_4_dx1;
     coverpoint  WLDONE_5_dx1;
     coverpoint  WLERR_6_dx1;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx1)     
     coverpoint  DPLOCK_15_dx1;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx1)
     coverpoint  QSGERR_27_24_dx1;
     coverpoint  WLDQ_28_dx1;
     //coverpoint  DX1GSR0_RESERVED_31_29_dx1;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx1_T;
     coverpoint  RDQSCAL_1_dx1_T;
     coverpoint  RDQSNCAL_2_dx1_T;
     coverpoint  GDQSCAL_3_dx1_T;
     coverpoint  WLCAL_4_dx1_T;
     coverpoint  WLDONE_5_dx1_T;
     coverpoint  WLERR_6_dx1_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx1_T)     
     coverpoint  DPLOCK_15_dx1_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx1_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx1_T)
     coverpoint  WLDQ_28_dx1_T;
     `COVERPOINT_3BITS_TOGGLING(DX1GSR0_RESERVED_31_29_dx1_T)     
     option.comment = "Coverage for DX1GSR0 register";       
   endgroup // DX1GSR0
   
   covergroup DX1GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx1;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx1) 
     //coverpoint  DX1GSR1_RESERVED_31_25_dx1;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx1_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx1_T) 
     `COVERPOINT_7BITS_TOGGLING(DX1GSR1_RESERVED_31_25_dx1_T)
     option.comment = "Coverage for DX1GSR1 register";       
   endgroup // DX1GSR1
   
   covergroup DX1BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx1;
     coverpoint  DQ1WBD_11_6_dx1;
     coverpoint  DQ2WBD_17_12_dx1;
     coverpoint  DQ3WBD_23_18_dx1;
     coverpoint  DQ4WBD_29_24_dx1;
     //coverpoint  DX1BDLR0_RESERVED_31_30_dx1;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx1_T)
     `COVERPOINT_2BITS_TOGGLING(DX1BDLR0_RESERVED_31_30_dx1_T)

     coverpoint  DQ0WBD_5_0_dx1_vt_drift;
     coverpoint  DQ1WBD_11_6_dx1_vt_drift;
     coverpoint  DQ2WBD_17_12_dx1_vt_drift;
     coverpoint  DQ3WBD_23_18_dx1_vt_drift;
     coverpoint  DQ4WBD_29_24_dx1_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx1_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx1_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx1_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx1_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx1_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx1_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx1_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX1BDLR0 register";       
   endgroup // DX1BDLR0
      
   covergroup DX1BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx1;
     coverpoint  DQ6WBD_11_6_dx1;
     coverpoint  DQ7WBD_17_12_dx1;
     coverpoint  DMWBD_23_18_dx1;
     coverpoint  DSWBD_29_24_dx1;
     //coverpoint  DX1BDLR1_RESERVED_31_30_dx1; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx1_T)
     `COVERPOINT_2BITS_TOGGLING(DX1BDLR1_RESERVED_31_30_dx1_T)       

     coverpoint  DQ5WBD_5_0_dx1_vt_drift;
     coverpoint  DQ6WBD_11_6_dx1_vt_drift;
     coverpoint  DQ7WBD_17_12_dx1_vt_drift;
     coverpoint  DMWBD_23_18_dx1_vt_drift;
     coverpoint  DSWBD_29_24_dx1_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx1_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx1_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx1_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx1_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx1_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx1_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX1BDLR1 register";       
   endgroup // DX1BDLR1   
      
   covergroup DX1BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx1;
     coverpoint  DQOEBD_11_6_dx1;
     coverpoint  DSRBD_17_12_dx1; 
     coverpoint  DSNRBD_23_18_dx1;
     //coverpoint  DX1BDLR2_RESERVED_31_24_dx1;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx1_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx1_T)  
     `COVERPOINT_8BITS_TOGGLING(DX1BDLR2_RESERVED_31_24_dx1_T)      

     coverpoint  DSOEBD_5_0_dx1_vt_drift;
     coverpoint  DQOEBD_11_6_dx1_vt_drift;
     coverpoint  DSRBD_17_12_dx1_vt_drift; 
     coverpoint  DSNRBD_23_18_dx1_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx1_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx1_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx1_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx1_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx1_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx1_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx1_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx1_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX1BDLR2 register";       
   endgroup // DX1BDLR2
   
   covergroup DX1BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx1;
     coverpoint  DQ1RBD_11_6_dx1;
     coverpoint  DQ2RBD_17_12_dx1;
     coverpoint  DQ3RBD_23_18_dx1;
     coverpoint  DQ4RBD_29_24_dx1;
     //coverpoint  DX1BDLR3_RESERVED_31_30_dx1;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx1_T)
     `COVERPOINT_2BITS_TOGGLING(DX1BDLR3_RESERVED_31_30_dx1_T)       

     coverpoint  DQ0RBD_5_0_dx1_vt_drift;
     coverpoint  DQ1RBD_11_6_dx1_vt_drift;
     coverpoint  DQ2RBD_17_12_dx1_vt_drift;
     coverpoint  DQ3RBD_23_18_dx1_vt_drift;
     coverpoint  DQ4RBD_29_24_dx1_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx1_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx1_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx1_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx1_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx1_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx1_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx1_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX1BDLR3 register";       
   endgroup // DX1BDLR3
   
   covergroup DX1BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx1;
     coverpoint  DQ6RBD_11_6_dx1;
     coverpoint  DQ7RBD_17_12_dx1;
     coverpoint  DMRBD_23_18_dx1;
     //coverpoint  DX1BDLR4_RESERVED_31_24_dx1; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx1_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(DX1BDLR4_RESERVED_31_24_dx1_T)      

     coverpoint  DQ5RBD_5_0_dx1_vt_drift;
     coverpoint  DQ6RBD_11_6_dx1_vt_drift;
     coverpoint  DQ7RBD_17_12_dx1_vt_drift;
     coverpoint  DMRBD_23_18_dx1_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx1_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx1_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx1_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx1_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx1_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx1_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX1BDLR4 register";       
   endgroup // DX1BDLR4  
 
   covergroup DX1LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx1) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx1)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx1)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx1)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx1_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx1_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx1_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx1_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx1_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx1_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx1_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx1_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx1_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx1_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx1_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx1_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx1_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx1_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX1LCDLR0 register";       
   endgroup // DX1LCDLR0
   
   covergroup DX1LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx1) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx1)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx1)      
     //coverpoint  DX1LCDLR1_RESERVED_31_24_dx1;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx1_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx1_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx1_T)      
     `COVERPOINT_8BITS_TOGGLING(DX1LCDLR1_RESERVED_31_24_dx1_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx1_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx1_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx1_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx1_vt_drift_wo_upd)

     cross WDQD_7_0_dx1_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx1_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx1_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx1_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx1_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx1_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX1LCDLR1 register";       
   endgroup // DX1LCDLR1
   
   covergroup DX1LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx1) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx1)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx1)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx1) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx1_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx1_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx1_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx1_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx1_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx1_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx1_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx1_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx1_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx1_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx1_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx1_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx1_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx1_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx1_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX1LCDLR2 register";       
   endgroup // DX1LCDLR2
   
   covergroup DX1MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx1)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx1)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx1)           
     //coverpoint  DX1MDLR_RESERVED_31_24_dx1;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx1_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx1_T) 
     `COVERPOINT_8BITS_TOGGLING(DX1MDLR_RESERVED_31_24_dx1_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx1_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx1_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx1_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx1_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx1_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx1_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx1_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx1_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx1_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx1_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx1_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX1MDLR register";       
   endgroup // DX1MDLR


   covergroup DX1GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx1;           
     coverpoint  R1DGSL_5_3_dx1;           
     coverpoint  R2DGSL_8_6_dx1;           
     coverpoint  R3DGSL_11_9_dx1;          
     coverpoint  R0WLSL_13_12_dx1 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx1  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx1 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx1 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX1GTR_RESERVED_31_20_dx1;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx1_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx1_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx1_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx1_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx1_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx1_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx1_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx1_T)         
     `COVERPOINT_12BITS_TOGGLING(DX1GTR_RESERVED_31_20_dx1_T)
     option.comment = "Coverage for DX1GTR register";       
   endgroup // DX1GTR


   covergroup DX1GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx1;                   
     coverpoint  RDWN_1_dx1;                  
     coverpoint  WDERR_2_dx1;                 
     coverpoint  WDWN_3_dx1;                  
     coverpoint  REERR_4_dx1;                 
     coverpoint  REWN_5_dx1;                  
     coverpoint  WEERR_6_dx1;                 
     coverpoint  WEWN_7_dx1;                  
     coverpoint  ESTAT_11_8_dx1;                 
     //coverpoint  DX1GSR2_RESERVED_31_12_dx1;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx1_T;                   
     coverpoint  RDWN_1_dx1_T;                  
     coverpoint  WDERR_2_dx1_T;                 
     coverpoint  WDWN_3_dx1_T;                  
     coverpoint  REERR_4_dx1_T;                 
     coverpoint  REWN_5_dx1_T;                  
     coverpoint  WEERR_6_dx1_T;                 
     coverpoint  WEWN_7_dx1_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx1_T)
     `COVERPOINT_20BITS_TOGGLING(DX1GSR2_RESERVED_31_12_dx1_T)  
     option.comment = "Coverage for DX1GSR2 register";       
   endgroup 
       
// ----   
   covergroup DX2GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx2;
     coverpoint  DQSODT_1_dx2;               
     coverpoint  DQODT_2_dx2;                
     coverpoint  DXIOM_3_dx2;                
     coverpoint  DXPDD_4_dx2;                
     coverpoint  DXPDR_5_dx2;                
     coverpoint  DQSRPD_6_dx2;               
     coverpoint  DSEN_8_7_dx2;               
     coverpoint  DQSRTT_9_dx2;               
     coverpoint  DQRTT_10_dx2;               
     coverpoint  RTTOH_12_11_dx2;            
     coverpoint  RTTOAL_13_dx2;              
     coverpoint  DXOEO_15_14_dx2;  
     coverpoint  PLLRST_16_dx2;              
     coverpoint  PLLPD_17_dx2;               
     coverpoint  GSHIFT_18_dx2;              
     coverpoint  PLLBYP_19_dx2;              
     //coverpoint  DX2GCR_RESERVED_25_20_dx2;  
     coverpoint  WLRKEN_29_26_dx2;           
     coverpoint  MDLEN_30_dx2;               
     coverpoint  CALBYP_31_dx2;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx2_T;
     coverpoint  DQSODT_1_dx2_T;               
     coverpoint  DQODT_2_dx2_T;                
     coverpoint  DXIOM_3_dx2_T;                
     coverpoint  DXPDD_4_dx2_T;                
     coverpoint  DXPDR_5_dx2_T;                
     coverpoint  DQSRPD_6_dx2_T;               
     coverpoint  DSEN_8_7_dx2_T;               
     coverpoint  DQSRTT_9_dx2_T;               
     coverpoint  DQRTT_10_dx2_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx2_T)            
     coverpoint  RTTOAL_13_dx2_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx2_T)  
     coverpoint  PLLRST_16_dx2_T;              
     coverpoint  PLLPD_17_dx2_T;               
     coverpoint  GSHIFT_18_dx2_T;              
     coverpoint  PLLBYP_19_dx2_T;             
     `COVERPOINT_6BITS_TOGGLING(DX2GCR_RESERVED_25_20_dx2_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx2_T)           
     coverpoint  MDLEN_30_dx2_T;               
     coverpoint  CALBYP_31_dx2_T;              
     option.comment = "Coverage for DX2GCR register";       
   endgroup // DX2GCR
   
   covergroup DX2GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx2;
     coverpoint  RDQSCAL_1_dx2;
     coverpoint  RDQSNCAL_2_dx2;
     coverpoint  GDQSCAL_3_dx2;
     coverpoint  WLCAL_4_dx2;
     coverpoint  WLDONE_5_dx2;
     coverpoint  WLERR_6_dx2;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx2)     
     coverpoint  DPLOCK_15_dx2;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx2)
     coverpoint  QSGERR_27_24_dx2;
     coverpoint  WLDQ_28_dx2;
     //coverpoint  DX2GSR0_RESERVED_31_29_dx2;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx2_T;
     coverpoint  RDQSCAL_1_dx2_T;
     coverpoint  RDQSNCAL_2_dx2_T;
     coverpoint  GDQSCAL_3_dx2_T;
     coverpoint  WLCAL_4_dx2_T;
     coverpoint  WLDONE_5_dx2_T;
     coverpoint  WLERR_6_dx2_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx2_T)     
     coverpoint  DPLOCK_15_dx2_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx2_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx2_T)
     coverpoint  WLDQ_28_dx2_T;
     `COVERPOINT_3BITS_TOGGLING(DX2GSR0_RESERVED_31_29_dx2_T)     
     option.comment = "Coverage for DX2GSR0 register";       
   endgroup // DX2GSR0
   
   covergroup DX2GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx2;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx2) 
     //coverpoint  DX2GSR1_RESERVED_31_25_dx2;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx2_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx2_T) 
     `COVERPOINT_7BITS_TOGGLING(DX2GSR1_RESERVED_31_25_dx2_T)
     option.comment = "Coverage for DX2GSR1 register";       
   endgroup // DX2GSR1
   
   covergroup DX2BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx2;
     coverpoint  DQ1WBD_11_6_dx2;
     coverpoint  DQ2WBD_17_12_dx2;
     coverpoint  DQ3WBD_23_18_dx2;
     coverpoint  DQ4WBD_29_24_dx2;
     //coverpoint  DX2BDLR0_RESERVED_31_30_dx2;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx2_T)
     `COVERPOINT_2BITS_TOGGLING(DX2BDLR0_RESERVED_31_30_dx2_T)

     coverpoint  DQ0WBD_5_0_dx2_vt_drift;
     coverpoint  DQ1WBD_11_6_dx2_vt_drift;
     coverpoint  DQ2WBD_17_12_dx2_vt_drift;
     coverpoint  DQ3WBD_23_18_dx2_vt_drift;
     coverpoint  DQ4WBD_29_24_dx2_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx2_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx2_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx2_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx2_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx2_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx2_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx2_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX2BDLR0 register";       
   endgroup // DX2BDLR0
      
   covergroup DX2BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx2;
     coverpoint  DQ6WBD_11_6_dx2;
     coverpoint  DQ7WBD_17_12_dx2;
     coverpoint  DMWBD_23_18_dx2;
     coverpoint  DSWBD_29_24_dx2;
     //coverpoint  DX2BDLR1_RESERVED_31_30_dx2; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx2_T)
     `COVERPOINT_2BITS_TOGGLING(DX2BDLR1_RESERVED_31_30_dx2_T)       

     coverpoint  DQ5WBD_5_0_dx2_vt_drift;
     coverpoint  DQ6WBD_11_6_dx2_vt_drift;
     coverpoint  DQ7WBD_17_12_dx2_vt_drift;
     coverpoint  DMWBD_23_18_dx2_vt_drift;
     coverpoint  DSWBD_29_24_dx2_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx2_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx2_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx2_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx2_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx2_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx2_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX2BDLR1 register";       
   endgroup // DX2BDLR1   
      
   covergroup DX2BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx2;
     coverpoint  DQOEBD_11_6_dx2;
     coverpoint  DSRBD_17_12_dx2; 
     coverpoint  DSNRBD_23_18_dx2;
     //coverpoint  DX2BDLR2_RESERVED_31_24_dx2;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx2_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx2_T)  
     `COVERPOINT_8BITS_TOGGLING(DX2BDLR2_RESERVED_31_24_dx2_T)      

     coverpoint  DSOEBD_5_0_dx2_vt_drift;
     coverpoint  DQOEBD_11_6_dx2_vt_drift;
     coverpoint  DSRBD_17_12_dx2_vt_drift; 
     coverpoint  DSNRBD_23_18_dx2_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx2_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx2_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx2_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx2_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx2_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx2_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx2_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx2_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX2BDLR2 register";       
   endgroup // DX2BDLR2
   
   covergroup DX2BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx2;
     coverpoint  DQ1RBD_11_6_dx2;
     coverpoint  DQ2RBD_17_12_dx2;
     coverpoint  DQ3RBD_23_18_dx2;
     coverpoint  DQ4RBD_29_24_dx2;
     //coverpoint  DX2BDLR3_RESERVED_31_30_dx2;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx2_T)
     `COVERPOINT_2BITS_TOGGLING(DX2BDLR3_RESERVED_31_30_dx2_T)       

     coverpoint  DQ0RBD_5_0_dx2_vt_drift;
     coverpoint  DQ1RBD_11_6_dx2_vt_drift;
     coverpoint  DQ2RBD_17_12_dx2_vt_drift;
     coverpoint  DQ3RBD_23_18_dx2_vt_drift;
     coverpoint  DQ4RBD_29_24_dx2_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx2_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx2_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx2_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx2_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx2_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx2_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx2_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX2BDLR3 register";       
   endgroup // DX2BDLR3
   
   covergroup DX2BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx2;
     coverpoint  DQ6RBD_11_6_dx2;
     coverpoint  DQ7RBD_17_12_dx2;
     coverpoint  DMRBD_23_18_dx2;
     //coverpoint  DX2BDLR4_RESERVED_31_24_dx2; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx2_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(DX2BDLR4_RESERVED_31_24_dx2_T)      

     coverpoint  DQ5RBD_5_0_dx2_vt_drift;
     coverpoint  DQ6RBD_11_6_dx2_vt_drift;
     coverpoint  DQ7RBD_17_12_dx2_vt_drift;
     coverpoint  DMRBD_23_18_dx2_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx2_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx2_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx2_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx2_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx2_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx2_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX2BDLR4 register";       
   endgroup // DX2BDLR4  
 
   covergroup DX2LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx2) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx2)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx2)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx2)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx2_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx2_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx2_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx2_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx2_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx2_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx2_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx2_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx2_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx2_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx2_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx2_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx2_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx2_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX2LCDLR0 register";       
   endgroup // DX2LCDLR0
   
   covergroup DX2LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx2) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx2)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx2)      
     //coverpoint  DX2LCDLR1_RESERVED_31_24_dx2;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx2_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx2_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx2_T)      
     `COVERPOINT_8BITS_TOGGLING(DX2LCDLR1_RESERVED_31_24_dx2_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx2_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx2_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx2_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx2_vt_drift_wo_upd)

     cross WDQD_7_0_dx2_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx2_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx2_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx2_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx2_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx2_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX2LCDLR1 register";       
   endgroup // DX2LCDLR1
   
   covergroup DX2LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx2) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx2)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx2)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx2) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx2_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx2_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx2_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx2_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx2_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx2_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx2_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx2_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx2_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx2_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx2_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx2_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx2_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx2_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx2_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX2LCDLR2 register";       
   endgroup // DX2LCDLR2
   
   covergroup DX2MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx2)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx2)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx2)           
     //coverpoint  DX2MDLR_RESERVED_31_24_dx2;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx2_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx2_T) 
     `COVERPOINT_8BITS_TOGGLING(DX2MDLR_RESERVED_31_24_dx2_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx2_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx2_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx2_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx2_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx2_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx2_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx2_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx2_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx2_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx2_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx2_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX2MDLR register";       
   endgroup // DX2MDLR


   covergroup DX2GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx2;           
     coverpoint  R1DGSL_5_3_dx2;           
     coverpoint  R2DGSL_8_6_dx2;           
     coverpoint  R3DGSL_11_9_dx2;          
     coverpoint  R0WLSL_13_12_dx2 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx2  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx2 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx2 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX2GTR_RESERVED_31_20_dx2;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx2_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx2_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx2_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx2_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx2_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx2_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx2_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx2_T)         
     `COVERPOINT_12BITS_TOGGLING(DX2GTR_RESERVED_31_20_dx2_T)
     option.comment = "Coverage for DX2GTR register";       
   endgroup // DX2GTR


   covergroup DX2GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx2;                   
     coverpoint  RDWN_1_dx2;                  
     coverpoint  WDERR_2_dx2;                 
     coverpoint  WDWN_3_dx2;                  
     coverpoint  REERR_4_dx2;                 
     coverpoint  REWN_5_dx2;                  
     coverpoint  WEERR_6_dx2;                 
     coverpoint  WEWN_7_dx2;                  
     coverpoint  ESTAT_11_8_dx2;                 
     //coverpoint  DX2GSR2_RESERVED_31_12_dx2;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx2_T;                   
     coverpoint  RDWN_1_dx2_T;                  
     coverpoint  WDERR_2_dx2_T;                 
     coverpoint  WDWN_3_dx2_T;                  
     coverpoint  REERR_4_dx2_T;                 
     coverpoint  REWN_5_dx2_T;                  
     coverpoint  WEERR_6_dx2_T;                 
     coverpoint  WEWN_7_dx2_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx2_T)
     `COVERPOINT_20BITS_TOGGLING(DX2GSR2_RESERVED_31_12_dx2_T)  
     option.comment = "Coverage for DX2GSR2 register";       
   endgroup 
    
// ----   
   covergroup DX3GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx3;
     coverpoint  DQSODT_1_dx3;               
     coverpoint  DQODT_2_dx3;                
     coverpoint  DXIOM_3_dx3;                
     coverpoint  DXPDD_4_dx3;                
     coverpoint  DXPDR_5_dx3;                
     coverpoint  DQSRPD_6_dx3;               
     coverpoint  DSEN_8_7_dx3;               
     coverpoint  DQSRTT_9_dx3;               
     coverpoint  DQRTT_10_dx3;               
     coverpoint  RTTOH_12_11_dx3;            
     coverpoint  RTTOAL_13_dx3;              
     coverpoint  DXOEO_15_14_dx3;  
     coverpoint  PLLRST_16_dx3;              
     coverpoint  PLLPD_17_dx3;               
     coverpoint  GSHIFT_18_dx3;              
     coverpoint  PLLBYP_19_dx3;              
     //coverpoint  DX3GCR_RESERVED_25_20_dx3;  
     coverpoint  WLRKEN_29_26_dx3;           
     coverpoint  MDLEN_30_dx3;               
     coverpoint  CALBYP_31_dx3;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx3_T;
     coverpoint  DQSODT_1_dx3_T;               
     coverpoint  DQODT_2_dx3_T;                
     coverpoint  DXIOM_3_dx3_T;                
     coverpoint  DXPDD_4_dx3_T;                
     coverpoint  DXPDR_5_dx3_T;                
     coverpoint  DQSRPD_6_dx3_T;               
     coverpoint  DSEN_8_7_dx3_T;               
     coverpoint  DQSRTT_9_dx3_T;               
     coverpoint  DQRTT_10_dx3_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx3_T)            
     coverpoint  RTTOAL_13_dx3_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx3_T)  
     coverpoint  PLLRST_16_dx3_T;              
     coverpoint  PLLPD_17_dx3_T;               
     coverpoint  GSHIFT_18_dx3_T;              
     coverpoint  PLLBYP_19_dx3_T;             
     `COVERPOINT_6BITS_TOGGLING(DX3GCR_RESERVED_25_20_dx3_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx3_T)           
     coverpoint  MDLEN_30_dx3_T;               
     coverpoint  CALBYP_31_dx3_T;              
     option.comment = "Coverage for DX3GCR register";       
   endgroup // DX3GCR
   
   covergroup DX3GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx3;
     coverpoint  RDQSCAL_1_dx3;
     coverpoint  RDQSNCAL_2_dx3;
     coverpoint  GDQSCAL_3_dx3;
     coverpoint  WLCAL_4_dx3;
     coverpoint  WLDONE_5_dx3;
     coverpoint  WLERR_6_dx3;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx3)     
     coverpoint  DPLOCK_15_dx3;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx3)
     coverpoint  QSGERR_27_24_dx3;
     coverpoint  WLDQ_28_dx3;
     //coverpoint  DX3GSR0_RESERVED_31_29_dx3;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx3_T;
     coverpoint  RDQSCAL_1_dx3_T;
     coverpoint  RDQSNCAL_2_dx3_T;
     coverpoint  GDQSCAL_3_dx3_T;
     coverpoint  WLCAL_4_dx3_T;
     coverpoint  WLDONE_5_dx3_T;
     coverpoint  WLERR_6_dx3_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx3_T)     
     coverpoint  DPLOCK_15_dx3_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx3_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx3_T)
     coverpoint  WLDQ_28_dx3_T;
     `COVERPOINT_3BITS_TOGGLING(DX3GSR0_RESERVED_31_29_dx3_T)     
     option.comment = "Coverage for DX3GSR0 register";       
   endgroup // DX3GSR0
   
   covergroup DX3GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx3;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx3) 
     //coverpoint  DX3GSR1_RESERVED_31_25_dx3;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx3_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx3_T) 
     `COVERPOINT_7BITS_TOGGLING(DX3GSR1_RESERVED_31_25_dx3_T)
     option.comment = "Coverage for DX3GSR1 register";       
   endgroup // DX3GSR1
   
   covergroup DX3BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx3;
     coverpoint  DQ1WBD_11_6_dx3;
     coverpoint  DQ2WBD_17_12_dx3;
     coverpoint  DQ3WBD_23_18_dx3;
     coverpoint  DQ4WBD_29_24_dx3;
     //coverpoint  DX3BDLR0_RESERVED_31_30_dx3;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx3_T)
     `COVERPOINT_2BITS_TOGGLING(DX3BDLR0_RESERVED_31_30_dx3_T)

     coverpoint  DQ0WBD_5_0_dx3_vt_drift;
     coverpoint  DQ1WBD_11_6_dx3_vt_drift;
     coverpoint  DQ2WBD_17_12_dx3_vt_drift;
     coverpoint  DQ3WBD_23_18_dx3_vt_drift;
     coverpoint  DQ4WBD_29_24_dx3_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx3_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx3_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx3_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx3_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx3_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx3_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx3_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX3BDLR0 register";       
   endgroup // DX3BDLR0
      
   covergroup DX3BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx3;
     coverpoint  DQ6WBD_11_6_dx3;
     coverpoint  DQ7WBD_17_12_dx3;
     coverpoint  DMWBD_23_18_dx3;
     coverpoint  DSWBD_29_24_dx3;
     //coverpoint  DX3BDLR1_RESERVED_31_30_dx3; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx3_T)
     `COVERPOINT_2BITS_TOGGLING(DX3BDLR1_RESERVED_31_30_dx3_T)       

     coverpoint  DQ5WBD_5_0_dx3_vt_drift;
     coverpoint  DQ6WBD_11_6_dx3_vt_drift;
     coverpoint  DQ7WBD_17_12_dx3_vt_drift;
     coverpoint  DMWBD_23_18_dx3_vt_drift;
     coverpoint  DSWBD_29_24_dx3_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx3_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx3_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx3_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx3_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx3_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx3_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX3BDLR1 register";       
   endgroup // DX3BDLR1   
      
   covergroup DX3BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx3;
     coverpoint  DQOEBD_11_6_dx3;
     coverpoint  DSRBD_17_12_dx3; 
     coverpoint  DSNRBD_23_18_dx3;
     //coverpoint  DX3BDLR2_RESERVED_31_24_dx3;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx3_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx3_T)  
     `COVERPOINT_8BITS_TOGGLING(DX3BDLR2_RESERVED_31_24_dx3_T)      

     coverpoint  DSOEBD_5_0_dx3_vt_drift;
     coverpoint  DQOEBD_11_6_dx3_vt_drift;
     coverpoint  DSRBD_17_12_dx3_vt_drift; 
     coverpoint  DSNRBD_23_18_dx3_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx3_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx3_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx3_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx3_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx3_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx3_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx3_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx3_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX3BDLR2 register";       
   endgroup // DX3BDLR2
   
   covergroup DX3BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx3;
     coverpoint  DQ1RBD_11_6_dx3;
     coverpoint  DQ2RBD_17_12_dx3;
     coverpoint  DQ3RBD_23_18_dx3;
     coverpoint  DQ4RBD_29_24_dx3;
     //coverpoint  DX3BDLR3_RESERVED_31_30_dx3;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx3_T)
     `COVERPOINT_2BITS_TOGGLING(DX3BDLR3_RESERVED_31_30_dx3_T)       

     coverpoint  DQ0RBD_5_0_dx3_vt_drift;
     coverpoint  DQ1RBD_11_6_dx3_vt_drift;
     coverpoint  DQ2RBD_17_12_dx3_vt_drift;
     coverpoint  DQ3RBD_23_18_dx3_vt_drift;
     coverpoint  DQ4RBD_29_24_dx3_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx3_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx3_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx3_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx3_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx3_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx3_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx3_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX3BDLR3 register";       
   endgroup // DX3BDLR3
   
   covergroup DX3BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx3;
     coverpoint  DQ6RBD_11_6_dx3;
     coverpoint  DQ7RBD_17_12_dx3;
     coverpoint  DMRBD_23_18_dx3;
     //coverpoint  DX3BDLR4_RESERVED_31_24_dx3; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx3_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(DX3BDLR4_RESERVED_31_24_dx3_T)      

     coverpoint  DQ5RBD_5_0_dx3_vt_drift;
     coverpoint  DQ6RBD_11_6_dx3_vt_drift;
     coverpoint  DQ7RBD_17_12_dx3_vt_drift;
     coverpoint  DMRBD_23_18_dx3_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx3_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx3_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx3_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx3_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx3_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx3_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX3BDLR4 register";       
   endgroup // DX3BDLR4  
 
   covergroup DX3LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx3) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx3)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx3)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx3)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx3_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx3_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx3_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx3_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx3_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx3_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx3_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx3_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx3_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx3_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx3_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx3_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx3_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx3_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX3LCDLR0 register";       
   endgroup // DX3LCDLR0
   
   covergroup DX3LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx3) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx3)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx3)      
     //coverpoint  DX3LCDLR1_RESERVED_31_24_dx3;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx3_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx3_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx3_T)      
     `COVERPOINT_8BITS_TOGGLING(DX3LCDLR1_RESERVED_31_24_dx3_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx3_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx3_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx3_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx3_vt_drift_wo_upd)

     cross WDQD_7_0_dx3_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx3_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx3_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx3_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx3_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx3_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX3LCDLR1 register";       
   endgroup // DX3LCDLR1
   
   covergroup DX3LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx3) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx3)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx3)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx3) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx3_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx3_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx3_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx3_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx3_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx3_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx3_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx3_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx3_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx3_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx3_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx3_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx3_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx3_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx3_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX3LCDLR2 register";       
   endgroup // DX3LCDLR2
   
   covergroup DX3MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx3)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx3)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx3)           
     //coverpoint  DX3MDLR_RESERVED_31_24_dx3;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx3_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx3_T) 
     `COVERPOINT_8BITS_TOGGLING(DX3MDLR_RESERVED_31_24_dx3_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx3_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx3_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx3_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx3_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx3_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx3_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx3_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx3_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx3_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx3_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx3_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX3MDLR register";       
   endgroup // DX3MDLR


   covergroup DX3GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx3;           
     coverpoint  R1DGSL_5_3_dx3;           
     coverpoint  R2DGSL_8_6_dx3;           
     coverpoint  R3DGSL_11_9_dx3;          
     coverpoint  R0WLSL_13_12_dx3 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx3  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx3 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx3 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX3GTR_RESERVED_31_20_dx3;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx3_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx3_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx3_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx3_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx3_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx3_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx3_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx3_T)         
     `COVERPOINT_12BITS_TOGGLING(DX3GTR_RESERVED_31_20_dx3_T)
     option.comment = "Coverage for DX3GTR register";       
   endgroup // DX3GTR


   covergroup DX3GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx3;                   
     coverpoint  RDWN_1_dx3;                  
     coverpoint  WDERR_2_dx3;                 
     coverpoint  WDWN_3_dx3;                  
     coverpoint  REERR_4_dx3;                 
     coverpoint  REWN_5_dx3;                  
     coverpoint  WEERR_6_dx3;                 
     coverpoint  WEWN_7_dx3;                  
     coverpoint  ESTAT_11_8_dx3;                 
     //coverpoint  DX3GSR2_RESERVED_31_12_dx3;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx3_T;                   
     coverpoint  RDWN_1_dx3_T;                  
     coverpoint  WDERR_2_dx3_T;                 
     coverpoint  WDWN_3_dx3_T;                  
     coverpoint  REERR_4_dx3_T;                 
     coverpoint  REWN_5_dx3_T;                  
     coverpoint  WEERR_6_dx3_T;                 
     coverpoint  WEWN_7_dx3_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx3_T)
     `COVERPOINT_20BITS_TOGGLING(DX3GSR2_RESERVED_31_12_dx3_T)  
     option.comment = "Coverage for DX3GSR2 register";       
   endgroup 
        
// ----   
   covergroup DX4GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx4;
     coverpoint  DQSODT_1_dx4;               
     coverpoint  DQODT_2_dx4;                
     coverpoint  DXIOM_3_dx4;                
     coverpoint  DXPDD_4_dx4;                
     coverpoint  DXPDR_5_dx4;                
     coverpoint  DQSRPD_6_dx4;               
     coverpoint  DSEN_8_7_dx4;               
     coverpoint  DQSRTT_9_dx4;               
     coverpoint  DQRTT_10_dx4;               
     coverpoint  RTTOH_12_11_dx4;            
     coverpoint  RTTOAL_13_dx4;              
     coverpoint  DXOEO_15_14_dx4;  
     coverpoint  PLLRST_16_dx4;              
     coverpoint  PLLPD_17_dx4;               
     coverpoint  GSHIFT_18_dx4;              
     coverpoint  PLLBYP_19_dx4;              
     //coverpoint  DX4GCR_RESERVED_25_20_dx4;  
     coverpoint  WLRKEN_29_26_dx4;           
     coverpoint  MDLEN_30_dx4;               
     coverpoint  CALBYP_31_dx4;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx4_T;
     coverpoint  DQSODT_1_dx4_T;               
     coverpoint  DQODT_2_dx4_T;                
     coverpoint  DXIOM_3_dx4_T;                
     coverpoint  DXPDD_4_dx4_T;                
     coverpoint  DXPDR_5_dx4_T;                
     coverpoint  DQSRPD_6_dx4_T;               
     coverpoint  DSEN_8_7_dx4_T;               
     coverpoint  DQSRTT_9_dx4_T;               
     coverpoint  DQRTT_10_dx4_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx4_T)            
     coverpoint  RTTOAL_13_dx4_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx4_T)  
     coverpoint  PLLRST_16_dx4_T;              
     coverpoint  PLLPD_17_dx4_T;               
     coverpoint  GSHIFT_18_dx4_T;              
     coverpoint  PLLBYP_19_dx4_T;             
     `COVERPOINT_6BITS_TOGGLING(DX4GCR_RESERVED_25_20_dx4_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx4_T)           
     coverpoint  MDLEN_30_dx4_T;               
     coverpoint  CALBYP_31_dx4_T;              
     option.comment = "Coverage for DX4GCR register";       
   endgroup // DX4GCR
   
   covergroup DX4GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx4;
     coverpoint  RDQSCAL_1_dx4;
     coverpoint  RDQSNCAL_2_dx4;
     coverpoint  GDQSCAL_3_dx4;
     coverpoint  WLCAL_4_dx4;
     coverpoint  WLDONE_5_dx4;
     coverpoint  WLERR_6_dx4;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx4)     
     coverpoint  DPLOCK_15_dx4;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx4)
     coverpoint  QSGERR_27_24_dx4;
     coverpoint  WLDQ_28_dx4;
     //coverpoint  DX4GSR0_RESERVED_31_29_dx4;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx4_T;
     coverpoint  RDQSCAL_1_dx4_T;
     coverpoint  RDQSNCAL_2_dx4_T;
     coverpoint  GDQSCAL_3_dx4_T;
     coverpoint  WLCAL_4_dx4_T;
     coverpoint  WLDONE_5_dx4_T;
     coverpoint  WLERR_6_dx4_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx4_T)     
     coverpoint  DPLOCK_15_dx4_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx4_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx4_T)
     coverpoint  WLDQ_28_dx4_T;
     `COVERPOINT_3BITS_TOGGLING(DX4GSR0_RESERVED_31_29_dx4_T)     
     option.comment = "Coverage for DX4GSR0 register";       
   endgroup // DX4GSR0
   
   covergroup DX4GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx4;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx4) 
     //coverpoint  DX4GSR1_RESERVED_31_25_dx4;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx4_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx4_T) 
     `COVERPOINT_7BITS_TOGGLING(DX4GSR1_RESERVED_31_25_dx4_T)
     option.comment = "Coverage for DX4GSR1 register";       
   endgroup // DX4GSR1
   
   covergroup DX4BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx4;
     coverpoint  DQ1WBD_11_6_dx4;
     coverpoint  DQ2WBD_17_12_dx4;
     coverpoint  DQ3WBD_23_18_dx4;
     coverpoint  DQ4WBD_29_24_dx4;
     //coverpoint  DX4BDLR0_RESERVED_31_30_dx4;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx4_T)
     `COVERPOINT_2BITS_TOGGLING(DX4BDLR0_RESERVED_31_30_dx4_T)

     coverpoint  DQ0WBD_5_0_dx4_vt_drift;
     coverpoint  DQ1WBD_11_6_dx4_vt_drift;
     coverpoint  DQ2WBD_17_12_dx4_vt_drift;
     coverpoint  DQ3WBD_23_18_dx4_vt_drift;
     coverpoint  DQ4WBD_29_24_dx4_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx4_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx4_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx4_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx4_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx4_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx4_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx4_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX4BDLR0 register";       
   endgroup // DX4BDLR0
      
   covergroup DX4BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx4;
     coverpoint  DQ6WBD_11_6_dx4;
     coverpoint  DQ7WBD_17_12_dx4;
     coverpoint  DMWBD_23_18_dx4;
     coverpoint  DSWBD_29_24_dx4;
     //coverpoint  DX4BDLR1_RESERVED_31_30_dx4; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx4_T)
     `COVERPOINT_2BITS_TOGGLING(DX4BDLR1_RESERVED_31_30_dx4_T)       

     coverpoint  DQ5WBD_5_0_dx4_vt_drift;
     coverpoint  DQ6WBD_11_6_dx4_vt_drift;
     coverpoint  DQ7WBD_17_12_dx4_vt_drift;
     coverpoint  DMWBD_23_18_dx4_vt_drift;
     coverpoint  DSWBD_29_24_dx4_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx4_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx4_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx4_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx4_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx4_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx4_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX4BDLR1 register";       
   endgroup // DX4BDLR1   
      
   covergroup DX4BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx4;
     coverpoint  DQOEBD_11_6_dx4;
     coverpoint  DSRBD_17_12_dx4; 
     coverpoint  DSNRBD_23_18_dx4;
     //coverpoint  DX4BDLR2_RESERVED_31_24_dx4;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx4_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx4_T)  
     `COVERPOINT_8BITS_TOGGLING(DX4BDLR2_RESERVED_31_24_dx4_T)      

     coverpoint  DSOEBD_5_0_dx4_vt_drift;
     coverpoint  DQOEBD_11_6_dx4_vt_drift;
     coverpoint  DSRBD_17_12_dx4_vt_drift; 
     coverpoint  DSNRBD_23_18_dx4_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx4_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx4_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx4_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx4_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx4_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx4_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx4_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx4_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX4BDLR2 register";       
   endgroup // DX4BDLR2
   
   covergroup DX4BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx4;
     coverpoint  DQ1RBD_11_6_dx4;
     coverpoint  DQ2RBD_17_12_dx4;
     coverpoint  DQ3RBD_23_18_dx4;
     coverpoint  DQ4RBD_29_24_dx4;
     //coverpoint  DX4BDLR3_RESERVED_31_30_dx4;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx4_T)
     `COVERPOINT_2BITS_TOGGLING(DX4BDLR3_RESERVED_31_30_dx4_T)       

     coverpoint  DQ0RBD_5_0_dx4_vt_drift;
     coverpoint  DQ1RBD_11_6_dx4_vt_drift;
     coverpoint  DQ2RBD_17_12_dx4_vt_drift;
     coverpoint  DQ3RBD_23_18_dx4_vt_drift;
     coverpoint  DQ4RBD_29_24_dx4_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx4_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx4_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx4_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx4_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx4_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx4_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx4_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX4BDLR3 register";       
   endgroup // DX4BDLR3
   
   covergroup DX4BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx4;
     coverpoint  DQ6RBD_11_6_dx4;
     coverpoint  DQ7RBD_17_12_dx4;
     coverpoint  DMRBD_23_18_dx4;
     //coverpoint  DX4BDLR4_RESERVED_31_24_dx4; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx4_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(DX4BDLR4_RESERVED_31_24_dx4_T)      

     coverpoint  DQ5RBD_5_0_dx4_vt_drift;
     coverpoint  DQ6RBD_11_6_dx4_vt_drift;
     coverpoint  DQ7RBD_17_12_dx4_vt_drift;
     coverpoint  DMRBD_23_18_dx4_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx4_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx4_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx4_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx4_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx4_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx4_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX4BDLR4 register";       
   endgroup // DX4BDLR4  
 
   covergroup DX4LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx4) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx4)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx4)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx4)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx4_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx4_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx4_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx4_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx4_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx4_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx4_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx4_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx4_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx4_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx4_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx4_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx4_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx4_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX4LCDLR0 register";       
   endgroup // DX4LCDLR0
   
   covergroup DX4LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx4) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx4)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx4)      
     //coverpoint  DX4LCDLR1_RESERVED_31_24_dx4;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx4_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx4_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx4_T)      
     `COVERPOINT_8BITS_TOGGLING(DX4LCDLR1_RESERVED_31_24_dx4_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx4_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx4_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx4_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx4_vt_drift_wo_upd)

     cross WDQD_7_0_dx4_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx4_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx4_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx4_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx4_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx4_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX4LCDLR1 register";       
   endgroup // DX4LCDLR1
   
   covergroup DX4LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx4) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx4)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx4)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx4) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx4_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx4_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx4_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx4_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx4_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx4_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx4_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx4_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx4_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx4_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx4_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx4_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx4_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx4_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx4_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX4LCDLR2 register";       
   endgroup // DX4LCDLR2
   
   covergroup DX4MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx4)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx4)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx4)           
     //coverpoint  DX4MDLR_RESERVED_31_24_dx4;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx4_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx4_T) 
     `COVERPOINT_8BITS_TOGGLING(DX4MDLR_RESERVED_31_24_dx4_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx4_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx4_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx4_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx4_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx4_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx4_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx4_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx4_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx4_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx4_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx4_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX4MDLR register";       
   endgroup // DX4MDLR


   covergroup DX4GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx4;           
     coverpoint  R1DGSL_5_3_dx4;           
     coverpoint  R2DGSL_8_6_dx4;           
     coverpoint  R3DGSL_11_9_dx4;          
     coverpoint  R0WLSL_13_12_dx4 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx4  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx4 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx4 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX4GTR_RESERVED_31_20_dx4;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx4_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx4_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx4_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx4_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx4_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx4_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx4_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx4_T)         
     `COVERPOINT_12BITS_TOGGLING(DX4GTR_RESERVED_31_20_dx4_T)
     option.comment = "Coverage for DX4GTR register";       
   endgroup // DX4GTR


   covergroup DX4GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx4;                   
     coverpoint  RDWN_1_dx4;                  
     coverpoint  WDERR_2_dx4;                 
     coverpoint  WDWN_3_dx4;                  
     coverpoint  REERR_4_dx4;                 
     coverpoint  REWN_5_dx4;                  
     coverpoint  WEERR_6_dx4;                 
     coverpoint  WEWN_7_dx4;                  
     coverpoint  ESTAT_11_8_dx4;                 
     //coverpoint  DX4GSR2_RESERVED_31_12_dx4;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx4_T;                   
     coverpoint  RDWN_1_dx4_T;                  
     coverpoint  WDERR_2_dx4_T;                 
     coverpoint  WDWN_3_dx4_T;                  
     coverpoint  REERR_4_dx4_T;                 
     coverpoint  REWN_5_dx4_T;                  
     coverpoint  WEERR_6_dx4_T;                 
     coverpoint  WEWN_7_dx4_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx4_T)
     `COVERPOINT_20BITS_TOGGLING(DX4GSR2_RESERVED_31_12_dx4_T)  
     option.comment = "Coverage for DX4GSR2 register";       
   endgroup 
        

    
// ----   
   covergroup DX5GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx5;
     coverpoint  DQSODT_1_dx5;               
     coverpoint  DQODT_2_dx5;                
     coverpoint  DXIOM_3_dx5;                
     coverpoint  DXPDD_4_dx5;                
     coverpoint  DXPDR_5_dx5;                
     coverpoint  DQSRPD_6_dx5;               
     coverpoint  DSEN_8_7_dx5;               
     coverpoint  DQSRTT_9_dx5;               
     coverpoint  DQRTT_10_dx5;               
     coverpoint  RTTOH_12_11_dx5;            
     coverpoint  RTTOAL_13_dx5;              
     coverpoint  DXOEO_15_14_dx5;  
     coverpoint  PLLRST_16_dx5;              
     coverpoint  PLLPD_17_dx5;               
     coverpoint  GSHIFT_18_dx5;              
     coverpoint  PLLBYP_19_dx5;              
     //coverpoint  DX5GCR_RESERVED_25_20_dx5;  
     coverpoint  WLRKEN_29_26_dx5;           
     coverpoint  MDLEN_30_dx5;               
     coverpoint  CALBYP_31_dx5;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx5_T;
     coverpoint  DQSODT_1_dx5_T;               
     coverpoint  DQODT_2_dx5_T;                
     coverpoint  DXIOM_3_dx5_T;                
     coverpoint  DXPDD_4_dx5_T;                
     coverpoint  DXPDR_5_dx5_T;                
     coverpoint  DQSRPD_6_dx5_T;               
     coverpoint  DSEN_8_7_dx5_T;               
     coverpoint  DQSRTT_9_dx5_T;               
     coverpoint  DQRTT_10_dx5_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx5_T)            
     coverpoint  RTTOAL_13_dx5_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx5_T)  
     coverpoint  PLLRST_16_dx5_T;              
     coverpoint  PLLPD_17_dx5_T;               
     coverpoint  GSHIFT_18_dx5_T;              
     coverpoint  PLLBYP_19_dx5_T;             
     `COVERPOINT_6BITS_TOGGLING(DX5GCR_RESERVED_25_20_dx5_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx5_T)           
     coverpoint  MDLEN_30_dx5_T;               
     coverpoint  CALBYP_31_dx5_T;              
     option.comment = "Coverage for DX5GCR register";       
   endgroup // DX5GCR
   
   covergroup DX5GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx5;
     coverpoint  RDQSCAL_1_dx5;
     coverpoint  RDQSNCAL_2_dx5;
     coverpoint  GDQSCAL_3_dx5;
     coverpoint  WLCAL_4_dx5;
     coverpoint  WLDONE_5_dx5;
     coverpoint  WLERR_6_dx5;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx5)     
     coverpoint  DPLOCK_15_dx5;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx5)
     coverpoint  QSGERR_27_24_dx5;
     coverpoint  WLDQ_28_dx5;
     //coverpoint  DX5GSR0_RESERVED_31_29_dx5;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx5_T;
     coverpoint  RDQSCAL_1_dx5_T;
     coverpoint  RDQSNCAL_2_dx5_T;
     coverpoint  GDQSCAL_3_dx5_T;
     coverpoint  WLCAL_4_dx5_T;
     coverpoint  WLDONE_5_dx5_T;
     coverpoint  WLERR_6_dx5_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx5_T)     
     coverpoint  DPLOCK_15_dx5_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx5_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx5_T)
     coverpoint  WLDQ_28_dx5_T;
     `COVERPOINT_3BITS_TOGGLING(DX5GSR0_RESERVED_31_29_dx5_T)     
     option.comment = "Coverage for DX5GSR0 register";       
   endgroup // DX5GSR0
   
   covergroup DX5GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx5;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx5) 
     //coverpoint  DX5GSR1_RESERVED_31_25_dx5;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx5_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx5_T) 
     `COVERPOINT_7BITS_TOGGLING(DX5GSR1_RESERVED_31_25_dx5_T)
     option.comment = "Coverage for DX5GSR1 register";       
   endgroup // DX5GSR1
   
   covergroup DX5BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx5;
     coverpoint  DQ1WBD_11_6_dx5;
     coverpoint  DQ2WBD_17_12_dx5;
     coverpoint  DQ3WBD_23_18_dx5;
     coverpoint  DQ4WBD_29_24_dx5;
     //coverpoint  DX5BDLR0_RESERVED_31_30_dx5;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx5_T)
     `COVERPOINT_2BITS_TOGGLING(DX5BDLR0_RESERVED_31_30_dx5_T)

     coverpoint  DQ0WBD_5_0_dx5_vt_drift;
     coverpoint  DQ1WBD_11_6_dx5_vt_drift;
     coverpoint  DQ2WBD_17_12_dx5_vt_drift;
     coverpoint  DQ3WBD_23_18_dx5_vt_drift;
     coverpoint  DQ4WBD_29_24_dx5_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx5_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx5_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx5_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx5_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx5_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx5_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx5_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX5BDLR0 register";       
   endgroup // DX5BDLR0
      
   covergroup DX5BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx5;
     coverpoint  DQ6WBD_11_6_dx5;
     coverpoint  DQ7WBD_17_12_dx5;
     coverpoint  DMWBD_23_18_dx5;
     coverpoint  DSWBD_29_24_dx5;
     //coverpoint  DX5BDLR1_RESERVED_31_30_dx5; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx5_T)
     `COVERPOINT_2BITS_TOGGLING(DX5BDLR1_RESERVED_31_30_dx5_T)       

     coverpoint  DQ5WBD_5_0_dx5_vt_drift;
     coverpoint  DQ6WBD_11_6_dx5_vt_drift;
     coverpoint  DQ7WBD_17_12_dx5_vt_drift;
     coverpoint  DMWBD_23_18_dx5_vt_drift;
     coverpoint  DSWBD_29_24_dx5_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx5_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx5_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx5_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx5_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx5_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx5_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX5BDLR1 register";       
   endgroup // DX5BDLR1   
      
   covergroup DX5BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx5;
     coverpoint  DQOEBD_11_6_dx5;
     coverpoint  DSRBD_17_12_dx5; 
     coverpoint  DSNRBD_23_18_dx5;
     //coverpoint  DX5BDLR2_RESERVED_31_24_dx5;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx5_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx5_T)  
     `COVERPOINT_8BITS_TOGGLING(DX5BDLR2_RESERVED_31_24_dx5_T)      

     coverpoint  DSOEBD_5_0_dx5_vt_drift;
     coverpoint  DQOEBD_11_6_dx5_vt_drift;
     coverpoint  DSRBD_17_12_dx5_vt_drift; 
     coverpoint  DSNRBD_23_18_dx5_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx5_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx5_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx5_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx5_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx5_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx5_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx5_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx5_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX5BDLR2 register";       
   endgroup // DX5BDLR2
   
   covergroup DX5BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx5;
     coverpoint  DQ1RBD_11_6_dx5;
     coverpoint  DQ2RBD_17_12_dx5;
     coverpoint  DQ3RBD_23_18_dx5;
     coverpoint  DQ4RBD_29_24_dx5;
     //coverpoint  DX5BDLR3_RESERVED_31_30_dx5;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx5_T)
     `COVERPOINT_2BITS_TOGGLING(DX5BDLR3_RESERVED_31_30_dx5_T)       

     coverpoint  DQ0RBD_5_0_dx5_vt_drift;
     coverpoint  DQ1RBD_11_6_dx5_vt_drift;
     coverpoint  DQ2RBD_17_12_dx5_vt_drift;
     coverpoint  DQ3RBD_23_18_dx5_vt_drift;
     coverpoint  DQ4RBD_29_24_dx5_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx5_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx5_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx5_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx5_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx5_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx5_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx5_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX5BDLR3 register";       
   endgroup // DX5BDLR3
   
   covergroup DX5BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx5;
     coverpoint  DQ6RBD_11_6_dx5;
     coverpoint  DQ7RBD_17_12_dx5;
     coverpoint  DMRBD_23_18_dx5;
     //coverpoint  DX5BDLR4_RESERVED_31_24_dx5; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx5_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(DX5BDLR4_RESERVED_31_24_dx5_T)      

     coverpoint  DQ5RBD_5_0_dx5_vt_drift;
     coverpoint  DQ6RBD_11_6_dx5_vt_drift;
     coverpoint  DQ7RBD_17_12_dx5_vt_drift;
     coverpoint  DMRBD_23_18_dx5_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx5_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx5_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx5_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx5_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx5_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx5_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX5BDLR4 register";       
   endgroup // DX5BDLR4  
 
   covergroup DX5LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx5) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx5)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx5)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx5)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx5_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx5_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx5_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx5_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx5_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx5_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx5_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx5_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx5_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx5_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx5_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx5_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx5_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx5_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX5LCDLR0 register";       
   endgroup // DX5LCDLR0
   
   covergroup DX5LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx5) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx5)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx5)      
     //coverpoint  DX5LCDLR1_RESERVED_31_24_dx5;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx5_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx5_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx5_T)      
     `COVERPOINT_8BITS_TOGGLING(DX5LCDLR1_RESERVED_31_24_dx5_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx5_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx5_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx5_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx5_vt_drift_wo_upd)

     cross WDQD_7_0_dx5_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx5_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx5_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx5_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx5_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx5_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX5LCDLR1 register";       
   endgroup // DX5LCDLR1
   
   covergroup DX5LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx5) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx5)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx5)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx5) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx5_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx5_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx5_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx5_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx5_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx5_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx5_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx5_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx5_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx5_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx5_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx5_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx5_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx5_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx5_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX5LCDLR2 register";       
   endgroup // DX5LCDLR2
   
   covergroup DX5MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx5)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx5)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx5)           
     //coverpoint  DX5MDLR_RESERVED_31_24_dx5;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx5_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx5_T) 
     `COVERPOINT_8BITS_TOGGLING(DX5MDLR_RESERVED_31_24_dx5_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx5_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx5_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx5_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx5_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx5_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx5_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx5_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx5_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx5_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx5_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx5_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX5MDLR register";       
   endgroup // DX5MDLR


   covergroup DX5GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx5;           
     coverpoint  R1DGSL_5_3_dx5;           
     coverpoint  R2DGSL_8_6_dx5;           
     coverpoint  R3DGSL_11_9_dx5;          
     coverpoint  R0WLSL_13_12_dx5 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx5  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx5 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx5 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX5GTR_RESERVED_31_20_dx5;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx5_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx5_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx5_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx5_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx5_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx5_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx5_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx5_T)         
     `COVERPOINT_12BITS_TOGGLING(DX5GTR_RESERVED_31_20_dx5_T)
     option.comment = "Coverage for DX5GTR register";       
   endgroup // DX5GTR

   covergroup DX5GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx5;                   
     coverpoint  RDWN_1_dx5;                  
     coverpoint  WDERR_2_dx5;                 
     coverpoint  WDWN_3_dx5;                  
     coverpoint  REERR_4_dx5;                 
     coverpoint  REWN_5_dx5;                  
     coverpoint  WEERR_6_dx5;                 
     coverpoint  WEWN_7_dx5;                  
     coverpoint  ESTAT_11_8_dx5;                 
     //coverpoint  DX5GSR2_RESERVED_31_12_dx5;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx5_T;                   
     coverpoint  RDWN_1_dx5_T;                  
     coverpoint  WDERR_2_dx5_T;                 
     coverpoint  WDWN_3_dx5_T;                  
     coverpoint  REERR_4_dx5_T;                 
     coverpoint  REWN_5_dx5_T;                  
     coverpoint  WEERR_6_dx5_T;                 
     coverpoint  WEWN_7_dx5_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx5_T)
     `COVERPOINT_20BITS_TOGGLING(DX5GSR2_RESERVED_31_12_dx5_T)  
     option.comment = "Coverage for DX5GSR2 register";       
   endgroup 
        

    
// ----   
   covergroup DX6GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx6;
     coverpoint  DQSODT_1_dx6;               
     coverpoint  DQODT_2_dx6;                
     coverpoint  DXIOM_3_dx6;                
     coverpoint  DXPDD_4_dx6;                
     coverpoint  DXPDR_5_dx6;                
     coverpoint  DQSRPD_6_dx6;               
     coverpoint  DSEN_8_7_dx6;               
     coverpoint  DQSRTT_9_dx6;               
     coverpoint  DQRTT_10_dx6;               
     coverpoint  RTTOH_12_11_dx6;            
     coverpoint  RTTOAL_13_dx6;              
     coverpoint  DXOEO_15_14_dx6;  
     coverpoint  PLLRST_16_dx6;              
     coverpoint  PLLPD_17_dx6;               
     coverpoint  GSHIFT_18_dx6;              
     coverpoint  PLLBYP_19_dx6;              
     //coverpoint  DX6GCR_RESERVED_25_20_dx6;  
     coverpoint  WLRKEN_29_26_dx6;           
     coverpoint  MDLEN_30_dx6;               
     coverpoint  CALBYP_31_dx6;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx6_T;
     coverpoint  DQSODT_1_dx6_T;               
     coverpoint  DQODT_2_dx6_T;                
     coverpoint  DXIOM_3_dx6_T;                
     coverpoint  DXPDD_4_dx6_T;                
     coverpoint  DXPDR_5_dx6_T;                
     coverpoint  DQSRPD_6_dx6_T;               
     coverpoint  DSEN_8_7_dx6_T;               
     coverpoint  DQSRTT_9_dx6_T;               
     coverpoint  DQRTT_10_dx6_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx6_T)            
     coverpoint  RTTOAL_13_dx6_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx6_T)  
     coverpoint  PLLRST_16_dx6_T;              
     coverpoint  PLLPD_17_dx6_T;               
     coverpoint  GSHIFT_18_dx6_T;              
     coverpoint  PLLBYP_19_dx6_T;             
     `COVERPOINT_6BITS_TOGGLING(DX6GCR_RESERVED_25_20_dx6_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx6_T)           
     coverpoint  MDLEN_30_dx6_T;               
     coverpoint  CALBYP_31_dx6_T;              
     option.comment = "Coverage for DX6GCR register";       
   endgroup // DX6GCR
   
   covergroup DX6GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx6;
     coverpoint  RDQSCAL_1_dx6;
     coverpoint  RDQSNCAL_2_dx6;
     coverpoint  GDQSCAL_3_dx6;
     coverpoint  WLCAL_4_dx6;
     coverpoint  WLDONE_5_dx6;
     coverpoint  WLERR_6_dx6;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx6)     
     coverpoint  DPLOCK_15_dx6;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx6)
     coverpoint  QSGERR_27_24_dx6;
     coverpoint  WLDQ_28_dx6;
     //coverpoint  DX6GSR0_RESERVED_31_29_dx6;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx6_T;
     coverpoint  RDQSCAL_1_dx6_T;
     coverpoint  RDQSNCAL_2_dx6_T;
     coverpoint  GDQSCAL_3_dx6_T;
     coverpoint  WLCAL_4_dx6_T;
     coverpoint  WLDONE_5_dx6_T;
     coverpoint  WLERR_6_dx6_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx6_T)     
     coverpoint  DPLOCK_15_dx6_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx6_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx6_T)
     coverpoint  WLDQ_28_dx6_T;
     `COVERPOINT_3BITS_TOGGLING(DX6GSR0_RESERVED_31_29_dx6_T)     
     option.comment = "Coverage for DX6GSR0 register";       
   endgroup // DX6GSR0
   
   covergroup DX6GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx6;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx6) 
     //coverpoint  DX6GSR1_RESERVED_31_25_dx6;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx6_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx6_T) 
     `COVERPOINT_7BITS_TOGGLING(DX6GSR1_RESERVED_31_25_dx6_T)
     option.comment = "Coverage for DX6GSR1 register";       
   endgroup // DX6GSR1
   
   covergroup DX6BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx6;
     coverpoint  DQ1WBD_11_6_dx6;
     coverpoint  DQ2WBD_17_12_dx6;
     coverpoint  DQ3WBD_23_18_dx6;
     coverpoint  DQ4WBD_29_24_dx6;
     //coverpoint  DX6BDLR0_RESERVED_31_30_dx6;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx6_T)
     `COVERPOINT_2BITS_TOGGLING(DX6BDLR0_RESERVED_31_30_dx6_T)

     coverpoint  DQ0WBD_5_0_dx6_vt_drift;
     coverpoint  DQ1WBD_11_6_dx6_vt_drift;
     coverpoint  DQ2WBD_17_12_dx6_vt_drift;
     coverpoint  DQ3WBD_23_18_dx6_vt_drift;
     coverpoint  DQ4WBD_29_24_dx6_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx6_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx6_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx6_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx6_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx6_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx6_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx6_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX6BDLR0 register";       
   endgroup // DX6BDLR0
      
   covergroup DX6BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx6;
     coverpoint  DQ6WBD_11_6_dx6;
     coverpoint  DQ7WBD_17_12_dx6;
     coverpoint  DMWBD_23_18_dx6;
     coverpoint  DSWBD_29_24_dx6;
     //coverpoint  DX6BDLR1_RESERVED_31_30_dx6; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx6_T)
     `COVERPOINT_2BITS_TOGGLING(DX6BDLR1_RESERVED_31_30_dx6_T)       

     coverpoint  DQ5WBD_5_0_dx6_vt_drift;
     coverpoint  DQ6WBD_11_6_dx6_vt_drift;
     coverpoint  DQ7WBD_17_12_dx6_vt_drift;
     coverpoint  DMWBD_23_18_dx6_vt_drift;
     coverpoint  DSWBD_29_24_dx6_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx6_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx6_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx6_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx6_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx6_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx6_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX6BDLR1 register";       
   endgroup // DX6BDLR1   
      
   covergroup DX6BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx6;
     coverpoint  DQOEBD_11_6_dx6;
     coverpoint  DSRBD_17_12_dx6; 
     coverpoint  DSNRBD_23_18_dx6;
     //coverpoint  DX6BDLR2_RESERVED_31_24_dx6;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx6_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx6_T)  
     `COVERPOINT_8BITS_TOGGLING(DX6BDLR2_RESERVED_31_24_dx6_T)      

     coverpoint  DSOEBD_5_0_dx6_vt_drift;
     coverpoint  DQOEBD_11_6_dx6_vt_drift;
     coverpoint  DSRBD_17_12_dx6_vt_drift; 
     coverpoint  DSNRBD_23_18_dx6_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx6_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx6_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx6_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx6_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx6_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx6_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx6_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx6_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX6BDLR2 register";       
   endgroup // DX6BDLR2
   
   covergroup DX6BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx6;
     coverpoint  DQ1RBD_11_6_dx6;
     coverpoint  DQ2RBD_17_12_dx6;
     coverpoint  DQ3RBD_23_18_dx6;
     coverpoint  DQ4RBD_29_24_dx6;
     //coverpoint  DX6BDLR3_RESERVED_31_30_dx6;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx6_T)
     `COVERPOINT_2BITS_TOGGLING(DX6BDLR3_RESERVED_31_30_dx6_T)       

     coverpoint  DQ0RBD_5_0_dx6_vt_drift;
     coverpoint  DQ1RBD_11_6_dx6_vt_drift;
     coverpoint  DQ2RBD_17_12_dx6_vt_drift;
     coverpoint  DQ3RBD_23_18_dx6_vt_drift;
     coverpoint  DQ4RBD_29_24_dx6_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx6_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx6_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx6_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx6_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx6_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx6_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx6_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX6BDLR3 register";       
   endgroup // DX6BDLR3
   
   covergroup DX6BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx6;
     coverpoint  DQ6RBD_11_6_dx6;
     coverpoint  DQ7RBD_17_12_dx6;
     coverpoint  DMRBD_23_18_dx6;
     //coverpoint  DX6BDLR4_RESERVED_31_24_dx6; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx6_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(DX6BDLR4_RESERVED_31_24_dx6_T)      

     coverpoint  DQ5RBD_5_0_dx6_vt_drift;
     coverpoint  DQ6RBD_11_6_dx6_vt_drift;
     coverpoint  DQ7RBD_17_12_dx6_vt_drift;
     coverpoint  DMRBD_23_18_dx6_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx6_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx6_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx6_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx6_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx6_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx6_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX6BDLR4 register";       
   endgroup // DX6BDLR4  
 
   covergroup DX6LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx6) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx6)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx6)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx6)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx6_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx6_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx6_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx6_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx6_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx6_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx6_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx6_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx6_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx6_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx6_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx6_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx6_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx6_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX6LCDLR0 register";       
   endgroup // DX6LCDLR0
   
   covergroup DX6LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx6) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx6)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx6)      
     //coverpoint  DX6LCDLR1_RESERVED_31_24_dx6;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx6_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx6_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx6_T)      
     `COVERPOINT_8BITS_TOGGLING(DX6LCDLR1_RESERVED_31_24_dx6_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx6_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx6_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx6_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx6_vt_drift_wo_upd)

     cross WDQD_7_0_dx6_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx6_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx6_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx6_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx6_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx6_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX6LCDLR1 register";       
   endgroup // DX6LCDLR1
   
   covergroup DX6LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx6) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx6)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx6)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx6) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx6_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx6_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx6_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx6_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx6_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx6_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx6_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx6_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx6_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx6_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx6_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx6_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx6_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx6_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx6_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX6LCDLR2 register";       
   endgroup // DX6LCDLR2
   
   covergroup DX6MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx6)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx6)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx6)           
     //coverpoint  DX6MDLR_RESERVED_31_24_dx6;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx6_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx6_T) 
     `COVERPOINT_8BITS_TOGGLING(DX6MDLR_RESERVED_31_24_dx6_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx6_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx6_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx6_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx6_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx6_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx6_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx6_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx6_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx6_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx6_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx6_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX6MDLR register";       
   endgroup // DX6MDLR


   covergroup DX6GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx6;           
     coverpoint  R1DGSL_5_3_dx6;           
     coverpoint  R2DGSL_8_6_dx6;           
     coverpoint  R3DGSL_11_9_dx6;          
     coverpoint  R0WLSL_13_12_dx6 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx6  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx6 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx6 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX6GTR_RESERVED_31_20_dx6;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx6_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx6_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx6_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx6_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx6_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx6_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx6_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx6_T)         
     `COVERPOINT_12BITS_TOGGLING(DX6GTR_RESERVED_31_20_dx6_T)
     option.comment = "Coverage for DX6GTR register";       
   endgroup // DX6GTR

   covergroup DX6GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx6;                   
     coverpoint  RDWN_1_dx6;                  
     coverpoint  WDERR_2_dx6;                 
     coverpoint  WDWN_3_dx6;                  
     coverpoint  REERR_4_dx6;                 
     coverpoint  REWN_5_dx6;                  
     coverpoint  WEERR_6_dx6;                 
     coverpoint  WEWN_7_dx6;                  
     coverpoint  ESTAT_11_8_dx6;                 
     //coverpoint  DX6GSR2_RESERVED_31_12_dx6;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx6_T;                   
     coverpoint  RDWN_1_dx6_T;                  
     coverpoint  WDERR_2_dx6_T;                 
     coverpoint  WDWN_3_dx6_T;                  
     coverpoint  REERR_4_dx6_T;                 
     coverpoint  REWN_5_dx6_T;                  
     coverpoint  WEERR_6_dx6_T;                 
     coverpoint  WEWN_7_dx6_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx6_T)
     `COVERPOINT_20BITS_TOGGLING(DX6GSR2_RESERVED_31_12_dx6_T)  
     option.comment = "Coverage for DX6GSR2 register";       
   endgroup 
        
    
// ----   
   covergroup DX7GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx7;
     coverpoint  DQSODT_1_dx7;               
     coverpoint  DQODT_2_dx7;                
     coverpoint  DXIOM_3_dx7;                
     coverpoint  DXPDD_4_dx7;                
     coverpoint  DXPDR_5_dx7;                
     coverpoint  DQSRPD_6_dx7;               
     coverpoint  DSEN_8_7_dx7;               
     coverpoint  DQSRTT_9_dx7;               
     coverpoint  DQRTT_10_dx7;               
     coverpoint  RTTOH_12_11_dx7;            
     coverpoint  RTTOAL_13_dx7;              
     coverpoint  DXOEO_15_14_dx7;  
     coverpoint  PLLRST_16_dx7;              
     coverpoint  PLLPD_17_dx7;               
     coverpoint  GSHIFT_18_dx7;              
     coverpoint  PLLBYP_19_dx7;              
     //coverpoint  DX7GCR_RESERVED_25_20_dx7;  
     coverpoint  WLRKEN_29_26_dx7;           
     coverpoint  MDLEN_30_dx7;               
     coverpoint  CALBYP_31_dx7;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx7_T;
     coverpoint  DQSODT_1_dx7_T;               
     coverpoint  DQODT_2_dx7_T;                
     coverpoint  DXIOM_3_dx7_T;                
     coverpoint  DXPDD_4_dx7_T;                
     coverpoint  DXPDR_5_dx7_T;                
     coverpoint  DQSRPD_6_dx7_T;               
     coverpoint  DSEN_8_7_dx7_T;               
     coverpoint  DQSRTT_9_dx7_T;               
     coverpoint  DQRTT_10_dx7_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx7_T)            
     coverpoint  RTTOAL_13_dx7_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx7_T)  
     coverpoint  PLLRST_16_dx7_T;              
     coverpoint  PLLPD_17_dx7_T;               
     coverpoint  GSHIFT_18_dx7_T;              
     coverpoint  PLLBYP_19_dx7_T;             
     `COVERPOINT_6BITS_TOGGLING(DX7GCR_RESERVED_25_20_dx7_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx7_T)           
     coverpoint  MDLEN_30_dx7_T;               
     coverpoint  CALBYP_31_dx7_T;              
     option.comment = "Coverage for DX7GCR register";       
   endgroup // DX7GCR
   
   covergroup DX7GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx7;
     coverpoint  RDQSCAL_1_dx7;
     coverpoint  RDQSNCAL_2_dx7;
     coverpoint  GDQSCAL_3_dx7;
     coverpoint  WLCAL_4_dx7;
     coverpoint  WLDONE_5_dx7;
     coverpoint  WLERR_6_dx7;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx7)     
     coverpoint  DPLOCK_15_dx7;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx7)
     coverpoint  QSGERR_27_24_dx7;
     coverpoint  WLDQ_28_dx7;
     //coverpoint  DX7GSR0_RESERVED_31_29_dx7;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx7_T;
     coverpoint  RDQSCAL_1_dx7_T;
     coverpoint  RDQSNCAL_2_dx7_T;
     coverpoint  GDQSCAL_3_dx7_T;
     coverpoint  WLCAL_4_dx7_T;
     coverpoint  WLDONE_5_dx7_T;
     coverpoint  WLERR_6_dx7_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx7_T)     
     coverpoint  DPLOCK_15_dx7_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx7_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx7_T)
     coverpoint  WLDQ_28_dx7_T;
     `COVERPOINT_3BITS_TOGGLING(DX7GSR0_RESERVED_31_29_dx7_T)     
     option.comment = "Coverage for DX7GSR0 register";       
   endgroup // DX7GSR0
   
   covergroup DX7GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx7;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx7) 
     //coverpoint  DX7GSR1_RESERVED_31_25_dx7;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx7_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx7_T) 
     `COVERPOINT_7BITS_TOGGLING(DX7GSR1_RESERVED_31_25_dx7_T)
     option.comment = "Coverage for DX7GSR1 register";       
   endgroup // DX7GSR1
   
   covergroup DX7BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx7;
     coverpoint  DQ1WBD_11_6_dx7;
     coverpoint  DQ2WBD_17_12_dx7;
     coverpoint  DQ3WBD_23_18_dx7;
     coverpoint  DQ4WBD_29_24_dx7;
     //coverpoint  DX7BDLR0_RESERVED_31_30_dx7;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx7_T)
     `COVERPOINT_2BITS_TOGGLING(DX7BDLR0_RESERVED_31_30_dx7_T)

     coverpoint  DQ0WBD_5_0_dx7_vt_drift;
     coverpoint  DQ1WBD_11_6_dx7_vt_drift;
     coverpoint  DQ2WBD_17_12_dx7_vt_drift;
     coverpoint  DQ3WBD_23_18_dx7_vt_drift;
     coverpoint  DQ4WBD_29_24_dx7_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx7_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx7_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx7_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx7_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx7_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx7_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx7_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX7BDLR0 register";       
   endgroup // DX7BDLR0
      
   covergroup DX7BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx7;
     coverpoint  DQ6WBD_11_6_dx7;
     coverpoint  DQ7WBD_17_12_dx7;
     coverpoint  DMWBD_23_18_dx7;
     coverpoint  DSWBD_29_24_dx7;
     //coverpoint  DX7BDLR1_RESERVED_31_30_dx7; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx7_T)
     `COVERPOINT_2BITS_TOGGLING(DX7BDLR1_RESERVED_31_30_dx7_T)       

     coverpoint  DQ5WBD_5_0_dx7_vt_drift;
     coverpoint  DQ6WBD_11_6_dx7_vt_drift;
     coverpoint  DQ7WBD_17_12_dx7_vt_drift;
     coverpoint  DMWBD_23_18_dx7_vt_drift;
     coverpoint  DSWBD_29_24_dx7_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx7_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx7_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx7_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx7_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx7_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx7_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX7BDLR1 register";       
   endgroup // DX7BDLR1   
      
   covergroup DX7BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx7;
     coverpoint  DQOEBD_11_6_dx7;
     coverpoint  DSRBD_17_12_dx7; 
     coverpoint  DSNRBD_23_18_dx7;
     //coverpoint  DX7BDLR2_RESERVED_31_24_dx7;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx7_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx7_T)  
     `COVERPOINT_8BITS_TOGGLING(DX7BDLR2_RESERVED_31_24_dx7_T)      

     coverpoint  DSOEBD_5_0_dx7_vt_drift;
     coverpoint  DQOEBD_11_6_dx7_vt_drift;
     coverpoint  DSRBD_17_12_dx7_vt_drift; 
     coverpoint  DSNRBD_23_18_dx7_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx7_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx7_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx7_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx7_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx7_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx7_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx7_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx7_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX7BDLR2 register";       
   endgroup // DX7BDLR2
   
   covergroup DX7BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx7;
     coverpoint  DQ1RBD_11_6_dx7;
     coverpoint  DQ2RBD_17_12_dx7;
     coverpoint  DQ3RBD_23_18_dx7;
     coverpoint  DQ4RBD_29_24_dx7;
     //coverpoint  DX7BDLR3_RESERVED_31_30_dx7;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx7_T)
     `COVERPOINT_2BITS_TOGGLING(DX7BDLR3_RESERVED_31_30_dx7_T)       

     coverpoint  DQ0RBD_5_0_dx7_vt_drift;
     coverpoint  DQ1RBD_11_6_dx7_vt_drift;
     coverpoint  DQ2RBD_17_12_dx7_vt_drift;
     coverpoint  DQ3RBD_23_18_dx7_vt_drift;
     coverpoint  DQ4RBD_29_24_dx7_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx7_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx7_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx7_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx7_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx7_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx7_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx7_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX7BDLR3 register";       
   endgroup // DX7BDLR3
   
   covergroup DX7BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx7;
     coverpoint  DQ6RBD_11_6_dx7;
     coverpoint  DQ7RBD_17_12_dx7;
     coverpoint  DMRBD_23_18_dx7;
     //coverpoint  DX7BDLR4_RESERVED_31_24_dx7; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx7_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(DX7BDLR4_RESERVED_31_24_dx7_T)      

     coverpoint  DQ5RBD_5_0_dx7_vt_drift;
     coverpoint  DQ6RBD_11_6_dx7_vt_drift;
     coverpoint  DQ7RBD_17_12_dx7_vt_drift;
     coverpoint  DMRBD_23_18_dx7_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx7_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx7_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx7_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx7_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx7_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx7_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX7BDLR4 register";       
   endgroup // DX7BDLR4  
 
   covergroup DX7LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx7) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx7)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx7)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx7)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx7_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx7_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx7_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx7_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx7_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx7_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx7_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx7_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx7_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx7_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx7_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx7_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx7_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx7_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX7LCDLR0 register";       
   endgroup // DX7LCDLR0
   
   covergroup DX7LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx7) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx7)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx7)      
     //coverpoint  DX7LCDLR1_RESERVED_31_24_dx7;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx7_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx7_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx7_T)      
     `COVERPOINT_8BITS_TOGGLING(DX7LCDLR1_RESERVED_31_24_dx7_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx7_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx7_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx7_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx7_vt_drift_wo_upd)

     cross WDQD_7_0_dx7_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx7_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx7_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx7_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx7_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx7_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX7LCDLR1 register";       
   endgroup // DX7LCDLR1
   
   covergroup DX7LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx7) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx7)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx7)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx7) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx7_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx7_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx7_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx7_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx7_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx7_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx7_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx7_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx7_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx7_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx7_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx7_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx7_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx7_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx7_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX7LCDLR2 register";       
   endgroup // DX7LCDLR2
   
   covergroup DX7MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx7)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx7)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx7)           
     //coverpoint  DX7MDLR_RESERVED_31_24_dx7;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx7_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx7_T) 
     `COVERPOINT_8BITS_TOGGLING(DX7MDLR_RESERVED_31_24_dx7_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx7_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx7_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx7_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx7_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx7_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx7_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx7_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx7_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx7_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx7_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx7_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX7MDLR register";       
   endgroup // DX7MDLR


   covergroup DX7GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx7;           
     coverpoint  R1DGSL_5_3_dx7;           
     coverpoint  R2DGSL_8_6_dx7;           
     coverpoint  R3DGSL_11_9_dx7;          
     coverpoint  R0WLSL_13_12_dx7 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx7  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx7 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx7 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX7GTR_RESERVED_31_20_dx7;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx7_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx7_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx7_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx7_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx7_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx7_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx7_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx7_T)         
     `COVERPOINT_12BITS_TOGGLING(DX7GTR_RESERVED_31_20_dx7_T)
     option.comment = "Coverage for DX7GTR register";       
   endgroup // DX7GTR

   covergroup DX7GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx7;                   
     coverpoint  RDWN_1_dx7;                  
     coverpoint  WDERR_2_dx7;                 
     coverpoint  WDWN_3_dx7;                  
     coverpoint  REERR_4_dx7;                 
     coverpoint  REWN_5_dx7;                  
     coverpoint  WEERR_6_dx7;                 
     coverpoint  WEWN_7_dx7;                  
     coverpoint  ESTAT_11_8_dx7;                 
     //coverpoint  DX7GSR2_RESERVED_31_12_dx7;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx7_T;                   
     coverpoint  RDWN_1_dx7_T;                  
     coverpoint  WDERR_2_dx7_T;                 
     coverpoint  WDWN_3_dx7_T;                  
     coverpoint  REERR_4_dx7_T;                 
     coverpoint  REWN_5_dx7_T;                  
     coverpoint  WEERR_6_dx7_T;                 
     coverpoint  WEWN_7_dx7_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx7_T)
     `COVERPOINT_20BITS_TOGGLING(DX7GSR2_RESERVED_31_12_dx7_T)  
     option.comment = "Coverage for DX7GSR2 register";       
   endgroup 
    
// ----   
   covergroup DX8GCR;      
     type_option.goal = 100;
     coverpoint  DXEN_0_dx8;
     coverpoint  DQSODT_1_dx8;               
     coverpoint  DQODT_2_dx8;                
     coverpoint  DXIOM_3_dx8;                
     coverpoint  DXPDD_4_dx8;                
     coverpoint  DXPDR_5_dx8;                
     coverpoint  DQSRPD_6_dx8;               
     coverpoint  DSEN_8_7_dx8;               
     coverpoint  DQSRTT_9_dx8;               
     coverpoint  DQRTT_10_dx8;               
     coverpoint  RTTOH_12_11_dx8;            
     coverpoint  RTTOAL_13_dx8;              
     coverpoint  DXOEO_15_14_dx8;  
     coverpoint  PLLRST_16_dx8;              
     coverpoint  PLLPD_17_dx8;               
     coverpoint  GSHIFT_18_dx8;              
     coverpoint  PLLBYP_19_dx8;              
     //coverpoint  DX8GCR_RESERVED_25_20_dx8;  
     coverpoint  WLRKEN_29_26_dx8;           
     coverpoint  MDLEN_30_dx8;               
     coverpoint  CALBYP_31_dx8;              

     //Toggling  coverpoints
     coverpoint  DXEN_0_dx8_T;
     coverpoint  DQSODT_1_dx8_T;               
     coverpoint  DQODT_2_dx8_T;                
     coverpoint  DXIOM_3_dx8_T;                
     coverpoint  DXPDD_4_dx8_T;                
     coverpoint  DXPDR_5_dx8_T;                
     coverpoint  DQSRPD_6_dx8_T;               
     coverpoint  DSEN_8_7_dx8_T;               
     coverpoint  DQSRTT_9_dx8_T;               
     coverpoint  DQRTT_10_dx8_T;               
     `COVERPOINT_2BITS_TOGGLING(RTTOH_12_11_dx8_T)            
     coverpoint  RTTOAL_13_dx8_T;              
     `COVERPOINT_2BITS_TOGGLING(DXOEO_15_14_dx8_T)  
     coverpoint  PLLRST_16_dx8_T;              
     coverpoint  PLLPD_17_dx8_T;               
     coverpoint  GSHIFT_18_dx8_T;              
     coverpoint  PLLBYP_19_dx8_T;             
     `COVERPOINT_6BITS_TOGGLING(DX8GCR_RESERVED_25_20_dx8_T)  
     `COVERPOINT_4BITS_TOGGLING(WLRKEN_29_26_dx8_T)           
     coverpoint  MDLEN_30_dx8_T;               
     coverpoint  CALBYP_31_dx8_T;              
     option.comment = "Coverage for DX8GCR register";       
   endgroup // DX8GCR
   
   covergroup DX8GSR0;
     type_option.goal = 100;
     coverpoint  WDQCAL_0_dx8;
     coverpoint  RDQSCAL_1_dx8;
     coverpoint  RDQSNCAL_2_dx8;
     coverpoint  GDQSCAL_3_dx8;
     coverpoint  WLCAL_4_dx8;
     coverpoint  WLDONE_5_dx8;
     coverpoint  WLERR_6_dx8;
     `COVERPOINT_64_4BIT_RANGE(WLPRD_14_7_dx8)     
     coverpoint  DPLOCK_15_dx8;
     `COVERPOINT_64_4BIT_RANGE(GDQSPRD_23_16_dx8)
     coverpoint  QSGERR_27_24_dx8;
     coverpoint  WLDQ_28_dx8;
     //coverpoint  DX8GSR0_RESERVED_31_29_dx8;

     //Toggling coverpoints
     coverpoint  WDQCAL_0_dx8_T;
     coverpoint  RDQSCAL_1_dx8_T;
     coverpoint  RDQSNCAL_2_dx8_T;
     coverpoint  GDQSCAL_3_dx8_T;
     coverpoint  WLCAL_4_dx8_T;
     coverpoint  WLDONE_5_dx8_T;
     coverpoint  WLERR_6_dx8_T;
     `COVERPOINT_8BITS_TOGGLING(WLPRD_14_7_dx8_T)     
     coverpoint  DPLOCK_15_dx8_T;
     `COVERPOINT_8BITS_TOGGLING(GDQSPRD_23_16_dx8_T)     
     `COVERPOINT_4BITS_TOGGLING(QSGERR_27_24_dx8_T)
     coverpoint  WLDQ_28_dx8_T;
     `COVERPOINT_3BITS_TOGGLING(DX8GSR0_RESERVED_31_29_dx8_T)     
     option.comment = "Coverage for DX8GSR0 register";       
   endgroup // DX8GSR0
   
   covergroup DX8GSR1;
     type_option.goal = 100;
      coverpoint  DLTDONE_0_dx8;      
     `COVERPOINT_SPECIAL_RANGE2(DLTCODE_24_1_dx8) 
     //coverpoint  DX8GSR1_RESERVED_31_25_dx8;

     //Toggling coverpoints
     coverpoint  DLTDONE_0_dx8_T;
     `COVERPOINT_24BITS_TOGGLING(DLTCODE_24_1_dx8_T) 
     `COVERPOINT_7BITS_TOGGLING(DX8GSR1_RESERVED_31_25_dx8_T)
     option.comment = "Coverage for DX8GSR1 register";       
   endgroup // DX8GSR1
   
   covergroup DX8BDLR0;
     type_option.goal = 100;
     coverpoint  DQ0WBD_5_0_dx8;
     coverpoint  DQ1WBD_11_6_dx8;
     coverpoint  DQ2WBD_17_12_dx8;
     coverpoint  DQ3WBD_23_18_dx8;
     coverpoint  DQ4WBD_29_24_dx8;
     //coverpoint  DX8BDLR0_RESERVED_31_30_dx8;  

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0WBD_5_0_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1WBD_11_6_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2WBD_17_12_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3WBD_23_18_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4WBD_29_24_dx8_T)
     `COVERPOINT_2BITS_TOGGLING(DX8BDLR0_RESERVED_31_30_dx8_T)

     coverpoint  DQ0WBD_5_0_dx8_vt_drift;
     coverpoint  DQ1WBD_11_6_dx8_vt_drift;
     coverpoint  DQ2WBD_17_12_dx8_vt_drift;
     coverpoint  DQ3WBD_23_18_dx8_vt_drift;
     coverpoint  DQ4WBD_29_24_dx8_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0WBD_5_0_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1WBD_11_6_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2WBD_17_12_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3WBD_23_18_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4WBD_29_24_dx8_vt_drift_wo_upd)
   
     cross  DQ0WBD_5_0_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1WBD_11_6_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2WBD_17_12_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3WBD_23_18_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4WBD_29_24_dx8_vt_drift_wo_upd , vt_drift_scn2;  
     cross  DQ0WBD_5_0_dx8_vt_drift , vt_drift_scn1;
     cross  DQ1WBD_11_6_dx8_vt_drift , vt_drift_scn1;
     cross  DQ2WBD_17_12_dx8_vt_drift , vt_drift_scn1;
     cross  DQ3WBD_23_18_dx8_vt_drift , vt_drift_scn1;
     cross  DQ4WBD_29_24_dx8_vt_drift , vt_drift_scn1;      
      
     option.comment = "Coverage for DX8BDLR0 register";       
   endgroup // DX8BDLR0
      
   covergroup DX8BDLR1;
     type_option.goal = 100;
     coverpoint  DQ5WBD_5_0_dx8;
     coverpoint  DQ6WBD_11_6_dx8;
     coverpoint  DQ7WBD_17_12_dx8;
     coverpoint  DMWBD_23_18_dx8;
     coverpoint  DSWBD_29_24_dx8;
     //coverpoint  DX8BDLR1_RESERVED_31_30_dx8; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5WBD_5_0_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6WBD_11_6_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7WBD_17_12_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DMWBD_23_18_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DSWBD_29_24_dx8_T)
     `COVERPOINT_2BITS_TOGGLING(DX8BDLR1_RESERVED_31_30_dx8_T)       

     coverpoint  DQ5WBD_5_0_dx8_vt_drift;
     coverpoint  DQ6WBD_11_6_dx8_vt_drift;
     coverpoint  DQ7WBD_17_12_dx8_vt_drift;
     coverpoint  DMWBD_23_18_dx8_vt_drift;
     coverpoint  DSWBD_29_24_dx8_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5WBD_5_0_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6WBD_11_6_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7WBD_17_12_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMWBD_23_18_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSWBD_29_24_dx8_vt_drift_wo_upd)

     cross  DQ5WBD_5_0_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6WBD_11_6_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7WBD_17_12_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMWBD_23_18_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSWBD_29_24_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ5WBD_5_0_dx8_vt_drift , vt_drift_scn1;
     cross  DQ6WBD_11_6_dx8_vt_drift , vt_drift_scn1;
     cross  DQ7WBD_17_12_dx8_vt_drift , vt_drift_scn1;
     cross  DMWBD_23_18_dx8_vt_drift , vt_drift_scn1;
     cross  DSWBD_29_24_dx8_vt_drift , vt_drift_scn1;
      
     option.comment = "Coverage for DX8BDLR1 register";       
   endgroup // DX8BDLR1   
      
   covergroup DX8BDLR2;
     type_option.goal = 100;
     coverpoint  DSOEBD_5_0_dx8;
     coverpoint  DQOEBD_11_6_dx8;
     coverpoint  DSRBD_17_12_dx8; 
     coverpoint  DSNRBD_23_18_dx8;
     //coverpoint  DX8BDLR2_RESERVED_31_24_dx8;

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DSOEBD_5_0_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQOEBD_11_6_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DSRBD_17_12_dx8_T) 
     `COVERPOINT_6BITS_TOGGLING(DSNRBD_23_18_dx8_T)  
     `COVERPOINT_8BITS_TOGGLING(DX8BDLR2_RESERVED_31_24_dx8_T)      

     coverpoint  DSOEBD_5_0_dx8_vt_drift;
     coverpoint  DQOEBD_11_6_dx8_vt_drift;
     coverpoint  DSRBD_17_12_dx8_vt_drift; 
     coverpoint  DSNRBD_23_18_dx8_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DSOEBD_5_0_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQOEBD_11_6_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DSRBD_17_12_dx8_vt_drift_wo_upd)   
     `COVERPOINT_4_16BIT_RANGE(DSNRBD_23_18_dx8_vt_drift_wo_upd)
  
     cross  DSOEBD_5_0_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQOEBD_11_6_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DSRBD_17_12_dx8_vt_drift_wo_upd , vt_drift_scn2;     
     cross  DSNRBD_23_18_dx8_vt_drift_wo_upd , vt_drift_scn2;
       
     cross  DSOEBD_5_0_dx8_vt_drift , vt_drift_scn1;
     cross  DQOEBD_11_6_dx8_vt_drift , vt_drift_scn1;
     cross  DSRBD_17_12_dx8_vt_drift , vt_drift_scn1;
     cross  DSNRBD_23_18_dx8_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX8BDLR2 register";       
   endgroup // DX8BDLR2
   
   covergroup DX8BDLR3;
     type_option.goal = 100;
     coverpoint  DQ0RBD_5_0_dx8;
     coverpoint  DQ1RBD_11_6_dx8;
     coverpoint  DQ2RBD_17_12_dx8;
     coverpoint  DQ3RBD_23_18_dx8;
     coverpoint  DQ4RBD_29_24_dx8;
     //coverpoint  DX8BDLR3_RESERVED_31_30_dx8;   

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ0RBD_5_0_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ1RBD_11_6_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ2RBD_17_12_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ3RBD_23_18_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ4RBD_29_24_dx8_T)
     `COVERPOINT_2BITS_TOGGLING(DX8BDLR3_RESERVED_31_30_dx8_T)       

     coverpoint  DQ0RBD_5_0_dx8_vt_drift;
     coverpoint  DQ1RBD_11_6_dx8_vt_drift;
     coverpoint  DQ2RBD_17_12_dx8_vt_drift;
     coverpoint  DQ3RBD_23_18_dx8_vt_drift;
     coverpoint  DQ4RBD_29_24_dx8_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ0RBD_5_0_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ1RBD_11_6_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ2RBD_17_12_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ3RBD_23_18_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ4RBD_29_24_dx8_vt_drift_wo_upd)

     cross  DQ0RBD_5_0_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ1RBD_11_6_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ2RBD_17_12_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ3RBD_23_18_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ4RBD_29_24_dx8_vt_drift_wo_upd , vt_drift_scn2;        
     cross  DQ0RBD_5_0_dx8_vt_drift , vt_drift_scn1;
     cross  DQ1RBD_11_6_dx8_vt_drift , vt_drift_scn1;
     cross  DQ2RBD_17_12_dx8_vt_drift , vt_drift_scn1;
     cross  DQ3RBD_23_18_dx8_vt_drift , vt_drift_scn1;
     cross  DQ4RBD_29_24_dx8_vt_drift , vt_drift_scn1; 
     option.comment = "Coverage for DX8BDLR3 register";       
   endgroup // DX8BDLR3
   
   covergroup DX8BDLR4;
     type_option.goal = 100;
     coverpoint  DQ5RBD_5_0_dx8;
     coverpoint  DQ6RBD_11_6_dx8;
     coverpoint  DQ7RBD_17_12_dx8;
     coverpoint  DMRBD_23_18_dx8;
     //coverpoint  DX8BDLR4_RESERVED_31_24_dx8; 

     //Toggling coverpoints
     `COVERPOINT_6BITS_TOGGLING(DQ5RBD_5_0_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ6RBD_11_6_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DQ7RBD_17_12_dx8_T)
     `COVERPOINT_6BITS_TOGGLING(DMRBD_23_18_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(DX8BDLR4_RESERVED_31_24_dx8_T)      

     coverpoint  DQ5RBD_5_0_dx8_vt_drift;
     coverpoint  DQ6RBD_11_6_dx8_vt_drift;
     coverpoint  DQ7RBD_17_12_dx8_vt_drift;
     coverpoint  DMRBD_23_18_dx8_vt_drift;
     `COVERPOINT_4_16BIT_RANGE(DQ5RBD_5_0_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ6RBD_11_6_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DQ7RBD_17_12_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_16BIT_RANGE(DMRBD_23_18_dx8_vt_drift_wo_upd)

     cross  DQ5RBD_5_0_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ6RBD_11_6_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DQ7RBD_17_12_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  DMRBD_23_18_dx8_vt_drift_wo_upd , vt_drift_scn2;

     cross  DQ5RBD_5_0_dx8_vt_drift , vt_drift_scn1;
     cross  DQ6RBD_11_6_dx8_vt_drift , vt_drift_scn1;
     cross  DQ7RBD_17_12_dx8_vt_drift , vt_drift_scn1;
     cross  DMRBD_23_18_dx8_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX8BDLR4 register";       
   endgroup // DX8BDLR4  
 
   covergroup DX8LCDLR0;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx8) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx8)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx8)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx8)   

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0WLD_7_0_dx8_T) 
     `COVERPOINT_8BITS_TOGGLING(R1WLD_15_8_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(R2WLD_23_16_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(R3WLD_31_24_dx8_T) 

     `COVERPOINT_64_4BIT_RANGE(R0WLD_7_0_dx8_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1WLD_15_8_dx8_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2WLD_23_16_dx8_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3WLD_31_24_dx8_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0WLD_7_0_dx8_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1WLD_15_8_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2WLD_23_16_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3WLD_31_24_dx8_vt_drift_wo_upd) 

     cross  R0WLD_7_0_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  R1WLD_15_8_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  R2WLD_23_16_dx8_vt_drift_wo_upd , vt_drift_scn2;
     cross  R3WLD_31_24_dx8_vt_drift_wo_upd , vt_drift_scn2;     
     cross  R0WLD_7_0_dx8_vt_drift , vt_drift_scn1;
     cross  R1WLD_15_8_dx8_vt_drift , vt_drift_scn1;
     cross  R2WLD_23_16_dx8_vt_drift , vt_drift_scn1;
     cross  R3WLD_31_24_dx8_vt_drift , vt_drift_scn1;
     option.comment = "Coverage for DX8LCDLR0 register";       
   endgroup // DX8LCDLR0
   
   covergroup DX8LCDLR1;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(WDQD_7_0_dx8) 
     `COVERPOINT_64_4BIT_RANGE(RDQSD_15_8_dx8)      
     `COVERPOINT_64_4BIT_RANGE(RDQSND_23_16_dx8)      
     //coverpoint  DX8LCDLR1_RESERVED_31_24_dx8;  

     //toggling coverpoints                            
     `COVERPOINT_8BITS_TOGGLING(WDQD_7_0_dx8_T) 
     `COVERPOINT_8BITS_TOGGLING(RDQSD_15_8_dx8_T)      
     `COVERPOINT_8BITS_TOGGLING(RDQSND_23_16_dx8_T)      
     `COVERPOINT_8BITS_TOGGLING(DX8LCDLR1_RESERVED_31_24_dx8_T)           

     `COVERPOINT_62_4BIT_RANGE(WDQD_7_0_dx8_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSD_15_8_dx8_vt_drift) 
     `COVERPOINT_62_4BIT_RANGE(RDQSND_23_16_dx8_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(WDQD_7_0_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSD_15_8_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(RDQSND_23_16_dx8_vt_drift_wo_upd)

     cross WDQD_7_0_dx8_vt_drift_wo_upd , vt_drift_scn2; 
     cross RDQSD_15_8_dx8_vt_drift_wo_upd, vt_drift_scn2;   
     cross RDQSND_23_16_dx8_vt_drift_wo_upd, vt_drift_scn2;   
     cross WDQD_7_0_dx8_vt_drift , vt_drift_scn1; 
     cross RDQSD_15_8_dx8_vt_drift, vt_drift_scn1;  
     cross RDQSND_23_16_dx8_vt_drift, vt_drift_scn1;  
     option.comment = "Coverage for DX8LCDLR1 register";       
   endgroup // DX8LCDLR1
   
   covergroup DX8LCDLR2;
     type_option.goal = 100;
     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx8) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx8)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx8)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx8) 

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(R0DQSGD_7_0_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(R1DQSGD_15_8_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(R2DQSGD_23_16_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(R3DQSGD_31_24_dx8_T) 

     `COVERPOINT_64_4BIT_RANGE(R0DQSGD_7_0_dx8_vt_drift) 
     `COVERPOINT_64_4BIT_RANGE(R1DQSGD_15_8_dx8_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R2DQSGD_23_16_dx8_vt_drift)
     `COVERPOINT_64_4BIT_RANGE(R3DQSGD_31_24_dx8_vt_drift) 
     `COVERPOINT_4_64BIT_RANGE(R0DQSGD_7_0_dx8_vt_drift_wo_upd) 
     `COVERPOINT_4_64BIT_RANGE(R1DQSGD_15_8_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R2DQSGD_23_16_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(R3DQSGD_31_24_dx8_vt_drift_wo_upd)

     cross R0DQSGD_7_0_dx8_vt_drift_wo_upd , vt_drift_scn2; 
     cross R1DQSGD_15_8_dx8_vt_drift_wo_upd, vt_drift_scn2;  
     cross R2DQSGD_23_16_dx8_vt_drift_wo_upd, vt_drift_scn2;  
     cross R3DQSGD_31_24_dx8_vt_drift_wo_upd, vt_drift_scn2; 
     cross R0DQSGD_7_0_dx8_vt_drift , vt_drift_scn1; 
     cross R1DQSGD_15_8_dx8_vt_drift, vt_drift_scn1;  
     cross R2DQSGD_23_16_dx8_vt_drift, vt_drift_scn1;  
     cross R3DQSGD_31_24_dx8_vt_drift, vt_drift_scn1; 
     option.comment = "Coverage for DX8LCDLR2 register";       
   endgroup // DX8LCDLR2
   
   covergroup DX8MDLR;
     type_option.goal = 100;  
     `COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx8)  
     `COVERPOINT_64_4BIT_RANGE(TPRD_15_8_dx8)
     `COVERPOINT_64_4BIT_RANGE(MDLD_23_16_dx8)           
     //coverpoint  DX8MDLR_RESERVED_31_24_dx8;       

     //Toggling coverpoints
     `COVERPOINT_8BITS_TOGGLING(IPRD_7_0_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(TPRD_15_8_dx8_T)
     `COVERPOINT_8BITS_TOGGLING(MDLD_23_16_dx8_T) 
     `COVERPOINT_8BITS_TOGGLING(DX8MDLR_RESERVED_31_24_dx8_T)        

     //`COVERPOINT_64_4BIT_RANGE(IPRD_7_0_dx8_vt_drift)  
     `COVERPOINT_62_4BIT_RANGE(TPRD_15_8_dx8_vt_drift)
     `COVERPOINT_62_4BIT_RANGE(MDLD_23_16_dx8_vt_drift)
     `COVERPOINT_4_64BIT_RANGE(TPRD_15_8_dx8_vt_drift_wo_upd)
     `COVERPOINT_4_64BIT_RANGE(MDLD_23_16_dx8_vt_drift_wo_upd)
     
     //cross IPRD_7_0_dx8_vt_drift_wo_upd ,vt_drift_scn2;               
     cross TPRD_15_8_dx8_vt_drift_wo_upd  ,vt_drift_scn2;   
     cross MDLD_23_16_dx8_vt_drift_wo_upd ,vt_drift_scn2;  
     //cross IPRD_7_0_dx8_vt_drift ,vt_drift_scn1;               
     cross TPRD_15_8_dx8_vt_drift  ,vt_drift_scn1;   
     cross MDLD_23_16_dx8_vt_drift ,vt_drift_scn1;   
     option.comment = "Coverage for DX8MDLR register";       
   endgroup // DX8MDLR


   covergroup DX8GTR;
     type_option.goal = 100;
     coverpoint  R0DGSL_2_0_dx8;           
     coverpoint  R1DGSL_5_3_dx8;           
     coverpoint  R2DGSL_8_6_dx8;           
     coverpoint  R3DGSL_11_9_dx8;          
     coverpoint  R0WLSL_13_12_dx8 {
        bins R0DGSL_value_0 = {0};     // WL - 1
        bins R0DGSL_value_1 = {1};     // WL
        bins R0DGSL_value_2 = {2};     // WL + 1
        //bins R0DGSL_value_3 = {3};   // Reserved
     }         
     coverpoint  R1WLSL_15_14_dx8  {
        bins R1DGSL_value_0 = {0};     // WL - 1
        bins R1DGSL_value_1 = {1};     // WL
        bins R1DGSL_value_2 = {2};     // WL + 1
        //bins R1DGSL_value_3 = {3};   // Reserved
     }         
        
     coverpoint  R2WLSL_17_16_dx8 {
        bins R2DGSL_value_0 = {0};     // WL - 1
        bins R2DGSL_value_1 = {1};     // WL
        bins R2DGSL_value_2 = {2};     // WL + 1
        //bins R2DGSL_value_3 = {3};   // Reserved
     }         
         
     coverpoint  R3WLSL_19_18_dx8 {
        bins R3DGSL_value_0 = {0};     // WL - 1
        bins R3DGSL_value_1 = {1};     // WL
        bins R3DGSL_value_2 = {2};     // WL + 1
        //bins R3DGSL_value_3 = {3};   // Reserved
     }         
     //coverpoint  DX8GTR_RESERVED_31_20_dx8;
  
     //Toggling coverpoints
     `COVERPOINT_3BITS_TOGGLING(R0DGSL_2_0_dx8_T)           
     `COVERPOINT_3BITS_TOGGLING(R1DGSL_5_3_dx8_T)           
     `COVERPOINT_3BITS_TOGGLING(R2DGSL_8_6_dx8_T)           
     `COVERPOINT_3BITS_TOGGLING(R3DGSL_11_9_dx8_T)          
     `COVERPOINT_2BITS_TOGGLING(R0WLSL_13_12_dx8_T)         
     `COVERPOINT_2BITS_TOGGLING(R1WLSL_15_14_dx8_T)         
     `COVERPOINT_2BITS_TOGGLING(R2WLSL_17_16_dx8_T)         
     `COVERPOINT_2BITS_TOGGLING(R3WLSL_19_18_dx8_T)         
     `COVERPOINT_12BITS_TOGGLING(DX8GTR_RESERVED_31_20_dx8_T)
     option.comment = "Coverage for DX8GTR register";       
   endgroup // DX8GTR
    
   covergroup DX8GSR2;
     type_option.goal = 100;
     coverpoint  RDERR_0_dx8;                   
     coverpoint  RDWN_1_dx8;                  
     coverpoint  WDERR_2_dx8;                 
     coverpoint  WDWN_3_dx8;                  
     coverpoint  REERR_4_dx8;                 
     coverpoint  REWN_5_dx8;                  
     coverpoint  WEERR_6_dx8;                 
     coverpoint  WEWN_7_dx8;                  
     coverpoint  ESTAT_11_8_dx8;                 
     //coverpoint  DX8GSR2_RESERVED_31_12_dx8;  
  
     //Toggling coverpoints
     coverpoint  RDERR_0_dx8_T;                   
     coverpoint  RDWN_1_dx8_T;                  
     coverpoint  WDERR_2_dx8_T;                 
     coverpoint  WDWN_3_dx8_T;                  
     coverpoint  REERR_4_dx8_T;                 
     coverpoint  REWN_5_dx8_T;                  
     coverpoint  WEERR_6_dx8_T;                 
     coverpoint  WEWN_7_dx8_T;                  
     `COVERPOINT_4BITS_TOGGLING(ESTAT_11_8_dx8_T)
     `COVERPOINT_20BITS_TOGGLING(DX8GSR2_RESERVED_31_12_dx8_T)  
     option.comment = "Coverage for DX8GSR2 register";       
   endgroup 

   
   covergroup RESERVED_ADDRESSES;
     type_option.goal = 100;
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_36)		              
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_37)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_38)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_39)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_40)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_41)		              
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_42)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_43)		            

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_56)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_57)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_58)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_59)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_60)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_61)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_62)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_63)		           

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_84)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_85)		          
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_86)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_87)		             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_88)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_89)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_90)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_91)		            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_92)		              
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_93)		             
     //`COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_94)		           
     //`COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_95)		             

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_126)	            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_127)	            

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_142)	             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_143)	             

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_158)	            
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_159)	            

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_174)	           
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_175)	             

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_190)	              
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_191)	             

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_206)	              
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_207)	             

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_222)	             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_223)	            

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_238)	             
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_239)	            

     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_254)	              
     `COVERPOINT_32BITS_TOGGLING(BIT_VALUE_RESERVED_255)	           
     option.comment = "Coverage for RESERVED ADDRESSES register";  
   endgroup

   // Track a list of Features within PHY but related to the settings of registers or pins
   covergroup init_trig_pll_dcal_phy_dram_scenario;
     type_option.goal = 100;
     cross  PHYINIT_0, ZCAL_1, PLLINIT_4, DCAL_5, PHYRST_6, DRAMRST_7, DRAMINIT_8 {
         ignore_bins  INIT_PHY_PIR_CROSS_0 = ((binsof(PHYINIT_0) intersect {0}));
     }                                                                                    
     option.comment = "Coverage for PIR init triggered pll dcal phy dram scenario";       
   endgroup // init_trig_pll_dcal_phy_dram_scenario


   covergroup init_trig_wl_dqsg_data_eye_train_scenario;
     type_option.goal = 100;
     cross  PHYINIT_0, WL_9, QSGATE_10, WLADJ_11, RDDSKW_12, WRDSKW_13, RDEYE_14, WREYE_15 {
         ignore_bins  INIT_PHY_PIR_CROSS_0 = ((binsof(PHYINIT_0) intersect {0}));
     }
     option.comment = "Coverage for PIR init triggered wl read dqs gate and data eye train scenario";       
   endgroup // init_trig_wl_dqsg_data_eye_train_scenario


   covergroup vt_comp_enable_cfg_scenario;
     type_option.goal = 100;
     cross WLLVT_0, WDLVT_1, RDLVT_2, RGLVT_3, WDBVT_4, RDBVT_5, DLDLMT_22_15;
     option.comment = "Coverage for VT compensation Enable CFG scenario";       
   endgroup // vt_comp_enable_cfg_scenario
     

   covergroup write_level_cfg_scenario;
     type_option.goal = 100;
     cross WLMODE_1, WLSTEP_2, WLUNCRT_3, RANKEN_27_24, WLSELT_6;
     option.comment = "Coverage for Write Leveling Configuration scenario";       
   endgroup // write_level_cfg_scenario


   covergroup loopback_cfg_scenario;
     type_option.goal = 100;
     cross IOLB_27, LBDQSS_28, LBGDQS_30_29, LBMODE_31;
     option.comment = "Coverage for Loopback configuration scenario";       
   endgroup // loopback_cfg_scenario


   covergroup ctrl_phy_upd_req_scenario;
     type_option.goal = 100;
     cross PUREN_0, ZUEN_2, CUAEN_5, vt_upd_req_scn;
     option.comment = "Coverage for Controller Phy Update Request scenario";       
   endgroup // ctrl_phy_upd_req_scenario


   covergroup mpr_scenario;
     type_option.goal = 100;
     cross `FCOV.ddr_m, PDQ_6_4, MPRDQ_7, BYTEMASK_17_10, DTMPR_6 {
         ignore_bins ddr2_mpr = ((binsof(`FCOV.ddr_m) intersect {DDR2}));
     }                                                      
     option.comment = "Coverage for MPR scenario";       
   endgroup // mpr_scenario


   covergroup data_eye_train_cfg_scenario;
     type_option.goal = 100;
     cross DTRPTN_3_0, DTRANK_5_4, DTMPR_6, DTCMPD_7, DTWDQM_11_8, DTWBDDM_12, DTEXG_23, RANKEN_27_24;
     option.comment = "Coverage for data eye train config scenario";       
   endgroup // data_eye_train_cfg_scenario


   covergroup data_eye_train_debug_scenario;
     type_option.goal = 100;
     cross DTDBS_19_16, DTDEN_20, DTDSTP_21;
     option.comment = "Coverage for data eye train debug scenario";       
   endgroup // data_eye_train_debug_scenario


   covergroup dcu_setup_cfg_scenario;
     type_option.goal = 100;
     cross DINST_3_0, SADDR_7_4, EADDR_11_8, NFAIL_19_12, SONF_20, SCOF_21, RCEN_22, XCEN_23, LCNT_15_8, LINF_16;
     option.comment = "Coverage for DCU setup cfg scenario";       
   endgroup // dcu_setup_cfg_scenario


   covergroup dcu_loop_cfg_scenario;
     type_option.goal = 100;
     cross LSADDR_3_0, LEADDR_7_4, LCNT_15_8, LINF_16, IDA_17, XLEADDR_31_28;
     option.comment = "Coverage for DCU Loop cfg scenario";       
   endgroup // dcu_loop_cfg_scenario



   //  
   // AC BIST instruction scenario
   // NOP instruction  
   covergroup bist_ac_issue_nop_inst_scenario;
     type_option.goal = 100;

     cover_pt_BINST_NOP          : coverpoint BINST_2_0     {bins BINST_2_0_NOP           = {0};}
     cover_pt_BMODE_3_LPBK       : coverpoint BMODE_3       {bins BMODE_3_LPBK            = {0};}     // AC only allows Loopback mode      
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BACEN_15_ON        : coverpoint BACEN_15      {bins BACEN_15_ON             = {1};}                                                                                            
     cover_pt_BCKSEL_24_23       : coverpoint BCKSEL_24_23  {ignore_bins BCKSEL_24_23_value_3 = {3};}    // reserved
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};} // group all possible into 1
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_AC_NOP_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_NOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_NOP_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_NOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     cross_BIST_AC_NOP_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_NOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_NOP_BSONF_ON_BINF_ON   : cross cover_pt_BINST_NOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     option.comment = "Coverage for AC Bist issue nop inst scenario";       
   endgroup // bist_ac_issue_nop_inst_scenario

   // RUN instruction  
   covergroup bist_ac_issue_run_inst_scenario;
     type_option.goal = 100;

     cover_pt_BINST_RUN          : coverpoint BINST_2_0     {bins BINST_2_0_RUN           = {1};}
     cover_pt_BMODE_3_LPBK       : coverpoint BMODE_3       {bins BMODE_3_LPBK            = {0};}     // AC only allows Loopback mode      
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BACEN_15_ON        : coverpoint BACEN_15      {bins BACEN_15_ON             = {1};}                                                                                            
     cover_pt_BCKSEL_24_23       : coverpoint BCKSEL_24_23  {ignore_bins BCKSEL_24_23_value_3 = {3};}    // reserved
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};} // group all possible into 1
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_AC_RUN_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_RUN_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     cross_BIST_AC_RUN_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_RUN_BSONF_ON_BINF_ON   : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     option.comment = "Coverage for AC Bist issue run inst scenario";       
   endgroup // bist_ac_issue_run_inst_scenario

   // STOP instruction  
   covergroup bist_ac_issue_stop_inst_scenario;
     type_option.goal = 100;

     cover_pt_BINST_STOP         : coverpoint BINST_2_0     {bins BINST_2_0_STOP          = {2};}
     cover_pt_BMODE_3_LPBK       : coverpoint BMODE_3       {bins BMODE_3_LPBK            = {0};}     // AC only allows Loopback mode      
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BACEN_15_ON        : coverpoint BACEN_15      {bins BACEN_15_ON             = {1};}                                                                                            
     cover_pt_BCKSEL_24_23       : coverpoint BCKSEL_24_23  {ignore_bins BCKSEL_24_23_value_3 = {3};}    // reserved
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};} // group all possible into 1
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_AC_STOP_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_STOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_STOP_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_STOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     cross_BIST_AC_STOP_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_STOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_STOP_BSONF_ON_BINF_ON   : cross cover_pt_BINST_STOP, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     option.comment = "Coverage for AC Bist issue stop inst scenario";       
   endgroup // bist_ac_issue_stop_inst_scenario

   // RESET instruction  
   covergroup bist_ac_issue_reset_inst_scenario;
     type_option.goal = 100;

     cover_pt_BINST_RESET        : coverpoint BINST_2_0     {bins BINST_2_0_RESET         = {3};}
     cover_pt_BMODE_3_LPBK       : coverpoint BMODE_3       {bins BMODE_3_LPBK            = {0};}     // AC only allows Loopback mode      
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BACEN_15_ON        : coverpoint BACEN_15      {bins BACEN_15_ON             = {1};}                                                                                            
     cover_pt_BCKSEL_24_23       : coverpoint BCKSEL_24_23  {ignore_bins BCKSEL_24_23_value_3 = {3};}    // reserved
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};} // group all possible into 1
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_AC_RESET_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_RESET, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_RESET_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_RESET, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     cross_BIST_AC_RESET_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_RESET, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_OFF, BDONE_0, BACERR_1;
     cross_BIST_AC_RESET_BSONF_ON_BINF_ON   : cross cover_pt_BINST_RESET, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON,  cover_pt_BACEN_15_ON, BDPAT_18_17, cover_pt_BCKSEL_24_23, BCCSEL_26_25, cover_pt_BWCNT_15_0_ON,  BDONE_0, BACERR_1;

     option.comment = "Coverage for AC Bist reset cfg scenario";       
   endgroup // bist_ac_issue_reset_inst_scenario

   //   
   // DX BIST instruction scenario
   // NOP instruction  
   covergroup bist_dx_issue_nop_inst_scenario;
     type_option.goal = 100;

     cover_pt_BINST_NOP          : coverpoint BINST_2_0     {bins BINST_2_0_NOP           = {0};}
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BDXEN_14_ON        : coverpoint BDXEN_14      {bins BDXEN_14_ON             = {1};}                                                                                            
     cover_pt_BDXSEL_22_19_RANGE : coverpoint BDXSEL_22_19  {ignore_bins BDXSEL_22_19_IN         = {[9:15]};}                                                                  
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};}  // group all possible into 1 
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_DX_NOP_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_NOP, BMODE_3, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF, BDONE_0, BDXERR_2;
     cross_BIST_DX_NOP_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_NOP, BMODE_3, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,  BDONE_0, BDXERR_2;

     cross_BIST_DX_NOP_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_NOP, BMODE_3, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF,  BDONE_0, BDXERR_2;
     cross_BIST_DX_NOP_BSONF_ON_BINF_ON   : cross cover_pt_BINST_NOP, BMODE_3, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,   BDONE_0, BDXERR_2;

     option.comment = "Coverage for DX Bist issue nop inst scenario";       
   endgroup // bist_dx_issue_nop_inst_scenario

   // RUN instruction on DX LOOPBACK 
   covergroup bist_dx_issue_run_lpbk_inst_scenario;
     type_option.goal = 100;
  
     cover_pt_BINST_RUN          : coverpoint BINST_2_0     {bins BINST_2_0_RUN           = {1};}
     cover_pt_BMODE_3_LPBK       : coverpoint BMODE_3       {bins BMODE_3_LPBK            = {0};}     // sample only loopback mode
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BDXEN_14_ON        : coverpoint BDXEN_14      {bins BDXEN_14_ON             = {1};}                                                                                            
     cover_pt_BDXSEL_22_19_RANGE : coverpoint BDXSEL_22_19  {ignore_bins BDXSEL_22_19_IN         = {[9:15]};}                                                                  
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};} // group all possible into 1
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_DX_LPBK_RUN_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF, BDONE_0, BDXERR_2;
     cross_BIST_DX_LPBK_RUN_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,  BDONE_0, BDXERR_2;

     cross_BIST_DX_LPBK_RUN_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF,  BDONE_0, BDXERR_2;
     cross_BIST_DX_LPBK_RUN_BSONF_ON_BINF_ON   : cross cover_pt_BINST_RUN, cover_pt_BMODE_3_LPBK, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,   BDONE_0, BDXERR_2;

     option.comment = "Coverage for DX Bist issue run lpbk inst scenario";       
   endgroup // bist_dx_issue_run_lpbk_inst_scenario

   // RUN instruction on DX DRAM
   covergroup bist_dx_issue_run_dram_inst_scenario;
     type_option.goal = 100;
  
     cover_pt_BINST_RUN          : coverpoint BINST_2_0     {bins BINST_2_0_RUN           = {1};}
     cover_pt_BMODE_DRAM         : coverpoint BMODE_3       {bins BMODE_3_DRAM            = {1};}     // sample only DRAM mode
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};} // group all possible into 1
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BDXEN_14_ON        : coverpoint BDXEN_14      {bins BDXEN_14_ON             = {1};}                                                                                            
     cover_pt_BDXSEL_22_19_RANGE : coverpoint BDXSEL_22_19  {ignore_bins BDXSEL_22_19_IN         = {[9:15]};}                                                                  
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};} // group all possible into 1
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_DX_RUN_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_RUN, cover_pt_BMODE_DRAM, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF, BDONE_0, BDXERR_2;
     cross_BIST_DX_RUN_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_RUN, cover_pt_BMODE_DRAM, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,  BDONE_0, BDXERR_2;

     cross_BIST_DX_RUN_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_RUN, cover_pt_BMODE_DRAM, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF,  BDONE_0, BDXERR_2;
     cross_BIST_DX_RUN_BSONF_ON_BINF_ON   : cross cover_pt_BINST_RUN, cover_pt_BMODE_DRAM, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,   BDONE_0, BDXERR_2;

     option.comment = "Coverage for DX Bist issue run dram inst scenario";       
   endgroup // bist_dx_issue_run_dram_inst_scenario

   // STOP instruction  
   covergroup bist_dx_issue_stop_inst_scenario;
     type_option.goal = 100;

     cover_pt_BINST_STOP         : coverpoint BINST_2_0     {bins BINST_2_0_STOP           = {2};}
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};}
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BDXEN_14_ON        : coverpoint BDXEN_14      {bins BDXEN_14_ON             = {1};}                                                                                            
     cover_pt_BDXSEL_22_19_RANGE : coverpoint BDXSEL_22_19  {ignore_bins BDXSEL_22_19_IN         = {[9:15]};}                                                                  
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};}
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_DX_STOP_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_STOP, BMODE_3, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF, BDONE_0, BDXERR_2;
     cross_BIST_DX_STOP_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_STOP, BMODE_3, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,  BDONE_0, BDXERR_2;

     cross_BIST_DX_STOP_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_STOP, BMODE_3, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF,  BDONE_0, BDXERR_2;
     cross_BIST_DX_STOP_BSONF_ON_BINF_ON   : cross cover_pt_BINST_STOP, BMODE_3, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,   BDONE_0, BDXERR_2;
  
     option.comment = "Coverage for DX Bist issue stop inst scenario";       
   endgroup // bist_dx_issue_stop_inst_scenario

   // RESET instruction  
   covergroup bist_dx_issue_reset_inst_scenario;
     type_option.goal = 100;
  
     cover_pt_BINST_RESET        : coverpoint BINST_2_0     {bins BINST_2_0_RESET           = {3};}
     cover_pt_BINF_4_OFF         : coverpoint BINF_4        {bins BINF_4_OFF              = {0};}
     cover_pt_BINF_4_ON          : coverpoint BINF_4        {bins BINF_4_ON               = {1};}
     cover_pt_NFAIL_12_5_OFF     : coverpoint NFAIL_12_5    {wildcard bins NFAIL_12_5_OFF = {8'h??};}
     cover_pt_NFAIL_12_5_ON      : coverpoint NFAIL_12_5;
     cover_pt_BSONF_13_OFF       : coverpoint BSONF_13      {bins BSONF_13_OFF            = {0};}
     cover_pt_BSONF_13_ON        : coverpoint BSONF_13      {bins BSONF_13_ON             = {1};}
     cover_pt_BDXEN_14_ON        : coverpoint BDXEN_14      {bins BDXEN_14_ON             = {1};}                                                                                            
     cover_pt_BDXSEL_22_19_RANGE : coverpoint BDXSEL_22_19  {ignore_bins BDXSEL_22_19_IN         = {[9:15]};}                                                                  
     cover_pt_BWCNT_15_0_OFF     : coverpoint BWCNT_15_0    {wildcard bins BWCNT_15_0_OFF = {16'h????};}
     cover_pt_BWCNT_15_0_ON      : coverpoint BWCNT_15_0;

     cross_BIST_DX_RESET_BSONF_OFF_BINF_OFF : cross cover_pt_BINST_RESET, BMODE_3, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF, BDONE_0, BDXERR_2;
     cross_BIST_DX_RESET_BSONF_OFF_BINF_ON  : cross cover_pt_BINST_RESET, BMODE_3, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_OFF, cover_pt_NFAIL_12_5_OFF, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,  BDONE_0, BDXERR_2;

     cross_BIST_DX_RESET_BSONF_ON_BINF_OFF  : cross cover_pt_BINST_RESET, BMODE_3, cover_pt_BINF_4_OFF, cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_OFF,  BDONE_0, BDXERR_2;
     cross_BIST_DX_RESET_BSONF_ON_BINF_ON   : cross cover_pt_BINST_RESET, BMODE_3, cover_pt_BINF_4_ON,  cover_pt_BSONF_13_ON,  cover_pt_NFAIL_12_5_ON, BDXEN_14, BDMEN_16, BDPAT_18_17, cover_pt_BDXSEL_22_19_RANGE, cover_pt_BWCNT_15_0_ON,   BDONE_0, BDXERR_2;

     option.comment = "Coverage for DX Bist issue reset inst scenario";       
   endgroup // bist_dx_issue_reset_inst_scenario

   // Illegal BIST AC and DX not enable at the same time
   covergroup bist_setup_ac_dx_not_enable_same_time_scenario;
     type_option.goal = 100;
     cross BACEN_15, BDXEN_14 {
        illegal_bins bist_setup_ac_dx_same_time = ((binsof(BACEN_15) intersect {1}) && (binsof(BDXEN_14) intersect {1}));
     }                                                      
     option.comment = "Coverage for Bist AC and DX not enable same time scenario";       
   endgroup // bist_setup_ac_dx_not_enable_same_time_scenario
     
//----    
  
  
/////////////////////////////////////
/////////////////////////////////////
//Declaration of cover group objects
/////////////////////////////////////
/////////////////////////////////////      
    RIDR        RIDRcov;
    PIR         PIRcov;
    PGCR0       PGCR0cov;
    PGCR1       PGCR1cov;
    PGSR0       PGSR0cov;
    PGSR1       PGSR1cov;   
    PLLCR       PLLCRcov;
    PTR0        PTR0cov;
    PTR1        PTR1cov;
    PTR2        PTR2cov;
    PTR3        PTR3cov;
    PTR4        PTR4cov;
  
    ACMDLR      ACMDLRcov;
    ACBDLR      ACBDLRcov;
    ACIOCR      ACIOCRcov;
    DXCCR       DXCCRcov;
    DSGCR       DSGCRcov;
    DCR         DCRcov;
    DTPR0       DTPR0cov;    
    DTPR1       DTPR1cov;    
    DTPR2       DTPR2cov;    
    MR0_DDR3    MR0_DDR3cov; 
    MR0_DDR2    MR0_DDR2cov; 
    MR1_DDR3    MR1_DDR3cov; 
    MR1_DDR2    MR1_DDR2cov; 
    MR2_DDR3    MR2_DDR3cov; 
    MR2_DDR2    MR2_DDR2cov; 
    MR3_DDR3    MR3_DDR3cov; 
    MR3_DDR2    MR3_DDR2cov; 
    ODTCR       ODTCRcov;    
    DTCR        DTCRcov;     
    DTAR0       DTAR0cov;    
    DTAR1       DTAR1cov;    
    DTAR2       DTAR2cov;    
    DTDR0       DTDR0cov;    
    DTDR1       DTDR1cov;    
    DTEDR0      DTEDR0cov;   
    DTEDR1      DTEDR1cov; 
    PGCR2       PGCR2cov;
  
    RDIMMGCR0   RDIMMGCR0cov;
    RDIMMGCR1   RDIMMGCR1cov;
    RDIMMCR0    RDIMMCR0cov;
    RDIMMCR1    RDIMMCR1cov;
  
    DCUAR       DCUARcov;
    DCUDR       DCUDRcov;
    DCURR       DCURRcov;
    DCULR       DCULRcov;
    DCUGCR      DCUGCRcov;
    DCUTPR      DCUTPRcov;
    DCUSR0      DCUSR0cov;
    DCUSR1      DCUSR1cov;
  
    BISTRR      BISTRRcov;
    BISTWCR     BISTWCRcov;
    BISTMSKR0   BISTMSKR0cov;
    BISTMSKR1   BISTMSKR1cov;
    BISTMSKR2   BISTMSKR2cov;
    BISTLSR     BISTLSRcov;
    BISTAR0     BISTAR0cov;
    BISTAR1     BISTAR1cov;
    BISTAR2     BISTAR2cov;
    BISTUDPR    BISTUDPRcov;
    BISTGSR     BISTGSRcov;
    BISTWER     BISTWERcov;
    BISTBER0    BISTBER0cov;
    BISTBER1    BISTBER1cov;
    BISTBER2    BISTBER2cov;
    BISTBER3    BISTBER3cov;
    BISTWCSR    BISTWCSRcov;
    BISTFWR0    BISTFWR0cov;
    BISTFWR1    BISTFWR1cov;
    BISTFWR2    BISTFWR2cov;

    GPR0        GPR0cov;
    GPR1        GPR1cov;
  
    ZQ0CR0      ZQ0CR0cov;
    ZQ0CR1      ZQ0CR1cov;
    ZQ0SR0      ZQ0SR0cov;
    ZQ0SR1      ZQ0SR1cov;
    ZQ1CR0      ZQ1CR0cov;
    ZQ1CR1      ZQ1CR1cov;
    ZQ1SR0      ZQ1SR0cov;
    ZQ1SR1      ZQ1SR1cov;
    ZQ2CR0      ZQ2CR0cov;
    ZQ2CR1      ZQ2CR1cov;
    ZQ2SR0      ZQ2SR0cov;
    ZQ2SR1      ZQ2SR1cov;
    ZQ3CR0      ZQ3CR0cov;
    ZQ3CR1      ZQ3CR1cov;
    ZQ3SR0      ZQ3SR0cov;
    ZQ3SR1      ZQ3SR1cov;         
    

    DX0GCR      DX0GCRcov;      
    DX0GSR0     DX0GSR0cov;
    DX0GSR1     DX0GSR1cov;
    DX0BDLR0    DX0BDLR0cov;
    DX0BDLR1    DX0BDLR1cov;
    DX0BDLR2    DX0BDLR2cov;
    DX0BDLR3    DX0BDLR3cov;
    DX0BDLR4    DX0BDLR4cov;
    DX0LCDLR0   DX0LCDLR0cov;
    DX0LCDLR1   DX0LCDLR1cov;
    DX0LCDLR2   DX0LCDLR2cov;
    DX0MDLR     DX0MDLRcov;
    DX0GTR      DX0GTRcov;      
    DX0GSR2     DX0GSR2cov;      

    DX1GCR      DX1GCRcov;
    DX1GSR0     DX1GSR0cov;
    DX1GSR1     DX1GSR1cov;
    DX1BDLR0    DX1BDLR0cov;
    DX1BDLR1    DX1BDLR1cov;
    DX1BDLR2    DX1BDLR2cov;
    DX1BDLR3    DX1BDLR3cov;
    DX1BDLR4    DX1BDLR4cov;
    DX1LCDLR0   DX1LCDLR0cov;
    DX1LCDLR1   DX1LCDLR1cov;
    DX1LCDLR2   DX1LCDLR2cov;
    DX1MDLR     DX1MDLRcov;
    DX1GTR      DX1GTRcov;      
    DX1GSR2     DX1GSR2cov;      

    DX2GCR      DX2GCRcov;
    DX2GSR0     DX2GSR0cov;
    DX2GSR1     DX2GSR1cov;
    DX2BDLR0    DX2BDLR0cov;
    DX2BDLR1    DX2BDLR1cov;
    DX2BDLR2    DX2BDLR2cov;
    DX2BDLR3    DX2BDLR3cov;
    DX2BDLR4    DX2BDLR4cov;
    DX2LCDLR0   DX2LCDLR0cov;
    DX2LCDLR1   DX2LCDLR1cov;
    DX2LCDLR2   DX2LCDLR2cov;
    DX2MDLR     DX2MDLRcov;
    DX2GTR      DX2GTRcov;      
    DX2GSR2     DX2GSR2cov;      

    DX3GCR      DX3GCRcov;
    DX3GSR0     DX3GSR0cov;
    DX3GSR1     DX3GSR1cov;
    DX3BDLR0    DX3BDLR0cov;
    DX3BDLR1    DX3BDLR1cov;
    DX3BDLR2    DX3BDLR2cov;
    DX3BDLR3    DX3BDLR3cov;
    DX3BDLR4    DX3BDLR4cov;
    DX3LCDLR0   DX3LCDLR0cov;
    DX3LCDLR1   DX3LCDLR1cov;
    DX3LCDLR2   DX3LCDLR2cov;
    DX3MDLR     DX3MDLRcov;
    DX3GTR      DX3GTRcov;      
    DX3GSR2     DX3GSR2cov;      

    DX4GCR      DX4GCRcov;
    DX4GSR0     DX4GSR0cov;
    DX4GSR1     DX4GSR1cov;
    DX4BDLR0    DX4BDLR0cov;      
    DX4BDLR1    DX4BDLR1cov;
    DX4BDLR2    DX4BDLR2cov;
    DX4BDLR3    DX4BDLR3cov;
    DX4BDLR4    DX4BDLR4cov;
    DX4LCDLR0   DX4LCDLR0cov;
    DX4LCDLR1   DX4LCDLR1cov;
    DX4LCDLR2   DX4LCDLR2cov;
    DX4MDLR     DX4MDLRcov;
    DX4GTR      DX4GTRcov;      
    DX4GSR2     DX4GSR2cov;      

    DX5GCR      DX5GCRcov;
    DX5GSR0     DX5GSR0cov;
    DX5GSR1     DX5GSR1cov;
    DX5BDLR0    DX5BDLR0cov;
    DX5BDLR1    DX5BDLR1cov;
    DX5BDLR2    DX5BDLR2cov;
    DX5BDLR3    DX5BDLR3cov;
    DX5BDLR4    DX5BDLR4cov;
    DX5LCDLR0   DX5LCDLR0cov;
    DX5LCDLR1   DX5LCDLR1cov;
    DX5LCDLR2   DX5LCDLR2cov;
    DX5MDLR     DX5MDLRcov;
    DX5GTR      DX5GTRcov;      
    DX5GSR2     DX5GSR2cov;      

    DX6GCR      DX6GCRcov;
    DX6GSR0     DX6GSR0cov;
    DX6GSR1     DX6GSR1cov;
    DX6BDLR0    DX6BDLR0cov;
    DX6BDLR1    DX6BDLR1cov;
    DX6BDLR2    DX6BDLR2cov;
    DX6BDLR3    DX6BDLR3cov;
    DX6BDLR4    DX6BDLR4cov;
    DX6LCDLR0   DX6LCDLR0cov;
    DX6LCDLR1   DX6LCDLR1cov;
    DX6LCDLR2   DX6LCDLR2cov;
    DX6MDLR     DX6MDLRcov;
    DX6GTR      DX6GTRcov;      
    DX6GSR2     DX6GSR2cov;      

    DX7GCR      DX7GCRcov;
    DX7GSR0     DX7GSR0cov;
    DX7GSR1     DX7GSR1cov;
    DX7BDLR0    DX7BDLR0cov;
    DX7BDLR1    DX7BDLR1cov;
    DX7BDLR2    DX7BDLR2cov;
    DX7BDLR3    DX7BDLR3cov;
    DX7BDLR4    DX7BDLR4cov;
    DX7LCDLR0   DX7LCDLR0cov;
    DX7LCDLR1   DX7LCDLR1cov;
    DX7LCDLR2   DX7LCDLR2cov;
    DX7MDLR     DX7MDLRcov;
    DX7GTR      DX7GTRcov;      
    DX7GSR2     DX7GSR2cov;      

    DX8GCR      DX8GCRcov;
    DX8GSR0     DX8GSR0cov;
    DX8GSR1     DX8GSR1cov;
    DX8BDLR0    DX8BDLR0cov;
    DX8BDLR1    DX8BDLR1cov;
    DX8BDLR2    DX8BDLR2cov;
    DX8BDLR3    DX8BDLR3cov;
    DX8BDLR4    DX8BDLR4cov;
    DX8LCDLR0   DX8LCDLR0cov;
    DX8LCDLR1   DX8LCDLR1cov;
    DX8LCDLR2   DX8LCDLR2cov;
    DX8MDLR     DX8MDLRcov;
    DX8GTR      DX8GTRcov;      
    DX8GSR2     DX8GSR2cov;      

    register_read_access                           register_read_accesscov;   
    RESERVED_ADDRESSES                             RESERVED_ADDRESSEScov;
 
    vt_drift_scenario                              vt_drift_scenariocov; 
    vt_upd_req_scenario                            vt_upd_req_scenariocov;

    init_trig_pll_dcal_phy_dram_scenario           init_trig_pll_dcal_phy_dram_scenariocov;
    init_trig_wl_dqsg_data_eye_train_scenario      init_trig_wl_dqsg_data_eye_train_scenariocov;

    vt_comp_enable_cfg_scenario                    vt_comp_enable_cfg_scenariocov;

    write_level_cfg_scenario                       write_level_cfg_scenariocov;
    loopback_cfg_scenario                          loopback_cfg_scenariocov;
  
    ctrl_phy_upd_req_scenario                      ctrl_phy_upd_req_scenariocov;
    mpr_scenario                                   mpr_scenariocov;

    data_eye_train_cfg_scenario                    data_eye_train_cfg_scenariocov;
    data_eye_train_debug_scenario                  data_eye_train_debug_scenariocov;
  
    dcu_setup_cfg_scenario                         dcu_setup_cfg_scenariocov;
    dcu_loop_cfg_scenario                          dcu_loop_cfg_scenariocov;

    bist_ac_issue_nop_inst_scenario                bist_ac_issue_nop_inst_scenariocov;
    bist_ac_issue_run_inst_scenario                bist_ac_issue_run_inst_scenariocov;
    bist_ac_issue_stop_inst_scenario               bist_ac_issue_stop_inst_scenariocov;
    bist_ac_issue_reset_inst_scenario              bist_ac_issue_reset_inst_scenariocov;

    bist_dx_issue_nop_inst_scenario                bist_dx_issue_nop_inst_scenariocov;
    bist_dx_issue_run_lpbk_inst_scenario           bist_dx_issue_run_lpbk_inst_scenariocov;
    bist_dx_issue_run_dram_inst_scenario           bist_dx_issue_run_dram_inst_scenariocov;
    bist_dx_issue_stop_inst_scenario               bist_dx_issue_stop_inst_scenariocov;
    bist_dx_issue_reset_inst_scenario              bist_dx_issue_reset_inst_scenariocov;

    bist_setup_ac_dx_not_enable_same_time_scenario  bist_setup_ac_dx_not_enable_same_time_scenariocov;
  

// test stimuli
   initial
     begin       
      $display("\n=> From the Registers Functional Coverage.\n");   

       ////////////////////////////////////////
       ////////////////////////////////////////
       // Initialization of cover group objects
       ////////////////////////////////////////
       ////////////////////////////////////////      
        
        RIDRcov      = new();
        PIRcov       = new();
        PGCR0cov     = new();
        PGCR1cov     = new();
        PGSR0cov     = new();
        PGSR1cov     = new();        
        PLLCRcov     = new();
        PTR0cov      = new();
        PTR1cov      = new();
        PTR2cov      = new();
        PTR3cov      = new();
        PTR4cov      = new();
       
        ACMDLRcov    = new();
        ACBDLRcov    = new();
        ACIOCRcov    = new();
        DXCCRcov     = new();
        DSGCRcov  	 = new();          
        DCRcov		 	 = new();            
        DTPR0cov		 = new();          
        DTPR1cov		 = new();          
        DTPR2cov		 = new();          
        MR0_DDR3cov	 = new();       
        MR0_DDR2cov	 = new();       
        MR1_DDR3cov	 = new();       
        MR1_DDR2cov	 = new();       
        MR2_DDR3cov	 = new();       
        MR2_DDR2cov	 = new();       
        MR3_DDR3cov	 = new();       
        MR3_DDR2cov	 = new();       
        ODTCRcov		 = new();          
        DTCRcov			 = new();           
        DTAR0cov		 = new();          
        DTAR1cov		 = new();          
        DTAR2cov		 = new();          
        DTDR0cov		 = new();          
        DTDR1cov		 = new();          
        DTEDR0cov		 = new();         
        DTEDR1cov		 = new();         
        PGCR2cov		 = new();         
                          
        RDIMMGCR0cov = new();         
        RDIMMGCR1cov = new();         
        RDIMMCR0cov  = new();         
        RDIMMCR1cov  = new();         

        DCUARcov		 = new();          
        DCUDRcov		 = new();          
        DCURRcov		 = new();          
        DCULRcov		 = new();          
        DCUGCRcov		 = new();         
        DCUTPRcov		 = new();         
        DCUSR0cov		 = new();         
        DCUSR1cov		 = new();         
                           
        BISTRRcov		  = new();         
        BISTWCRcov	  = new();        
        BISTMSKR0cov  = new();      
        BISTMSKR1cov  = new();      
        BISTMSKR2cov  = new();      
        BISTLSRcov	  = new();        
        BISTAR0cov	  = new();        
        BISTAR1cov	  = new();        
        BISTAR2cov	  = new();        
        BISTUDPRcov	  = new();       
        BISTGSRcov	  = new();        
        BISTWERcov	  = new();        
        BISTBER0cov	  = new();       
        BISTBER1cov	  = new();       
        BISTBER2cov	  = new();       
        BISTBER3cov	  = new();       
        BISTWCSRcov	  = new();       
        BISTFWR0cov	  = new();       
        BISTFWR1cov	  = new();       
        BISTFWR2cov	 	= new();       

        GPR0cov       = new();
        GPR1cov       = new();
                           
        ZQ0CR0cov			= new();         
        ZQ0CR1cov			= new();         
        ZQ0SR0cov			= new();         
        ZQ0SR1cov			= new();         
        ZQ1CR0cov			= new();         
        ZQ1CR1cov			= new();         
        ZQ1SR0cov			= new();         
        ZQ1SR1cov			= new();         
        ZQ2CR0cov			= new();         
        ZQ2CR1cov			= new();         
        ZQ2SR0cov			= new();         
        ZQ2SR1cov			= new();         
        ZQ3CR0cov			= new();         
        ZQ3CR1cov			= new();         
        ZQ3SR0cov			= new();         
        ZQ3SR1cov			= new();         

        DX0GCRcov    = new();      
        DX0GSR0cov   = new();
        DX0GSR1cov   = new();
        DX0BDLR0cov  = new();
        DX0BDLR1cov  = new();
        DX0BDLR2cov  = new();
        DX0BDLR3cov  = new();
        DX0BDLR4cov  = new();
        DX0LCDLR0cov = new();
        DX0LCDLR1cov = new();
        DX0LCDLR2cov = new();
        DX0MDLRcov   = new();
        DX0GTRcov    = new();      
        DX0GSR2cov   = new();      

        DX1GCRcov    = new();
        DX1GSR0cov   = new();
        DX1GSR1cov   = new();
        DX1BDLR0cov  = new();
        DX1BDLR1cov  = new();
        DX1BDLR2cov  = new();
        DX1BDLR3cov  = new();
        DX1BDLR4cov  = new();
        DX1LCDLR0cov = new();
        DX1LCDLR1cov = new();
        DX1LCDLR2cov = new();
        DX1MDLRcov   = new();
        DX1GTRcov    = new();      
        DX1GSR2cov   = new();      

        DX2GCRcov    = new();
        DX2GSR0cov   = new();
        DX2GSR1cov   = new();
        DX2BDLR0cov  = new();
        DX2BDLR1cov  = new();
        DX2BDLR2cov  = new();
        DX2BDLR3cov  = new();
        DX2BDLR4cov  = new();
        DX2LCDLR0cov = new();
        DX2LCDLR1cov = new();
        DX2LCDLR2cov = new();
        DX2MDLRcov   = new();
        DX2GTRcov    = new();      
        DX2GSR2cov   = new();      

        DX3GCRcov    = new();
        DX3GSR0cov   = new();
        DX3GSR1cov   = new();
        DX3BDLR0cov  = new();
        DX3BDLR1cov  = new();
        DX3BDLR2cov  = new();
        DX3BDLR3cov  = new();
        DX3BDLR4cov  = new();
        DX3LCDLR0cov = new();
        DX3LCDLR1cov = new();
        DX3LCDLR2cov = new();
        DX3MDLRcov   = new();
        DX3GTRcov    = new();      
        DX3GSR2cov   = new();      

        DX4GCRcov    = new();
        DX4GSR0cov   = new();
        DX4GSR1cov   = new();
        DX4BDLR0cov  = new();      
        DX4BDLR1cov  = new();
        DX4BDLR2cov  = new();
        DX4BDLR3cov  = new();
        DX4BDLR4cov  = new();
        DX4LCDLR0cov = new();
        DX4LCDLR1cov = new();
        DX4LCDLR2cov = new();
        DX4MDLRcov   = new();
        DX4GTRcov    = new();      
        DX4GSR2cov   = new();      

        DX5GCRcov    = new();
        DX5GSR0cov   = new();
        DX5GSR1cov   = new();
        DX5BDLR0cov  = new();
        DX5BDLR1cov  = new();
        DX5BDLR2cov  = new();
        DX5BDLR3cov  = new();
        DX5BDLR4cov  = new();
        DX5LCDLR0cov = new();
        DX5LCDLR1cov = new();
        DX5LCDLR2cov = new();
        DX5MDLRcov   = new();
        DX5GTRcov    = new();      
        DX5GSR2cov   = new();      

        DX6GCRcov    = new();
        DX6GSR0cov   = new();
        DX6GSR1cov   = new();
        DX6BDLR0cov  = new();
        DX6BDLR1cov  = new();
        DX6BDLR2cov  = new();
        DX6BDLR3cov  = new();
        DX6BDLR4cov  = new();
        DX6LCDLR0cov = new();
        DX6LCDLR1cov = new();
        DX6LCDLR2cov = new();
        DX6MDLRcov   = new();
        DX6GTRcov    = new();      
        DX6GSR2cov   = new();      

        DX7GCRcov    = new();
        DX7GSR0cov   = new();
        DX7GSR1cov   = new();
        DX7BDLR0cov  = new();
        DX7BDLR1cov  = new();
        DX7BDLR2cov  = new();
        DX7BDLR3cov  = new();
        DX7BDLR4cov  = new();
        DX7LCDLR0cov = new();
        DX7LCDLR1cov = new();
        DX7LCDLR2cov = new();
        DX7MDLRcov   = new();
        DX7GTRcov    = new();      
        DX7GSR2cov   = new();      

        DX8GCRcov    = new();
        DX8GSR0cov   = new();
        DX8GSR1cov   = new();
        DX8BDLR0cov  = new();
        DX8BDLR1cov  = new();
        DX8BDLR2cov  = new();
        DX8BDLR3cov  = new();
        DX8BDLR4cov  = new();
        DX8LCDLR0cov = new();
        DX8LCDLR1cov = new();
        DX8LCDLR2cov = new();
        DX8MDLRcov   = new();  
        DX8GTRcov    = new();
        DX8GSR2cov   = new();      
      
        register_read_accesscov                        = new();
        RESERVED_ADDRESSEScov                          = new();
                                                       
        vt_drift_scenariocov                           = new();
        vt_upd_req_scenariocov                         = new();
        
        init_trig_pll_dcal_phy_dram_scenariocov        = new();
        init_trig_wl_dqsg_data_eye_train_scenariocov   = new();

        vt_comp_enable_cfg_scenariocov                 = new();

        write_level_cfg_scenariocov                    = new();
        loopback_cfg_scenariocov                       = new();
                                                       
        ctrl_phy_upd_req_scenariocov                   = new();
        mpr_scenariocov                                = new();

        data_eye_train_cfg_scenariocov                 = new();
        data_eye_train_debug_scenariocov               = new();

        dcu_setup_cfg_scenariocov                      = new();
        dcu_loop_cfg_scenariocov                       = new();
       
        bist_ac_issue_nop_inst_scenariocov             = new();
        bist_ac_issue_run_inst_scenariocov             = new();
        bist_ac_issue_stop_inst_scenariocov            = new();
        bist_ac_issue_reset_inst_scenariocov           = new();

        bist_dx_issue_nop_inst_scenariocov             = new();
        bist_dx_issue_run_lpbk_inst_scenariocov        = new();
        bist_dx_issue_run_dram_inst_scenariocov        = new();
        bist_dx_issue_stop_inst_scenariocov            = new();
        bist_dx_issue_reset_inst_scenariocov           = new();

        bist_setup_ac_dx_not_enable_same_time_scenariocov = new();

     end // initial begin

`endif
   
////////////////////////////////////////
////////////////////////////////////////
// Tasks to set local params
////////////////////////////////////////
////////////////////////////////////////
   

//--------------------------------------------
// Task to set write coverage on all registers
//--------------------------------------------
   task set_cov_registers_write;       
      input [`REG_ADDR_WIDTH-1:0] reg_addr;
      input [`REG_DATA_WIDTH-1:0] reg_value;
      input    [1:0]              select;      
    begin
`ifdef FUNCOV   
      case(reg_addr)
            `RIDR       :set_cov_RIDR(reg_value,select);        
            `PIR        :set_cov_PIR(reg_value,select);        
            `PGCR0			:set_cov_PGCR0(reg_value,select);        
            `PGCR1			:set_cov_PGCR1(reg_value,select);            
            `PGSR0			:set_cov_PGSR0(reg_value,select);             
            `PGSR1			:set_cov_PGSR1(reg_value,select);            
            `PLLCR			:set_cov_PLLCR(reg_value,select);            
            `PTR0				:set_cov_PTR0(reg_value,select);        
            `PTR1				:set_cov_PTR1(reg_value,select);   
            `PTR2				:set_cov_PTR2(reg_value,select);    
            `PTR3				:set_cov_PTR3(reg_value,select);    
            `PTR4				:set_cov_PTR4(reg_value,select);    

            `ACMDLR     :set_cov_ACMDLR(reg_value,select);  
            `ACBDLR     :set_cov_ACBDLR(reg_value,select);  
            `ACIOCR     :set_cov_ACIOCR(reg_value,select);   
            `DXCCR      :set_cov_DXCCR(reg_value,select);   			
            `DSGCR      :set_cov_DSGCR(reg_value,select);   			
            `DCR        :set_cov_DCR(reg_value,select);   			
            `DTPR0      :set_cov_DTPR0(reg_value,select);   			
            `DTPR1      :set_cov_DTPR1(reg_value,select);   			
            `DTPR2      :set_cov_DTPR2(reg_value,select);
        
`ifdef DDR3        
            `MR0        :set_cov_MR0_DDR3(reg_value,select);   			
`elsif DDR2
            `MR0        :set_cov_MR0_DDR2(reg_value,select);   	
`endif

`ifdef DDR3		
            `MR1        :set_cov_MR1_DDR3(reg_value,select);
`elsif DDR2        
            `MR1        :set_cov_MR1_DDR2(reg_value,select);
`endif

`ifdef DDR3        
            `MR2        :set_cov_MR2_DDR3(reg_value,select);
`elsif DDR2        
            `MR2        :set_cov_MR2_DDR2(reg_value,select);
`endif

`ifdef DDR3        
            `MR3        :set_cov_MR3_DDR3(reg_value,select);
`elsif DDR2        
            `MR3        :set_cov_MR3_DDR2(reg_value,select);
`endif        
            `ODTCR      :set_cov_ODTCR(reg_value,select);       
            `DTCR       :set_cov_DTCR(reg_value,select);        
            `DTAR0      :set_cov_DTAR0(reg_value,select);        
            `DTAR1      :set_cov_DTAR1(reg_value,select);        
            `DTAR2      :set_cov_DTAR2(reg_value,select);        
            `DTDR0      :set_cov_DTDR0(reg_value,select);       
            `DTDR1      :set_cov_DTDR1(reg_value,select);       
            `DTEDR0     :set_cov_DTEDR0(reg_value,select);       
            `DTEDR1     :set_cov_DTEDR1(reg_value,select);       
                                                    
            `PGCR2      :set_cov_PGCR2(reg_value,select);      

            `RDIMMGCR0  :set_cov_RDIMMGCR0(reg_value,select);      
            `RDIMMGCR1  :set_cov_RDIMMGCR1(reg_value,select);      
            `RDIMMCR0   :set_cov_RDIMMCR0(reg_value,select);      
            `RDIMMCR1   :set_cov_RDIMMCR1(reg_value,select);      

            `DCUAR      :set_cov_DCUAR(reg_value,select);       
            `DCUDR      :set_cov_DCUDR(reg_value,select);       
            `DCURR      :set_cov_DCURR(reg_value,select);       
            `DCULR      :set_cov_DCULR(reg_value,select);       
            `DCUGCR     :set_cov_DCUGCR(reg_value,select);      
            `DCUTPR     :set_cov_DCUTPR(reg_value,select);      
            `DCUSR0     :set_cov_DCUSR0(reg_value,select);      
            `DCUSR1     :set_cov_DCUSR1(reg_value,select);      
                                                       
            `BISTRR     :set_cov_BISTRR(reg_value,select);      
            `BISTWCR    :set_cov_BISTWCR(reg_value,select);     
            `BISTMSKR0  :set_cov_BISTMSKR0(reg_value,select);   
            `BISTMSKR1  :set_cov_BISTMSKR1(reg_value,select);   
            `BISTMSKR2  :set_cov_BISTMSKR2(reg_value,select);   
            `BISTLSR    :set_cov_BISTLSR(reg_value,select);     
            `BISTAR0    :set_cov_BISTAR0(reg_value,select);     
            `BISTAR1    :set_cov_BISTAR1(reg_value,select);     
            `BISTAR2    :set_cov_BISTAR2(reg_value,select);     
            `BISTUDPR   :set_cov_BISTUDPR(reg_value,select);    
            `BISTGSR    :set_cov_BISTGSR(reg_value,select);     
            `BISTWER    :set_cov_BISTWER(reg_value,select);     
            `BISTBER0   :set_cov_BISTBER0(reg_value,select);    
            `BISTBER1   :set_cov_BISTBER1(reg_value,select);    
            `BISTBER2   :set_cov_BISTBER2(reg_value,select);    
            `BISTBER3   :set_cov_BISTBER3(reg_value,select);    
            `BISTWCSR   :set_cov_BISTWCSR(reg_value,select);    
            `BISTFWR0   :set_cov_BISTFWR0(reg_value,select);    
            `BISTFWR1   :set_cov_BISTFWR1(reg_value,select);    
            `BISTFWR2   :set_cov_BISTFWR2(reg_value,select);    

            `GPR0       :set_cov_GPR0(reg_value,select); 
            `GPR1       :set_cov_GPR1(reg_value,select); 
            `ZQ0CR0     :set_cov_ZQ0CR0(reg_value,select);      
            `ZQ0CR1     :set_cov_ZQ0CR1(reg_value,select);      
            `ZQ0SR0     :set_cov_ZQ0SR0(reg_value,select);      
            `ZQ0SR1     :set_cov_ZQ0SR1(reg_value,select);      
            `ZQ1CR0     :set_cov_ZQ1CR0(reg_value,select);      
            `ZQ1CR1     :set_cov_ZQ1CR1(reg_value,select);      
            `ZQ1SR0     :set_cov_ZQ1SR0(reg_value,select);      
            `ZQ1SR1     :set_cov_ZQ1SR1(reg_value,select);      
            `ZQ2CR0     :set_cov_ZQ2CR0(reg_value,select);      
            `ZQ2CR1     :set_cov_ZQ2CR1(reg_value,select);      
            `ZQ2SR0     :set_cov_ZQ2SR0(reg_value,select);      
            `ZQ2SR1     :set_cov_ZQ2SR1(reg_value,select);      
            `ZQ3CR0     :set_cov_ZQ3CR0(reg_value,select);      
            `ZQ3CR1     :set_cov_ZQ3CR1(reg_value,select);      
            `ZQ3SR0     :set_cov_ZQ3SR0(reg_value,select);      
            `ZQ3SR1     :set_cov_ZQ3SR1(reg_value,select);      

            `DX0GCR     :set_cov_DX0GCR(reg_value,select);        
            `DX0GSR0		:set_cov_DX0GSR0(reg_value,select);
            `DX0GSR1		:set_cov_DX0GSR1(reg_value,select); 
            `DX0BDLR0		:set_cov_DX0BDLR0(reg_value,select);
            `DX0BDLR1		:set_cov_DX0BDLR1(reg_value,select);        
            `DX0BDLR2		:set_cov_DX0BDLR2(reg_value,select);
            `DX0BDLR3		:set_cov_DX0BDLR3(reg_value,select);       
            `DX0BDLR4		:set_cov_DX0BDLR4(reg_value,select);
            `DX0LCDLR0	:set_cov_DX0LCDLR0(reg_value,select);
            `DX0LCDLR1 	:set_cov_DX0LCDLR1(reg_value,select);   
            `DX0LCDLR2	:set_cov_DX0LCDLR2(reg_value,select);       
            `DX0MDLR		:set_cov_DX0MDLR(reg_value,select);
            `DX0GTR     :set_cov_DX0GTR(reg_value,select);
            `DX0GSR2    :set_cov_DX0GSR2(reg_value,select);
			
            `DX1GCR		  :set_cov_DX1GCR(reg_value,select);	         
            `DX1GSR0		:set_cov_DX1GSR0(reg_value,select);	        
            `DX1GSR1		:set_cov_DX1GSR1(reg_value,select);	         
            `DX1BDLR0		:set_cov_DX1BDLR0(reg_value,select);         
            `DX1BDLR1		:set_cov_DX1BDLR1(reg_value,select);        
            `DX1BDLR2		:set_cov_DX1BDLR2(reg_value,select);         
            `DX1BDLR3		:set_cov_DX1BDLR3(reg_value,select);          
            `DX1BDLR4		:set_cov_DX1BDLR4(reg_value,select);         
            `DX1LCDLR0	:set_cov_DX1LCDLR0(reg_value,select);       
            `DX1LCDLR1	:set_cov_DX1LCDLR1(reg_value,select);       
            `DX1LCDLR2	:set_cov_DX1LCDLR2(reg_value,select);         
            `DX1MDLR		:set_cov_DX1MDLR(reg_value,select);  
            `DX1GTR     :set_cov_DX1GTR(reg_value,select);
            `DX1GSR2    :set_cov_DX1GSR2(reg_value,select);
        			
            `DX2GCR		  :set_cov_DX2GCR(reg_value,select);	         
            `DX2GSR0		:set_cov_DX2GSR0(reg_value,select);	          
            `DX2GSR1		:set_cov_DX2GSR1(reg_value,select);	         
            `DX2BDLR0		:set_cov_DX2BDLR0(reg_value,select);         
            `DX2BDLR1		:set_cov_DX2BDLR1(reg_value,select);          
            `DX2BDLR2		:set_cov_DX2BDLR2(reg_value,select);          
            `DX2BDLR3		:set_cov_DX2BDLR3(reg_value,select);        
            `DX2BDLR4		:set_cov_DX2BDLR4(reg_value,select);         
            `DX2LCDLR0	:set_cov_DX2LCDLR0(reg_value,select);         
            `DX2LCDLR1	:set_cov_DX2LCDLR1(reg_value,select);        
            `DX2LCDLR2	:set_cov_DX2LCDLR2(reg_value,select);        
            `DX2MDLR		:set_cov_DX2MDLR(reg_value,select);
            `DX2GTR		  :set_cov_DX2GTR(reg_value,select);
            `DX2GSR2    :set_cov_DX2GSR2(reg_value,select);
         			
            `DX3GCR		  :set_cov_DX3GCR(reg_value,select);	        
            `DX3GSR0		:set_cov_DX3GSR0(reg_value,select);	         
            `DX3GSR1		:set_cov_DX3GSR1(reg_value,select);	          
            `DX3BDLR0		:set_cov_DX3BDLR0(reg_value,select);         
            `DX3BDLR1		:set_cov_DX3BDLR1(reg_value,select);          
            `DX3BDLR2		:set_cov_DX3BDLR2(reg_value,select);        
            `DX3BDLR3		:set_cov_DX3BDLR3(reg_value,select);         
            `DX3BDLR4		:set_cov_DX3BDLR4(reg_value,select);        
            `DX3LCDLR0	:set_cov_DX3LCDLR0(reg_value,select);         
            `DX3LCDLR1	:set_cov_DX3LCDLR1(reg_value,select);       
            `DX3LCDLR2	:set_cov_DX3LCDLR2(reg_value,select);        
            `DX3MDLR		:set_cov_DX3MDLR(reg_value,select);
            `DX3GTR	  	:set_cov_DX3GTR(reg_value,select);
            `DX3GSR2    :set_cov_DX3GSR2(reg_value,select);
          			
            `DX4GCR		  :set_cov_DX4GCR(reg_value,select);	        
            `DX4GSR0		:set_cov_DX4GSR0(reg_value,select);	       
            `DX4GSR1		:set_cov_DX4GSR1(reg_value,select);	        
            `DX4BDLR0		:set_cov_DX4BDLR0(reg_value,select);        
            `DX4BDLR1		:set_cov_DX4BDLR1(reg_value,select);          
            `DX4BDLR2		:set_cov_DX4BDLR2(reg_value,select);         
            `DX4BDLR3		:set_cov_DX4BDLR3(reg_value,select);         
            `DX4BDLR4		:set_cov_DX4BDLR4(reg_value,select);       
            `DX4LCDLR0	:set_cov_DX4LCDLR0(reg_value,select);         
            `DX4LCDLR1	:set_cov_DX4LCDLR1(reg_value,select);        
            `DX4LCDLR2	:set_cov_DX4LCDLR2(reg_value,select);        
            `DX4MDLR		:set_cov_DX4MDLR(reg_value,select);
            `DX4GTR   	:set_cov_DX4GTR(reg_value,select);
            `DX4GSR2    :set_cov_DX4GSR2(reg_value,select);
           						
            `DX5GCR		  :set_cov_DX5GCR(reg_value,select);           
            `DX5GSR0		:set_cov_DX5GSR0(reg_value,select);	          
            `DX5GSR1		:set_cov_DX5GSR1(reg_value,select);	          
            `DX5BDLR0		:set_cov_DX5BDLR0(reg_value,select);          
            `DX5BDLR1		:set_cov_DX5BDLR1(reg_value,select);          
            `DX5BDLR2		:set_cov_DX5BDLR2(reg_value,select);          
            `DX5BDLR3		:set_cov_DX5BDLR3(reg_value,select);          
            `DX5BDLR4		:set_cov_DX5BDLR4(reg_value,select);          
            `DX5LCDLR0	:set_cov_DX5LCDLR0(reg_value,select);         
            `DX5LCDLR1	:set_cov_DX5LCDLR1(reg_value,select);        
            `DX5LCDLR2	:set_cov_DX5LCDLR2(reg_value,select);        
            `DX5MDLR		:set_cov_DX5MDLR(reg_value,select);
            `DX5GTR	  	:set_cov_DX5GTR(reg_value,select);
            `DX5GSR2    :set_cov_DX5GSR2(reg_value,select);
           			
            `DX6GCR     :set_cov_DX6GCR(reg_value,select);	          
            `DX6GSR0		:set_cov_DX6GSR0(reg_value,select);	         
            `DX6GSR1		:set_cov_DX6GSR1(reg_value,select);	          
            `DX6BDLR0		:set_cov_DX6BDLR0(reg_value,select);         
            `DX6BDLR1		:set_cov_DX6BDLR1(reg_value,select);          
            `DX6BDLR2		:set_cov_DX6BDLR2(reg_value,select);       
            `DX6BDLR3		:set_cov_DX6BDLR3(reg_value,select);          
            `DX6BDLR4		:set_cov_DX6BDLR4(reg_value,select);        
            `DX6LCDLR0	:set_cov_DX6LCDLR0(reg_value,select);         
            `DX6LCDLR1	:set_cov_DX6LCDLR1(reg_value,select);         
            `DX6LCDLR2	:set_cov_DX6LCDLR2(reg_value,select);         
            `DX6MDLR		:set_cov_DX6MDLR(reg_value,select);
            `DX6GTR    	:set_cov_DX6GTR(reg_value,select);
            `DX6GSR2    :set_cov_DX6GSR2(reg_value,select);
           			
            `DX7GCR     :set_cov_DX7GCR(reg_value,select);	        
            `DX7GSR0		:set_cov_DX7GSR0(reg_value,select);	      
            `DX7GSR1		:set_cov_DX7GSR1(reg_value,select);	      
            `DX7BDLR0		:set_cov_DX7BDLR0(reg_value,select);        
            `DX7BDLR1		:set_cov_DX7BDLR1(reg_value,select);         
            `DX7BDLR2		:set_cov_DX7BDLR2(reg_value,select);         
            `DX7BDLR3		:set_cov_DX7BDLR3(reg_value,select);       
            `DX7BDLR4		:set_cov_DX7BDLR4(reg_value,select);       
            `DX7LCDLR0	:set_cov_DX7LCDLR0(reg_value,select);        
            `DX7LCDLR1	:set_cov_DX7LCDLR1(reg_value,select);        
            `DX7LCDLR2	:set_cov_DX7LCDLR2(reg_value,select);         
            `DX7MDLR		:set_cov_DX7MDLR(reg_value,select);
            `DX7GTR		  :set_cov_DX7GTR(reg_value,select);
            `DX7GSR2    :set_cov_DX7GSR2(reg_value,select);
           			
            `DX8GCR		  :set_cov_DX8GCR(reg_value,select);	        
            `DX8GSR0		:set_cov_DX8GSR0(reg_value,select);	         
            `DX8GSR1		:set_cov_DX8GSR1(reg_value,select);	         
            `DX8BDLR0		:set_cov_DX8BDLR0(reg_value,select);         
            `DX8BDLR1		:set_cov_DX8BDLR1(reg_value,select);        
            `DX8BDLR2		:set_cov_DX8BDLR2(reg_value,select);        
            `DX8BDLR3		:set_cov_DX8BDLR3(reg_value,select);       
            `DX8BDLR4		:set_cov_DX8BDLR4(reg_value,select);        
            `DX8LCDLR0	:set_cov_DX8LCDLR0(reg_value,select);        
            `DX8LCDLR1	:set_cov_DX8LCDLR1(reg_value,select);        
            `DX8LCDLR2	:set_cov_DX8LCDLR2(reg_value,select);         
            `DX8MDLR		:set_cov_DX8MDLR(reg_value,select);         
            `DX8GTR		  :set_cov_DX8GTR(reg_value,select);
            `DX8GSR2    :set_cov_DX8GSR2(reg_value,select);


            `RESERVED_36,`RESERVED_37,`RESERVED_38,`RESERVED_39,`RESERVED_40,	            
            `RESERVED_41,`RESERVED_42,`RESERVED_43,
              
            `RESERVED_56,`RESERVED_57,`RESERVED_58,	            
            `RESERVED_59,`RESERVED_60,`RESERVED_61,`RESERVED_62,`RESERVED_63,

            `RESERVED_84,`RESERVED_85,`RESERVED_86,`RESERVED_87,`RESERVED_88,`RESERVED_89,
            `RESERVED_90,`RESERVED_91,`RESERVED_92,`RESERVED_93,//`RESERVED_94,`RESERVED_95,
              
            `RESERVED_126,`RESERVED_127,
            `RESERVED_142,`RESERVED_143,             
            `RESERVED_158,`RESERVED_159,
            `RESERVED_174,`RESERVED_175,             
            `RESERVED_190,`RESERVED_191,
            `RESERVED_206,`RESERVED_207,             
            `RESERVED_222,`RESERVED_223,
            `RESERVED_238,`RESERVED_239,            
            `RESERVED_254,`RESERVED_255 : set_cov_RESERVED_ADDRESSES(reg_addr,reg_value);         
        
      endcase // case (reg_addr)
         
`endif //  `ifdef FUNCOV
    end   
      
   endtask // endtask


                   


//-------------------------------------------------------------
// Task to set read coverage on all read clear/status registers
//------------------------------------------------------------
   task set_cov_registers_read_clear;       
      input [`REG_ADDR_WIDTH-1:0] reg_addr;
      input [`REG_DATA_WIDTH-1:0] reg_value;
      input    [1:0]              select;      
    begin
`ifdef FUNCOV   
      case(reg_addr)
            `RIDR:set_cov_RIDR(reg_value,select);                                            
            `PGSR0:set_cov_PGSR0(reg_value,select);             
            `PGSR1:set_cov_PGSR1(reg_value,select);

            `ACMDLR:set_cov_ACMDLR(reg_value,select); 

            `DTEDR0:set_cov_DTEDR0(reg_value,select);
            `DTEDR1:set_cov_DTEDR1(reg_value,select);
 
            `DCUSR0:set_cov_DCUSR0(reg_value,select); 
            `DCUSR1:set_cov_DCUSR1(reg_value,select); 

            `BISTGSR:set_cov_BISTGSR(reg_value,select); 
            `BISTWER:set_cov_BISTWER(reg_value,select); 
            `BISTBER0:set_cov_BISTBER0(reg_value,select); 
            `BISTBER1:set_cov_BISTBER1(reg_value,select); 
            `BISTBER2:set_cov_BISTBER2(reg_value,select); 
            `BISTBER3:set_cov_BISTBER3(reg_value,select); 
            `BISTWCSR:set_cov_BISTWCSR(reg_value,select); 
            `BISTFWR0:set_cov_BISTFWR0(reg_value,select); 
            `BISTFWR1:set_cov_BISTFWR1(reg_value,select); 
            `BISTFWR2:set_cov_BISTFWR2(reg_value,select); 

            `ZQ0SR0:set_cov_ZQ0SR0(reg_value,select);              
            `ZQ0SR1:set_cov_ZQ0SR1(reg_value,select);              
            `ZQ1SR0:set_cov_ZQ1SR0(reg_value,select);            
            `ZQ1SR1:set_cov_ZQ1SR1(reg_value,select);            
            `ZQ2SR0:set_cov_ZQ2SR0(reg_value,select);               
            `ZQ2SR1:set_cov_ZQ2SR1(reg_value,select);               
            `ZQ3SR0:set_cov_ZQ3SR0(reg_value,select);     
            `ZQ3SR1:set_cov_ZQ3SR1(reg_value,select);     

            `DX0GSR0:set_cov_DX0GSR0(reg_value,select);
            `DX0GSR1:set_cov_DX0GSR1(reg_value,select);      
            `DX0MDLR:set_cov_DX0MDLR(reg_value,select);
            `DX0GSR2:set_cov_DX0GSR2(reg_value,select);      
			              
            `DX1GSR0:set_cov_DX1GSR0(reg_value,select);	        
            `DX1GSR1:set_cov_DX1GSR1(reg_value,select);	                             
            `DX1MDLR:set_cov_DX1MDLR(reg_value,select);  
            `DX1GSR2:set_cov_DX1GSR2(reg_value,select);      
        			                
            `DX2GSR0:set_cov_DX2GSR0(reg_value,select);	          
            `DX2GSR1:set_cov_DX2GSR1(reg_value,select);	                         
            `DX2MDLR:set_cov_DX2MDLR(reg_value,select);
            `DX2GSR2:set_cov_DX2GSR2(reg_value,select);      
         			                   
            `DX3GSR0:set_cov_DX3GSR0(reg_value,select);	         
            `DX3GSR1:set_cov_DX3GSR1(reg_value,select);	                           
            `DX3MDLR:set_cov_DX3MDLR(reg_value,select);
            `DX3GSR2:set_cov_DX3GSR2(reg_value,select);      
          			            	        
            `DX4GSR0:set_cov_DX4GSR0(reg_value,select);	       
            `DX4GSR1:set_cov_DX4GSR1(reg_value,select);	                         
            `DX4MDLR:set_cov_DX4MDLR(reg_value,select);
            `DX4GSR2:set_cov_DX4GSR2(reg_value,select);      
           						                    
            `DX5GSR0:set_cov_DX5GSR0(reg_value,select);	          
            `DX5GSR1:set_cov_DX5GSR1(reg_value,select);	                             
            `DX5MDLR:set_cov_DX5MDLR(reg_value,select);
            `DX5GSR2:set_cov_DX5GSR2(reg_value,select);      
           			           	          
            `DX6GSR0:set_cov_DX6GSR0(reg_value,select);	         
            `DX6GSR1:set_cov_DX6GSR1(reg_value,select);	                               
            `DX6MDLR:set_cov_DX6MDLR(reg_value,select);
            `DX6GSR2:set_cov_DX6GSR2(reg_value,select);      
           			            	        
            `DX7GSR0:set_cov_DX7GSR0(reg_value,select);	      
            `DX7GSR1:set_cov_DX7GSR1(reg_value,select);	                        
            `DX7MDLR:set_cov_DX7MDLR(reg_value,select);
            `DX7GSR2:set_cov_DX7GSR2(reg_value,select);      
           			           	        
            `DX8GSR0:set_cov_DX8GSR0(reg_value,select);	         
            `DX8GSR1:set_cov_DX8GSR1(reg_value,select);	                           
            `DX8MDLR:set_cov_DX8MDLR(reg_value,select);                
            `DX8GSR2:set_cov_DX8GSR2(reg_value,select);      
        
      endcase // case (reg_addr)
         
`endif //  `ifdef FUNCOV
    end   
      
   endtask // endtask

   

//--------------------------------------------
// Task to set read coverage on all registers
//--------------------------------------------
   task set_cov_registers_read;       
      input [`REG_ADDR_WIDTH-1:0] reg_addr;   
    begin
`ifdef FUNCOV   
      case(reg_addr)
            `RIDR:      reg_name = RIDR_REG;        
            `PIR:       reg_name = PIR_REG;        
            `PGCR0:     reg_name = PGCR0_REG;     
            `PGCR1:     reg_name = PGCR1_REG;       
            `PGSR0:     reg_name = PGSR0_REG;       
            `PGSR1:     reg_name = PGSR1_REG;       
            `PLLCR:     reg_name = PLLCR_REG;   
            `PTR0:      reg_name = PTR0_REG;
            `PTR1:      reg_name = PTR1_REG;
            `PTR2:      reg_name = PTR2_REG;
            `PTR3:      reg_name = PTR3_REG;
            `PTR4:      reg_name = PTR4_REG;
        
            `ACMDLR:    reg_name = ACMDLR_REG;
            `ACBDLR:    reg_name = ACBDLR_REG;
            `ACIOCR:    reg_name = ACIOCR_REG;
            `DXCCR:		  reg_name = DXCCR_REG;
            `DSGCR:     reg_name = DSGCR_REG;
            `DCR:       reg_name = DCR_REG;
            `DTPR0:     reg_name = DTPR0_REG;
            `DTPR1:     reg_name = DTPR1_REG;
            `DTPR2:     reg_name = DTPR2_REG;

            `MR0:       reg_name = MR0_REG;
            `MR1:       reg_name = MR1_REG;
            `MR2:       reg_name = MR2_REG;
            `MR3:       reg_name = MR3_REG;
            `ODTCR:     reg_name = ODTCR_REG;
            `DTCR:      reg_name = DTCR_REG;
            `DTAR0:     reg_name = DTAR0_REG;
            `DTAR1:     reg_name = DTAR1_REG;
            `DTAR2:     reg_name = DTAR2_REG;
            `DTDR0:     reg_name = DTDR0_REG;
            `DTDR1:     reg_name = DTDR1_REG;
            `DTEDR0:    reg_name = DTEDR0_REG;
            `DTEDR1:    reg_name = DTEDR1_REG;
        
            `PGCR2:     reg_name = PGCR2_REG;

            `RDIMMGCR0: reg_name = RDIMMGCR0_REG;
            `RDIMMGCR1: reg_name = RDIMMGCR1_REG;
            `RDIMMCR0:  reg_name = RDIMMCR0_REG;
            `RDIMMCR1:  reg_name = RDIMMCR1_REG;
        
            `DCUAR:     reg_name = DCUAR_REG;
            `DCUDR:     reg_name = DCUDR_REG;
            `DCURR:     reg_name = DCURR_REG;
            `DCULR:     reg_name = DCULR_REG;
            `DCUGCR:    reg_name = DCUGCR_REG;
            `DCUTPR:    reg_name = DCUTPR_REG;
            `DCUSR0:    reg_name = DCUSR0_REG;
            `DCUSR1:    reg_name = DCUSR1_REG;

            `BISTRR:    reg_name = BISTRR_REG;
            `BISTWCR:   reg_name = BISTWCR_REG;
            `BISTMSKR0: reg_name = BISTMSKR0_REG;
            `BISTMSKR1: reg_name = BISTMSKR1_REG;
            `BISTMSKR2: reg_name = BISTMSKR2_REG;
            `BISTLSR:   reg_name = BISTLSR_REG;
            `BISTAR0:   reg_name = BISTAR0_REG;
            `BISTAR1:   reg_name = BISTAR1_REG;
            `BISTAR2:   reg_name = BISTAR2_REG;
            `BISTUDPR:  reg_name = BISTUDPR_REG;
            `BISTGSR:   reg_name = BISTGSR_REG;
            `BISTWER:   reg_name = BISTWER_REG;
            `BISTBER0:  reg_name = BISTBER0_REG;
            `BISTBER1:  reg_name = BISTBER1_REG;
            `BISTBER2:  reg_name = BISTBER2_REG;
            `BISTBER3:  reg_name = BISTBER3_REG;
            `BISTWCSR:  reg_name = BISTWCSR_REG;
            `BISTFWR0:  reg_name = BISTFWR0_REG;
            `BISTFWR1:  reg_name = BISTFWR1_REG;
            `BISTFWR2:  reg_name = BISTFWR2_REG;

            `GPR0:      reg_name = GPR0_REG;
            `GPR1:      reg_name = GPR1_REG;
            `ZQ0CR0:    reg_name = ZQ0CR0_REG;
            `ZQ0CR1:    reg_name = ZQ0CR1_REG;
            `ZQ0SR0:    reg_name = ZQ0SR0_REG;
            `ZQ0SR1:    reg_name = ZQ0SR1_REG;
            `ZQ1CR0:    reg_name = ZQ1CR0_REG;
            `ZQ1CR1:    reg_name = ZQ1CR1_REG;
            `ZQ1SR0:    reg_name = ZQ1SR0_REG;
            `ZQ1SR1:    reg_name = ZQ1SR1_REG;
            `ZQ2CR0:    reg_name = ZQ2CR0_REG;
            `ZQ2CR1:    reg_name = ZQ2CR1_REG;
            `ZQ2SR0:    reg_name = ZQ2SR0_REG;
            `ZQ2SR1:    reg_name = ZQ2SR1_REG;
            `ZQ3CR0:    reg_name = ZQ3CR0_REG;
            `ZQ3CR1:    reg_name = ZQ3CR1_REG;
            `ZQ3SR0:    reg_name = ZQ3SR0_REG;
            `ZQ3SR1:    reg_name = ZQ3SR1_REG;

            `DX0GCR:    reg_name = DX0GCR_REG;
            `DX0GSR0:   reg_name = DX0GSR0_REG;
            `DX0GSR1:   reg_name = DX0GSR1_REG;
            `DX0BDLR0:  reg_name = DX0BDLR0_REG;
            `DX0BDLR1:  reg_name = DX0BDLR1_REG;     
            `DX0BDLR2:  reg_name = DX0BDLR2_REG; 
            `DX0BDLR3:  reg_name = DX0BDLR3_REG;  
            `DX0BDLR4:  reg_name = DX0BDLR4_REG; 
            `DX0LCDLR0: reg_name = DX0LCDLR0_REG;
            `DX0LCDLR1: reg_name = DX0LCDLR1_REG; 
            `DX0LCDLR2: reg_name = DX0LCDLR2_REG;     
            `DX0MDLR:   reg_name = DX0MDLR_REG;		           
            `DX0GTR:    reg_name = DX0GTR_REG;
            `DX0GSR2:   reg_name = DX0GSR2_REG;

            `DX1GCR:    reg_name = DX1GCR_REG;
            `DX1GSR0:   reg_name = DX1GSR0_REG;
            `DX1GSR1:   reg_name = DX1GSR1_REG;
            `DX1BDLR0:  reg_name = DX1BDLR0_REG;
            `DX1BDLR1:  reg_name = DX1BDLR1_REG;     
            `DX1BDLR2:  reg_name = DX1BDLR2_REG; 
            `DX1BDLR3:  reg_name = DX1BDLR3_REG;  
            `DX1BDLR4:  reg_name = DX1BDLR4_REG; 
            `DX1LCDLR0: reg_name = DX1LCDLR0_REG;
            `DX1LCDLR1: reg_name = DX1LCDLR1_REG; 
            `DX1LCDLR2: reg_name = DX1LCDLR2_REG;     
            `DX1MDLR:   reg_name = DX1MDLR_REG;		
            `DX1GTR:    reg_name = DX1GTR_REG;
            `DX1GSR2:   reg_name = DX1GSR2_REG;

            `DX2GCR:    reg_name = DX2GCR_REG;
            `DX2GSR0:   reg_name = DX2GSR0_REG;
            `DX2GSR1:   reg_name = DX2GSR1_REG;
            `DX2BDLR0:  reg_name = DX2BDLR0_REG;
            `DX2BDLR1:  reg_name = DX2BDLR1_REG;     
            `DX2BDLR2:  reg_name = DX2BDLR2_REG; 
            `DX2BDLR3:  reg_name = DX2BDLR3_REG;  
            `DX2BDLR4:  reg_name = DX2BDLR4_REG; 
            `DX2LCDLR0: reg_name = DX2LCDLR0_REG;
            `DX2LCDLR1: reg_name = DX2LCDLR1_REG; 
            `DX2LCDLR2: reg_name = DX2LCDLR2_REG;     
            `DX2MDLR:   reg_name = DX2MDLR_REG;		
            `DX2GTR:    reg_name = DX2GTR_REG;
            `DX2GSR2:   reg_name = DX2GSR2_REG;

            `DX3GCR:    reg_name = DX3GCR_REG;
            `DX3GSR0:   reg_name = DX3GSR0_REG;
            `DX3GSR1:   reg_name = DX3GSR1_REG;
            `DX3BDLR0:  reg_name = DX3BDLR0_REG;
            `DX3BDLR1:  reg_name = DX3BDLR1_REG;     
            `DX3BDLR2:  reg_name = DX3BDLR2_REG; 
            `DX3BDLR3:  reg_name = DX3BDLR3_REG;  
            `DX3BDLR4:  reg_name = DX3BDLR4_REG; 
            `DX3LCDLR0: reg_name = DX3LCDLR0_REG;
            `DX3LCDLR1: reg_name = DX3LCDLR1_REG; 
            `DX3LCDLR2: reg_name = DX3LCDLR2_REG;     
            `DX3MDLR:   reg_name = DX3MDLR_REG;		
            `DX3GTR:    reg_name = DX3GTR_REG;
            `DX3GSR2:   reg_name = DX3GSR2_REG;

            `DX4GCR:    reg_name = DX4GCR_REG;
            `DX4GSR0:   reg_name = DX4GSR0_REG;
            `DX4GSR1:   reg_name = DX4GSR1_REG;
            `DX4BDLR0:  reg_name = DX4BDLR0_REG;
            `DX4BDLR1:  reg_name = DX4BDLR1_REG;     
            `DX4BDLR2:  reg_name = DX4BDLR2_REG; 
            `DX4BDLR3:  reg_name = DX4BDLR3_REG;  
            `DX4BDLR4:  reg_name = DX4BDLR4_REG; 
            `DX4LCDLR0: reg_name = DX4LCDLR0_REG;
            `DX4LCDLR1: reg_name = DX4LCDLR1_REG; 
            `DX4LCDLR2: reg_name = DX4LCDLR2_REG;     
            `DX4MDLR:   reg_name = DX4MDLR_REG;		
            `DX4GTR:    reg_name = DX4GTR_REG;
            `DX4GSR2:   reg_name = DX4GSR2_REG;

            `DX5GCR:    reg_name = DX5GCR_REG;
            `DX5GSR0:   reg_name = DX5GSR0_REG;
            `DX5GSR1:   reg_name = DX5GSR1_REG;
            `DX5BDLR0:  reg_name = DX5BDLR0_REG;
            `DX5BDLR1:  reg_name = DX5BDLR1_REG;     
            `DX5BDLR2:  reg_name = DX5BDLR2_REG; 
            `DX5BDLR3:  reg_name = DX5BDLR3_REG;  
            `DX5BDLR4:  reg_name = DX5BDLR4_REG; 
            `DX5LCDLR0: reg_name = DX5LCDLR0_REG;
            `DX5LCDLR1: reg_name = DX5LCDLR1_REG; 
            `DX5LCDLR2: reg_name = DX5LCDLR2_REG;     
            `DX5MDLR:   reg_name = DX5MDLR_REG;		
            `DX5GTR:    reg_name = DX5GTR_REG;
            `DX5GSR2:   reg_name = DX5GSR2_REG;

            `DX6GCR:    reg_name = DX6GCR_REG;
            `DX6GSR0:   reg_name = DX6GSR0_REG;
            `DX6GSR1:   reg_name = DX6GSR1_REG;
            `DX6BDLR0:  reg_name = DX6BDLR0_REG;
            `DX6BDLR1:  reg_name = DX6BDLR1_REG;     
            `DX6BDLR2:  reg_name = DX6BDLR2_REG; 
            `DX6BDLR3:  reg_name = DX6BDLR3_REG;  
            `DX6BDLR4:  reg_name = DX6BDLR4_REG; 
            `DX6LCDLR0: reg_name = DX6LCDLR0_REG;
            `DX6LCDLR1: reg_name = DX6LCDLR1_REG; 
            `DX6LCDLR2: reg_name = DX6LCDLR2_REG;     
            `DX6MDLR:   reg_name = DX6MDLR_REG;		
            `DX6GTR:    reg_name = DX6GTR_REG;
            `DX6GSR2:   reg_name = DX6GSR2_REG;

            `DX7GCR:    reg_name = DX7GCR_REG;
            `DX7GSR0:   reg_name = DX7GSR0_REG;
            `DX7GSR1:   reg_name = DX7GSR1_REG;
            `DX7BDLR0:  reg_name = DX7BDLR0_REG;
            `DX7BDLR1:  reg_name = DX7BDLR1_REG;     
            `DX7BDLR2:  reg_name = DX7BDLR2_REG; 
            `DX7BDLR3:  reg_name = DX7BDLR3_REG;  
            `DX7BDLR4:  reg_name = DX7BDLR4_REG; 
            `DX7LCDLR0: reg_name = DX7LCDLR0_REG;
            `DX7LCDLR1: reg_name = DX7LCDLR1_REG; 
            `DX7LCDLR2: reg_name = DX7LCDLR2_REG;     
            `DX7MDLR:   reg_name = DX7MDLR_REG;		       
            `DX7GTR:    reg_name = DX7GTR_REG;
            `DX7GSR2:   reg_name = DX7GSR2_REG;

            `DX8GCR:    reg_name = DX8GCR_REG;
            `DX8GSR0:   reg_name = DX8GSR0_REG;
            `DX8GSR1:   reg_name = DX8GSR1_REG;
            `DX8BDLR0:  reg_name = DX8BDLR0_REG;
            `DX8BDLR1:  reg_name = DX8BDLR1_REG;     
            `DX8BDLR2:  reg_name = DX8BDLR2_REG; 
            `DX8BDLR3:  reg_name = DX8BDLR3_REG;  
            `DX8BDLR4:  reg_name = DX8BDLR4_REG; 
            `DX8LCDLR0: reg_name = DX8LCDLR0_REG;
            `DX8LCDLR1: reg_name = DX8LCDLR1_REG; 
            `DX8LCDLR2: reg_name = DX8LCDLR2_REG;     
            `DX8MDLR:   reg_name = DX8MDLR_REG;
            `DX8GTR:    reg_name = DX8GTR_REG;
            `DX8GSR2:   reg_name = DX8GSR2_REG;

            `RESERVED_36	 : reg_name =  RESERVED_36_REG;	              
            `RESERVED_37	 : reg_name =  RESERVED_37_REG;	             
            `RESERVED_38	 : reg_name =  RESERVED_38_REG;	            
            `RESERVED_39	 : reg_name =  RESERVED_39_REG;	             
            `RESERVED_40	 : reg_name =  RESERVED_40_REG;	            
            `RESERVED_41	 : reg_name =  RESERVED_41_REG;	              
            `RESERVED_42	 : reg_name =  RESERVED_42_REG;	             
            `RESERVED_43	 : reg_name =  RESERVED_43_REG;	            

            `RESERVED_56	 : reg_name =  RESERVED_56_REG;	            
            `RESERVED_57	 : reg_name =  RESERVED_57_REG;	             
            `RESERVED_58	 : reg_name =  RESERVED_58_REG;	            
            `RESERVED_59	 : reg_name =  RESERVED_59_REG;	             
            `RESERVED_60	 : reg_name =  RESERVED_60_REG;	            
            `RESERVED_61	 : reg_name =  RESERVED_61_REG;	             
            `RESERVED_62	 : reg_name =  RESERVED_62_REG;	            
            `RESERVED_63	 : reg_name =  RESERVED_63_REG;	           

            `RESERVED_84	 : reg_name =  RESERVED_84_REG;	            
            `RESERVED_85	 : reg_name =  RESERVED_85_REG;	          
            `RESERVED_86	 : reg_name =  RESERVED_86_REG;	            
            `RESERVED_87	 : reg_name =  RESERVED_87_REG;	             
            `RESERVED_88	 : reg_name =  RESERVED_88_REG;	            
            `RESERVED_89	 : reg_name =  RESERVED_89_REG;	            
            `RESERVED_90	 : reg_name =  RESERVED_90_REG;	            
            `RESERVED_91	 : reg_name =  RESERVED_91_REG;	            
            `RESERVED_92	 : reg_name =  RESERVED_92_REG;	              
            `RESERVED_93	 : reg_name =  RESERVED_93_REG;	             
            //`RESERVED_94	 : reg_name =  RESERVED_94_REG;	           
            //`RESERVED_95	 : reg_name =  RESERVED_95_REG;	             

            `RESERVED_126	 : reg_name =  RESERVED_126_REG;            
            `RESERVED_127	 : reg_name =  RESERVED_127_REG;             

            `RESERVED_142  : reg_name =  RESERVED_142_REG;            
            `RESERVED_143	 : reg_name =  RESERVED_143_REG;             

            `RESERVED_158  : reg_name =  RESERVED_158_REG;           
            `RESERVED_159  : reg_name =  RESERVED_159_REG;           

            `RESERVED_174	 : reg_name =  RESERVED_174_REG;           
            `RESERVED_175	 : reg_name =  RESERVED_175_REG;             

            `RESERVED_190  : reg_name =  RESERVED_190_REG;             
            `RESERVED_191  : reg_name =  RESERVED_191_REG;            

            `RESERVED_206  : reg_name =  RESERVED_206_REG;             
            `RESERVED_207  : reg_name =  RESERVED_207_REG;            

            `RESERVED_222  : reg_name =  RESERVED_222_REG;            
            `RESERVED_223	 : reg_name =  RESERVED_223_REG;            

            `RESERVED_238	 : reg_name =  RESERVED_238_REG;             
            `RESERVED_239	 : reg_name =  RESERVED_239_REG;            

            `RESERVED_254  : reg_name =  RESERVED_254_REG;             
            `RESERVED_255  : reg_name =  RESERVED_255_REG;      
        
      endcase // case (reg_addr)

             register_read_accesscov.sample();       
              
`endif //  `ifdef FUNCOV
    end   
      
   endtask // set_cov_registers_read
   
  
//--------------------------------------------
// Task to set coverage on the RIDR
//--------------------------------------------
   task set_cov_RIDR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_RIDR(reg_value,select);  
      sample_cov_RIDR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register RIDR  
//--------------------------------------------
   task unpack_RIDR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin         
         PUBMNR_3_0       = reg_value[3:0];
         PUBMDR_7_4       = reg_value[7:4];
         PUBMJR_11_8      = reg_value[11:8];
         PHYMNR_15_12     = reg_value[15:12];
         PHYMDR_19_16     = reg_value[19:16];
         PHYMJR_23_20     = reg_value[23:20];
         UDRID_31_24      = reg_value[31:24];
      end       
      1:begin         
         PUBMNR_3_0_T       = reg_value[3:0];
         PUBMDR_7_4_T       = reg_value[7:4];
         PUBMJR_11_8_T      = reg_value[11:8];
         PHYMNR_15_12_T     = reg_value[15:12];
         PHYMDR_19_16_T     = reg_value[19:16];
         PHYMJR_23_20_T     = reg_value[23:20];
         UDRID_31_24_T      = reg_value[31:24];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_RIDR   

   
//--------------------------------------------   
// Task to sample the register RIDR  
//--------------------------------------------
   task sample_cov_RIDR_param;
    begin  
`ifdef FUNCOV   
     RIDRcov.sample();    
`endif
    end   
   endtask // sample_cov_RIDR_param


//--------------------------------------------
// Task to set coverage on the PIR
//--------------------------------------------
   task set_cov_PIR;         
      input [31:0]       reg_value;
      input    [1:0]     select;   
    begin
`ifdef FUNCOV         
      unpack_PIR(reg_value,select);  
      sample_cov_PIR_param();     
`endif
    end          
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PIR
//--------------------------------------------
   task unpack_PIR;
      input [31:0]       reg_value;
      input    [1:0]     select;      
    begin 
`ifdef FUNCOV
     case(select)
      0:begin 
         PHYINIT_0        = reg_value[0];
         ZCAL_1           = reg_value[1];              
         //PIR_RESERVED_3_2	= reg_value[3:2];  
         PLLINIT_4				= reg_value[4];           
         DCAL_5           = reg_value[5];              
         PHYRST_6         = reg_value[6];            
         DRAMRST_7				= reg_value[7];           
         DRAMINIT_8				= reg_value[8];          
         WL_9             = reg_value[9];                
         QSGATE_10				= reg_value[10];           
         WLADJ_11         = reg_value[11];            
         RDDSKW_12				= reg_value[12];           
         WRDSKW_13				= reg_value[13];           
         RDEYE_14					= reg_value[14];            
         WREYE_15					= reg_value[15];            
         ICPC_16					= reg_value[16];             
         PLLBYP_17				= reg_value[17];           
         CTLDINIT_18			= reg_value[18];    
         RDIMMINIT_19     = reg_value[19];
         //PIR_RESERVED_26_20		 = reg_value[26:20];
         CLRSR_27				  = reg_value[27];            
         LOCKBYP_28				= reg_value[28];          
         DCALBYP_29				= reg_value[29];          
         ZCALBYP_30				= reg_value[30];          
         INITBYP_31				= reg_value[31];          
      end // case: 0       
      1:begin
         PHYINIT_0_T        = reg_value[0];
         ZCAL_1_T           = reg_value[1];              
         PIR_RESERVED_3_2_T	= reg_value[3:2];  
         PLLINIT_4_T				= reg_value[4];           
         DCAL_5_T           = reg_value[5];              
         PHYRST_6_T         = reg_value[6];            
         DRAMRST_7_T				= reg_value[7];           
         DRAMINIT_8_T				= reg_value[8];          
         WL_9_T             = reg_value[9];                
         QSGATE_10_T				= reg_value[10];           
         WLADJ_11_T         = reg_value[11];            
         RDDSKW_12_T				= reg_value[12];           
         WRDSKW_13_T				= reg_value[13];           
         RDEYE_14_T					= reg_value[14];            
         WREYE_15_T					= reg_value[15];            
         ICPC_16_T					= reg_value[16];             
         PLLBYP_17_T				= reg_value[17];           
         CTLDINIT_18_T			= reg_value[18];         
         RDIMMINIT_19_T     = reg_value[19];
         PIR_RESERVED_26_20_T		 = reg_value[26:20];
         CLRSR_27_T				  = reg_value[27];            
         LOCKBYP_28_T				= reg_value[28];          
         DCALBYP_29_T				= reg_value[29];          
         ZCALBYP_30_T				= reg_value[30];          
         INITBYP_31_T				= reg_value[31];     
      end // case: 1       
     endcase // case (select)       
   
`endif //  `ifdef FUNCOV
    end   
   endtask // unpack_PIR

   
//--------------------------------------------   
// Task to sample the register PIR
//--------------------------------------------
   task sample_cov_PIR_param;
    begin 
`ifdef FUNCOV   
     PIRcov.sample();      
`endif
    end 
   endtask // sample_cov_PIR_param

   
//--------------------------------------------
// Task to set coverage on the PGCR0
//--------------------------------------------
   task set_cov_PGCR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin
`ifdef FUNCOV   
      unpack_PGCR0(reg_value,select);  
      sample_cov_PGCR0_param();     
`endif
    end   
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PGCR0  
//--------------------------------------------
   task unpack_PGCR0;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV  
     case(select)
      0:begin      
         WLLVT_0 					= reg_value[0];      
         WDLVT_1 					= reg_value[1];
         RDLVT_2 					= reg_value[2];
         RGLVT_3 					= reg_value[3];
         WDBVT_4 					= reg_value[4];
         RDBVT_5 					= reg_value[5];
         DLTMODE_6        = reg_value[6];
         DLTST_7          = reg_value[7];
         OSCEN_8          = reg_value[8];
         OSCDIV_11_9      = reg_value[11:9];
         OSCWDL_13_12 		= reg_value[13:12];
         DTOSEL_18_14 		= reg_value[18:14];
         //PGCR0_RESERVED_25_19   = reg_value[25:19];
         CKEN_31_26       = reg_value[31:26];  
      end // case: 0
      1:begin      
         WLLVT_0_T 					= reg_value[0];      
         WDLVT_1_T 					= reg_value[1];
         RDLVT_2_T 					= reg_value[2];
         RGLVT_3_T 					= reg_value[3];
         WDBVT_4_T 					= reg_value[4];
         RDBVT_5_T 					= reg_value[5];
         DLTMODE_6_T        = reg_value[6];
         DLTST_7_T          = reg_value[7];
         OSCEN_8_T          = reg_value[8];
         OSCDIV_11_9_T      = reg_value[11:9];
         OSCWDL_13_12_T 		= reg_value[13:12];
         DTOSEL_18_14_T 		= reg_value[18:14];
         PGCR0_RESERVED_25_19_T   = reg_value[25:19];
         CKEN_31_26_T       = reg_value[31:26];  
      end // case: 1       
     endcase
              
`endif //  `ifdef FUNCOV
    end   
   endtask // unpack_PGCR0   

   
//--------------------------------------------   
// Task to sample the register PGCR0  
//--------------------------------------------
   task sample_cov_PGCR0_param;
    begin 
`ifdef FUNCOV   
     PGCR0cov.sample();    
`endif
    end   
   endtask // sample_cov_PGCR0_param
   

   
//--------------------------------------------
// Task to set coverage on the PGCR1
//--------------------------------------------
   task set_cov_PGCR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin
`ifdef FUNCOV   
      unpack_PGCR1(reg_value,select);  
      sample_cov_PGCR1_param();   
`endif        
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PGCR1  
//--------------------------------------------
   task unpack_PGCR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin
`ifdef FUNCOV
     case(select)
      0:begin
         PDDISDX_0				= reg_value[0];      
         WLMODE_1         = reg_value[1];       
         WLSTEP_2         = reg_value[2];       
         WLUNCRT_3				= reg_value[3];
         //PGCR1_RESERVED_5_4	 = reg_value[5:4];     
         WLSELT_6         = reg_value[6];       
         IODDRM_8_7				= reg_value[8:7];     
         MDLEN_9          = reg_value[9];        
         LPFEN_10         = reg_value[10];       
         LPFDEPTH_12_11	 	= reg_value[12:11]; 
         FDEPTH_14_13			= reg_value[14:13];   
         DLDLMT_22_15			= reg_value[22:15];   
         ZCKSEL_24_23			= reg_value[24:23];   
         PHYHRST_25				= reg_value[25];     
         INHVT_26         = reg_value[26];       
         IOLB_27          = reg_value[27];        
         LBDQSS_28				= reg_value[28];      
         LBGDQS_30_29			= reg_value[30:29];   
         LBMODE_31				= reg_value[31];      
      end
      1:begin            
         PDDISDX_0_T				= reg_value[0];      
         WLMODE_1_T         = reg_value[1];       
         WLSTEP_2_T         = reg_value[2];       
         WLUNCRT_3_T				= reg_value[3];
         PGCR1_RESERVED_5_4_T				= reg_value[5:4];     
         WLSELT_6_T         = reg_value[6];       
         IODDRM_8_7_T				= reg_value[8:7];     
         MDLEN_9_T          = reg_value[9];        
         LPFEN_10_T         = reg_value[10];       
         LPFDEPTH_12_11_T		= reg_value[12:11]; 
         FDEPTH_14_13_T			= reg_value[14:13];   
         DLDLMT_22_15_T			= reg_value[22:15];   
         ZCKSEL_24_23_T			= reg_value[24:23];   
         PHYHRST_25_T				= reg_value[25];     
         INHVT_26_T         = reg_value[26];       
         IOLB_27_T          = reg_value[27];        
         LBDQSS_28_T				= reg_value[28];      
         LBGDQS_30_29_T			= reg_value[30:29];   
         LBMODE_31_T				= reg_value[31];      
      end
     endcase // case (select)
       
`endif
    end   
   endtask // unpack_PGCR1   

   
//--------------------------------------------   
// Task to sample the register PGCR1  
//--------------------------------------------
   task sample_cov_PGCR1_param;
    begin 
`ifdef FUNCOV   
     PGCR1cov.sample();     
`endif
    end   
   endtask // sample_cov_PGCR1_param


//--------------------------------------------
// Task to set coverage on the PGCR2
//--------------------------------------------
   task set_cov_PGCR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin
`ifdef FUNCOV   
      unpack_PGCR2(reg_value,select);  
      sample_cov_PGCR2_param();   
`endif        
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PGCR2  
//--------------------------------------------
   task unpack_PGCR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin
`ifdef FUNCOV
     case(select)
      0:begin
         tREFPRD_17_0			= reg_value[17:0];    
         NOBUB_18   			= reg_value[18];    
         FXDLAT_19  			= reg_value[19];    
         //PGCR2_RESERVED_31_20	 = reg_value[31:20];     
      end
      1:begin            
         tREFPRD_17_0_T			= reg_value[17:0];      
         NOBUB_18_T   			= reg_value[18];    
         FXDLAT_19_T  			= reg_value[19];    
         PGCR2_RESERVED_31_20_T	 = reg_value[31:20];     
      end
     endcase // case (select)
       
`endif
    end   
   endtask // unpack_PGCR2   

   
//--------------------------------------------   
// Task to sample the register PGCR2  
//--------------------------------------------
   task sample_cov_PGCR2_param;
    begin 
`ifdef FUNCOV   
     PGCR2cov.sample();     
`endif
    end   
   endtask // sample_cov_PGCR2_param


//--------------------------------------------
// Task to set coverage on the PGSR0
//--------------------------------------------
   task set_cov_PGSR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin
`ifdef FUNCOV   
      unpack_PGSR0(reg_value,select);  
      sample_cov_PGSR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PGSR0  
//--------------------------------------------
   task unpack_PGSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
     case(select)
      0:begin             
         IDONE_0					= reg_value[0];      
         PLDONE_1					= reg_value[1];     
         DCDONE_2					= reg_value[2];     
         ZCDONE_3					= reg_value[3];     
         DIDONE_4					= reg_value[4];     
         WLDONE_5					= reg_value[5];     
         QSGDONE_6				= reg_value[6];    
         WLADONE_7				= reg_value[7];    
         RDDONE_8					= reg_value[8];     
         WDDONE_9					= reg_value[9];     
         REDONE_10			 	= reg_value[10];    
         WEDONE_11			 	= reg_value[11];    
         //PGSR0_RESERVED_19_12				= reg_value[19:12];
         ZCERR_20					= reg_value[20];     
         WLERR_21					= reg_value[21];     
         QSGERR_22			 	= reg_value[22];    
         WLAERR_23			 	= reg_value[23];    
         RDERR_24					= reg_value[24];     
         WDERR_25					= reg_value[25];     
         REERR_26					= reg_value[26];     
         WEERR_27					= reg_value[27];     
         //PGSR0_RESERVED_30_28			= reg_value[30:28];  
         APLOCK_31				= reg_value[31];    
      end                             
      1:begin                         
         IDONE_0_T					= reg_value[0];      
         PLDONE_1_T					= reg_value[1];     
         DCDONE_2_T					= reg_value[2];     
         ZCDONE_3_T					= reg_value[3];     
         DIDONE_4_T					= reg_value[4];     
         WLDONE_5_T					= reg_value[5];     
         QSGDONE_6_T				= reg_value[6];    
         WLADONE_7_T				= reg_value[7];    
         RDDONE_8_T					= reg_value[8];     
         WDDONE_9_T					= reg_value[9];     
         REDONE_10_T			 	= reg_value[10];    
         WEDONE_11_T			 	= reg_value[11];    
         PGSR0_RESERVED_19_12_T				= reg_value[19:12];
         ZCERR_20_T					= reg_value[20];     
         WLERR_21_T					= reg_value[21];     
         QSGERR_22_T				= reg_value[22];    
         WLAERR_23_T		 		= reg_value[23];    
         RDERR_24_T					= reg_value[24];     
         WDERR_25_T					= reg_value[25];     
         REERR_26_T					= reg_value[26];     
         WEERR_27_T					= reg_value[27];     
         PGSR0_RESERVED_30_28_T			= reg_value[30:28];  
         APLOCK_31_T			 	= reg_value[31];
        end
     endcase       
`endif
    end   
   endtask // unpack_PGSR0   

   
//--------------------------------------------   
// Task to sample the register PGSR0  
//--------------------------------------------
   task sample_cov_PGSR0_param;
    begin   
`ifdef FUNCOV   
     PGSR0cov.sample();    
`endif
    end   
   endtask // sample_cov_PGSR0_param


//--------------------------------------------
// Task to set coverage on the PGSR1
//--------------------------------------------
   task set_cov_PGSR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PGSR1(reg_value,select);  
      sample_cov_PGSR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PGSR1  
//--------------------------------------------
   task unpack_PGSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
         DLTDONE_0        = reg_value[0];
         DLTCODE_24_1     = reg_value[24:1];
         //PGSR1_RESERVED_29_25 = reg_value[29:25];
         VTSTOP_30        = reg_value[30];
         PARERR_31        = reg_value[31];
      end
      1:begin            
         DLTDONE_0_T        = reg_value[0];
         DLTCODE_24_1_T     = reg_value[24:1];
         PGSR1_RESERVED_29_25_T = reg_value[29:25];
         VTSTOP_30_T        = reg_value[30];
         PARERR_31_T        = reg_value[31];
      end
     endcase 
`endif
    end   
   endtask // unpack_PGSR1

   
//--------------------------------------------   
// Task to sample the register PGSR1  
//--------------------------------------------
   task sample_cov_PGSR1_param;
    begin       
`ifdef FUNCOV   
     PGSR1cov.sample();       
`endif
    end       
   endtask // sample_cov_PGSR1_param
   
   
//--------------------------------------------
// Task to set coverage on the PLLCR
//--------------------------------------------
   task set_cov_PLLCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PLLCR(reg_value,select);  
      sample_cov_PLLCR_param();
`endif
    end   
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PLLCR  
//--------------------------------------------
   task unpack_PLLCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV
    case(select)
      0:begin         
         DTC_1_0          = reg_value[1:0];
         ATC_5_2          = reg_value[5:2];   
         ATOEN_9_6        = reg_value[9:6];
         GSHIFT_10        = reg_value[10];
         CPIC_12_11       = reg_value[12:11];
         CPPC_16_13       = reg_value[16:13];
         QPMODE_17        = reg_value[17];
         FRQSEL_19_18     = reg_value[19:18];
         //PLLCR_RESERVED_30_19 = reg_value[28:20];
         PLLPD_29         = reg_value[29]; 
         PLLRST_30        = reg_value[30];
         BYP_31           = reg_value[31];
      end // case: 0
      1:begin         
         DTC_1_0_T          = reg_value[1:0];
         ATC_5_2_T          = reg_value[5:2];   
         ATOEN_9_6_T        = reg_value[9:6];
         GSHIFT_10_T        = reg_value[10];
         CPIC_12_11_T       = reg_value[12:11];
         CPPC_16_13_T       = reg_value[16:13];
         QPMODE_17_T        = reg_value[17];
         FRQSEL_19_18_T        = reg_value[19:18];
         PLLCR_RESERVED_28_20_T = reg_value[28:20];
         PLLPD_29_T         = reg_value[29]; 
         PLLRST_30_T        = reg_value[30];
         BYP_31_T           = reg_value[31];
      end // case: 1   
     endcase    
`endif
           
    end      
   endtask // unpack_PLLCR   

   
//--------------------------------------------   
// Task to sample the register PLLCR  
//--------------------------------------------
   task sample_cov_PLLCR_param;
    begin       
`ifdef FUNCOV   
     PLLCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_PLLCR_param
   


//--------------------------------------------
// Task to set coverage on the PTR0
//--------------------------------------------
   task set_cov_PTR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PTR0(reg_value,select);  
      sample_cov_PTR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PTR0
//--------------------------------------------
   task unpack_PTR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV
    case(select)
      0:begin         
         tPHYRST_5_0 			= reg_value[5:0];
         tPLLGS_20_6 			= reg_value[20:6];   
         tPLLPD_31_21		  = reg_value[31:21];
      end
      1:begin         
         tPHYRST_5_0_T      = reg_value[5:0];
         tPLLGS_20_6_T      = reg_value[20:6];   
         tPLLPD_31_21_T     = reg_value[31:21];
      end
    endcase // case (select)        
`endif
           
    end      
   endtask // unpack_PTR0   

   
//--------------------------------------------   
// Task to sample the register PTR0
//--------------------------------------------
   task sample_cov_PTR0_param;
    begin  
`ifdef FUNCOV   
     PTR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_PTR0_param
   
   

//--------------------------------------------
// Task to set coverage on the PTR1
//--------------------------------------------
   task set_cov_PTR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PTR1(reg_value,select);  
      sample_cov_PTR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PTR1
//--------------------------------------------
   task unpack_PTR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV
    case(select)
      0:begin         
         tPLLRST_12_0 = reg_value[12:0];
         //PTR1_RESERVED_14_13 = reg_value[14:13];   
         tPLLLOCK_31_15 = reg_value[31:15];
      end
      1:begin         
         tPLLRST_12_0_T = reg_value[12:0];
         PTR1_RESERVED_14_13_T = reg_value[14:13];   
         tPLLLOCK_31_15_T = reg_value[31:15];
      end
     endcase      
`endif
           
    end      
   endtask // unpack_PTR1   

   
//--------------------------------------------   
// Task to sample the register PTR1
//--------------------------------------------
   task sample_cov_PTR1_param;
    begin  
`ifdef FUNCOV   
     PTR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_PTR1_param

//--------------------------------------------
// Task to set coverage on the PTR2
//--------------------------------------------
   task set_cov_PTR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PTR2(reg_value,select);  
      sample_cov_PTR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PTR2
//--------------------------------------------
   task unpack_PTR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV
    case(select)
      0:begin         
         tCALON_4_0       = reg_value[4:0];   
         tCALS_9_5        = reg_value[9:5];
         tCALH_14_10      = reg_value[14:10];   
         tWLDLYS_19_15    = reg_value[19:15];
         //PTR2_RESERVED_31_20 = reg_value[31:20];   
      end 
      1:begin         
         tCALON_4_0_T       = reg_value[4:0];   
         tCALS_9_5_T        = reg_value[9:5];
         tCALH_14_10_T      = reg_value[14:10];   
         tWLDLYS_19_15_T    = reg_value[19:15];
         PTR2_RESERVED_31_20_T = reg_value[31:20];   
      end
     endcase    
`endif
           
    end      
   endtask // unpack_PTR2   

   
//--------------------------------------------   
// Task to sample the register PTR2
//--------------------------------------------
   task sample_cov_PTR2_param;
    begin       
`ifdef FUNCOV   
     PTR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_PTR2_param
   
//--------------------------------------------
// Task to set coverage on the PTR3
//--------------------------------------------
   task set_cov_PTR3;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PTR3(reg_value,select);  
      sample_cov_PTR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PTR3
//--------------------------------------------
   task unpack_PTR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV
    case(select)
      0:begin         
         tDINIT0_19_0     = reg_value[19:0];   
         tDINIT1_28_20    = reg_value[28:20];
         //PTR3_RESERVED_31_29 = reg_value[31:29];   
      end 
      1:begin         
         tDINIT0_19_0_T     = reg_value[19:0];   
         tDINIT1_28_20_T    = reg_value[28:20];
         PTR3_RESERVED_31_29_T = reg_value[31:29];   
      end
     endcase    
`endif
           
    end      
   endtask // unpack_PTR3   

   
//--------------------------------------------   
// Task to sample the register PTR3
//--------------------------------------------
   task sample_cov_PTR3_param;
    begin       
`ifdef FUNCOV   
     PTR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_PTR3_param
   
//--------------------------------------------
// Task to set coverage on the PTR4
//--------------------------------------------
   task set_cov_PTR4;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_PTR4(reg_value,select);  
      sample_cov_PTR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register PTR4
//--------------------------------------------
   task unpack_PTR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV
    case(select)
      0:begin         
         tDINIT2_17_0     = reg_value[17:0];   
         tDINIT3_27_18    = reg_value[27:18];
         //PTR4_RESERVED_31_28 = reg_value[31:28];   
      end 
      1:begin         
         tDINIT2_17_0_T     = reg_value[17:0];   
         tDINIT3_27_18_T    = reg_value[27:18];
         PTR4_RESERVED_31_28_T = reg_value[31:28];   
      end
     endcase    
`endif
           
    end      
   endtask // unpack_PTR4   

   
//--------------------------------------------   
// Task to sample the register PTR4
//--------------------------------------------
   task sample_cov_PTR4_param;
    begin       
`ifdef FUNCOV   
     PTR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_PTR4_param
   

//--------------------------------------------
// Task to set coverage on the ACMDLR
//--------------------------------------------
   task set_cov_ACMDLR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ACMDLR(reg_value,select);  
      sample_cov_ACMDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ACMDLR
//--------------------------------------------
   task unpack_ACMDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV
    case(select)
      0:begin  
         IPRD_7_0         = reg_value[7:0];
         TPRD_15_8        = reg_value[15:8];
         MDLD_23_16       = reg_value[23:16];  
         //ACMDLR_RESERVED_31_24 = reg_value[31:24];      
      end
      1:begin  
         IPRD_7_0_T         = reg_value[7:0];
         TPRD_15_8_T        = reg_value[15:8];
         MDLD_23_16_T       = reg_value[23:16];  
         ACMDLR_RESERVED_31_24_T = reg_value[31:24];      
      end      
     endcase
`endif
           
    end      
   endtask // unpack_ACMDLR   

   
//--------------------------------------------   
// Task to sample the register ACMDLR
//--------------------------------------------
   task sample_cov_ACMDLR_param;
    begin       
`ifdef FUNCOV   
     ACMDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_ACMDLR_param    


//--------------------------------------------
// Task to set coverage on the ACBDLR
//--------------------------------------------
   task set_cov_ACBDLR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ACBDLR(reg_value,select);  
      sample_cov_ACBDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ACBDLR
//--------------------------------------------
   task unpack_ACBDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin  
         CK0BD_5_0 = reg_value[5:0];
         CK1BD_11_6 = reg_value[11:6];
         CK2BD_17_12 = reg_value[17:12];   
         ACBD_23_18 = reg_value[23:18];
         //ACBDLR_RESERVED_31_24 = reg_value[31:24];     
      end
      1:begin  
         CK0BD_5_0_T = reg_value[5:0];
         CK1BD_11_6_T = reg_value[11:6];
         CK2BD_17_12_T = reg_value[17:12];   
         ACBD_23_18_T = reg_value[23:18];
         ACBDLR_RESERVED_31_24_T = reg_value[31:24];     
      end
      2:begin  
         CK0BD_5_0_vt_drift = reg_value[5:0];
         CK1BD_11_6_vt_drift  = reg_value[11:6];
         CK2BD_17_12_vt_drift  = reg_value[17:12];   
         ACBD_23_18_vt_drift  = reg_value[23:18];
         CK0BD_5_0_vt_drift_wo_upd = reg_value[5:0];
         CK1BD_11_6_vt_drift_wo_upd  = reg_value[11:6];
         CK2BD_17_12_vt_drift_wo_upd  = reg_value[17:12];   
         ACBD_23_18_vt_drift_wo_upd  = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_ACBDLR   

   
//--------------------------------------------   
// Task to sample the register ACBDLR
//--------------------------------------------
   task sample_cov_ACBDLR_param;
    begin       
`ifdef FUNCOV   
     ACBDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_ACBDLR_param

   
//--------------------------------------------
// Task to set coverage on the ACIOCR
//--------------------------------------------
   task set_cov_ACIOCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ACIOCR(reg_value,select);  
      sample_cov_ACIOCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ACIOCR
//--------------------------------------------
   task unpack_ACIOCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin  
         ACIOM_0 					= reg_value[0];
         ACOE_1  					= reg_value[1];
         ACODT_2 					= reg_value[2];
         ACPDD_3 					= reg_value[3];
         ACPDR_4 					= reg_value[4];
         CKODT_7_5   			= reg_value[7:5];
         CKPDD_10_8  			= reg_value[10:8];
         CKPDR_13_11 			= reg_value[13:11];
         RANKODT_17_14    = reg_value[17:14];
         CSPDD_21_18      = reg_value[21:18];
         RANKPDR_25_22    = reg_value[25:22];
         RSTODT_26 				= reg_value[26];
         RSTPDD_27 				= reg_value[27];
         RSTPDR_28 				= reg_value[28];
         RSTIOM_29 				= reg_value[29];
         ACSR_31_30		  	= reg_value[31:30];   
      end
      1:begin  
         ACIOM_0_T          = reg_value[0];      
         ACOE_1_T           = reg_value[1];      
         ACODT_2_T          = reg_value[2];      
         ACPDD_3_T          = reg_value[3];      
         ACPDR_4_T          = reg_value[4];      
         CKODT_7_5_T        = reg_value[7:5];    
         CKPDD_10_8_T       = reg_value[10:8];   
         CKPDR_13_11_T      = reg_value[13:11];  
         RANKODT_17_14_T    = reg_value[17:14];  
         CSPDD_21_18_T      = reg_value[21:18];  
         RANKPDR_25_22_T    = reg_value[25:22];  
         RSTODT_26_T        = reg_value[26];     
         RSTPDD_27_T        = reg_value[27];     
         RSTPDR_28_T        = reg_value[28];     
         RSTIOM_29_T        = reg_value[29];     
         ACSR_31_30_T       = reg_value[31:30];  
      end
     endcase
`endif
           
    end      
   endtask // unpack_ACIOCR   

   
//--------------------------------------------   
// Task to sample the register ACIOCR
//--------------------------------------------
   task sample_cov_ACIOCR_param;
    begin       
`ifdef FUNCOV   
     ACIOCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_ACIOCR_param


//--------------------------------------------
// Task to set coverage on the DXCCR
//--------------------------------------------
   task set_cov_DXCCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DXCCR(reg_value,select);  
      sample_cov_DXCCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DXCCR
//--------------------------------------------
   task unpack_DXCCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         DXODT_0 					= reg_value[0];
         DXIOM_1 					= reg_value[1];
         MDLEN_2 					= reg_value[2];
         DXPDD_3 					= reg_value[3];
         DXPDR_4 					= reg_value[4];
         DQSRES_8_5       = reg_value[8:5];
         DQSNRES_12_9     = reg_value[12:9];
         DXSR_14_13       = reg_value[14:13];
         MSBUDQ_17_15     = reg_value[17:15];
         UDQODT_18        = reg_value[18];   
         UDQPDD_19        = reg_value[19];   
         UDQPDR_20        = reg_value[20];   
         UDQIOM_21        = reg_value[21];   
         DXCCR_RESERVED_31_22 = reg_value[31:22];         
      end
      1:begin 
         DXODT_0_T 					= reg_value[0];
         DXIOM_1_T 					= reg_value[1];
         MDLEN_2_T 					= reg_value[2];
         DXPDD_3_T 					= reg_value[3];
         DXPDR_4_T 					= reg_value[4];
         DQSRES_8_5_T       = reg_value[8:5];
         DQSNRES_12_9_T     = reg_value[12:9];
         DXSR_14_13_T       = reg_value[14:13];
         MSBUDQ_17_15_T     = reg_value[17:15];
         UDQODT_18_T        = reg_value[18];   
         UDQPDD_19_T        = reg_value[19];   
         UDQPDR_20_T        = reg_value[20];   
         UDQIOM_21_T        = reg_value[21];   
         DXCCR_RESERVED_31_22_T = reg_value[31:22];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DXCCR   

   
//--------------------------------------------   
// Task to sample the register DXCCR
//--------------------------------------------
   task sample_cov_DXCCR_param;
    begin       
`ifdef FUNCOV   
     DXCCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DXCCR_param
   


//--------------------------------------------
// Task to set coverage on the DSGCR
//--------------------------------------------
   task set_cov_DSGCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DSGCR(reg_value,select);
      sample_cov_DSGCR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DSGCR  
//--------------------------------------------
   task unpack_DSGCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin      
        PUREN_0       		= reg_value[0];            
        BDISEN_1      		= reg_value[1];           
        ZUEN_2        		= reg_value[2];             
        LPIOPD_3      		= reg_value[3];           
        LPPLLPD_4     		= reg_value[4];          
        CUAEN_5						= reg_value[5];                
        DQSGX_6						= reg_value[6];                
        BRRMODE_7		      = reg_value[7];  
        PUAD_11_8					= reg_value[11:8];                
        DTOODT_12         = reg_value[12];
        DTOPDD_13         = reg_value[13];
        DTOPDR_14         = reg_value[14];
        DTOIOM_15         = reg_value[15];
        DTOOE_16          = reg_value[16]; 
        ATOAE_17          = reg_value[17]; 
        RRMODE_18         = reg_value[18];              
        SDRMODE_19				= reg_value[19];             
        CKEPDD_23_20		 	= reg_value[23:20];           
        ODTPDD_27_24			= reg_value[27:24];           
        CKOE_28           = reg_value[28];                
        ODTOE_29					= reg_value[29];               
        RSTOE_30		 			= reg_value[30];               
        CKEOE_31		 			= reg_value[31];
      end
      1:begin            
        PUREN_0_T     			= reg_value[0];      
        BDISEN_1_T    			= reg_value[1];      
        ZUEN_2_T      			= reg_value[2];      
        LPIOPD_3_T    			= reg_value[3];      
        LPPLLPD_4_T   			= reg_value[4];      
        CUAEN_5_T						= reg_value[5];                
        DQSGX_6_T	    			= reg_value[6];                
        BRRMODE_7_T	        = reg_value[7];  
        PUAD_11_8_T					= reg_value[11:8];                
        DTOODT_12_T         = reg_value[12];
        DTOPDD_13_T         = reg_value[13];
        DTOPDR_14_T         = reg_value[14];
        DTOIOM_15_T         = reg_value[15];
        DTOOE_16_T          = reg_value[16]; 
        ATOAE_17_T          = reg_value[17]; 
        RRMODE_18_T         = reg_value[18];              
        SDRMODE_19_T				= reg_value[19];             
        CKEPDD_23_20_T		 	= reg_value[23:20];           
        ODTPDD_27_24_T			= reg_value[27:24];           
        CKOE_28_T           = reg_value[28];                
        ODTOE_29_T					= reg_value[29];               
        RSTOE_30_T		 			= reg_value[30];               
        CKEOE_31_T		 			= reg_value[31];
      end
     endcase
`endif
    end   
   endtask // unpack_DSGCR

   
//--------------------------------------------   
// Task to sample the register DSGCR 
//--------------------------------------------
   task sample_cov_DSGCR_param;
    begin       
`ifdef FUNCOV   
     DSGCRcov.sample();       
`endif
    end       
   endtask // sample_cov_DSGCR_param
      
       
//--------------------------------------------
// Task to set coverage on the DCR
//--------------------------------------------
   task set_cov_DCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCR(reg_value,select);  
      sample_cov_DCR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCR  
//--------------------------------------------
   task unpack_DCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin   
        DDRMD_2_0     = reg_value[2:0];         
        DDR8BNK_3     = reg_value[3];         
        PDQ_6_4       = reg_value[6:4];           
        MPRDQ_7       = reg_value[7];   
        DDRTYPE_9_8   = reg_value[9:8];
        BYTEMASK_17_10        = reg_value[17:10];        
        //DCR_RESERVED_26_18  = reg_value[26:18];
        NOSRA_27      = reg_value[27];
        DDR2T_28      = reg_value[28];           
        UDIMM_29      = reg_value[29];           
        //DCR_RESERVED_31_30    = reg_value[31:30];            
      end
      1:begin            
        DDRMD_2_0_T   = reg_value[2:0];         
        DDR8BNK_3_T   = reg_value[3];            
        PDQ_6_4_T     = reg_value[6:4];          
        MPRDQ_7_T     = reg_value[7];            
        DDRTYPE_9_8_T = reg_value[9:8];        
        BYTEMASK_17_10_T     = reg_value[17:10];        
        DCR_RESERVED_26_18_T = reg_value[26:18]; 
        NOSRA_27_T    = reg_value[27];
        DDR2T_28_T    = reg_value[28];           
        UDIMM_29_T    = reg_value[29];           
        DCR_RESERVED_31_30_T      = reg_value[31:30];            
      end
     endcase 
`endif
    end   
   endtask // unpack_DCR

   
//--------------------------------------------   
// Task to sample the register DCR 
//--------------------------------------------
   task sample_cov_DCR_param;
    begin       
`ifdef FUNCOV   
     DCRcov.sample();       
`endif
    end       
   endtask // sample_cov_DCR_param


       
//--------------------------------------------
// Task to set coverage on the DTPR0
//--------------------------------------------
   task set_cov_DTPR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTPR0(reg_value,select);  
      sample_cov_DTPR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTPR0  
//--------------------------------------------
   task unpack_DTPR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin    
         tRTP_3_0         = reg_value[3:0];  
         tWTR_7_4         = reg_value[7:4];  
         tRP_11_8         = reg_value[11:8];  
         tRCD_15_12				= reg_value[15:12];
         tRAS_21_16				= reg_value[21:16];
         tRRD_25_22				= reg_value[25:22];
         tRC_31_26				= reg_value[31:26]; 
      end
      1:begin            
         tRTP_3_0_T         = reg_value[3:0];  
         tWTR_7_4_T         = reg_value[7:4];  
         tRP_11_8_T         = reg_value[11:8];  
         tRCD_15_12_T				= reg_value[15:12];
         tRAS_21_16_T				= reg_value[21:16];
         tRRD_25_22_T				= reg_value[25:22];
         tRC_31_26_T				= reg_value[31:26]; 
      end
     endcase 
`endif
    end   
   endtask // unpack_DTPR0

   
//--------------------------------------------   
// Task to sample the register DTPR0
//--------------------------------------------
   task sample_cov_DTPR0_param;
    begin       
`ifdef FUNCOV   
     DTPR0cov.sample();       
`endif
    end       
   endtask // sample_cov_DTPR0_param


       
//--------------------------------------------
// Task to set coverage on the DTPR1
//--------------------------------------------
   task set_cov_DTPR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTPR1(reg_value,select);  
      sample_cov_DTPR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTPR1   
//--------------------------------------------
   task unpack_DTPR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin      
         tMRD_1_0         = reg_value[1:0];         
         tMOD_4_2         = reg_value[4:2];         
         tFAW_10_5				= reg_value[10:5];        
         tRFC_19_11				= reg_value[19:11];       
         tWLMRD_25_20		 	= reg_value[25:20];     
         tWLO_29_26				= reg_value[29:26];       
         tAOND_tAOFD_31_30	 = reg_value[31:30];
      end
      1:begin
         tMRD_1_0_T         = reg_value[1:0];         
         tMOD_4_2_T         = reg_value[4:2];         
         tFAW_10_5_T				= reg_value[10:5];        
         tRFC_19_11_T				= reg_value[19:11];       
         tWLMRD_25_20_T		 	= reg_value[25:20];     
         tWLO_29_26_T				= reg_value[29:26];       
         tAOND_tAOFD_31_30_T	 = reg_value[31:30];
      end
     endcase 
`endif
    end   
   endtask // unpack_DTPR1

   
//--------------------------------------------   
// Task to sample the register DTPR1 
//--------------------------------------------
   task sample_cov_DTPR1_param;
    begin       
`ifdef FUNCOV   
     DTPR1cov.sample();       
`endif
    end       
   endtask // sample_cov_DTPR1_param


       
//--------------------------------------------
// Task to set coverage on the DTPR2
//--------------------------------------------
   task set_cov_DTPR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTPR2(reg_value,select);  
      sample_cov_DTPR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTPR2  
//--------------------------------------------
   task unpack_DTPR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        tXS_9_0       		= reg_value[9:0];             
        tXP_14_10     		= reg_value[14:10];           
        tCKE_18_15    		= reg_value[18:15];          
        tDLLK_28_19   		= reg_value[28:19];         
        tRTODT_29					= reg_value[29];
        tRTW_30						= reg_value[30];  
        tCCD_31						= reg_value[31];  
      end
      1:begin            
        tXS_9_0_T      			= reg_value[9:0];        
        tXP_14_10_T    			= reg_value[14:10];      
        tCKE_18_15_T   			= reg_value[18:15];      
        tDLLK_28_19_T  			= reg_value[28:19];      
        tRTODT_29			 			= reg_value[29];
        tRTW_30				 			= reg_value[30];  
        tCCD_31				 			= reg_value[31];  
      end
     endcase 
`endif
    end   
   endtask // unpack_DTPR2

   
//--------------------------------------------   
// Task to sample the register DTPR2 
//--------------------------------------------
   task sample_cov_DTPR2_param;
    begin       
`ifdef FUNCOV   
     DTPR2cov.sample();       
`endif
    end       
   endtask // sample_cov_DTPR2_param


       
//--------------------------------------------
// Task to set coverage on the MR0_DDR3
//--------------------------------------------
   task set_cov_MR0_DDR3;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR0_DDR3(reg_value,select);  
      sample_cov_MR0_DDR3_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register MR0_DDR3  
//--------------------------------------------
   task unpack_MR0_DDR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        MR0_DDR3_BL_1_0   = reg_value[1:0];
        MR0_DDR3_CL_2     = reg_value[2];  
        MR0_DDR3_BT_3     = reg_value[3];
        MR0_DDR3_CL_6_4   = reg_value[6:4];
        MR0_DDR3_TM_7     = reg_value[7];
        MR0_DDR3_DR_8     = reg_value[8];
        MR0_DDR3_WR_11_9  = reg_value[11:9];
        MR0_DDR3_PD_12    = reg_value[12];
        //MR0_DDR3_RSVD_15_13     = reg_value[15:13];
        //MR0_DDR3_RESERVED_31_16 = reg_value[31:16];
      end
      
      1:begin            
        MR0_DDR3_BL_1_0_T   = reg_value[1:0];
        MR0_DDR3_CL_2_T     = reg_value[2];  
        MR0_DDR3_BT_3_T     = reg_value[3];
        MR0_DDR3_CL_6_4_T   = reg_value[6:4];
        MR0_DDR3_TM_7_T     = reg_value[7];
        MR0_DDR3_DR_8_T     = reg_value[8];
        MR0_DDR3_WR_11_9_T  = reg_value[11:9];
        MR0_DDR3_PD_12_T    = reg_value[12];
        MR0_DDR3_RSVD_15_13_T      = reg_value[15:13];
        MR0_DDR3_RESERVED_31_16_T  = reg_value[31:16];
      end
    endcase 
`endif
    end   
   endtask // unpack_MR0_DDR3

   

//--------------------------------------------   
// Task to sample the register MR0_DDR3 
//--------------------------------------------
   task sample_cov_MR0_DDR3_param;
    begin       
`ifdef FUNCOV   
     MR0_DDR3cov.sample();       
`endif
    end       
   endtask // sample_cov_MR0_DDR3_param


//--------------------------------------------
// Task to set coverage on the MR0_DDR2
//--------------------------------------------
   task set_cov_MR0_DDR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR0_DDR2(reg_value,select);  
      sample_cov_MR0_DDR2_param();      
`endif
    end 
   endtask // endtask

//--------------------------------------------   
// Task to unpack the register MR0_DDR2   
//--------------------------------------------
   task unpack_MR0_DDR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
      case(select)
        0:begin  
          MR0_DDR2_BL_2_0   = reg_value[2:0];
          MR0_DDR2_BT_3     = reg_value[3];
          MR0_DDR2_CL_6_4   = reg_value[6:4];
          MR0_DDR2_TM_7     = reg_value[7];
          MR0_DDR2_DR_8     = reg_value[8];
          MR0_DDR2_WR_11_9  = reg_value[11:9];
          MR0_DDR2_PD_12    = reg_value[12];
          //MR0_DDR2_RSVD_15_13     = reg_value[15:13];
          //MR0_DDR2_RESERVED_31_16 = reg_value[31:16];
        end
        
        1:begin            
          MR0_DDR2_BL_2_0_T   = reg_value[2:0];
          MR0_DDR2_BT_3_T     = reg_value[3];
          MR0_DDR2_CL_6_4_T   = reg_value[6:4];
          MR0_DDR2_TM_7_T     = reg_value[7];
          MR0_DDR2_DR_8_T     = reg_value[8];
          MR0_DDR2_WR_11_9_T  = reg_value[11:9];
          MR0_DDR2_PD_12_T    = reg_value[12];
          MR0_DDR2_RSVD_15_13_T      = reg_value[15:13];
          MR0_DDR2_RESERVED_31_16_T  = reg_value[31:16];
        end
      endcase 
`endif
    end   
   endtask // unpack_MR0_DDR2

   
//--------------------------------------------   
// Task to sample the register MR0_DDR2 
//--------------------------------------------
   task sample_cov_MR0_DDR2_param;
    begin       
`ifdef FUNCOV   
     MR0_DDR2cov.sample();       
`endif
    end       
   endtask // sample_cov_MR0_DDR2_param


//--------------------------------------------
// Task to set coverage on the MR1_DDR3
//--------------------------------------------
   task set_cov_MR1_DDR3;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR1_DDR3(reg_value,select);  
      sample_cov_MR1_DDR3_param();      
`endif
    end 
   endtask // endtask
              
//--------------------------------------------   
// Task to unpack the register MR1_DDR3  
//--------------------------------------------
   task unpack_MR1_DDR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin    
        MR1_DDR3_DE_0             = reg_value[0];              
        MR1_DDR3_DIC_1            = reg_value[1];             
        MR1_DDR3_RTT_2            = reg_value[2];             
        MR1_DDR3_AL_4_3           = reg_value[4:3];            
        MR1_DDR3_DIC_5            = reg_value[5];             
        MR1_DDR3_RTT_6            = reg_value[6];             
        MR1_DDR3_LEVEL_7          = reg_value[7];           
        //MR1_DDR3_RSVD_8         = reg_value[8];        
        MR1_DDR3_RTT_9            = reg_value[9];             
        //MR1_DDR3_RSVD_10        = reg_value[10];       
        MR1_DDR3_TDQS_11          = reg_value[11];      
        MR1_DDR3_QOFF_12          = reg_value[12];           
        //MR1_DDR3_RSVD_15_13     = reg_value[15:13];    
        //MR1_DDR3_RESERVED_31_16   = reg_value[31:16];
      end
      1:begin            
        MR1_DDR3_DE_0_T             = reg_value[0];              
        MR1_DDR3_DIC_1_T            = reg_value[1];             
        MR1_DDR3_RTT_2_T            = reg_value[2];             
        MR1_DDR3_AL_4_3_T           = reg_value[4:3];            
        MR1_DDR3_DIC_5_T            = reg_value[5];             
        MR1_DDR3_RTT_6_T            = reg_value[6];             
        MR1_DDR3_LEVEL_7_T          = reg_value[7];           
        MR1_DDR3_RSVD_8_T           = reg_value[8];        
        MR1_DDR3_RTT_9_T            = reg_value[9];             
        MR1_DDR3_RSVD_10_T          = reg_value[10];       
        MR1_DDR3_TDQS_11_T          = reg_value[11];      
        MR1_DDR3_QOFF_12_T          = reg_value[12];           
        MR1_DDR3_RSVD_15_13_T       = reg_value[15:13];    
        MR1_DDR3_RESERVED_31_16_T   = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_MR1_DDR3

   
//--------------------------------------------   
// Task to sample the register MR1_DDR3 
//--------------------------------------------
   task sample_cov_MR1_DDR3_param;
    begin       
`ifdef FUNCOV   
     MR1_DDR3cov.sample();       
`endif
    end       
   endtask // sample_cov_MR1_DDR3_param


//--------------------------------------------
// Task to set coverage on the MR1_DDR2
//--------------------------------------------
   task set_cov_MR1_DDR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR1_DDR2(reg_value,select);  
      sample_cov_MR1_DDR2_param();      
`endif
    end 
   endtask // endtask
              
//--------------------------------------------   
// Task to unpack the register MR1_DDR2  
//--------------------------------------------
   task unpack_MR1_DDR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin    
        MR1_DDR2_DE_0             = reg_value[0];              
        MR1_DDR2_DIC_1            = reg_value[1];             
        MR1_DDR2_RTT_2            = reg_value[2];             
        MR1_DDR2_AL_5_3           = reg_value[5:3];            
        MR1_DDR2_RTT_6            = reg_value[6];             
        MR1_DDR2_OCD_9_7          = reg_value[9:7];           
        MR1_DDR2_DQS_10           = reg_value[10];            
        MR1_DDR2_RDQS_11          = reg_value[11];      
        MR1_DDR2_QOFF_12          = reg_value[12];           
        //MR1_DDR2_RSVD_15_13   = reg_value[15:13];    
        //MR1_DDR2_RESERVED_31_16   = reg_value[31:16];
      end
      1:begin            
        MR1_DDR2_DE_0_T             = reg_value[0];              
        MR1_DDR2_DIC_1_T            = reg_value[1];             
        MR1_DDR2_RTT_2_T            = reg_value[2];             
        MR1_DDR2_AL_5_3_T           = reg_value[5:3];            
        MR1_DDR2_RTT_6_T            = reg_value[6];             
        MR1_DDR2_OCD_9_7_T          = reg_value[9:7];           
        MR1_DDR2_DQS_10_T           = reg_value[10];            
        MR1_DDR2_RDQS_11_T          = reg_value[11];      
        MR1_DDR2_QOFF_12_T          = reg_value[12];           
        MR1_DDR2_RSVD_15_13_T   = reg_value[15:13];    
        MR1_DDR2_RESERVED_31_16_T   = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_MR1_DDR2

   
//--------------------------------------------   
// Task to sample the register MR1_DDR2 
//--------------------------------------------
   task sample_cov_MR1_DDR2_param;
    begin       
`ifdef FUNCOV   
     MR1_DDR2cov.sample();       
`endif
    end       
   endtask // sample_cov_MR1_DDR2_param

              
//--------------------------------------------
// Task to set coverage on the MR2_DDR3
//--------------------------------------------
   task set_cov_MR2_DDR3;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR2_DDR3(reg_value,select);  
      sample_cov_MR2_DDR3_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register MR2_DDR3  
//--------------------------------------------
   task unpack_MR2_DDR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin   
				MR2_DDR3_PASR_2_0            = reg_value[2:0];          
				MR2_DDR3_CWL_5_3             = reg_value[5:3];           
				MR2_DDR3_ASR_6               = reg_value[6];             
				MR2_DDR3_SRF_7               = reg_value[7];             
				//MR2_DDR3_RSVD_8            = reg_value[8];        
				MR2_DDR3_RTTWR_10_9          = reg_value[10:9];        
				//MR2_DDR3_RSVD_15_11        = reg_value[15:11];    
				//MR2_DDR3_RESERVED_31_16    = reg_value[31:16];
      end
      1:begin            
				MR2_DDR3_PASR_2_0_T            = reg_value[2:0];          
				MR2_DDR3_CWL_5_3_T             = reg_value[5:3];           
				MR2_DDR3_ASR_6_T               = reg_value[6];             
				MR2_DDR3_SRF_7_T               = reg_value[7];             
				MR2_DDR3_RSVD_8_T              = reg_value[8];        
				MR2_DDR3_RTTWR_10_9_T          = reg_value[10:9];        
				MR2_DDR3_RSVD_15_11_T          = reg_value[15:11];    
				MR2_DDR3_RESERVED_31_16_T      = reg_value[31:16];
       end
     endcase 
`endif
    end   
   endtask // unpack_MR2_DDR3

   
//--------------------------------------------   
// Task to sample the register MR2_DDR3 
//--------------------------------------------
   task sample_cov_MR2_DDR3_param;
    begin       
`ifdef FUNCOV   
     MR2_DDR3cov.sample();       
`endif
    end       
   endtask // sample_cov_MR2_DDR3_param


//--------------------------------------------
// Task to set coverage on the MR2_DDR2
//--------------------------------------------
   task set_cov_MR2_DDR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR2_DDR2(reg_value,select);  
      sample_cov_MR2_DDR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register MR2_DDR2  
//--------------------------------------------
   task unpack_MR2_DDR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin   
				MR2_DDR2_PASR_2_0           = reg_value[2:0];          
				MR2_DDR2_DCC_3              = reg_value[3];             
				//MR2_DDR2_RSVD_6_4         = reg_value[6:4];      
				MR2_DDR2_SRF_7              = reg_value[7];             
				//MR2_DDR2_RSVD_8           = reg_value[8];        
				//MR2_DDR2_RSVD_10_9        = reg_value[10:9];        
				//MR2_DDR2_RSVD_15_11       = reg_value[15:11];    
				//MR2_DDR2_RESERVED_31_16   = reg_value[31:16];
      end
      1:begin            
				MR2_DDR2_PASR_2_0_T           = reg_value[2:0];          
				MR2_DDR2_DCC_3_T              = reg_value[3];             
				MR2_DDR2_RSVD_6_4_T           = reg_value[6:4];      
				MR2_DDR2_SRF_7_T              = reg_value[7];             
				MR2_DDR2_RSVD_8_T             = reg_value[8];        
				MR2_DDR2_RSVD_10_9_T          = reg_value[10:9];        
				MR2_DDR2_RSVD_15_11_T         = reg_value[15:11];    
				MR2_DDR2_RESERVED_31_16_T     = reg_value[31:16];
       end
     endcase 
`endif
    end   
   endtask // unpack_MR2_DDR2

   
//--------------------------------------------   
// Task to sample the register MR2_DDR2 
//--------------------------------------------
   task sample_cov_MR2_DDR2_param;
    begin       
`ifdef FUNCOV   
     MR2_DDR2cov.sample();       
`endif
    end       
   endtask // sample_cov_MR2_DDR2_param



//--------------------------------------------
// Task to set coverage on the MR3_DDR3
//--------------------------------------------
   task set_cov_MR3_DDR3;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR3_DDR3(reg_value,select);  
      sample_cov_MR3_DDR3_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register MR3_DDR3 
//--------------------------------------------
   task unpack_MR3_DDR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin          
        MR3_DDR3_MPRLOC_1_0           = reg_value[1:0];
        MR3_DDR3_MPR_2                = reg_value[2];
        //MR3_DDR3_RSVD_15_3          = reg_value[15:3];  
        //MR3_DDR3_RESERVED_31_16     = reg_value[31:16];
      end
      1:begin            
        MR3_DDR3_MPRLOC_1_0_T         = reg_value[1:0];  
        MR3_DDR3_MPR_2_T              = reg_value[2];    
        MR3_DDR3_RSVD_15_3_T          = reg_value[15:3]; 
        MR3_DDR3_RESERVED_31_16_T     = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_MR3_DDR3

   
//--------------------------------------------   
// Task to sample the register MR3_DDR3 
//--------------------------------------------
   task sample_cov_MR3_DDR3_param;
    begin       
`ifdef FUNCOV   
     MR3_DDR3cov.sample();       
`endif
    end       
   endtask // sample_cov_MR3_DDR3_param


//--------------------------------------------
// Task to set coverage on the MR3_DDR2
//--------------------------------------------
   task set_cov_MR3_DDR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_MR3_DDR2(reg_value,select);  
      sample_cov_MR3_DDR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register MR3_DDR2  
//--------------------------------------------
   task unpack_MR3_DDR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin          
        //MR3_DDR2_RSVD_15_0      = reg_value[15:0];
        //MR3_DDR2_RESERVED_31_16 = reg_value[31:16];
      end
      1:begin            
        MR3_DDR2_RSVD_15_0_T      = reg_value[15:0];
        MR3_DDR2_RESERVED_31_16_T = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_MR3_DDR2

   
//--------------------------------------------   
// Task to sample the register MR3_DDR2 
//--------------------------------------------
   task sample_cov_MR3_DDR2_param;
    begin       
`ifdef FUNCOV   
     MR3_DDR2cov.sample();       
`endif
    end       
   endtask // sample_cov_MR3_DDR2_param


//--------------------------------------------
// Task to set coverage on the ODTCR
//--------------------------------------------
   task set_cov_ODTCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ODTCR(reg_value,select);  
      sample_cov_ODTCR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ODTCR  
//--------------------------------------------
   task unpack_ODTCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin
        RDODT0_3_0       = reg_value[3:0];  
        RDODT1_7_4       = reg_value[7:4];  
        RDODT2_11_8      = reg_value[11:8]; 
        RDODT3_15_12     = reg_value[15:12];
        WRODT0_19_16     = reg_value[19:16];
        WRODT1_23_20     = reg_value[23:20];
        WRODT2_27_24     = reg_value[27:24];
        WRODT3_31_28     = reg_value[31:28];
      end
      1:begin            
        RDODT0_3_0_T     = reg_value[3:0];  
        RDODT1_7_4_T     = reg_value[7:4];  
        RDODT2_11_8_T    = reg_value[11:8]; 
        RDODT3_15_12_T   = reg_value[15:12];
        WRODT0_19_16_T   = reg_value[19:16];
        WRODT1_23_20_T   = reg_value[23:20];
        WRODT2_27_24_T   = reg_value[27:24];
        WRODT3_31_28_T   = reg_value[31:28];
      end
     endcase 
`endif
    end   
   endtask // unpack_ODTCR

   
//--------------------------------------------   
// Task to sample the register ODTCR 
//--------------------------------------------
   task sample_cov_ODTCR_param;
    begin       
`ifdef FUNCOV   
     ODTCRcov.sample();       
`endif
    end       
   endtask // sample_cov_ODTCR_param



//--------------------------------------------
// Task to set coverage on the DTCR
//--------------------------------------------
   task set_cov_DTCR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DTCR(reg_value,select);  
      sample_cov_DTCR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTCR 
//--------------------------------------------
   task unpack_DTCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin         
         DTRPTN_3_0			= reg_value[3:0];            
         DTRANK_5_4			= reg_value[5:4];            
         DTMPR_6				= reg_value[6];               
         DTCMPD_7				= reg_value[7];              
         DTWDQM_11_8		= reg_value[11:8];           
         DTWBDDM_12			= reg_value[12];            
         DTBDC_13		  	= reg_value[13];            
         //DTCR_RESERVED_15_14 = reg_value[15:14];   
         DTDBS_19_16		= reg_value[19:16];           
         DTDEN_20				= reg_value[20];              
         DTDSTP_21			= reg_value[21];              
         DTEXD_22	    	= reg_value[22];      
         DTEXG_23				= reg_value[23];              
         RANKEN_27_24		= reg_value[27:24];          
         RFSHDT_31_28		= reg_value[31:28];          
      end       
      1:begin         
         DTRPTN_3_0_T			= reg_value[3:0];            
         DTRANK_5_4_T			= reg_value[5:4];            
         DTMPR_6_T				= reg_value[6];               
         DTCMPD_7_T				= reg_value[7];              
         DTWDQM_11_8_T		= reg_value[11:8];           
         DTWBDDM_12_T			= reg_value[12];            
         DTBDC_13_T	  		= reg_value[13];            
         DTCR_RESERVED_15_14_T = reg_value[15:14];   
         DTDBS_19_16_T		= reg_value[19:16];           
         DTDEN_20_T				= reg_value[20];              
         DTDSTP_21_T			= reg_value[21];              
         DTEXD_22_T		    = reg_value[22];      
         DTEXG_23_T				= reg_value[23];              
         RANKEN_27_24_T		= reg_value[27:24];          
         RFSHDT_31_28_T		= reg_value[31:28];          
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DTCR   

   
//--------------------------------------------   
// Task to sample the register DTCR  
//--------------------------------------------
   task sample_cov_DTCR_param;
    begin  
`ifdef FUNCOV   
     DTCRcov.sample();    
`endif
    end   
   endtask // sample_cov_DTCR_param


  
       
//--------------------------------------------
// Task to set coverage on the DTAR0
//--------------------------------------------
   task set_cov_DTAR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTAR0(reg_value,select);  
      sample_cov_DTAR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTAR0  
//--------------------------------------------
   task unpack_DTAR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin      
        DTAR0_DTCOL_11_0     = reg_value[11:0];   
        DTAR0_DTROW_27_12    = reg_value[27:12];  
        DTAR0_DTBANK_30_28   = reg_value[30:28]; 
        //DTAR0_RESERVED_31    = reg_value[31];     
      end
      1:begin            
        DTAR0_DTCOL_11_0_T   = reg_value[11:0];    
        DTAR0_DTROW_27_12_T  = reg_value[27:12];  
        DTAR0_DTBANK_30_28_T = reg_value[30:28];  
        DTAR0_RESERVED_31_T     = reg_value[31];     
      end
     endcase 
`endif
    end   
   endtask // unpack_DTAR0

   
//--------------------------------------------   
// Task to sample the register DTAR0 
//--------------------------------------------
   task sample_cov_DTAR0_param;
    begin       
`ifdef FUNCOV   
     DTAR0cov.sample();       
`endif
    end       
   endtask // sample_cov_DTAR0_param

       
//--------------------------------------------
// Task to set coverage on the DTAR1
//--------------------------------------------
   task set_cov_DTAR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTAR1(reg_value,select);  
      sample_cov_DTAR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTAR1  
//--------------------------------------------
   task unpack_DTAR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin      
        DTAR1_DTCOL_11_0     = reg_value[11:0];   
        DTAR1_DTROW_27_12    = reg_value[27:12];  
        DTAR1_DTBANK_30_28   = reg_value[30:28]; 
        //DTAR1_RESERVED_31       = reg_value[31];     
      end
      1:begin            
        DTAR1_DTCOL_11_0_T   = reg_value[11:0];    
        DTAR1_DTROW_27_12_T  = reg_value[27:12];  
        DTAR1_DTBANK_30_28_T = reg_value[30:28];  
        DTAR1_RESERVED_31_T     = reg_value[31];     
      end
     endcase 
`endif
    end   
   endtask // unpack_DTAR1

   
//--------------------------------------------   
// Task to sample the register DTAR1 
//--------------------------------------------
   task sample_cov_DTAR1_param;
    begin       
`ifdef FUNCOV   
     DTAR1cov.sample();       
`endif
    end       
   endtask // sample_cov_DTAR1_param

       
//--------------------------------------------
// Task to set coverage on the DTAR2
//--------------------------------------------
   task set_cov_DTAR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTAR2(reg_value,select);  
      sample_cov_DTAR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTAR2  
//--------------------------------------------
   task unpack_DTAR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin      
        DTAR2_DTCOL_11_0     = reg_value[11:0];   
        DTAR2_DTROW_27_12    = reg_value[27:12];  
        DTAR2_DTBANK_30_28   = reg_value[30:28]; 
        //DTAR2_RESERVED_31       = reg_value[31];     
      end
      1:begin            
        DTAR2_DTCOL_11_0_T   = reg_value[11:0];    
        DTAR2_DTROW_27_12_T  = reg_value[27:12];  
        DTAR2_DTBANK_30_28_T = reg_value[30:28];  
        DTAR2_RESERVED_31_T     = reg_value[31];     
      end
     endcase 
`endif
    end   
   endtask // unpack_DTAR2

   
//--------------------------------------------   
// Task to sample the register DTAR2 
//--------------------------------------------
   task sample_cov_DTAR2_param;
    begin       
`ifdef FUNCOV   
     DTAR2cov.sample();       
`endif
    end       
   endtask // sample_cov_DTAR2_param

       
//--------------------------------------------
// Task to set coverage on the DTDR0
//--------------------------------------------
   task set_cov_DTDR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTDR0(reg_value,select);  
      sample_cov_DTDR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTDR0  
//--------------------------------------------
   task unpack_DTDR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        DTBYTE0_7_0     = reg_value[7:0];  
        DTBYTE1_15_8    = reg_value[15:8]; 
        DTBYTE2_23_16   = reg_value[23:16];
        DTBYTE3_31_24   = reg_value[31:24];
      end
      1:begin            
        DTBYTE0_7_0_T   = reg_value[7:0];  
        DTBYTE1_15_8_T  = reg_value[15:8]; 
        DTBYTE2_23_16_T = reg_value[23:16];
        DTBYTE3_31_24_T = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DTDR0

   
//--------------------------------------------  
// Task to sample the register DTDR0 
//--------------------------------------------
   task sample_cov_DTDR0_param;
    begin       
`ifdef FUNCOV   
     DTDR0cov.sample();       
`endif
    end       
   endtask // sample_cov_DTDR0_param


       
//--------------------------------------------
// Task to set coverage on the DTDR1
//--------------------------------------------
   task set_cov_DTDR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTDR1(reg_value,select);  
      sample_cov_DTDR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTDR1  
//--------------------------------------------
   task unpack_DTDR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin   
        DTBYTE4_7_0      = reg_value[7:0];  
        DTBYTE5_15_8     = reg_value[15:8]; 
        DTBYTE6_23_16    = reg_value[23:16];
        DTBYTE7_31_24    = reg_value[31:24];
      end
      1:begin           
        DTBYTE4_7_0_T    = reg_value[7:0];  
        DTBYTE5_15_8_T   = reg_value[15:8]; 
        DTBYTE6_23_16_T  = reg_value[23:16];
        DTBYTE7_31_24_T  = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DTDR1

   
//--------------------------------------------   
// Task to sample the register DTDR1 
//--------------------------------------------
   task sample_cov_DTDR1_param;
    begin       
`ifdef FUNCOV   
     DTDR1cov.sample();       
`endif
    end       
   endtask // sample_cov_DTDR1_param


  
       
//--------------------------------------------
// Task to set coverage on the DTEDR0
//--------------------------------------------
   task set_cov_DTEDR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTEDR0(reg_value,select);  
      sample_cov_DTEDR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTEDR0  
//--------------------------------------------
   task unpack_DTEDR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        DTWLMN_7_0     = reg_value[7:0];  
        DTWLMX_15_8    = reg_value[15:8]; 
        DTWBMN_23_16   = reg_value[23:16];
        DTWBMX_31_24   = reg_value[31:24];
      end
      1:begin            
        DTWLMN_7_0_T   = reg_value[7:0];  
        DTWLMX_15_8_T  = reg_value[15:8]; 
        DTWBMN_23_16_T = reg_value[23:16];
        DTWBMX_31_24_T = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DTEDR0

   
//--------------------------------------------   
// Task to sample the register DTEDR0 
//--------------------------------------------
   task sample_cov_DTEDR0_param;
    begin       
`ifdef FUNCOV   
     DTEDR0cov.sample();       
`endif
    end       
   endtask // sample_cov_DTEDR0_param

  
       
//--------------------------------------------
// Task to set coverage on the DTEDR1
//--------------------------------------------
   task set_cov_DTEDR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DTEDR1(reg_value,select);  
      sample_cov_DTEDR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DTEDR1  
//--------------------------------------------
   task unpack_DTEDR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        DTRLMN_7_0     = reg_value[7:0];  
        DTRLMX_15_8    = reg_value[15:8]; 
        DTRBMN_23_16   = reg_value[23:16];
        DTRBMX_31_24   = reg_value[31:24];
      end
      1:begin            
        DTRLMN_7_0_T   = reg_value[7:0];  
        DTRLMX_15_8_T  = reg_value[15:8]; 
        DTRBMN_23_16_T = reg_value[23:16];
        DTRBMX_31_24_T = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DTEDR1

   
//--------------------------------------------   
// Task to sample the register DTEDR1 
//--------------------------------------------
   task sample_cov_DTEDR1_param;
    begin       
`ifdef FUNCOV   
     DTEDR1cov.sample();       
`endif
    end       
   endtask // sample_cov_DTEDR1_param

  

//--------------------------------------------
// Task to set coverage on the RDIMMGCR0
//--------------------------------------------
   task set_cov_RDIMMGCR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_RDIMMGCR0(reg_value,select);  
      sample_cov_RDIMMGCR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register RDIMMGCR0  
//--------------------------------------------
   task unpack_RDIMMGCR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        RDIMM_0        = reg_value[0];                   
        ERRNOREG_1     = reg_value[1];                
        //RDIMMGCR0_RESERVED_13_2     = reg_value[13:2];   
        PARINODT_14    = reg_value[14];               
        PARINPDD_15    = reg_value[15];               
        PARINPDR_16    = reg_value[16];               
        PARINIOM_17    = reg_value[17];               
        PARINOE_18     = reg_value[18];                
        ERROUTODT_19   = reg_value[19];              
        ERROUTPDD_20   = reg_value[20];              
        ERROUTPDR_21   = reg_value[21];              
        ERROUTIOM_22   = reg_value[22];              
        ERROUTOE_23    = reg_value[23];               
        RDIMMODT_24    = reg_value[24];               
        RDIMMPDD_25    = reg_value[25];               
        RDIMMPDR_26    = reg_value[26];               
        RDIMMIOM_27    = reg_value[27];               
        QCSENOE_28     = reg_value[28];                
        MIRROROE_29    = reg_value[29];               
        QCSEN_30       = reg_value[30];                  
        MIRROR_31      = reg_value[31];                 
      end
      1:begin            
        RDIMM_0_T      = reg_value[0];                   
        ERRNOREG_1_T     = reg_value[1];                
        RDIMMGCR0_RESERVED_13_2_T     = reg_value[13:2];   
        PARINODT_14_T    = reg_value[14];               
        PARINPDD_15_T    = reg_value[15];               
        PARINPDR_16_T    = reg_value[16];               
        PARINIOM_17_T    = reg_value[17];               
        PARINOE_18_T     = reg_value[18];                
        ERROUTODT_19_T   = reg_value[19];              
        ERROUTPDD_20_T   = reg_value[20];              
        ERROUTPDR_21_T   = reg_value[21];              
        ERROUTIOM_22_T   = reg_value[22];              
        ERROUTOE_23_T    = reg_value[23];               
        RDIMMODT_24_T    = reg_value[24];               
        RDIMMPDD_25_T    = reg_value[25];               
        RDIMMPDR_26_T    = reg_value[26];               
        RDIMMIOM_27_T    = reg_value[27];               
        QCSENOE_28_T     = reg_value[28];                
        MIRROROE_29_T    = reg_value[29];               
        QCSEN_30_T       = reg_value[30];                  
        MIRROR_31_T      = reg_value[31];                 
      end
     endcase 
`endif
    end   
   endtask // unpack_RDIMMGCR0

   
//--------------------------------------------   
// Task to sample the register RDIMMGCR0 
//--------------------------------------------
   task sample_cov_RDIMMGCR0_param;
    begin       
`ifdef FUNCOV   
     RDIMMGCR0cov.sample();       
`endif
    end       
   endtask // sample_cov_RDIMMGCR0_param



//--------------------------------------------
// Task to set coverage on the RDIMMGCR1
//--------------------------------------------
   task set_cov_RDIMMGCR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_RDIMMGCR1(reg_value,select);  
      sample_cov_RDIMMGCR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register RDIMMGCR1  
//--------------------------------------------
   task unpack_RDIMMGCR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        tBCSTAB_11_0      = reg_value[11:0];            
        tBCMRD_14_12     = reg_value[14:12];                   
        //RDIMMGCR1_RESERVED_15     = reg_value[15];
        CRINIT_31_16     = reg_value[31:16];
      end
      1:begin   
        tBCSTAB_11_0_T      = reg_value[11:0];            
        tBCMRD_14_12_T     = reg_value[14:12];                   
        RDIMMGCR1_RESERVED_15_T     = reg_value[15];
        CRINIT_31_16_T     = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_RDIMMGCR1

   
//--------------------------------------------   
// Task to sample the register RDIMMGCR1 
//--------------------------------------------
   task sample_cov_RDIMMGCR1_param;
    begin       
`ifdef FUNCOV   
     RDIMMGCR1cov.sample();       
`endif
    end       
   endtask // sample_cov_RDIMMGCR1_param



//--------------------------------------------
// Task to set coverage on the RDIMMCR0
//--------------------------------------------
   task set_cov_RDIMMCR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_RDIMMCR0(reg_value,select);  
      sample_cov_RDIMMCR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register RDIMMCR0  
//--------------------------------------------
   task unpack_RDIMMCR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        RC0_3_0       = reg_value[3:0];    
        RC1_7_4       = reg_value[7:4];    
        RC2_11_8      = reg_value[11:8];   
        RC3_15_12     = reg_value[15:12];          
        RC4_19_16     = reg_value[19:16];  
        RC5_23_20     = reg_value[23:20];  
        //RC6_27_24     = reg_value[27:24];        
        //RC7_31_28     = reg_value[31:28];
      end
      1:begin   
        RC0_3_0_T       = reg_value[3:0];    
        RC1_7_4_T       = reg_value[7:4];    
        RC2_11_8_T      = reg_value[11:8];   
        RC3_15_12_T     = reg_value[15:12];          
        RC4_19_16_T     = reg_value[19:16];  
        RC5_23_20_T     = reg_value[23:20];  
        //RC6_27_24_T     = reg_value[27:24];        
        //RC7_31_28_T     = reg_value[31:28];
      end
     endcase 
`endif
    end   
   endtask // unpack_RDIMMCR0

   
//--------------------------------------------   
// Task to sample the register RDIMMCR0 
//--------------------------------------------
   task sample_cov_RDIMMCR0_param;
    begin       
`ifdef FUNCOV   
     RDIMMCR0cov.sample();       
`endif
    end       
   endtask // sample_cov_RDIMMCR0_param



//--------------------------------------------
// Task to set coverage on the RDIMMCR1
//--------------------------------------------
   task set_cov_RDIMMCR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_RDIMMCR1(reg_value,select);  
      sample_cov_RDIMMCR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register RDIMMCR1  
//--------------------------------------------
   task unpack_RDIMMCR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        RC8_3_0        = reg_value[3:0];    
        RC9_7_4        = reg_value[7:4];    
        RC10_11_8      = reg_value[11:8];   
        RC11_15_12     = reg_value[15:12];          
        //RC12_19_16     = reg_value[19:16];  
        //RC13_23_20     = reg_value[23:20];  
        //RC14_27_24     = reg_value[27:24];        
        //RC15_31_28     = reg_value[31:28];
      end
      1:begin   
        RC8_3_0_T        = reg_value[3:0];    
        RC9_7_4_T        = reg_value[7:4];    
        RC10_11_8_T      = reg_value[11:8];   
        RC11_15_12_T     = reg_value[15:12];          
        //RC12_19_16_T     = reg_value[19:16];  
        //RC13_23_20_T     = reg_value[23:20];  
        //RC14_27_24_T     = reg_value[27:24];        
        //RC15_31_28_T     = reg_value[31:28];
      end
     endcase 
`endif
    end   
   endtask // unpack_RDIMMCR1

   
//--------------------------------------------   
// Task to sample the register RDIMMCR1 
//--------------------------------------------
   task sample_cov_RDIMMCR1_param;
    begin       
`ifdef FUNCOV   
     RDIMMCR1cov.sample();       
`endif
    end       
   endtask // sample_cov_RDIMMCR1_param



                   
//--------------------------------------------
// Task to set coverage on the DCUAR
//--------------------------------------------
   task set_cov_DCUAR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCUAR(reg_value,select);  
      sample_cov_DCUAR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCUAR  
//--------------------------------------------
   task unpack_DCUAR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin
        CWADDR_3_0    = reg_value[3:0];          
        CSADDR_7_4    = reg_value[7:4];          
        CSEL_9_8      = reg_value[9:8];            
        INCA_10       = reg_value[10];             
        ATYPE_11      = reg_value[11];            
        //DCUAR_RESERVED_31_12 = reg_value[31:12];
      end
      1:begin            
        CWADDR_3_0_T  = reg_value[3:0];       
        CSADDR_7_4_T  = reg_value[7:4];       
        CSEL_9_8_T    = reg_value[9:8];       
        INCA_10_T     = reg_value[10];        
        ATYPE_11_T    = reg_value[11];        
        DCUAR_RESERVED_31_12_T = reg_value[31:12];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCUAR

   
//--------------------------------------------   
// Task to sample the register DCUAR 
//--------------------------------------------
   task sample_cov_DCUAR_param;
    begin       
`ifdef FUNCOV   
     DCUARcov.sample();       
`endif
    end       
   endtask // sample_cov_DCUAR_param


       
//--------------------------------------------
// Task to set coverage on the DCUDR
//--------------------------------------------
   task set_cov_DCUDR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCUDR(reg_value,select);  
      sample_cov_DCUDR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCUDR  
//--------------------------------------------
   task unpack_DCUDR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin       
        CDATA_31_0     = reg_value[31:0];
      end
      1:begin            
        CDATA_31_0_T   = reg_value[31:0];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCUDR

   
//--------------------------------------------   
// Task to sample the register DCUDR 
//--------------------------------------------
   task sample_cov_DCUDR_param;
    begin       
`ifdef FUNCOV   
     DCUDRcov.sample();       
`endif
    end       
   endtask // sample_cov_DCUDR_param


       
//--------------------------------------------
// Task to set coverage on the DCURR
//--------------------------------------------
   task set_cov_DCURR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCURR(reg_value,select);
      set_cov_dcu_setup_cfg_scenario;
      set_cov_dcu_loop_cfg_scenario;   // sample additional dcu loop cfg
      sample_cov_DCURR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCURR  
//--------------------------------------------
   task unpack_DCURR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        DINST_3_0   = reg_value[3:0];           
        SADDR_7_4   = reg_value[7:4];           
        EADDR_11_8  = reg_value[11:8];          
        NFAIL_19_12 = reg_value[19:12];         
        SONF_20     = reg_value[20];             
        SCOF_21     = reg_value[21];             
        RCEN_22     = reg_value[22];             
        XCEN_23     = reg_value[23];             
        //DCURR_RESERVED_31_24 = reg_value[31:24];  
      end
      1:begin 
        DINST_3_0_T    = reg_value[3:0];        
        SADDR_7_4_T    = reg_value[7:4];        
        EADDR_11_8_T   = reg_value[11:8];       
        NFAIL_19_12_T  = reg_value[19:12];      
        SONF_20_T      = reg_value[20];         
        SCOF_21_T      = reg_value[21];         
        RCEN_22_T      = reg_value[22];         
        XCEN_23_T      = reg_value[23];         
        DCURR_RESERVED_31_24_T = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCURR

   
//--------------------------------------------   
// Task to sample the register DCURR 
//--------------------------------------------
   task sample_cov_DCURR_param;
    begin       
`ifdef FUNCOV   
     DCURRcov.sample();       
`endif
    end       
   endtask // sample_cov_DCURR_param


       
//--------------------------------------------
// Task to set coverage on the DCULR
//--------------------------------------------
   task set_cov_DCULR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCULR(reg_value,select);  
      sample_cov_DCULR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCULR  
//--------------------------------------------
   task unpack_DCULR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        LSADDR_3_0    = reg_value[3:0];          
        LEADDR_7_4    = reg_value[7:4];          
        LCNT_15_8     = reg_value[15:8];           
        LINF_16       = reg_value[16];             
        IDA_17        = reg_value[17];              
        //DCULR_RESERVED_27_18 = reg_value[27:18];
        XLEADDR_31_28 = reg_value[31:28];       
      end
      1:begin            
        LSADDR_3_0_T  = reg_value[3:0];          
        LEADDR_7_4_T  = reg_value[7:4];          
        LCNT_15_8_T   = reg_value[15:8];         
        LINF_16_T     = reg_value[16];           
        IDA_17_T      = reg_value[17];            
        DCULR_RESERVED_27_18_T = reg_value[27:18];
        XLEADDR_31_28_T  = reg_value[31:28];       
      end
     endcase 
`endif
    end   
   endtask // unpack_DCULR

   
//--------------------------------------------   
// Task to sample the register DCULR 
//--------------------------------------------
   task sample_cov_DCULR_param;
    begin       
`ifdef FUNCOV   
     DCULRcov.sample();       
`endif
    end       
   endtask // sample_cov_DCULR_param


       
//--------------------------------------------
// Task to set coverage on the DCUGCR
//--------------------------------------------
   task set_cov_DCUGCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCUGCR(reg_value,select);  
      sample_cov_DCUGCR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCUGCR  
//--------------------------------------------
   task unpack_DCUGCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
      RCSW_15_0     = reg_value[15:0];
      //DCUGCR_RESERVED_31_16 = reg_value[31:16];
      end
      1:begin            
      RCSW_15_0_T   = reg_value[15:0];
      DCUGCR_RESERVED_31_16_T = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCUGCR

   
//--------------------------------------------   
// Task to sample the register DCUGCR 
//--------------------------------------------
   task sample_cov_DCUGCR_param;
    begin       
`ifdef FUNCOV   
     DCUGCRcov.sample();       
`endif
    end       
   endtask // sample_cov_DCUGCR_param


       
//--------------------------------------------
// Task to set coverage on the DCUTPR
//--------------------------------------------
   task set_cov_DCUTPR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCUTPR(reg_value,select);  
      sample_cov_DCUTPR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCUTPR  
//--------------------------------------------
   task unpack_DCUTPR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin 
        tDCUT0_7_0      = reg_value[7:0];  
        tDCUT1_15_8     = reg_value[15:8]; 
        tDCUT2_23_16    = reg_value[23:16];
        tDCUT3_31_24    = reg_value[31:24];
      end                                  
      1:begin                              
        tDCUT0_7_0_T    = reg_value[7:0];  
        tDCUT1_15_8_T   = reg_value[15:8]; 
        tDCUT2_23_16_T  = reg_value[23:16];
        tDCUT3_31_24_T  = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCUTPR

   
//--------------------------------------------   
// Task to sample the register DCUTPR 
//--------------------------------------------
   task sample_cov_DCUTPR_param;
    begin       
`ifdef FUNCOV   
     DCUTPRcov.sample();       
`endif
    end       
   endtask // sample_cov_DCUTPR_param


       
//--------------------------------------------
// Task to set coverage on the DCUSR0
//--------------------------------------------
   task set_cov_DCUSR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCUSR0(reg_value,select);  
      sample_cov_DCUSR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCUSR0  
//--------------------------------------------
   task unpack_DCUSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin     
        RDONE_0     = reg_value[0];             
        CFAIL_1     = reg_value[1];             
        CFULL_2     = reg_value[2];             
        //DCUSR0_RESERVED_31_3     = reg_value[31:3];
      end
      1:begin            
        RDONE_0_T     = reg_value[0];             
        CFAIL_1_T     = reg_value[1];             
        CFULL_2_T     = reg_value[2];             
        DCUSR0_RESERVED_31_3_T     = reg_value[31:3];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCUSR0

   
//--------------------------------------------   
// Task to sample the register DCUSR0 
//--------------------------------------------
   task sample_cov_DCUSR0_param;
    begin       
`ifdef FUNCOV   
     DCUSR0cov.sample();       
`endif
    end       
   endtask // sample_cov_DCUSR0_param


       
//--------------------------------------------
// Task to set coverage on the DCUSR1
//--------------------------------------------
   task set_cov_DCUSR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_DCUSR1(reg_value,select);  
      sample_cov_DCUSR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DCUSR1  
//--------------------------------------------
   task unpack_DCUSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        RDCNT_15_0     = reg_value[15:0]; 
        FLCNT_23_16    = reg_value[23:16];
        LPCNT_31_24    = reg_value[31:24];
      end
      1:begin            
        RDCNT_15_0_T   = reg_value[15:0]; 
        FLCNT_23_16_T  = reg_value[23:16];
        LPCNT_31_24_T  = reg_value[31:24];
      end
     endcase 
`endif
    end   
   endtask // unpack_DCUSR1

   
//--------------------------------------------   
// Task to sample the register DCUSR1 
//--------------------------------------------
   task sample_cov_DCUSR1_param;
    begin       
`ifdef FUNCOV   
     DCUSR1cov.sample();       
`endif
    end       
   endtask // sample_cov_DCUSR1_param


       
//--------------------------------------------
// Task to set coverage on the BISTRR
//--------------------------------------------
   task set_cov_BISTRR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTRR(reg_value,select); 

      set_cov_bist_ac_issue_nop_inst_scenario;  // sample for bist ac issue nop instruction
      set_cov_bist_ac_issue_run_inst_scenario;  // sample for bist ac issue run instruction
      set_cov_bist_ac_issue_stop_inst_scenario;  // sample for bist ac issue stop instruction
      set_cov_bist_ac_issue_reset_inst_scenario;  // sample for bist ac issue reset instruction

      set_cov_bist_dx_issue_nop_inst_scenario;  // sample for bist dx issue nop instruction
      set_cov_bist_dx_issue_run_lpbk_inst_scenario;  // sample for bist dx issue run instruction
      set_cov_bist_dx_issue_run_dram_inst_scenario;  // sample for bist dx issue run instruction
      set_cov_bist_dx_issue_stop_inst_scenario;  // sample for bist dx issue stop instruction
      set_cov_bist_dx_issue_reset_inst_scenario;  // sample for bist dx issue reset instruction
      set_cov_bist_setup_ac_dx_not_enable_same_time_scenario; // sample for both ac and dx not enable same time
       
      sample_cov_BISTRR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTRR  
//--------------------------------------------
   task unpack_BISTRR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        BINST_2_0     = reg_value[2:0];            
        BMODE_3       = reg_value[3];              
        BINF_4        = reg_value[4];               
        NFAIL_12_5    = reg_value[12:5];           
        BSONF_13      = reg_value[13];             
        BDXEN_14      = reg_value[14];             
        BACEN_15      = reg_value[15];             
        BDMEN_16      = reg_value[16];             
        BDPAT_18_17   = reg_value[18:17];          
        BDXSEL_22_19  = reg_value[22:19];         
        BCKSEL_24_23  = reg_value[24:23];         
        BCCSEL_26_25  = reg_value[26:25];         
        //BISTRR_RESERVED_31_27 = reg_value[31:27];
      end
      1:begin            
        BINST_2_0_T     = reg_value[2:0];          
        BMODE_3_T       = reg_value[3];           
        BINF_4_T        = reg_value[4];            
        NFAIL_12_5_T    = reg_value[12:5];        
        BSONF_13_T      = reg_value[13];          
        BDXEN_14_T      = reg_value[14];          
        BACEN_15_T      = reg_value[15];          
        BDMEN_16_T      = reg_value[16];          
        BDPAT_18_17_T   = reg_value[18:17];       
        BDXSEL_22_19_T  = reg_value[22:19];       
        BCKSEL_24_23_T  = reg_value[24:23];       
        BCCSEL_26_25_T  = reg_value[26:25];       
        BISTRR_RESERVED_31_27_T = reg_value[31:27];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTRR

   
//--------------------------------------------   
// Task to sample the register BISTRR 
//--------------------------------------------
   task sample_cov_BISTRR_param;
    begin       
`ifdef FUNCOV   
     BISTRRcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTRR_param


       
//--------------------------------------------
// Task to set coverage on the BISTWCR
//--------------------------------------------
   task set_cov_BISTWCR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTWCR(reg_value,select);  
      sample_cov_BISTWCR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTWCR  
//--------------------------------------------
   task unpack_BISTWCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        BWCNT_15_0     = reg_value[15:0];            
        //BISTWCR_RESERVED_31_16     = reg_value[31:16];
      end
      1:begin            
        BWCNT_15_0_T     = reg_value[15:0];            
        BISTWCR_RESERVED_31_16_T     = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTWCR

   
//--------------------------------------------   
// Task to sample the register BISTWCR 
//--------------------------------------------
   task sample_cov_BISTWCR_param;
    begin       
`ifdef FUNCOV   
     BISTWCRcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTWCR_param


       
//--------------------------------------------
// Task to set coverage on the BISTMSKR0
//--------------------------------------------
   task set_cov_BISTMSKR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTMSKR0(reg_value,select);  
      sample_cov_BISTMSKR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTMSKR0  
//--------------------------------------------
   task unpack_BISTMSKR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin          
        AMSK_15_0       = reg_value[15:0];   
        BAMSK_18_16     = reg_value[18:16]; 
        WEMSK_19        = reg_value[19];    
        CKEMSK_23_20    = reg_value[23:20];
        CSMSK_27_24     = reg_value[27:24]; 
        ODTMSK_31_28    = reg_value[31:28];
      end
      1:begin            
        AMSK_15_0_T     = reg_value[15:0]; 
        BAMSK_18_16_T   = reg_value[18:16];
        WEMSK_19_T      = reg_value[19];   
        CKEMSK_23_20_T  = reg_value[23:20];
        CSMSK_27_24_T   = reg_value[27:24];
        ODTMSK_31_28_T  = reg_value[31:28];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTMSKR0

   
//--------------------------------------------   
// Task to sample the register BISTMSKR0 
//--------------------------------------------
   task sample_cov_BISTMSKR0_param;
    begin       
`ifdef FUNCOV   
     BISTMSKR0cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTMSKR0_param


       
//--------------------------------------------
// Task to set coverage on the BISTMSKR1
//--------------------------------------------
   task set_cov_BISTMSKR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTMSKR1(reg_value,select);  
      sample_cov_BISTMSKR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTMSKR1  
//--------------------------------------------
   task unpack_BISTMSKR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin
        RASMSK_0      = reg_value[0];               
        CASMSK_1      = reg_value[1];               
        //BISTMSKR1_RESERVED_26_2  = reg_value[26:2];
        PARMSK_27     = reg_value[27];               
        DMMSK_31_28   = reg_value[31:28];               
      end
      1:begin            
        RASMSK_0_T   = reg_value[0];                  
        CASMSK_1_T   = reg_value[1];                  
        BISTMSKR1_RESERVED_26_2_T  = reg_value[26:2];
        PARMSK_27_T     = reg_value[27];               
        DMMSK_31_28_T   = reg_value[31:28];               
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTMSKR1

   
//--------------------------------------------   
// Task to sample the register BISTMSKR1 
//--------------------------------------------
   task sample_cov_BISTMSKR1_param;
    begin       
`ifdef FUNCOV   
     BISTMSKR1cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTMSKR1_param


       
//--------------------------------------------
// Task to set coverage on the BISTMSKR2
//--------------------------------------------
   task set_cov_BISTMSKR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTMSKR2(reg_value,select);  
      sample_cov_BISTMSKR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTMSKR2  
//--------------------------------------------
   task unpack_BISTMSKR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin
        DQMSK_31_0   = reg_value[31:0];               
      end
      1:begin            
        DQMSK_31_0_T   = reg_value[31:0];               
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTMSKR2

   
//--------------------------------------------   
// Task to sample the register BISTMSKR2 
//--------------------------------------------
   task sample_cov_BISTMSKR2_param;
    begin       
`ifdef FUNCOV   
     BISTMSKR2cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTMSKR2_param


              
//--------------------------------------------
// Task to set coverage on the BISTLSR
//--------------------------------------------
   task set_cov_BISTLSR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTLSR(reg_value,select);  
      sample_cov_BISTLSR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTLSR  
//--------------------------------------------
   task unpack_BISTLSR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        LFSR_SEED_31_0     = reg_value[31:0];
      end
      1:begin            
        LFSR_SEED_31_0_T   = reg_value[31:0];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTLSR

   
//--------------------------------------------   
// Task to sample the register BISTLSR 
//--------------------------------------------
   task sample_cov_BISTLSR_param;
    begin       
`ifdef FUNCOV   
     BISTLSRcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTLSR_param


       
//--------------------------------------------
// Task to set coverage on the BISTAR0
//--------------------------------------------
   task set_cov_BISTAR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTAR0(reg_value,select);  
      sample_cov_BISTAR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTAR0  
//--------------------------------------------
   task unpack_BISTAR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin       
        BCOL_11_0     = reg_value[11:0];          
        BROW_27_12    = reg_value[27:12];         
        BBANK_30_28   = reg_value[30:28];        
        //BISTAR0_RESERVED_31 = reg_value[31];
      end
      1:begin            
        BCOL_11_0_T   = reg_value[11:0];        
        BROW_27_12_T  = reg_value[27:12];       
        BBANK_30_28_T = reg_value[30:28];       
        BISTAR0_RESERVED_31_T = reg_value[31];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTAR0

   
//--------------------------------------------   
// Task to sample the register BISTAR0 
//--------------------------------------------
   task sample_cov_BISTAR0_param;
    begin       
`ifdef FUNCOV   
     BISTAR0cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTAR0_param


       
//--------------------------------------------
// Task to set coverage on the BISTAR1
//--------------------------------------------
   task set_cov_BISTAR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTAR1(reg_value,select);  
      sample_cov_BISTAR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTAR1  
//--------------------------------------------
   task unpack_BISTAR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        BRANK_1_0      = reg_value[1:0];          
        BMRANK_3_2     = reg_value[3:2];         
        BAINC_15_4     = reg_value[15:4];         
        //BISTAR1_RESERVED_31_16  = reg_value[31:16];
      end
      1:begin            
        BRANK_1_0_T    = reg_value[1:0];       
        BMRANK_3_2_T   = reg_value[3:2];       
        BAINC_15_4_T   = reg_value[15:4];      
        BISTAR1_RESERVED_31_16_T  = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTAR1

   
//--------------------------------------------   
// Task to sample the register BISTAR1 
//--------------------------------------------
   task sample_cov_BISTAR1_param;
    begin       
`ifdef FUNCOV   
     BISTAR1cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTAR1_param


       
//--------------------------------------------
// Task to set coverage on the BISTAR2
//--------------------------------------------
   task set_cov_BISTAR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTAR2(reg_value,select);  
      sample_cov_BISTAR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTAR2  
//--------------------------------------------
   task unpack_BISTAR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin  
        BMCOL_11_0       = reg_value[11:0];         
        BMROW_27_12      = reg_value[27:12];        
        BMBANK_30_28     = reg_value[30:28];       
        //BISTAR2_RESERVED_31     = reg_value[31];  
      end
      1:begin            
        BMCOL_11_0_T     = reg_value[11:0];        
        BMROW_27_12_T    = reg_value[27:12];       
        BMBANK_30_28_T   = reg_value[30:28];       
        BISTAR2_RESERVED_31_T     = reg_value[31];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTAR2

   
//--------------------------------------------   
// Task to sample the register BISTAR2 
//--------------------------------------------
   task sample_cov_BISTAR2_param;
    begin       
`ifdef FUNCOV   
     BISTAR2cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTAR2_param


       
//--------------------------------------------
// Task to set coverage on the BISTUDPR
//--------------------------------------------
   task set_cov_BISTUDPR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTUDPR(reg_value,select);  
      sample_cov_BISTUDPR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTUDPR  
//--------------------------------------------
   task unpack_BISTUDPR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        BUDP0_15_0     = reg_value[15:0]; 
        BUPD1_31_16    = reg_value[31:16];
      end
      1:begin            
        BUDP0_15_0_T   = reg_value[15:0]; 
        BUPD1_31_16_T  = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTUDPR

   
//--------------------------------------------   
// Task to sample the register BISTUDPR 
//--------------------------------------------
   task sample_cov_BISTUDPR_param;
    begin       
`ifdef FUNCOV   
     BISTUDPRcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTUDPR_param


       
//--------------------------------------------
// Task to set coverage on the BISTGSR
//--------------------------------------------
   task set_cov_BISTGSR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTGSR(reg_value,select);  
      sample_cov_BISTGSR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTGSR  
//--------------------------------------------
   task unpack_BISTGSR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        BDONE_0       = reg_value[0];                
        BACERR_1      = reg_value[1];               
        BDXERR_2      = reg_value[2];               
        //BISTGSR_RESERVED_19_3 = reg_value[19:3];  
        DMBER_EVEN_1_BEAT_21_20  = reg_value[21:20];           
        DMBER_EVEN_2_BEAT_23_22  = reg_value[23:22];           
        DMBER_ODD_1_BEAT_25_24   = reg_value[25:24];            
        DMBER_ODD_2_BEAT_27_26   = reg_value[27:26];            
        RASBER_29_28  = reg_value[29:28];           
        CASBER_31_30  = reg_value[31:30];           
      end
      1:begin            
        BDONE_0_T       = reg_value[0];
        BACERR_1_T      = reg_value[1];
        BDXERR_2_T      = reg_value[2];
        BISTGSR_RESERVED_19_3_T = reg_value[19:3];  
        DMBER_EVEN_1_BEAT_21_20_T  = reg_value[21:20];           
        DMBER_EVEN_2_BEAT_23_22_T  = reg_value[23:22];           
        DMBER_ODD_1_BEAT_25_24_T   = reg_value[25:24];            
        DMBER_ODD_2_BEAT_27_26_T   = reg_value[27:26];            
        RASBER_29_28_T  = reg_value[29:28]; 
        CASBER_31_30_T  = reg_value[31:30]; 
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTGSR

   
//--------------------------------------------   
// Task to sample the register BISTGSR 
//--------------------------------------------
   task sample_cov_BISTGSR_param;
    begin       
`ifdef FUNCOV   
     BISTGSRcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTGSR_param


       
//--------------------------------------------
// Task to set coverage on the BISTWER
//--------------------------------------------
   task set_cov_BISTWER;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTWER(reg_value,select);  
      sample_cov_BISTWER_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTWER  
//--------------------------------------------
   task unpack_BISTWER;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ACWER_15_0     = reg_value[15:0]; 
        DXWER_31_16    = reg_value[31:16];
      end
      1:begin            
        ACWER_15_0_T   = reg_value[15:0]; 
        DXWER_31_16_T  = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTWER

   
//--------------------------------------------   
// Task to sample the register BISTWER 
//--------------------------------------------
   task sample_cov_BISTWER_param;
    begin       
`ifdef FUNCOV   
     BISTWERcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTWER_param


       
//--------------------------------------------
// Task to set coverage on the BISTBER0
//--------------------------------------------
   task set_cov_BISTBER0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTBER0(reg_value,select);  
      sample_cov_BISTBER0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTBER0  
//--------------------------------------------
   task unpack_BISTBER0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ABER_A0_1_0      = reg_value[1:0];   
        ABER_A1_3_2      = reg_value[3:2];           
        ABER_A2_5_4      = reg_value[5:4];   
        ABER_A3_7_6      = reg_value[7:6];   
        ABER_A4_9_8      = reg_value[9:8];   
        ABER_A5_11_10    = reg_value[11:10]; 
        ABER_A6_13_12    = reg_value[13:12]; 
        ABER_A7_15_14    = reg_value[15:14]; 
        ABER_A8_17_16    = reg_value[17:16]; 
        ABER_A9_19_18    = reg_value[19:18]; 
        ABER_A10_21_20   = reg_value[21:20];
        ABER_A11_23_22   = reg_value[23:22];
        ABER_A12_25_24   = reg_value[25:24];
        ABER_A13_27_26   = reg_value[27:26];        
        ABER_A14_29_28   = reg_value[29:28];        
        ABER_A15_31_30   = reg_value[31:30];
      end
      1:begin            
        ABER_A0_1_0_T      = reg_value[1:0];   
        ABER_A1_3_2_T      = reg_value[3:2];           
        ABER_A2_5_4_T      = reg_value[5:4];   
        ABER_A3_7_6_T      = reg_value[7:6];   
        ABER_A4_9_8_T      = reg_value[9:8];   
        ABER_A5_11_10_T    = reg_value[11:10]; 
        ABER_A6_13_12_T    = reg_value[13:12]; 
        ABER_A7_15_14_T    = reg_value[15:14]; 
        ABER_A8_17_16_T    = reg_value[17:16]; 
        ABER_A9_19_18_T    = reg_value[19:18]; 
        ABER_A10_21_20_T   = reg_value[21:20];
        ABER_A11_23_22_T   = reg_value[23:22];
        ABER_A12_25_24_T   = reg_value[25:24];
        ABER_A13_27_26_T   = reg_value[27:26];        
        ABER_A14_29_28_T   = reg_value[29:28];        
        ABER_A15_31_30_T   = reg_value[31:30];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTBER0

   
//--------------------------------------------   
// Task to sample the register BISTBER0 
//--------------------------------------------
   task sample_cov_BISTBER0_param;
    begin       
`ifdef FUNCOV   
     BISTBER0cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTBER0_param


       
//--------------------------------------------
// Task to set coverage on the BISTBER1
//--------------------------------------------
   task set_cov_BISTBER1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTBER1(reg_value,select);  
      sample_cov_BISTBER1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTBER1  
//--------------------------------------------
   task unpack_BISTBER1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        BABER_BA0_1_0       = reg_value[1:0];      
        BABER_BA0_3_2       = reg_value[3:2];      
        BABER_BA0_5_4       = reg_value[5:4];      
        WEBER_7_6           = reg_value[7:6];          
        CKEBER_CK0_9_8      = reg_value[9:8];     
        CKEBER_CK1_11_10    = reg_value[11:10]; 
        CKEBER_CK2_13_12    = reg_value[13:12]; 
        CKEBER_CK3_15_14    = reg_value[15:14]; 
        CSBER_CS0_17_16     = reg_value[17:16];  
        CSBER_CS1_19_18     = reg_value[19:18];  
        CSBER_CS2_21_20     = reg_value[21:20];  
        CSBER_CS3_23_22     = reg_value[23:22];  
        ODTBER_ODT0_25_24   = reg_value[25:24];
        ODTBER_ODT1_27_26   = reg_value[27:26];
        ODTBER_ODT2_29_28   = reg_value[29:28];
        ODTBER_ODT3_31_30   = reg_value[31:30];
      end
      1:begin            
        BABER_BA0_1_0_T       = reg_value[1:0];      
        BABER_BA0_3_2_T       = reg_value[3:2];      
        BABER_BA0_5_4_T       = reg_value[5:4];      
        WEBER_7_6_T           = reg_value[7:6];          
        CKEBER_CK0_9_8_T      = reg_value[9:8];     
        CKEBER_CK1_11_10_T    = reg_value[11:10]; 
        CKEBER_CK2_13_12_T    = reg_value[13:12]; 
        CKEBER_CK3_15_14_T    = reg_value[15:14]; 
        CSBER_CS0_17_16_T     = reg_value[17:16];  
        CSBER_CS1_19_18_T     = reg_value[19:18];  
        CSBER_CS2_21_20_T     = reg_value[21:20];  
        CSBER_CS3_23_22_T     = reg_value[23:22];  
        ODTBER_ODT0_25_24_T   = reg_value[25:24];
        ODTBER_ODT1_27_26_T   = reg_value[27:26];
        ODTBER_ODT2_29_28_T   = reg_value[29:28];
        ODTBER_ODT3_31_30_T   = reg_value[31:30];
      end
    endcase 
`endif
    end   
   endtask // unpack_BISTBER1

   
//--------------------------------------------   
// Task to sample the register BISTBER1 
//--------------------------------------------
   task sample_cov_BISTBER1_param;
    begin       
`ifdef FUNCOV   
     BISTBER1cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTBER1_param


       
//--------------------------------------------
// Task to set coverage on the BISTBER2
//--------------------------------------------
   task set_cov_BISTBER2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTBER2(reg_value,select);  
      sample_cov_BISTBER2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTBER2  
//--------------------------------------------
   task unpack_BISTBER2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        DQBER0_DQ_BIT0_RISEEDGE_1_0     = reg_value[1:0];    
        DQBER0_DQ_BIT1_RISEEDGE_3_2     = reg_value[3:2];    
        DQBER0_DQ_BIT2_RISEEDGE_5_4     = reg_value[5:4];    
        DQBER0_DQ_BIT3_RISEEDGE_7_6     = reg_value[7:6];    
        DQBER0_DQ_BIT4_RISEEDGE_9_8     = reg_value[9:8];    
        DQBER0_DQ_BIT5_RISEEDGE_11_10   = reg_value[11:10];
        DQBER0_DQ_BIT6_RISEEDGE_13_12   = reg_value[13:12];
        DQBER0_DQ_BIT7_RISEEDGE_15_14   = reg_value[15:14];
        DQBER0_DQ_BIT0_FALLEDGE_17_16   = reg_value[17:16];
        DQBER0_DQ_BIT1_FALLEDGE_19_18   = reg_value[19:18];
        DQBER0_DQ_BIT2_FALLEDGE_21_20   = reg_value[21:20];
        DQBER0_DQ_BIT3_FALLEDGE_23_22   = reg_value[23:22];
        DQBER0_DQ_BIT4_FALLEDGE_25_24   = reg_value[25:24];
        DQBER0_DQ_BIT5_FALLEDGE_27_26   = reg_value[27:26];
        DQBER0_DQ_BIT6_FALLEDGE_29_28   = reg_value[29:28];
        DQBER0_DQ_BIT7_FALLEDGE_31_30   = reg_value[31:30];
      end
      1:begin            
        DQBER0_DQ_BIT0_RISEEDGE_1_0_T     = reg_value[1:0];    
        DQBER0_DQ_BIT1_RISEEDGE_3_2_T     = reg_value[3:2];    
        DQBER0_DQ_BIT2_RISEEDGE_5_4_T     = reg_value[5:4];    
        DQBER0_DQ_BIT3_RISEEDGE_7_6_T     = reg_value[7:6];    
        DQBER0_DQ_BIT4_RISEEDGE_9_8_T     = reg_value[9:8];    
        DQBER0_DQ_BIT5_RISEEDGE_11_10_T   = reg_value[11:10];
        DQBER0_DQ_BIT6_RISEEDGE_13_12_T   = reg_value[13:12];
        DQBER0_DQ_BIT7_RISEEDGE_15_14_T   = reg_value[15:14];
        DQBER0_DQ_BIT0_FALLEDGE_17_16_T   = reg_value[17:16];
        DQBER0_DQ_BIT1_FALLEDGE_19_18_T   = reg_value[19:18];
        DQBER0_DQ_BIT2_FALLEDGE_21_20_T   = reg_value[21:20];
        DQBER0_DQ_BIT3_FALLEDGE_23_22_T   = reg_value[23:22];
        DQBER0_DQ_BIT4_FALLEDGE_25_24_T   = reg_value[25:24];
        DQBER0_DQ_BIT5_FALLEDGE_27_26_T   = reg_value[27:26];
        DQBER0_DQ_BIT6_FALLEDGE_29_28_T   = reg_value[29:28];
        DQBER0_DQ_BIT7_FALLEDGE_31_30_T   = reg_value[31:30];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTBER2

   
//--------------------------------------------   
// Task to sample the register BISTBER2 
//--------------------------------------------
   task sample_cov_BISTBER2_param;
    begin       
`ifdef FUNCOV   
     BISTBER2cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTBER2_param

       
//--------------------------------------------
// Task to set coverage on the BISTBER3
//--------------------------------------------
   task set_cov_BISTBER3;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTBER3(reg_value,select);  
      sample_cov_BISTBER3_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTBER3  
//--------------------------------------------
   task unpack_BISTBER3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        DQBER1_DQ_BIT0_RISEEDGE_1_0     = reg_value[1:0];    
        DQBER1_DQ_BIT1_RISEEDGE_3_2     = reg_value[3:2];    
        DQBER1_DQ_BIT2_RISEEDGE_5_4     = reg_value[5:4];    
        DQBER1_DQ_BIT3_RISEEDGE_7_6     = reg_value[7:6];    
        DQBER1_DQ_BIT4_RISEEDGE_9_8     = reg_value[9:8];    
        DQBER1_DQ_BIT5_RISEEDGE_11_10   = reg_value[11:10];
        DQBER1_DQ_BIT6_RISEEDGE_13_12   = reg_value[13:12];
        DQBER1_DQ_BIT7_RISEEDGE_15_14   = reg_value[15:14];
        DQBER1_DQ_BIT0_FALLEDGE_17_16   = reg_value[17:16];
        DQBER1_DQ_BIT1_FALLEDGE_19_18   = reg_value[19:18];
        DQBER1_DQ_BIT2_FALLEDGE_21_20   = reg_value[21:20];
        DQBER1_DQ_BIT3_FALLEDGE_23_22   = reg_value[23:22];
        DQBER1_DQ_BIT4_FALLEDGE_25_24   = reg_value[25:24];
        DQBER1_DQ_BIT5_FALLEDGE_27_26   = reg_value[27:26];
        DQBER1_DQ_BIT6_FALLEDGE_29_28   = reg_value[29:28];
        DQBER1_DQ_BIT7_FALLEDGE_31_30   = reg_value[31:30];
      end
      1:begin            
        DQBER1_DQ_BIT0_RISEEDGE_1_0_T     = reg_value[1:0];    
        DQBER1_DQ_BIT1_RISEEDGE_3_2_T     = reg_value[3:2];    
        DQBER1_DQ_BIT2_RISEEDGE_5_4_T     = reg_value[5:4];    
        DQBER1_DQ_BIT3_RISEEDGE_7_6_T     = reg_value[7:6];    
        DQBER1_DQ_BIT4_RISEEDGE_9_8_T     = reg_value[9:8];    
        DQBER1_DQ_BIT5_RISEEDGE_11_10_T   = reg_value[11:10];
        DQBER1_DQ_BIT6_RISEEDGE_13_12_T   = reg_value[13:12];
        DQBER1_DQ_BIT7_RISEEDGE_15_14_T   = reg_value[15:14];
        DQBER1_DQ_BIT0_FALLEDGE_17_16_T   = reg_value[17:16];
        DQBER1_DQ_BIT1_FALLEDGE_19_18_T   = reg_value[19:18];
        DQBER1_DQ_BIT2_FALLEDGE_21_20_T   = reg_value[21:20];
        DQBER1_DQ_BIT3_FALLEDGE_23_22_T   = reg_value[23:22];
        DQBER1_DQ_BIT4_FALLEDGE_25_24_T   = reg_value[25:24];
        DQBER1_DQ_BIT5_FALLEDGE_27_26_T   = reg_value[27:26];
        DQBER1_DQ_BIT6_FALLEDGE_29_28_T   = reg_value[29:28];
        DQBER1_DQ_BIT7_FALLEDGE_31_30_T   = reg_value[31:30];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTBER3

   
//--------------------------------------------   
// Task to sample the register BISTBER3 
//--------------------------------------------
   task sample_cov_BISTBER3_param;
    begin       
`ifdef FUNCOV   
     BISTBER3cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTBER3_param


       
//--------------------------------------------
// Task to set coverage on the BISTWCSR
//--------------------------------------------
   task set_cov_BISTWCSR;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTWCSR(reg_value,select);  
      sample_cov_BISTWCSR_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTWCSR  
//--------------------------------------------
   task unpack_BISTWCSR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ACWCNT_15_0     = reg_value[15:0]; 
        DXWCNT_31_16    = reg_value[31:16];
      end                                  
      1:begin                              
        ACWCNT_15_0_T   = reg_value[15:0]; 
        DXWCNT_31_16_T  = reg_value[31:16];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTWCSR

   
//--------------------------------------------   
// Task to sample the register BISTWCSR 
//--------------------------------------------
   task sample_cov_BISTWCSR_param;
    begin       
`ifdef FUNCOV   
     BISTWCSRcov.sample();       
`endif
    end       
   endtask // sample_cov_BISTWCSR_param


       
//--------------------------------------------
// Task to set coverage on the BISTFWR0
//--------------------------------------------
   task set_cov_BISTFWR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTFWR0(reg_value,select);  
      sample_cov_BISTFWR0_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTFWR0  
//--------------------------------------------
   task unpack_BISTFWR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        AWEBS_15_0      = reg_value[15:0];   
        BAWEBS_18_16    = reg_value[18:16]; 
        WEWEBS_19       = reg_value[19];    
        CKEWEBS_23_20   = reg_value[23:20];
        CSWEBS_27_24    = reg_value[27:24]; 
        ODTWEBS_31_28   = reg_value[31:28];
      end
      1:begin             
        AWEBS_15_0_T      = reg_value[15:0]; 
        BAWEBS_18_16_T    = reg_value[18:16];
        WEWEBS_19_T       = reg_value[19];   
        CKEWEBS_23_20_T   = reg_value[23:20];
        CSWEBS_27_24_T    = reg_value[27:24];
        ODTWEBS_31_28_T   = reg_value[31:28];
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTFWR0

   
//--------------------------------------------   
// Task to sample the register BISTFWR0 
//--------------------------------------------
   task sample_cov_BISTFWR0_param;
    begin       
`ifdef FUNCOV   
     BISTFWR0cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTFWR0_param


       
//--------------------------------------------
// Task to set coverage on the BISTFWR1
//--------------------------------------------
   task set_cov_BISTFWR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTFWR1(reg_value,select);  
      sample_cov_BISTFWR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTFWR1   
//--------------------------------------------
   task unpack_BISTFWR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        RASWEBS_0      = reg_value[0];             
        CASWEBS_1      = reg_value[1];             
        //BISTFWR1_RESERVED_27_2 = reg_value[27:2];
        DMWEBS_31_28    = reg_value[31:28];               
      end
      1:begin            
        RASWEBS_0_T      = reg_value[0];               
        CASWEBS_1_T      = reg_value[1];               
        BISTFWR1_RESERVED_27_2_T = reg_value[27:2]; 
        DMWEBS_31_28_T     = reg_value[31:28];               
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTFWR1

   
//--------------------------------------------   
// Task to sample the register BISTFWR1 
//--------------------------------------------
   task sample_cov_BISTFWR1_param;
    begin       
`ifdef FUNCOV   
     BISTFWR1cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTFWR1_param


       
//--------------------------------------------
// Task to set coverage on the BISTFWR2
//--------------------------------------------
   task set_cov_BISTFWR2;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_BISTFWR2(reg_value,select);  
      sample_cov_BISTFWR2_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register BISTFWR2   
//--------------------------------------------
   task unpack_BISTFWR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
         DQBER0_EVEN_DQ_BIT0_RISEEDGE_0		= reg_value[0]; 
         DQBER0_EVEN_DQ_BIT1_RISEEDGE_1		= reg_value[1]; 
         DQBER0_EVEN_DQ_BIT2_RISEEDGE_2		= reg_value[2]; 
         DQBER0_EVEN_DQ_BIT3_RISEEDGE_3		= reg_value[3]; 
         DQBER0_EVEN_DQ_BIT4_RISEEDGE_4		= reg_value[4]; 
         DQBER0_EVEN_DQ_BIT5_RISEEDGE_5		= reg_value[5]; 
         DQBER0_EVEN_DQ_BIT6_RISEEDGE_6		= reg_value[6]; 
         DQBER0_EVEN_DQ_BIT7_RISEEDGE_7		= reg_value[7]; 
         DQBER0_EVEN_DQ_BIT0_FALLEDGE_8		= reg_value[8]; 
         DQBER0_EVEN_DQ_BIT1_FALLEDGE_9		= reg_value[9]; 
         DQBER0_EVEN_DQ_BIT2_FALLEDGE_10	= reg_value[10];
         DQBER0_EVEN_DQ_BIT3_FALLEDGE_11	= reg_value[11];
         DQBER0_EVEN_DQ_BIT4_FALLEDGE_12	= reg_value[12];
         DQBER0_EVEN_DQ_BIT5_FALLEDGE_13	= reg_value[13];
         DQBER0_EVEN_DQ_BIT6_FALLEDGE_14	= reg_value[14];
         DQBER0_EVEN_DQ_BIT7_FALLEDGE_15	= reg_value[15];
         DQBER0_ODD_DQ_BIT0_RISEEDGE_16		= reg_value[16]; 
         DQBER0_ODD_DQ_BIT1_RISEEDGE_17		= reg_value[17]; 
         DQBER0_ODD_DQ_BIT2_RISEEDGE_18		= reg_value[18]; 
         DQBER0_ODD_DQ_BIT3_RISEEDGE_19		= reg_value[19]; 
         DQBER0_ODD_DQ_BIT4_RISEEDGE_20		= reg_value[20]; 
         DQBER0_ODD_DQ_BIT5_RISEEDGE_21		= reg_value[21]; 
         DQBER0_ODD_DQ_BIT6_RISEEDGE_22		= reg_value[22]; 
         DQBER0_ODD_DQ_BIT7_RISEEDGE_23		= reg_value[23]; 
         DQBER0_ODD_DQ_BIT0_FALLEDGE_24		= reg_value[24]; 
         DQBER0_ODD_DQ_BIT1_FALLEDGE_25		= reg_value[25]; 
         DQBER0_ODD_DQ_BIT2_FALLEDGE_26		= reg_value[26]; 
         DQBER0_ODD_DQ_BIT3_FALLEDGE_27		= reg_value[27]; 
         DQBER0_ODD_DQ_BIT4_FALLEDGE_28		= reg_value[28]; 
         DQBER0_ODD_DQ_BIT5_FALLEDGE_29		= reg_value[29]; 
         DQBER0_ODD_DQ_BIT6_FALLEDGE_30		= reg_value[30]; 
         DQBER0_ODD_DQ_BIT7_FALLEDGE_31		= reg_value[31]; 
      end
      1:begin
         DQBER0_EVEN_DQ_BIT0_RISEEDGE_0_T		= reg_value[0]; 
         DQBER0_EVEN_DQ_BIT1_RISEEDGE_1_T		= reg_value[1]; 
         DQBER0_EVEN_DQ_BIT2_RISEEDGE_2_T		= reg_value[2]; 
         DQBER0_EVEN_DQ_BIT3_RISEEDGE_3_T		= reg_value[3]; 
         DQBER0_EVEN_DQ_BIT4_RISEEDGE_4_T		= reg_value[4]; 
         DQBER0_EVEN_DQ_BIT5_RISEEDGE_5_T		= reg_value[5]; 
         DQBER0_EVEN_DQ_BIT6_RISEEDGE_6_T		= reg_value[6]; 
         DQBER0_EVEN_DQ_BIT7_RISEEDGE_7_T		= reg_value[7]; 
         DQBER0_EVEN_DQ_BIT0_FALLEDGE_8_T		= reg_value[8]; 
         DQBER0_EVEN_DQ_BIT1_FALLEDGE_9_T		= reg_value[9]; 
         DQBER0_EVEN_DQ_BIT2_FALLEDGE_10_T	= reg_value[10];
         DQBER0_EVEN_DQ_BIT3_FALLEDGE_11_T	= reg_value[11];
         DQBER0_EVEN_DQ_BIT4_FALLEDGE_12_T	= reg_value[12];
         DQBER0_EVEN_DQ_BIT5_FALLEDGE_13_T	= reg_value[13];
         DQBER0_EVEN_DQ_BIT6_FALLEDGE_14_T	= reg_value[14];
         DQBER0_EVEN_DQ_BIT7_FALLEDGE_15_T	= reg_value[15];
         DQBER0_ODD_DQ_BIT0_RISEEDGE_16_T		= reg_value[16]; 
         DQBER0_ODD_DQ_BIT1_RISEEDGE_17_T		= reg_value[17]; 
         DQBER0_ODD_DQ_BIT2_RISEEDGE_18_T		= reg_value[18]; 
         DQBER0_ODD_DQ_BIT3_RISEEDGE_19_T		= reg_value[19]; 
         DQBER0_ODD_DQ_BIT4_RISEEDGE_20_T		= reg_value[20]; 
         DQBER0_ODD_DQ_BIT5_RISEEDGE_21_T		= reg_value[21]; 
         DQBER0_ODD_DQ_BIT6_RISEEDGE_22_T		= reg_value[22]; 
         DQBER0_ODD_DQ_BIT7_RISEEDGE_23_T		= reg_value[23]; 
         DQBER0_ODD_DQ_BIT0_FALLEDGE_24_T		= reg_value[24]; 
         DQBER0_ODD_DQ_BIT1_FALLEDGE_25_T		= reg_value[25]; 
         DQBER0_ODD_DQ_BIT2_FALLEDGE_26_T		= reg_value[26]; 
         DQBER0_ODD_DQ_BIT3_FALLEDGE_27_T		= reg_value[27]; 
         DQBER0_ODD_DQ_BIT4_FALLEDGE_28_T		= reg_value[28]; 
         DQBER0_ODD_DQ_BIT5_FALLEDGE_29_T		= reg_value[29]; 
         DQBER0_ODD_DQ_BIT6_FALLEDGE_30_T		= reg_value[30]; 
         DQBER0_ODD_DQ_BIT7_FALLEDGE_31_T		= reg_value[31]; 
      end
     endcase 
`endif
    end   
   endtask // unpack_BISTFWR2

   
//--------------------------------------------   
// Task to sample the register BISTFWR2 
//--------------------------------------------
   task sample_cov_BISTFWR2_param;
    begin       
`ifdef FUNCOV   
     BISTFWR2cov.sample();       
`endif
    end       
   endtask // sample_cov_BISTFWR2_param


  
//-------------
//--------------------------------------------
// Task to set coverage on the GPR0
//--------------------------------------------
   task set_cov_GPR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_GPR0(reg_value,select);  
      sample_cov_GPR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register GPR0
//--------------------------------------------
   task unpack_GPR0;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         GPR0_31_0    = reg_value[31:0];
      end
      1:begin 
         GPR0_31_0_T  = reg_value[31:0];
      end
     endcase
`endif
           
    end      
   endtask // unpack_GPR0   

   
//--------------------------------------------   
// Task to sample the register GPR0
//--------------------------------------------
   task sample_cov_GPR0_param;
    begin       
`ifdef FUNCOV   
     GPR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_GPR0_param


//--------------------------------------------
// Task to set coverage on the GPR1
//--------------------------------------------
   task set_cov_GPR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_GPR1(reg_value,select);  
      sample_cov_GPR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register GPR1
//--------------------------------------------
   task unpack_GPR1;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         GPR1_31_0   = reg_value[31:0];
      end
      1:begin 
         GPR1_31_0_T = reg_value[31:0];
      end
     endcase
`endif
           
    end      
   endtask // unpack_GPR1   

   
//--------------------------------------------   
// Task to sample the register GPR1
//--------------------------------------------
   task sample_cov_GPR1_param;
    begin       
`ifdef FUNCOV   
     GPR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_GPR1_param



  
//--------------------------------------------
// Task to set coverage on the ZQ0CR0
//--------------------------------------------
   task set_cov_ZQ0CR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ0CR0(reg_value,select);  
      sample_cov_ZQ0CR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ0CR0
//--------------------------------------------
   task unpack_ZQ0CR0;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZDATA_27_0_r0  = reg_value[27:0];
         ZDEN_28_r0     = reg_value[28];
         ZCALBYP_29_r0  = reg_value[29];
         ZCALEN_30_r0     = reg_value[30];
         ZQPD_31_r0     = reg_value[31];        
      end
      1:begin 
         ZDATA_27_0_r0_T  = reg_value[27:0];
         ZDEN_28_r0_T     = reg_value[28];
         ZCALBYP_29_r0_T  = reg_value[29];
         ZCALEN_30_r0_T     = reg_value[30];
         ZQPD_31_r0_T     = reg_value[31];        
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ0CR0   

   
//--------------------------------------------   
// Task to sample the register ZQ0CR0
//--------------------------------------------
   task sample_cov_ZQ0CR0_param;
    begin       
`ifdef FUNCOV   
     ZQ0CR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ0CR0_param


       
//--------------------------------------------
// Task to set coverage on the ZQ0CR1
//--------------------------------------------
   task set_cov_ZQ0CR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ0CR1(reg_value,select);  
      sample_cov_ZQ0CR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ0CR1  
//--------------------------------------------
   task unpack_ZQ0CR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ZPROG_7_0_r0     = reg_value[7:0];
        //ZQ0CR1_RESERVED_31_8_r0     = reg_value[31:8];
      end
      1:begin            
        ZPROG_7_0_r0_T     = reg_value[7:0];
        ZQ0CR1_RESERVED_31_8_r0_T     = reg_value[31:8];
      end
     endcase 
`endif
    end   
   endtask // unpack_ZQ0CR1

   
//--------------------------------------------   
// Task to sample the register ZQ0CR1 
//--------------------------------------------
   task sample_cov_ZQ0CR1_param;
    begin       
`ifdef FUNCOV   
     ZQ0CR1cov.sample();       
`endif
    end       
   endtask // sample_cov_ZQ0CR1_param


  
  
//--------------------------------------------
// Task to set coverage on the ZQ0SR0
//--------------------------------------------
   task set_cov_ZQ0SR0;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ0SR0(reg_value,select);  
      sample_cov_ZQ0SR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ0SR0
//--------------------------------------------
   task unpack_ZQ0SR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZCTRL_27_0_r0    = reg_value[27:0];
         //ZQ0SR0_RESERVED_29_28_r0 = reg_value[29:28];
         ZERR_30_r0       = reg_value[30];
         ZDONE_31_r0      = reg_value[31];            
      end
      1:begin 
         ZCTRL_27_0_r0_T  = reg_value[27:0];
         ZQ0SR0_RESERVED_29_28_r0_T = reg_value[29:28];
         ZERR_30_r0_T     = reg_value[30];
         ZDONE_31_r0_T    = reg_value[31];            
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ0SR0   

   
//--------------------------------------------   
// Task to sample the register ZQ0SR0
//--------------------------------------------
   task sample_cov_ZQ0SR0_param;
    begin       
`ifdef FUNCOV   
     ZQ0SR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ0SR0_param
      

//--------------------------------------------
// Task to set coverage on the ZQ0SR1
//--------------------------------------------
   task set_cov_ZQ0SR1;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ0SR1(reg_value,select);  
      sample_cov_ZQ0SR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ0SR1
//--------------------------------------------
   task unpack_ZQ0SR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZPD_1_0_r0 = reg_value[1:0];      
         ZPU_3_2_r0 = reg_value[3:2];
         OPD_5_4_r0 = reg_value[5:4];
         OPU_7_6_r0 = reg_value[7:6];
         //ZQ0SR1_RESERVED_31_8_r0 = reg_value[31:8];
      end
      1:begin 
         ZPD_1_0_r0_T = reg_value[1:0];      
         ZPU_3_2_r0_T = reg_value[3:2];
         OPD_5_4_r0_T = reg_value[5:4];
         OPU_7_6_r0_T = reg_value[7:6];
         ZQ0SR1_RESERVED_31_8_r0_T = reg_value[31:8];
       end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ0SR1   

   
//--------------------------------------------   
// Task to sample the register ZQ0SR1
//--------------------------------------------
   task sample_cov_ZQ0SR1_param;
    begin       
`ifdef FUNCOV   
     ZQ0SR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ0SR1_param


  
//--------------------------------------------
// Task to set coverage on the ZQ1CR0
//--------------------------------------------
   task set_cov_ZQ1CR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ1CR0(reg_value,select);  
      sample_cov_ZQ1CR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ1CR0
//--------------------------------------------
   task unpack_ZQ1CR0;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZDATA_27_0_r1  = reg_value[27:0];
         ZDEN_28_r1     = reg_value[28];
         ZCALBYP_29_r1  = reg_value[29];
         ZCALEN_30_r1     = reg_value[30];
         ZQPD_31_r1     = reg_value[31];        
      end
      1:begin 
         ZDATA_27_0_r1_T  = reg_value[27:0];
         ZDEN_28_r1_T     = reg_value[28];
         ZCALBYP_29_r1_T  = reg_value[29];
         ZCALEN_30_r1_T     = reg_value[30];
         ZQPD_31_r1_T     = reg_value[31];        
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ1CR0   

   
//--------------------------------------------   
// Task to sample the register ZQ1CR0
//--------------------------------------------
   task sample_cov_ZQ1CR0_param;
    begin       
`ifdef FUNCOV   
     ZQ1CR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ1CR0_param


//--------------------------------------------
// Task to set coverage on the ZQ1CR1
//--------------------------------------------
   task set_cov_ZQ1CR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ1CR1(reg_value,select);  
      sample_cov_ZQ1CR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ1CR1  
//--------------------------------------------
   task unpack_ZQ1CR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ZPROG_7_0_r1     = reg_value[7:0];
        //ZQ1CR1_RESERVED_31_8_r1     = reg_value[31:8];
      end
      1:begin            
        ZPROG_7_0_r1_T     = reg_value[7:0];
        ZQ1CR1_RESERVED_31_8_r1_T     = reg_value[31:8];
      end
     endcase 
`endif
    end   
   endtask // unpack_ZQ1CR1

   
//--------------------------------------------   
// Task to sample the register ZQ1CR1 
//--------------------------------------------
   task sample_cov_ZQ1CR1_param;
    begin       
`ifdef FUNCOV   
     ZQ1CR1cov.sample();       
`endif
    end       
   endtask // sample_cov_ZQ1CR1_param


  
  
//--------------------------------------------
// Task to set coverage on the ZQ1SR0
//--------------------------------------------
   task set_cov_ZQ1SR0;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ1SR0(reg_value,select);  
      sample_cov_ZQ1SR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ1SR0
//--------------------------------------------
   task unpack_ZQ1SR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZCTRL_27_0_r1    = reg_value[27:0];
         //ZQ1SR0_RESERVED_29_28_r1 = reg_value[29:28];
         ZERR_30_r1       = reg_value[30];
         ZDONE_31_r1      = reg_value[31];            
      end
      1:begin 
         ZCTRL_27_0_r1_T  = reg_value[27:0];
         ZQ1SR0_RESERVED_29_28_r1_T = reg_value[29:28];
         ZERR_30_r1_T     = reg_value[30];
         ZDONE_31_r1_T    = reg_value[31];            
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ1SR0   

   
//--------------------------------------------   
// Task to sample the register ZQ1SR0
//--------------------------------------------
   task sample_cov_ZQ1SR0_param;
    begin       
`ifdef FUNCOV   
     ZQ1SR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ1SR0_param
      

//--------------------------------------------
// Task to set coverage on the ZQ1SR1
//--------------------------------------------
   task set_cov_ZQ1SR1;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ1SR1(reg_value,select);  
      sample_cov_ZQ1SR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ1SR1
//--------------------------------------------
   task unpack_ZQ1SR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZPD_1_0_r1 = reg_value[1:0];      
         ZPU_3_2_r1 = reg_value[3:2];
         OPD_5_4_r1 = reg_value[5:4];
         OPU_7_6_r1 = reg_value[7:6];
         //ZQ1SR1_RESERVED_31_8_r1 = reg_value[31:8];
      end
      1:begin 
         ZPD_1_0_r1_T = reg_value[1:0];      
         ZPU_3_2_r1_T = reg_value[3:2];
         OPD_5_4_r1_T = reg_value[5:4];
         OPU_7_6_r1_T = reg_value[7:6];
         ZQ1SR1_RESERVED_31_8_r1_T = reg_value[31:8];
       end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ1SR1   

   
//--------------------------------------------   
// Task to sample the register ZQ1SR1
//--------------------------------------------
   task sample_cov_ZQ1SR1_param;
    begin       
`ifdef FUNCOV   
     ZQ1SR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ1SR1_param




//--------------------------------------------
// Task to set coverage on the ZQ2CR0
//--------------------------------------------
   task set_cov_ZQ2CR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ2CR0(reg_value,select);  
      sample_cov_ZQ2CR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ2CR0
//--------------------------------------------
   task unpack_ZQ2CR0;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZDATA_27_0_r2  = reg_value[27:0];
         ZDEN_28_r2     = reg_value[28];
         ZCALBYP_29_r2  = reg_value[29];
         ZCALEN_30_r2     = reg_value[30];
         ZQPD_31_r2     = reg_value[31];        
      end
      1:begin 
         ZDATA_27_0_r2_T  = reg_value[27:0];
         ZDEN_28_r2_T     = reg_value[28];
         ZCALBYP_29_r2_T  = reg_value[29];
         ZCALEN_30_r2_T     = reg_value[30];
         ZQPD_31_r2_T     = reg_value[31];        
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ2CR0   

   
//--------------------------------------------   
// Task to sample the register ZQ2CR0
//--------------------------------------------
   task sample_cov_ZQ2CR0_param;
    begin       
`ifdef FUNCOV   
     ZQ2CR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ2CR0_param


  

//--------------------------------------------
// Task to set coverage on the ZQ2CR1
//--------------------------------------------
   task set_cov_ZQ2CR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ2CR1(reg_value,select);  
      sample_cov_ZQ2CR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ2CR1  
//--------------------------------------------
   task unpack_ZQ2CR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ZPROG_7_0_r2     = reg_value[7:0];
        //ZQ2CR1_RESERVED_31_8_r2     = reg_value[31:8];
      end
      1:begin            
        ZPROG_7_0_r2_T     = reg_value[7:0];
        ZQ2CR1_RESERVED_31_8_r2_T     = reg_value[31:8];
      end
     endcase 
`endif
    end   
   endtask // unpack_ZQ2CR1

   
//--------------------------------------------   
// Task to sample the register ZQ2CR1 
//--------------------------------------------
   task sample_cov_ZQ2CR1_param;
    begin       
`ifdef FUNCOV   
     ZQ2CR1cov.sample();       
`endif
    end       
   endtask // sample_cov_ZQ2CR1_param


  
  
//--------------------------------------------
// Task to set coverage on the ZQ2SR0
//--------------------------------------------
   task set_cov_ZQ2SR0;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ2SR0(reg_value,select);  
      sample_cov_ZQ2SR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ2SR0
//--------------------------------------------
   task unpack_ZQ2SR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZCTRL_27_0_r2    = reg_value[27:0];
         //ZQ2SR0_RESERVED_29_28_r2 = reg_value[29:28];
         ZERR_30_r2       = reg_value[30];
         ZDONE_31_r2      = reg_value[31];            
      end
      1:begin 
         ZCTRL_27_0_r2_T  = reg_value[27:0];
         ZQ2SR0_RESERVED_29_28_r2_T = reg_value[29:28];
         ZERR_30_r2_T     = reg_value[30];
         ZDONE_31_r2_T    = reg_value[31];            
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ2SR0   

   
//--------------------------------------------   
// Task to sample the register ZQ2SR0
//--------------------------------------------
   task sample_cov_ZQ2SR0_param;
    begin       
`ifdef FUNCOV   
     ZQ2SR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ2SR0_param
      

//--------------------------------------------
// Task to set coverage on the ZQ2SR1
//--------------------------------------------
   task set_cov_ZQ2SR1;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ2SR1(reg_value,select);  
      sample_cov_ZQ2SR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ2SR1
//--------------------------------------------
   task unpack_ZQ2SR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZPD_1_0_r2 = reg_value[1:0];      
         ZPU_3_2_r2 = reg_value[3:2];
         OPD_5_4_r2 = reg_value[5:4];
         OPU_7_6_r2 = reg_value[7:6];
         //ZQ2SR1_RESERVED_31_8_r2 = reg_value[31:8];
      end
      1:begin 
         ZPD_1_0_r2_T = reg_value[1:0];      
         ZPU_3_2_r2_T = reg_value[3:2];
         OPD_5_4_r2_T = reg_value[5:4];
         OPU_7_6_r2_T = reg_value[7:6];
         ZQ2SR1_RESERVED_31_8_r2_T = reg_value[31:8];
       end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ2SR1   

   
//--------------------------------------------   
// Task to sample the register ZQ2SR1
//--------------------------------------------
   task sample_cov_ZQ2SR1_param;
    begin       
`ifdef FUNCOV   
     ZQ2SR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ2SR1_param



      
//--------------------------------------------
// Task to set coverage on the ZQ3CR0
//--------------------------------------------
   task set_cov_ZQ3CR0;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ3CR0(reg_value,select);  
      sample_cov_ZQ3CR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ3CR0
//--------------------------------------------
   task unpack_ZQ3CR0;      
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZDATA_27_0_r3  = reg_value[27:0];
         ZDEN_28_r3     = reg_value[28];
         ZCALBYP_29_r3  = reg_value[29];
         ZCALEN_30_r3     = reg_value[30];
         ZQPD_31_r3     = reg_value[31];        
      end
      1:begin 
         ZDATA_27_0_r3_T  = reg_value[27:0];
         ZDEN_28_r3_T     = reg_value[28];
         ZCALBYP_29_r3_T  = reg_value[29];
         ZCALEN_30_r3_T     = reg_value[30];
         ZQPD_31_r3_T     = reg_value[31];        
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ3CR0   

   
//--------------------------------------------   
// Task to sample the register ZQ3CR0
//--------------------------------------------
   task sample_cov_ZQ3CR0_param;
    begin       
`ifdef FUNCOV   
     ZQ3CR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ3CR0_param


//--------------------------------------------
// Task to set coverage on the ZQ3CR1
//--------------------------------------------
   task set_cov_ZQ3CR1;         
      input [31:0]       reg_value;
      input    [1:0]     select;       
    begin 
`ifdef FUNCOV   
      unpack_ZQ3CR1(reg_value,select);  
      sample_cov_ZQ3CR1_param();      
`endif
    end 
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ3CR1  
//--------------------------------------------
   task unpack_ZQ3CR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV
    case(select)
      0:begin            
        ZPROG_7_0_r3     = reg_value[7:0];
        //ZQ3CR1_RESERVED_31_8_r3     = reg_value[31:8];
      end
      1:begin            
        ZPROG_7_0_r3_T     = reg_value[7:0];
        ZQ3CR1_RESERVED_31_8_r3_T     = reg_value[31:8];
      end
     endcase 
`endif
    end   
   endtask // unpack_ZQ3CR1

   
//--------------------------------------------   
// Task to sample the register ZQ3CR1 
//--------------------------------------------
   task sample_cov_ZQ3CR1_param;
    begin       
`ifdef FUNCOV   
     ZQ3CR1cov.sample();       
`endif
    end       
   endtask // sample_cov_ZQ3CR1_param


  
  
//--------------------------------------------
// Task to set coverage on the ZQ3SR0
//--------------------------------------------
   task set_cov_ZQ3SR0;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ3SR0(reg_value,select);  
      sample_cov_ZQ3SR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ3SR0
//--------------------------------------------
   task unpack_ZQ3SR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZCTRL_27_0_r3    = reg_value[27:0];
         //ZQ3SR0_RESERVED_29_28_r3 = reg_value[29:28];
         ZERR_30_r3       = reg_value[30];
         ZDONE_31_r3      = reg_value[31];            
      end
      1:begin 
         ZCTRL_27_0_r3_T  = reg_value[27:0];
         ZQ3SR0_RESERVED_29_28_r3_T = reg_value[29:28];
         ZERR_30_r3_T     = reg_value[30];
         ZDONE_31_r3_T    = reg_value[31];            
      end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ3SR0   

   
//--------------------------------------------   
// Task to sample the register ZQ3SR0
//--------------------------------------------
   task sample_cov_ZQ3SR0_param;
    begin       
`ifdef FUNCOV   
     ZQ3SR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ3SR0_param
      

//--------------------------------------------
// Task to set coverage on the ZQ3SR1
//--------------------------------------------
   task set_cov_ZQ3SR1;         
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_ZQ3SR1(reg_value,select);  
      sample_cov_ZQ3SR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register ZQ3SR1
//--------------------------------------------
   task unpack_ZQ3SR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin 
         ZPD_1_0_r3 = reg_value[1:0];      
         ZPU_3_2_r3 = reg_value[3:2];
         OPD_5_4_r3 = reg_value[5:4];
         OPU_7_6_r3 = reg_value[7:6];
         //ZQ3SR1_RESERVED_31_8_r3 = reg_value[31:8];
      end
      1:begin 
         ZPD_1_0_r3_T = reg_value[1:0];      
         ZPU_3_2_r3_T = reg_value[3:2];
         OPD_5_4_r3_T = reg_value[5:4];
         OPU_7_6_r3_T = reg_value[7:6];
         ZQ3SR1_RESERVED_31_8_r3_T = reg_value[31:8];
       end
     endcase
`endif
           
    end      
   endtask // unpack_ZQ3SR1   

   
//--------------------------------------------   
// Task to sample the register ZQ3SR1
//--------------------------------------------
   task sample_cov_ZQ3SR1_param;
    begin       
`ifdef FUNCOV   
     ZQ3SR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_ZQ3SR1_param
      





// ----   
  
//--------------------------------------------
// Task to set coverage on the DX0GCR
//--------------------------------------------
   task set_cov_DX0GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0GCR(reg_value,select);  
      sample_cov_DX0GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0GCR
//--------------------------------------------
   task unpack_DX0GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx0        = reg_value[0];     
        DQSODT_1_dx0      = reg_value[1];   
        DQODT_2_dx0       = reg_value[2];    
        DXIOM_3_dx0       = reg_value[3];    
        DXPDD_4_dx0       = reg_value[4];    
        DXPDR_5_dx0       = reg_value[5];    
        DQSRPD_6_dx0      = reg_value[6];   
        DSEN_8_7_dx0      = reg_value[8:7];   
        DQSRTT_9_dx0      = reg_value[9];   
        DQRTT_10_dx0      = reg_value[10];   
        RTTOH_12_11_dx0   = reg_value[12:11];
        RTTOAL_13_dx0     = reg_value[13];   
        DXOEO_15_14_dx0   = reg_value[15:14];
        PLLRST_16_dx0			= reg_value[16];            
        PLLPD_17_dx0			= reg_value[17];             
        GSHIFT_18_dx0			= reg_value[18];            
        PLLBYP_19_dx0			= reg_value[19];            
        //DX0GCR_RESERVED_25_20_dx0			= reg_value[25:20];
        WLRKEN_29_26_dx0	= reg_value[29:26];         
        MDLEN_30_dx0			= reg_value[30];             
        CALBYP_31_dx0			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx0_T       = reg_value[0];     
        DQSODT_1_dx0_T     = reg_value[1];    
        DQODT_2_dx0_T      = reg_value[2];    
        DXIOM_3_dx0_T      = reg_value[3];    
        DXPDD_4_dx0_T      = reg_value[4];    
        DXPDR_5_dx0_T      = reg_value[5];    
        DQSRPD_6_dx0_T     = reg_value[6];    
        DSEN_8_7_dx0_T     = reg_value[8:7];  
        DQSRTT_9_dx0_T     = reg_value[9];    
        DQRTT_10_dx0_T     = reg_value[10];   
        RTTOH_12_11_dx0_T  = reg_value[12:11];
        RTTOAL_13_dx0_T    = reg_value[13];   
        DXOEO_15_14_dx0_T  = reg_value[15:14];      
        PLLRST_16_dx0_T			= reg_value[16];            
        PLLPD_17_dx0_T			= reg_value[17];             
        GSHIFT_18_dx0_T			= reg_value[18];            
        PLLBYP_19_dx0_T			= reg_value[19];            
        DX0GCR_RESERVED_25_20_dx0_T			= reg_value[25:20];
        WLRKEN_29_26_dx0_T  = reg_value[29:26];         
        MDLEN_30_dx0_T			= reg_value[30];             
        CALBYP_31_dx0_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX0GCR   

   
//--------------------------------------------   
// Task to sample the register DX0GCR
//--------------------------------------------
   task sample_cov_DX0GCR_param;
    begin       
`ifdef FUNCOV   
     DX0GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0GCR_param





//--------------------------------------------
// Task to set coverage on the DX0GSR0
//--------------------------------------------
   task set_cov_DX0GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0GSR0(reg_value,select);  
      sample_cov_DX0GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0GSR0
//--------------------------------------------
   task unpack_DX0GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx0 			= reg_value[0];
         RDQSCAL_1_dx0 			= reg_value[1];
         RDQSNCAL_2_dx0 		= reg_value[2];
         GDQSCAL_3_dx0 			= reg_value[3];
         WLCAL_4_dx0 			  = reg_value[4];
         WLDONE_5_dx0 			= reg_value[5];
         WLERR_6_dx0 			  = reg_value[6];
         WLPRD_14_7_dx0 		= reg_value[14:7];
         DPLOCK_15_dx0 			= reg_value[15];
         GDQSPRD_23_16_dx0 	= reg_value[23:16];
         QSGERR_27_24_dx0 	= reg_value[27:24];
         WLDQ_28_dx0 			  = reg_value[28];
         //DX0GSR0_RESERVED_31_29_dx0 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx0_T 			= reg_value[0];
         RDQSCAL_1_dx0_T 			= reg_value[1];
         RDQSNCAL_2_dx0_T 	 	= reg_value[2];
         GDQSCAL_3_dx0_T 			= reg_value[3];
         WLCAL_4_dx0_T        = reg_value[4];
         WLDONE_5_dx0_T 			= reg_value[5];
         WLERR_6_dx0_T        = reg_value[6];
         WLPRD_14_7_dx0_T 	 	= reg_value[14:7];
         DPLOCK_15_dx0_T 			= reg_value[15];
         GDQSPRD_23_16_dx0_T 	= reg_value[23:16];
         QSGERR_27_24_dx0_T 	= reg_value[27:24];
         WLDQ_28_dx0_T 			  = reg_value[28];
         DX0GSR0_RESERVED_31_29_dx0_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX0GSR0   

   
//--------------------------------------------   
// Task to sample the register DX0GSR0
//--------------------------------------------
   task sample_cov_DX0GSR0_param;
     begin 
`ifdef FUNCOV   
     DX0GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX0GSR1
//--------------------------------------------
   task set_cov_DX0GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0GSR1(reg_value,select);  
      sample_cov_DX0GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0GSR1
//--------------------------------------------
   task unpack_DX0GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx0 = reg_value[0];
         DLTCODE_24_1_dx0 = reg_value[24:1];
         //DX0GSR1_RESERVED_31_25_dx0 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx0_T = reg_value[0];
         DLTCODE_24_1_dx0_T = reg_value[24:1];
         DX0GSR1_RESERVED_31_25_dx0_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0GSR1   

   
//--------------------------------------------   
// Task to sample the register DX0GSR1
//--------------------------------------------
   task sample_cov_DX0GSR1_param;
    begin  
`ifdef FUNCOV   
     DX0GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0GSR1_param


//--------------------------------------------
// Task to set coverage on the DX0BDLR0
//--------------------------------------------
   task set_cov_DX0BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0BDLR0(reg_value,select);  
      sample_cov_DX0BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0BDLR0
//--------------------------------------------
   task unpack_DX0BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx0 = reg_value[5:0];
         DQ1WBD_11_6_dx0 = reg_value[11:6];
         DQ2WBD_17_12_dx0 = reg_value[17:12];
         DQ3WBD_23_18_dx0 = reg_value[23:18];
         DQ4WBD_29_24_dx0 = reg_value[29:24];
         //DX0BDLR0_RESERVED_31_30_dx0 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx0_T = reg_value[5:0];
         DQ1WBD_11_6_dx0_T = reg_value[11:6];
         DQ2WBD_17_12_dx0_T = reg_value[17:12];
         DQ3WBD_23_18_dx0_T = reg_value[23:18];
         DQ4WBD_29_24_dx0_T = reg_value[29:24];
         DX0BDLR0_RESERVED_31_30_dx0_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx0_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx0_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx0_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx0_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx0_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx0_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx0_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx0_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx0_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx0_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX0BDLR0
//--------------------------------------------
   task sample_cov_DX0BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX0BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX0BDLR1
//--------------------------------------------
   task set_cov_DX0BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0BDLR1(reg_value,select);  
      sample_cov_DX0BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0BDLR1
//--------------------------------------------
   task unpack_DX0BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx0 = reg_value[5:0];
         DQ6WBD_11_6_dx0 = reg_value[11:6];
         DQ7WBD_17_12_dx0 = reg_value[17:12];
         DMWBD_23_18_dx0 = reg_value[23:18];
         DSWBD_29_24_dx0 = reg_value[29:24];
         //DX0BDLR1_RESERVED_31_30_dx0 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx0_T = reg_value[5:0];
         DQ6WBD_11_6_dx0_T = reg_value[11:6];
         DQ7WBD_17_12_dx0_T = reg_value[17:12];
         DMWBD_23_18_dx0_T = reg_value[23:18];
         DSWBD_29_24_dx0_T = reg_value[29:24];
         DX0BDLR1_RESERVED_31_30_dx0_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx0_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx0_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx0_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx0_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx0_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx0_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx0_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx0_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx0_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx0_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX0BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX0BDLR1
//--------------------------------------------
   task sample_cov_DX0BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX0BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX0BDLR2
//--------------------------------------------
   task set_cov_DX0BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0BDLR2(reg_value,select);  
      sample_cov_DX0BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0BDLR2
//--------------------------------------------
   task unpack_DX0BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx0   = reg_value[5:0];
         DQOEBD_11_6_dx0  = reg_value[11:6];
         DSRBD_17_12_dx0  = reg_value[17:12];
         DSNRBD_23_18_dx0 = reg_value[23:18];
         //DX0BDLR2_RESERVED_31_24_dx0 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx0_T   = reg_value[5:0];
         DQOEBD_11_6_dx0_T  = reg_value[11:6];
         DSRBD_17_12_dx0_T  = reg_value[17:12];
         DSNRBD_23_18_dx0_T = reg_value[23:18];
         DX0BDLR2_RESERVED_31_24_dx0_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx0_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx0_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx0_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx0_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx0_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx0_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx0_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx0_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX0BDLR2
//--------------------------------------------
   task sample_cov_DX0BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX0BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX0BDLR3
//--------------------------------------------
   task set_cov_DX0BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0BDLR3(reg_value,select);  
      sample_cov_DX0BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0BDLR3
//--------------------------------------------
   task unpack_DX0BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx0 = reg_value[5:0];
         DQ1RBD_11_6_dx0 = reg_value[11:6];
         DQ2RBD_17_12_dx0 = reg_value[17:12];
         DQ3RBD_23_18_dx0 = reg_value[23:18];
         DQ4RBD_29_24_dx0 = reg_value[29:24];
         //DX0BDLR3_RESERVED_31_30_dx0 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx0_T = reg_value[5:0];
         DQ1RBD_11_6_dx0_T = reg_value[11:6];
         DQ2RBD_17_12_dx0_T = reg_value[17:12];
         DQ3RBD_23_18_dx0_T = reg_value[23:18];
         DQ4RBD_29_24_dx0_T = reg_value[29:24];
         DX0BDLR3_RESERVED_31_30_dx0_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx0_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx0_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx0_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx0_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx0_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx0_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx0_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx0_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx0_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx0_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX0BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX0BDLR3
//--------------------------------------------
   task sample_cov_DX0BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX0BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX0BDLR4
//--------------------------------------------
   task set_cov_DX0BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0BDLR4(reg_value,select);  
      sample_cov_DX0BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0BDLR4
//--------------------------------------------
   task unpack_DX0BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx0 = reg_value[5:0];
         DQ6RBD_11_6_dx0 = reg_value[11:6];
         DQ7RBD_17_12_dx0 = reg_value[17:12];
         DMRBD_23_18_dx0 = reg_value[23:18];
         //DX0BDLR4_RESERVED_31_24_dx0 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx0_T = reg_value[5:0];
         DQ6RBD_11_6_dx0_T = reg_value[11:6];
         DQ7RBD_17_12_dx0_T = reg_value[17:12];
         DMRBD_23_18_dx0_T = reg_value[23:18];
         DX0BDLR4_RESERVED_31_24_dx0_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx0_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx0_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx0_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx0_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx0_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx0_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx0_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx0_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX0BDLR4
//--------------------------------------------
   task sample_cov_DX0BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX0BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX0LCDLR0
//--------------------------------------------
   task set_cov_DX0LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0LCDLR0(reg_value,select);  
      sample_cov_DX0LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0LCDLR0
//--------------------------------------------
   task unpack_DX0LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx0 = reg_value[7:0];
         R1WLD_15_8_dx0 = reg_value[15:8];   
         R2WLD_23_16_dx0 = reg_value[23:16];
         R3WLD_31_24_dx0 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx0_T = reg_value[7:0];
         R1WLD_15_8_dx0_T = reg_value[15:8];   
         R2WLD_23_16_dx0_T = reg_value[23:16];
         R3WLD_31_24_dx0_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx0_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx0_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx0_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx0_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx0_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx0_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx0_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx0_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX0LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX0LCDLR0
//--------------------------------------------
   task sample_cov_DX0LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX0LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX0LCDLR1
//--------------------------------------------
   task set_cov_DX0LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0LCDLR1(reg_value,select);  
      sample_cov_DX0LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0LCDLR1
//--------------------------------------------
   task unpack_DX0LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx0     = reg_value[7:0];
         RDQSD_15_8_dx0   = reg_value[15:8];   
         RDQSND_23_16_dx0 = reg_value[23:16];   
         //DX0LCDLR1_RESERVED_31_24_dx0 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx0_T     = reg_value[7:0];
         RDQSD_15_8_dx0_T   = reg_value[15:8];   
         RDQSND_23_16_dx0_T = reg_value[23:16];   
         DX0LCDLR1_RESERVED_31_24_dx0_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx0_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx0_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx0_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx0_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx0_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx0_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX0LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX0LCDLR1
//--------------------------------------------
   task sample_cov_DX0LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX0LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX0LCDLR2
//--------------------------------------------
   task set_cov_DX0LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0LCDLR2(reg_value,select);  
      sample_cov_DX0LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0LCDLR2
//--------------------------------------------
   task unpack_DX0LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx0 = reg_value[7:0];
         R1DQSGD_15_8_dx0 = reg_value[15:8];   
         R2DQSGD_23_16_dx0 = reg_value[23:16];
         R3DQSGD_31_24_dx0 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx0_T = reg_value[7:0];
         R1DQSGD_15_8_dx0_T = reg_value[15:8];   
         R2DQSGD_23_16_dx0_T = reg_value[23:16];
         R3DQSGD_31_24_dx0_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx0_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx0_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx0_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx0_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx0_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx0_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx0_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx0_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX0LCDLR2
//--------------------------------------------
   task sample_cov_DX0LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX0LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX0MDLR
//--------------------------------------------
   task set_cov_DX0MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0MDLR(reg_value,select);  
      sample_cov_DX0MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0MDLR
//--------------------------------------------
   task unpack_DX0MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx0 = reg_value[7:0];
         TPRD_15_8_dx0 = reg_value[15:8];
         MDLD_23_16_dx0 = reg_value[23:16];  
         //DX0MDLR_RESERVED_31_24_dx0 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx0_T = reg_value[7:0];
         TPRD_15_8_dx0_T = reg_value[15:8];
         MDLD_23_16_dx0_T = reg_value[23:16];  
         DX0MDLR_RESERVED_31_24_dx0_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx0_vt_drift = reg_value[7:0];
         TPRD_15_8_dx0_vt_drift = reg_value[15:8];
         MDLD_23_16_dx0_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx0_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx0_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx0_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0MDLR   

   
//--------------------------------------------   
// Task to sample the register DX0MDLR
//--------------------------------------------
   task sample_cov_DX0MDLR_param;
     begin 
`ifdef FUNCOV   
     DX0MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0MDLR_param



//--------------------------------------------
// Task to set coverage on the DX0GTR
//--------------------------------------------
   task set_cov_DX0GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX0GTR(reg_value,select);  
      sample_cov_DX0GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0GTR  
//--------------------------------------------
   task unpack_DX0GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx0        = reg_value[2:0];           
        R1DGSL_5_3_dx0				= reg_value[5:3];           
        R2DGSL_8_6_dx0				= reg_value[8:6];           
        R3DGSL_11_9_dx0				= reg_value[11:9];          
        R0WLSL_13_12_dx0			= reg_value[13:12];         
        R1WLSL_15_14_dx0			= reg_value[15:14];         
        R2WLSL_17_16_dx0			= reg_value[17:16];         
        R3WLSL_19_18_dx0			= reg_value[19:18];         
        //DX0GTR_RESERVED_31_20_dx0			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx0_T        = reg_value[2:0];           
        R1DGSL_5_3_dx0_T				= reg_value[5:3];           
        R2DGSL_8_6_dx0_T				= reg_value[8:6];           
        R3DGSL_11_9_dx0_T				= reg_value[11:9];          
        R0WLSL_13_12_dx0_T			= reg_value[13:12];         
        R1WLSL_15_14_dx0_T			= reg_value[15:14];         
        R2WLSL_17_16_dx0_T			= reg_value[17:16];         
        R3WLSL_19_18_dx0_T			= reg_value[19:18];         
        DX0GTR_RESERVED_31_20_dx0_T			= reg_value[31:20];
      end
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX0GTR   


  
   
//--------------------------------------------   
// Task to sample the register DX0GTR  
//--------------------------------------------
   task sample_cov_DX0GTR_param;
    begin  
`ifdef FUNCOV   
     DX0GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX0GTR_param

  

//--------------------------------------------
// Task to set coverage on the DX0GSR2
//--------------------------------------------
   task set_cov_DX0GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX0GSR2(reg_value,select);  
      sample_cov_DX0GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX0GSR2
//--------------------------------------------
   task unpack_DX0GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx0  = reg_value[0];
         RDWN_1_dx0   = reg_value[1]; 
         WDERR_2_dx0  = reg_value[2];
         WDWN_3_dx0   = reg_value[3]; 
         REERR_4_dx0  = reg_value[4];
         REWN_5_dx0   = reg_value[5]; 
         WEERR_6_dx0  = reg_value[6];
         WEWN_7_dx0   = reg_value[7]; 
         ESTAT_11_8_dx0  = reg_value[11:8];
         //DX0GSR2_RESERVED_31_12_dx0 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx0_T  = reg_value[0];
         RDWN_1_dx0_T   = reg_value[1]; 
         WDERR_2_dx0_T  = reg_value[2];
         WDWN_3_dx0_T   = reg_value[3]; 
         REERR_4_dx0_T  = reg_value[4];
         REWN_5_dx0_T   = reg_value[5]; 
         WEERR_6_dx0_T  = reg_value[6];
         WEWN_7_dx0_T   = reg_value[7]; 
         ESTAT_11_8_dx0_T  = reg_value[11:8];
         DX0GSR2_RESERVED_31_12_dx0_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX0GSR2   

   
//--------------------------------------------   
// Task to sample the register DX0GSR2
//--------------------------------------------
   task sample_cov_DX0GSR2_param;
    begin  
`ifdef FUNCOV   
     DX0GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX0GSR2_param



  

//DX1
//--------------------------------------------
// Task to set coverage on the DX1GCR
//--------------------------------------------
   task set_cov_DX1GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1GCR(reg_value,select);  
      sample_cov_DX1GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1GCR
//--------------------------------------------
   task unpack_DX1GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx1        = reg_value[0];     
        DQSODT_1_dx1      = reg_value[1];   
        DQODT_2_dx1       = reg_value[2];    
        DXIOM_3_dx1       = reg_value[3];    
        DXPDD_4_dx1       = reg_value[4];    
        DXPDR_5_dx1       = reg_value[5];    
        DQSRPD_6_dx1      = reg_value[6];   
        DSEN_8_7_dx1      = reg_value[8:7];   
        DQSRTT_9_dx1      = reg_value[9];   
        DQRTT_10_dx1      = reg_value[10];   
        RTTOH_12_11_dx1   = reg_value[12:11];
        RTTOAL_13_dx1     = reg_value[13];   
        DXOEO_15_14_dx1   = reg_value[15:14];
        PLLRST_16_dx1			= reg_value[16];            
        PLLPD_17_dx1			= reg_value[17];             
        GSHIFT_18_dx1			= reg_value[18];            
        PLLBYP_19_dx1			= reg_value[19];            
        //DX1GCR_RESERVED_25_20_dx1			= reg_value[25:20];
        WLRKEN_29_26_dx1	= reg_value[29:26];         
        MDLEN_30_dx1			= reg_value[30];             
        CALBYP_31_dx1			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx1_T       = reg_value[0];     
        DQSODT_1_dx1_T     = reg_value[1];    
        DQODT_2_dx1_T      = reg_value[2];    
        DXIOM_3_dx1_T      = reg_value[3];    
        DXPDD_4_dx1_T      = reg_value[4];    
        DXPDR_5_dx1_T      = reg_value[5];    
        DQSRPD_6_dx1_T     = reg_value[6];    
        DSEN_8_7_dx1_T     = reg_value[8:7];  
        DQSRTT_9_dx1_T     = reg_value[9];    
        DQRTT_10_dx1_T     = reg_value[10];   
        RTTOH_12_11_dx1_T  = reg_value[12:11];
        RTTOAL_13_dx1_T    = reg_value[13];   
        DXOEO_15_14_dx1_T  = reg_value[15:14];      
        PLLRST_16_dx1_T			= reg_value[16];            
        PLLPD_17_dx1_T			= reg_value[17];             
        GSHIFT_18_dx1_T			= reg_value[18];            
        PLLBYP_19_dx1_T			= reg_value[19];            
        DX1GCR_RESERVED_25_20_dx1_T			= reg_value[25:20];
        WLRKEN_29_26_dx1_T  = reg_value[29:26];         
        MDLEN_30_dx1_T			= reg_value[30];             
        CALBYP_31_dx1_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX1GCR   

   
//--------------------------------------------   
// Task to sample the register DX1GCR
//--------------------------------------------
   task sample_cov_DX1GCR_param;
    begin       
`ifdef FUNCOV   
     DX1GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1GCR_param





//--------------------------------------------
// Task to set coverage on the DX1GSR0
//--------------------------------------------
   task set_cov_DX1GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1GSR0(reg_value,select);  
      sample_cov_DX1GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1GSR0
//--------------------------------------------
   task unpack_DX1GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx1 			= reg_value[0];
         RDQSCAL_1_dx1 			= reg_value[1];
         RDQSNCAL_2_dx1 		= reg_value[2];
         GDQSCAL_3_dx1 			= reg_value[3];
         WLCAL_4_dx1 			  = reg_value[4];
         WLDONE_5_dx1 			= reg_value[5];
         WLERR_6_dx1 			  = reg_value[6];
         WLPRD_14_7_dx1 		= reg_value[14:7];
         DPLOCK_15_dx1 			= reg_value[15];
         GDQSPRD_23_16_dx1 	= reg_value[23:16];
         QSGERR_27_24_dx1 	= reg_value[27:24];
         WLDQ_28_dx1 			  = reg_value[28];
         //DX1GSR0_RESERVED_31_29_dx1 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx1_T 			= reg_value[0];
         RDQSCAL_1_dx1_T 			= reg_value[1];
         RDQSNCAL_2_dx1_T 	 	= reg_value[2];
         GDQSCAL_3_dx1_T 			= reg_value[3];
         WLCAL_4_dx1_T        = reg_value[4];
         WLDONE_5_dx1_T 			= reg_value[5];
         WLERR_6_dx1_T        = reg_value[6];
         WLPRD_14_7_dx1_T 	 	= reg_value[14:7];
         DPLOCK_15_dx1_T 			= reg_value[15];
         GDQSPRD_23_16_dx1_T 	= reg_value[23:16];
         QSGERR_27_24_dx1_T 	= reg_value[27:24];
         WLDQ_28_dx1_T 			  = reg_value[28];
         DX1GSR0_RESERVED_31_29_dx1_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX1GSR0   

   
//--------------------------------------------   
// Task to sample the register DX1GSR0
//--------------------------------------------
   task sample_cov_DX1GSR0_param;
     begin 
`ifdef FUNCOV   
     DX1GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX1GSR1
//--------------------------------------------
   task set_cov_DX1GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1GSR1(reg_value,select);  
      sample_cov_DX1GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1GSR1
//--------------------------------------------
   task unpack_DX1GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx1 = reg_value[0];
         DLTCODE_24_1_dx1 = reg_value[24:1];
         //DX1GSR1_RESERVED_31_25_dx1 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx1_T = reg_value[0];
         DLTCODE_24_1_dx1_T = reg_value[24:1];
         DX1GSR1_RESERVED_31_25_dx1_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1GSR1   

   
//--------------------------------------------   
// Task to sample the register DX1GSR1
//--------------------------------------------
   task sample_cov_DX1GSR1_param;
    begin  
`ifdef FUNCOV   
     DX1GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1GSR1_param


//--------------------------------------------
// Task to set coverage on the DX1BDLR0
//--------------------------------------------
   task set_cov_DX1BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1BDLR0(reg_value,select);  
      sample_cov_DX1BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1BDLR0
//--------------------------------------------
   task unpack_DX1BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx1 = reg_value[5:0];
         DQ1WBD_11_6_dx1 = reg_value[11:6];
         DQ2WBD_17_12_dx1 = reg_value[17:12];
         DQ3WBD_23_18_dx1 = reg_value[23:18];
         DQ4WBD_29_24_dx1 = reg_value[29:24];
         //DX1BDLR0_RESERVED_31_30_dx1 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx1_T = reg_value[5:0];
         DQ1WBD_11_6_dx1_T = reg_value[11:6];
         DQ2WBD_17_12_dx1_T = reg_value[17:12];
         DQ3WBD_23_18_dx1_T = reg_value[23:18];
         DQ4WBD_29_24_dx1_T = reg_value[29:24];
         DX1BDLR0_RESERVED_31_30_dx1_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx1_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx1_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx1_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx1_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx1_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx1_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx1_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx1_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx1_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx1_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX1BDLR0
//--------------------------------------------
   task sample_cov_DX1BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX1BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX1BDLR1
//--------------------------------------------
   task set_cov_DX1BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1BDLR1(reg_value,select);  
      sample_cov_DX1BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1BDLR1
//--------------------------------------------
   task unpack_DX1BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx1 = reg_value[5:0];
         DQ6WBD_11_6_dx1 = reg_value[11:6];
         DQ7WBD_17_12_dx1 = reg_value[17:12];
         DMWBD_23_18_dx1 = reg_value[23:18];
         DSWBD_29_24_dx1 = reg_value[29:24];
         //DX1BDLR1_RESERVED_31_30_dx1 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx1_T = reg_value[5:0];
         DQ6WBD_11_6_dx1_T = reg_value[11:6];
         DQ7WBD_17_12_dx1_T = reg_value[17:12];
         DMWBD_23_18_dx1_T = reg_value[23:18];
         DSWBD_29_24_dx1_T = reg_value[29:24];
         DX1BDLR1_RESERVED_31_30_dx1_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx1_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx1_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx1_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx1_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx1_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx1_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx1_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx1_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx1_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx1_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX1BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX1BDLR1
//--------------------------------------------
   task sample_cov_DX1BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX1BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX1BDLR2
//--------------------------------------------
   task set_cov_DX1BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1BDLR2(reg_value,select);  
      sample_cov_DX1BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1BDLR2
//--------------------------------------------
   task unpack_DX1BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx1   = reg_value[5:0];
         DQOEBD_11_6_dx1  = reg_value[11:6];
         DSRBD_17_12_dx1  = reg_value[17:12];
         DSNRBD_23_18_dx1 = reg_value[23:18];
         //DX1BDLR2_RESERVED_31_24_dx1 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx1_T   = reg_value[5:0];
         DQOEBD_11_6_dx1_T  = reg_value[11:6];
         DSRBD_17_12_dx1_T  = reg_value[17:12];
         DSNRBD_23_18_dx1_T = reg_value[23:18];
         DX1BDLR2_RESERVED_31_24_dx1_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx1_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx1_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx1_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx1_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx1_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx1_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx1_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx1_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX1BDLR2
//--------------------------------------------
   task sample_cov_DX1BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX1BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX1BDLR3
//--------------------------------------------
   task set_cov_DX1BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1BDLR3(reg_value,select);  
      sample_cov_DX1BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1BDLR3
//--------------------------------------------
   task unpack_DX1BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx1 = reg_value[5:0];
         DQ1RBD_11_6_dx1 = reg_value[11:6];
         DQ2RBD_17_12_dx1 = reg_value[17:12];
         DQ3RBD_23_18_dx1 = reg_value[23:18];
         DQ4RBD_29_24_dx1 = reg_value[29:24];
         //DX1BDLR3_RESERVED_31_30_dx1 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx1_T = reg_value[5:0];
         DQ1RBD_11_6_dx1_T = reg_value[11:6];
         DQ2RBD_17_12_dx1_T = reg_value[17:12];
         DQ3RBD_23_18_dx1_T = reg_value[23:18];
         DQ4RBD_29_24_dx1_T = reg_value[29:24];
         DX1BDLR3_RESERVED_31_30_dx1_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx1_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx1_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx1_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx1_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx1_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx1_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx1_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx1_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx1_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx1_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX1BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX1BDLR3
//--------------------------------------------
   task sample_cov_DX1BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX1BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX1BDLR4
//--------------------------------------------
   task set_cov_DX1BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1BDLR4(reg_value,select);  
      sample_cov_DX1BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1BDLR4
//--------------------------------------------
   task unpack_DX1BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx1 = reg_value[5:0];
         DQ6RBD_11_6_dx1 = reg_value[11:6];
         DQ7RBD_17_12_dx1 = reg_value[17:12];
         DMRBD_23_18_dx1 = reg_value[23:18];
         //DX1BDLR4_RESERVED_31_24_dx1 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx1_T = reg_value[5:0];
         DQ6RBD_11_6_dx1_T = reg_value[11:6];
         DQ7RBD_17_12_dx1_T = reg_value[17:12];
         DMRBD_23_18_dx1_T = reg_value[23:18];
         DX1BDLR4_RESERVED_31_24_dx1_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx1_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx1_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx1_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx1_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx1_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx1_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx1_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx1_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX1BDLR4
//--------------------------------------------
   task sample_cov_DX1BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX1BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX1LCDLR0
//--------------------------------------------
   task set_cov_DX1LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1LCDLR0(reg_value,select);  
      sample_cov_DX1LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1LCDLR0
//--------------------------------------------
   task unpack_DX1LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx1 = reg_value[7:0];
         R1WLD_15_8_dx1 = reg_value[15:8];   
         R2WLD_23_16_dx1 = reg_value[23:16];
         R3WLD_31_24_dx1 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx1_T = reg_value[7:0];
         R1WLD_15_8_dx1_T = reg_value[15:8];   
         R2WLD_23_16_dx1_T = reg_value[23:16];
         R3WLD_31_24_dx1_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx1_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx1_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx1_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx1_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx1_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx1_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx1_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx1_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX1LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX1LCDLR0
//--------------------------------------------
   task sample_cov_DX1LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX1LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX1LCDLR1
//--------------------------------------------
   task set_cov_DX1LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1LCDLR1(reg_value,select);  
      sample_cov_DX1LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1LCDLR1
//--------------------------------------------
   task unpack_DX1LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx1     = reg_value[7:0];
         RDQSD_15_8_dx1   = reg_value[15:8];   
         RDQSND_23_16_dx1 = reg_value[23:16];   
         //DX1LCDLR1_RESERVED_31_24_dx1 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx1_T     = reg_value[7:0];
         RDQSD_15_8_dx1_T   = reg_value[15:8];   
         RDQSND_23_16_dx1_T = reg_value[23:16];   
         DX1LCDLR1_RESERVED_31_24_dx1_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx1_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx1_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx1_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx1_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx1_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx1_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX1LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX1LCDLR1
//--------------------------------------------
   task sample_cov_DX1LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX1LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX1LCDLR2
//--------------------------------------------
   task set_cov_DX1LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1LCDLR2(reg_value,select);  
      sample_cov_DX1LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1LCDLR2
//--------------------------------------------
   task unpack_DX1LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx1 = reg_value[7:0];
         R1DQSGD_15_8_dx1 = reg_value[15:8];   
         R2DQSGD_23_16_dx1 = reg_value[23:16];
         R3DQSGD_31_24_dx1 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx1_T = reg_value[7:0];
         R1DQSGD_15_8_dx1_T = reg_value[15:8];   
         R2DQSGD_23_16_dx1_T = reg_value[23:16];
         R3DQSGD_31_24_dx1_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx1_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx1_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx1_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx1_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx1_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx1_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx1_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx1_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX1LCDLR2
//--------------------------------------------
   task sample_cov_DX1LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX1LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX1MDLR
//--------------------------------------------
   task set_cov_DX1MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1MDLR(reg_value,select);  
      sample_cov_DX1MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1MDLR
//--------------------------------------------
   task unpack_DX1MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx1 = reg_value[7:0];
         TPRD_15_8_dx1 = reg_value[15:8];
         MDLD_23_16_dx1 = reg_value[23:16];  
         //DX1MDLR_RESERVED_31_24_dx1 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx1_T = reg_value[7:0];
         TPRD_15_8_dx1_T = reg_value[15:8];
         MDLD_23_16_dx1_T = reg_value[23:16];  
         DX1MDLR_RESERVED_31_24_dx1_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx1_vt_drift = reg_value[7:0];
         TPRD_15_8_dx1_vt_drift = reg_value[15:8];
         MDLD_23_16_dx1_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx1_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx1_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx1_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1MDLR   

   
//--------------------------------------------   
// Task to sample the register DX1MDLR
//--------------------------------------------
   task sample_cov_DX1MDLR_param;
     begin 
`ifdef FUNCOV   
     DX1MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1MDLR_param



//--------------------------------------------
// Task to set coverage on the DX1GTR
//--------------------------------------------
   task set_cov_DX1GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX1GTR(reg_value,select);  
      sample_cov_DX1GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1GTR  
//--------------------------------------------
   task unpack_DX1GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx1        = reg_value[2:0];           
        R1DGSL_5_3_dx1				= reg_value[5:3];           
        R2DGSL_8_6_dx1				= reg_value[8:6];           
        R3DGSL_11_9_dx1				= reg_value[11:9];          
        R0WLSL_13_12_dx1			= reg_value[13:12];         
        R1WLSL_15_14_dx1			= reg_value[15:14];         
        R2WLSL_17_16_dx1			= reg_value[17:16];         
        R3WLSL_19_18_dx1			= reg_value[19:18];         
        //DX1GTR_RESERVED_31_20_dx1			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx1_T        = reg_value[2:0];           
        R1DGSL_5_3_dx1_T				= reg_value[5:3];           
        R2DGSL_8_6_dx1_T				= reg_value[8:6];           
        R3DGSL_11_9_dx1_T				= reg_value[11:9];          
        R0WLSL_13_12_dx1_T			= reg_value[13:12];         
        R1WLSL_15_14_dx1_T			= reg_value[15:14];         
        R2WLSL_17_16_dx1_T			= reg_value[17:16];         
        R3WLSL_19_18_dx1_T			= reg_value[19:18];         
        DX1GTR_RESERVED_31_20_dx1_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX1GTR   

   
//--------------------------------------------   
// Task to sample the register DX1GTR  
//--------------------------------------------
   task sample_cov_DX1GTR_param;
    begin  
`ifdef FUNCOV   
     DX1GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX1GTR_param


//--------------------------------------------
// Task to set coverage on the DX1GSR2
//--------------------------------------------
   task set_cov_DX1GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX1GSR2(reg_value,select);  
      sample_cov_DX1GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX1GSR2
//--------------------------------------------
   task unpack_DX1GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx1  = reg_value[0];
         RDWN_1_dx1   = reg_value[1]; 
         WDERR_2_dx1  = reg_value[2];
         WDWN_3_dx1   = reg_value[3]; 
         REERR_4_dx1  = reg_value[4];
         REWN_5_dx1   = reg_value[5]; 
         WEERR_6_dx1  = reg_value[6];
         WEWN_7_dx1   = reg_value[7]; 
         ESTAT_11_8_dx1  = reg_value[11:8];
         //DX1GSR2_RESERVED_31_12_dx1 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx1_T  = reg_value[0];
         RDWN_1_dx1_T   = reg_value[1]; 
         WDERR_2_dx1_T  = reg_value[2];
         WDWN_3_dx1_T   = reg_value[3]; 
         REERR_4_dx1_T  = reg_value[4];
         REWN_5_dx1_T   = reg_value[5]; 
         WEERR_6_dx1_T  = reg_value[6];
         WEWN_7_dx1_T   = reg_value[7]; 
         ESTAT_11_8_dx1_T  = reg_value[11:8];
         DX1GSR2_RESERVED_31_12_dx1_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX1GSR2   

   
//--------------------------------------------   
// Task to sample the register DX1GSR2
//--------------------------------------------
   task sample_cov_DX1GSR2_param;
    begin  
`ifdef FUNCOV   
     DX1GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX1GSR2_param




//DX2
//--------------------------------------------
// Task to set coverage on the DX2GCR
//--------------------------------------------
   task set_cov_DX2GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2GCR(reg_value,select);  
      sample_cov_DX2GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2GCR
//--------------------------------------------
   task unpack_DX2GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx2        = reg_value[0];     
        DQSODT_1_dx2      = reg_value[1];   
        DQODT_2_dx2       = reg_value[2];    
        DXIOM_3_dx2       = reg_value[3];    
        DXPDD_4_dx2       = reg_value[4];    
        DXPDR_5_dx2       = reg_value[5];    
        DQSRPD_6_dx2      = reg_value[6];   
        DSEN_8_7_dx2      = reg_value[8:7];   
        DQSRTT_9_dx2      = reg_value[9];   
        DQRTT_10_dx2      = reg_value[10];   
        RTTOH_12_11_dx2   = reg_value[12:11];
        RTTOAL_13_dx2     = reg_value[13];   
        DXOEO_15_14_dx2   = reg_value[15:14];
        PLLRST_16_dx2			= reg_value[16];            
        PLLPD_17_dx2			= reg_value[17];             
        GSHIFT_18_dx2			= reg_value[18];            
        PLLBYP_19_dx2			= reg_value[19];            
        //DX2GCR_RESERVED_25_20_dx2			= reg_value[25:20];
        WLRKEN_29_26_dx2	= reg_value[29:26];         
        MDLEN_30_dx2			= reg_value[30];             
        CALBYP_31_dx2			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx2_T       = reg_value[0];     
        DQSODT_1_dx2_T     = reg_value[1];    
        DQODT_2_dx2_T      = reg_value[2];    
        DXIOM_3_dx2_T      = reg_value[3];    
        DXPDD_4_dx2_T      = reg_value[4];    
        DXPDR_5_dx2_T      = reg_value[5];    
        DQSRPD_6_dx2_T     = reg_value[6];    
        DSEN_8_7_dx2_T     = reg_value[8:7];  
        DQSRTT_9_dx2_T     = reg_value[9];    
        DQRTT_10_dx2_T     = reg_value[10];   
        RTTOH_12_11_dx2_T  = reg_value[12:11];
        RTTOAL_13_dx2_T    = reg_value[13];   
        DXOEO_15_14_dx2_T  = reg_value[15:14];      
        PLLRST_16_dx2_T			= reg_value[16];            
        PLLPD_17_dx2_T			= reg_value[17];             
        GSHIFT_18_dx2_T			= reg_value[18];            
        PLLBYP_19_dx2_T  		= reg_value[19];            
        DX2GCR_RESERVED_25_20_dx2_T			= reg_value[25:20];
        WLRKEN_29_26_dx2_T  = reg_value[29:26];         
        MDLEN_30_dx2_T			= reg_value[30];             
        CALBYP_31_dx2_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX2GCR   

   
//--------------------------------------------   
// Task to sample the register DX2GCR
//--------------------------------------------
   task sample_cov_DX2GCR_param;
    begin       
`ifdef FUNCOV   
     DX2GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2GCR_param





//--------------------------------------------
// Task to set coverage on the DX2GSR0
//--------------------------------------------
   task set_cov_DX2GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2GSR0(reg_value,select);  
      sample_cov_DX2GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2GSR0
//--------------------------------------------
   task unpack_DX2GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx2 			= reg_value[0];
         RDQSCAL_1_dx2 			= reg_value[1];
         RDQSNCAL_2_dx2 		= reg_value[2];
         GDQSCAL_3_dx2 			= reg_value[3];
         WLCAL_4_dx2 			  = reg_value[4];
         WLDONE_5_dx2 			= reg_value[5];
         WLERR_6_dx2 			  = reg_value[6];
         WLPRD_14_7_dx2 		= reg_value[14:7];
         DPLOCK_15_dx2 			= reg_value[15];
         GDQSPRD_23_16_dx2 	= reg_value[23:16];
         QSGERR_27_24_dx2 	= reg_value[27:24];
         WLDQ_28_dx2 			  = reg_value[28];
         //DX2GSR0_RESERVED_31_29_dx2 			= reg_value[31:29];      
       end // case: 0  
      1:begin
         WDQCAL_0_dx2_T 			= reg_value[0];
         RDQSCAL_1_dx2_T 			= reg_value[1];
         RDQSNCAL_2_dx2_T 	 	= reg_value[2];
         GDQSCAL_3_dx2_T 			= reg_value[3];
         WLCAL_4_dx2_T        = reg_value[4];
         WLDONE_5_dx2_T 			= reg_value[5];
         WLERR_6_dx2_T        = reg_value[6];
         WLPRD_14_7_dx2_T 	 	= reg_value[14:7];
         DPLOCK_15_dx2_T 			= reg_value[15];
         GDQSPRD_23_16_dx2_T 	= reg_value[23:16];
         QSGERR_27_24_dx2_T 	= reg_value[27:24];
         WLDQ_28_dx2_T 			  = reg_value[28];
         DX2GSR0_RESERVED_31_29_dx2_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX2GSR0   

   
//--------------------------------------------   
// Task to sample the register DX2GSR0
//--------------------------------------------
   task sample_cov_DX2GSR0_param;
     begin 
`ifdef FUNCOV   
     DX2GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX2GSR1
//--------------------------------------------
   task set_cov_DX2GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2GSR1(reg_value,select);  
      sample_cov_DX2GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2GSR1
//--------------------------------------------
   task unpack_DX2GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx2 = reg_value[0];
         DLTCODE_24_1_dx2 = reg_value[24:1];
         //DX2GSR1_RESERVED_31_25_dx2 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx2_T = reg_value[0];
         DLTCODE_24_1_dx2_T = reg_value[24:1];
         DX2GSR1_RESERVED_31_25_dx2_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2GSR1   

   
//--------------------------------------------   
// Task to sample the register DX2GSR1
//--------------------------------------------
   task sample_cov_DX2GSR1_param;
    begin  
`ifdef FUNCOV   
     DX2GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2GSR1_param


//--------------------------------------------
// Task to set coverage on the DX2BDLR0
//--------------------------------------------
   task set_cov_DX2BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2BDLR0(reg_value,select);  
      sample_cov_DX2BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2BDLR0
//--------------------------------------------
   task unpack_DX2BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx2 = reg_value[5:0];
         DQ1WBD_11_6_dx2 = reg_value[11:6];
         DQ2WBD_17_12_dx2 = reg_value[17:12];
         DQ3WBD_23_18_dx2 = reg_value[23:18];
         DQ4WBD_29_24_dx2 = reg_value[29:24];
         //DX2BDLR0_RESERVED_31_30_dx2 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx2_T = reg_value[5:0];
         DQ1WBD_11_6_dx2_T = reg_value[11:6];
         DQ2WBD_17_12_dx2_T = reg_value[17:12];
         DQ3WBD_23_18_dx2_T = reg_value[23:18];
         DQ4WBD_29_24_dx2_T = reg_value[29:24];
         DX2BDLR0_RESERVED_31_30_dx2_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx2_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx2_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx2_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx2_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx2_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx2_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx2_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx2_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx2_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx2_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX2BDLR0
//--------------------------------------------
   task sample_cov_DX2BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX2BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX2BDLR1
//--------------------------------------------
   task set_cov_DX2BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2BDLR1(reg_value,select);  
      sample_cov_DX2BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2BDLR1
//--------------------------------------------
   task unpack_DX2BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx2 = reg_value[5:0];
         DQ6WBD_11_6_dx2 = reg_value[11:6];
         DQ7WBD_17_12_dx2 = reg_value[17:12];
         DMWBD_23_18_dx2 = reg_value[23:18];
         DSWBD_29_24_dx2 = reg_value[29:24];
         //DX2BDLR1_RESERVED_31_30_dx2 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx2_T = reg_value[5:0];
         DQ6WBD_11_6_dx2_T = reg_value[11:6];
         DQ7WBD_17_12_dx2_T = reg_value[17:12];
         DMWBD_23_18_dx2_T = reg_value[23:18];
         DSWBD_29_24_dx2_T = reg_value[29:24];
         DX2BDLR1_RESERVED_31_30_dx2_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx2_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx2_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx2_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx2_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx2_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx2_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx2_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx2_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx2_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx2_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX2BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX2BDLR1
//--------------------------------------------
   task sample_cov_DX2BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX2BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX2BDLR2
//--------------------------------------------
   task set_cov_DX2BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2BDLR2(reg_value,select);  
      sample_cov_DX2BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2BDLR2
//--------------------------------------------
   task unpack_DX2BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx2   = reg_value[5:0];
         DQOEBD_11_6_dx2  = reg_value[11:6];
         DSRBD_17_12_dx2  = reg_value[17:12];
         DSNRBD_23_18_dx2 = reg_value[23:18];
         //DX2BDLR2_RESERVED_31_24_dx2 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx2_T   = reg_value[5:0];
         DQOEBD_11_6_dx2_T  = reg_value[11:6];
         DSRBD_17_12_dx2_T  = reg_value[17:12];
         DSNRBD_23_18_dx2_T = reg_value[23:18];
         DX2BDLR2_RESERVED_31_24_dx2_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx2_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx2_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx2_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx2_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx2_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx2_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx2_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx2_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX2BDLR2
//--------------------------------------------
   task sample_cov_DX2BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX2BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX2BDLR3
//--------------------------------------------
   task set_cov_DX2BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2BDLR3(reg_value,select);  
      sample_cov_DX2BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2BDLR3
//--------------------------------------------
   task unpack_DX2BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx2 = reg_value[5:0];
         DQ1RBD_11_6_dx2 = reg_value[11:6];
         DQ2RBD_17_12_dx2 = reg_value[17:12];
         DQ3RBD_23_18_dx2 = reg_value[23:18];
         DQ4RBD_29_24_dx2 = reg_value[29:24];
         //DX2BDLR3_RESERVED_31_30_dx2 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx2_T = reg_value[5:0];
         DQ1RBD_11_6_dx2_T = reg_value[11:6];
         DQ2RBD_17_12_dx2_T = reg_value[17:12];
         DQ3RBD_23_18_dx2_T = reg_value[23:18];
         DQ4RBD_29_24_dx2_T = reg_value[29:24];
         DX2BDLR3_RESERVED_31_30_dx2_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx2_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx2_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx2_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx2_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx2_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx2_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx2_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx2_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx2_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx2_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX2BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX2BDLR3
//--------------------------------------------
   task sample_cov_DX2BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX2BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX2BDLR4
//--------------------------------------------
   task set_cov_DX2BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2BDLR4(reg_value,select);  
      sample_cov_DX2BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2BDLR4
//--------------------------------------------
   task unpack_DX2BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx2 = reg_value[5:0];
         DQ6RBD_11_6_dx2 = reg_value[11:6];
         DQ7RBD_17_12_dx2 = reg_value[17:12];
         DMRBD_23_18_dx2 = reg_value[23:18];
         //DX2BDLR4_RESERVED_31_24_dx2 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx2_T = reg_value[5:0];
         DQ6RBD_11_6_dx2_T = reg_value[11:6];
         DQ7RBD_17_12_dx2_T = reg_value[17:12];
         DMRBD_23_18_dx2_T = reg_value[23:18];
         DX2BDLR4_RESERVED_31_24_dx2_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx2_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx2_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx2_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx2_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx2_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx2_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx2_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx2_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX2BDLR4
//--------------------------------------------
   task sample_cov_DX2BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX2BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX2LCDLR0
//--------------------------------------------
   task set_cov_DX2LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2LCDLR0(reg_value,select);  
      sample_cov_DX2LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2LCDLR0
//--------------------------------------------
   task unpack_DX2LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx2 = reg_value[7:0];
         R1WLD_15_8_dx2 = reg_value[15:8];   
         R2WLD_23_16_dx2 = reg_value[23:16];
         R3WLD_31_24_dx2 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx2_T = reg_value[7:0];
         R1WLD_15_8_dx2_T = reg_value[15:8];   
         R2WLD_23_16_dx2_T = reg_value[23:16];
         R3WLD_31_24_dx2_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx2_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx2_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx2_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx2_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx2_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx2_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx2_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx2_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX2LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX2LCDLR0
//--------------------------------------------
   task sample_cov_DX2LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX2LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX2LCDLR1
//--------------------------------------------
   task set_cov_DX2LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2LCDLR1(reg_value,select);  
      sample_cov_DX2LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2LCDLR1
//--------------------------------------------
   task unpack_DX2LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx2     = reg_value[7:0];
         RDQSD_15_8_dx2   = reg_value[15:8];   
         RDQSND_23_16_dx2 = reg_value[23:16];   
         //DX2LCDLR1_RESERVED_31_24_dx2 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx2_T     = reg_value[7:0];
         RDQSD_15_8_dx2_T   = reg_value[15:8];   
         RDQSND_23_16_dx2_T = reg_value[23:16];   
         DX2LCDLR1_RESERVED_31_24_dx2_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx2_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx2_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx2_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx2_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx2_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx2_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX2LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX2LCDLR1
//--------------------------------------------
   task sample_cov_DX2LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX2LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX2LCDLR2
//--------------------------------------------
   task set_cov_DX2LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2LCDLR2(reg_value,select);  
      sample_cov_DX2LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2LCDLR2
//--------------------------------------------
   task unpack_DX2LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx2 = reg_value[7:0];
         R1DQSGD_15_8_dx2 = reg_value[15:8];   
         R2DQSGD_23_16_dx2 = reg_value[23:16];
         R3DQSGD_31_24_dx2 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx2_T = reg_value[7:0];
         R1DQSGD_15_8_dx2_T = reg_value[15:8];   
         R2DQSGD_23_16_dx2_T = reg_value[23:16];
         R3DQSGD_31_24_dx2_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx2_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx2_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx2_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx2_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx2_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx2_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx2_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx2_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX2LCDLR2
//--------------------------------------------
   task sample_cov_DX2LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX2LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX2MDLR
//--------------------------------------------
   task set_cov_DX2MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2MDLR(reg_value,select);  
      sample_cov_DX2MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2MDLR
//--------------------------------------------
   task unpack_DX2MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx2 = reg_value[7:0];
         TPRD_15_8_dx2 = reg_value[15:8];
         MDLD_23_16_dx2 = reg_value[23:16];  
         //DX2MDLR_RESERVED_31_24_dx2 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx2_T = reg_value[7:0];
         TPRD_15_8_dx2_T = reg_value[15:8];
         MDLD_23_16_dx2_T = reg_value[23:16];  
         DX2MDLR_RESERVED_31_24_dx2_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx2_vt_drift = reg_value[7:0];
         TPRD_15_8_dx2_vt_drift = reg_value[15:8];
         MDLD_23_16_dx2_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx2_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx2_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx2_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2MDLR   

   
//--------------------------------------------   
// Task to sample the register DX2MDLR
//--------------------------------------------
   task sample_cov_DX2MDLR_param;
     begin 
`ifdef FUNCOV   
     DX2MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2MDLR_param



//--------------------------------------------
// Task to set coverage on the DX2GTR
//--------------------------------------------
   task set_cov_DX2GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX2GTR(reg_value,select);  
      sample_cov_DX2GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2GTR  
//--------------------------------------------
   task unpack_DX2GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx2        = reg_value[2:0];           
        R1DGSL_5_3_dx2				= reg_value[5:3];           
        R2DGSL_8_6_dx2				= reg_value[8:6];           
        R3DGSL_11_9_dx2				= reg_value[11:9];          
        R0WLSL_13_12_dx2			= reg_value[13:12];         
        R1WLSL_15_14_dx2			= reg_value[15:14];         
        R2WLSL_17_16_dx2			= reg_value[17:16];         
        R3WLSL_19_18_dx2			= reg_value[19:18];         
        //DX2GTR_RESERVED_31_20_dx2			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx2_T        = reg_value[2:0];           
        R1DGSL_5_3_dx2_T				= reg_value[5:3];           
        R2DGSL_8_6_dx2_T				= reg_value[8:6];           
        R3DGSL_11_9_dx2_T				= reg_value[11:9];          
        R0WLSL_13_12_dx2_T			= reg_value[13:12];         
        R1WLSL_15_14_dx2_T			= reg_value[15:14];         
        R2WLSL_17_16_dx2_T			= reg_value[17:16];         
        R3WLSL_19_18_dx2_T			= reg_value[19:18];         
        DX2GTR_RESERVED_31_20_dx2_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX2GTR   

   
//--------------------------------------------   
// Task to sample the register DX2GTR  
//--------------------------------------------
   task sample_cov_DX2GTR_param;
    begin  
`ifdef FUNCOV   
     DX2GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX2GTR_param


//--------------------------------------------
// Task to set coverage on the DX2GSR2
//--------------------------------------------
   task set_cov_DX2GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX2GSR2(reg_value,select);  
      sample_cov_DX2GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX2GSR2
//--------------------------------------------
   task unpack_DX2GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx2  = reg_value[0];
         RDWN_1_dx2   = reg_value[1]; 
         WDERR_2_dx2  = reg_value[2];
         WDWN_3_dx2   = reg_value[3]; 
         REERR_4_dx2  = reg_value[4];
         REWN_5_dx2   = reg_value[5]; 
         WEERR_6_dx2  = reg_value[6];
         WEWN_7_dx2   = reg_value[7]; 
         ESTAT_11_8_dx2  = reg_value[11:8];
         //DX2GSR2_RESERVED_31_12_dx2 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx2_T  = reg_value[0];
         RDWN_1_dx2_T   = reg_value[1]; 
         WDERR_2_dx2_T  = reg_value[2];
         WDWN_3_dx2_T   = reg_value[3]; 
         REERR_4_dx2_T  = reg_value[4];
         REWN_5_dx2_T   = reg_value[5]; 
         WEERR_6_dx2_T  = reg_value[6];
         WEWN_7_dx2_T   = reg_value[7]; 
         ESTAT_11_8_dx2_T  = reg_value[11:8];
         DX2GSR2_RESERVED_31_12_dx2_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX2GSR2   

   
//--------------------------------------------   
// Task to sample the register DX2GSR2
//--------------------------------------------
   task sample_cov_DX2GSR2_param;
    begin  
`ifdef FUNCOV   
     DX2GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX2GSR2_param




//DX3    
//--------------------------------------------
// Task to set coverage on the DX3GCR
//--------------------------------------------
   task set_cov_DX3GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3GCR(reg_value,select);  
      sample_cov_DX3GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3GCR
//--------------------------------------------
   task unpack_DX3GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx3        = reg_value[0];     
        DQSODT_1_dx3      = reg_value[1];   
        DQODT_2_dx3       = reg_value[2];    
        DXIOM_3_dx3       = reg_value[3];    
        DXPDD_4_dx3       = reg_value[4];    
        DXPDR_5_dx3       = reg_value[5];    
        DQSRPD_6_dx3      = reg_value[6];   
        DSEN_8_7_dx3      = reg_value[8:7];   
        DQSRTT_9_dx3      = reg_value[9];   
        DQRTT_10_dx3      = reg_value[10];   
        RTTOH_12_11_dx3   = reg_value[12:11];
        RTTOAL_13_dx3     = reg_value[13];   
        DXOEO_15_14_dx3   = reg_value[15:14];
        PLLRST_16_dx3			= reg_value[16];            
        PLLPD_17_dx3			= reg_value[17];             
        GSHIFT_18_dx3			= reg_value[18];            
        PLLBYP_19_dx3			= reg_value[19];            
        //DX3GCR_RESERVED_25_20_dx3			= reg_value[25:20];
        WLRKEN_29_26_dx3	= reg_value[29:26];         
        MDLEN_30_dx3			= reg_value[30];             
        CALBYP_31_dx3			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx3_T       = reg_value[0];     
        DQSODT_1_dx3_T     = reg_value[1];    
        DQODT_2_dx3_T      = reg_value[2];    
        DXIOM_3_dx3_T      = reg_value[3];    
        DXPDD_4_dx3_T      = reg_value[4];    
        DXPDR_5_dx3_T      = reg_value[5];    
        DQSRPD_6_dx3_T     = reg_value[6];    
        DSEN_8_7_dx3_T     = reg_value[8:7];  
        DQSRTT_9_dx3_T     = reg_value[9];    
        DQRTT_10_dx3_T     = reg_value[10];   
        RTTOH_12_11_dx3_T  = reg_value[12:11];
        RTTOAL_13_dx3_T    = reg_value[13];   
        DXOEO_15_14_dx3_T  = reg_value[15:14];      
        PLLRST_16_dx3_T			= reg_value[16];            
        PLLPD_17_dx3_T			= reg_value[17];             
        GSHIFT_18_dx3_T			= reg_value[18];            
        PLLBYP_19_dx3_T  		= reg_value[19];            
        DX3GCR_RESERVED_25_20_dx3_T			= reg_value[25:20];
        WLRKEN_29_26_dx3_T  = reg_value[29:26];         
        MDLEN_30_dx3_T			= reg_value[30];             
        CALBYP_31_dx3_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX3GCR   

   
//--------------------------------------------   
// Task to sample the register DX3GCR
//--------------------------------------------
   task sample_cov_DX3GCR_param;
    begin       
`ifdef FUNCOV   
     DX3GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3GCR_param





//--------------------------------------------
// Task to set coverage on the DX3GSR0
//--------------------------------------------
   task set_cov_DX3GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3GSR0(reg_value,select);  
      sample_cov_DX3GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3GSR0
//--------------------------------------------
   task unpack_DX3GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx3 			= reg_value[0];
         RDQSCAL_1_dx3 			= reg_value[1];
         RDQSNCAL_2_dx3 		= reg_value[2];
         GDQSCAL_3_dx3 			= reg_value[3];
         WLCAL_4_dx3 			  = reg_value[4];
         WLDONE_5_dx3 			= reg_value[5];
         WLERR_6_dx3 			  = reg_value[6];
         WLPRD_14_7_dx3 		= reg_value[14:7];
         DPLOCK_15_dx3 			= reg_value[15];
         GDQSPRD_23_16_dx3 	= reg_value[23:16];
         QSGERR_27_24_dx3 	= reg_value[27:24];
         WLDQ_28_dx3 			  = reg_value[28];
         //DX3GSR0_RESERVED_31_29_dx3 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx3_T 			= reg_value[0];
         RDQSCAL_1_dx3_T 			= reg_value[1];
         RDQSNCAL_2_dx3_T 	 	= reg_value[2];
         GDQSCAL_3_dx3_T 			= reg_value[3];
         WLCAL_4_dx3_T        = reg_value[4];
         WLDONE_5_dx3_T 			= reg_value[5];
         WLERR_6_dx3_T        = reg_value[6];
         WLPRD_14_7_dx3_T 	 	= reg_value[14:7];
         DPLOCK_15_dx3_T 			= reg_value[15];
         GDQSPRD_23_16_dx3_T 	= reg_value[23:16];
         QSGERR_27_24_dx3_T 	= reg_value[27:24];
         WLDQ_28_dx3_T 			  = reg_value[28];
         DX3GSR0_RESERVED_31_29_dx3_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX3GSR0   

   
//--------------------------------------------   
// Task to sample the register DX3GSR0
//--------------------------------------------
   task sample_cov_DX3GSR0_param;
     begin 
`ifdef FUNCOV   
     DX3GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX3GSR1
//--------------------------------------------
   task set_cov_DX3GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3GSR1(reg_value,select);  
      sample_cov_DX3GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3GSR1
//--------------------------------------------
   task unpack_DX3GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx3 = reg_value[0];
         DLTCODE_24_1_dx3 = reg_value[24:1];
         //DX3GSR1_RESERVED_31_25_dx3 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx3_T = reg_value[0];
         DLTCODE_24_1_dx3_T = reg_value[24:1];
         DX3GSR1_RESERVED_31_25_dx3_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3GSR1   

   
//--------------------------------------------   
// Task to sample the register DX3GSR1
//--------------------------------------------
   task sample_cov_DX3GSR1_param;
    begin  
`ifdef FUNCOV   
     DX3GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3GSR1_param


//--------------------------------------------
// Task to set coverage on the DX3BDLR0
//--------------------------------------------
   task set_cov_DX3BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3BDLR0(reg_value,select);  
      sample_cov_DX3BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3BDLR0
//--------------------------------------------
   task unpack_DX3BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx3 = reg_value[5:0];
         DQ1WBD_11_6_dx3 = reg_value[11:6];
         DQ2WBD_17_12_dx3 = reg_value[17:12];
         DQ3WBD_23_18_dx3 = reg_value[23:18];
         DQ4WBD_29_24_dx3 = reg_value[29:24];
         //DX3BDLR0_RESERVED_31_30_dx3 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx3_T = reg_value[5:0];
         DQ1WBD_11_6_dx3_T = reg_value[11:6];
         DQ2WBD_17_12_dx3_T = reg_value[17:12];
         DQ3WBD_23_18_dx3_T = reg_value[23:18];
         DQ4WBD_29_24_dx3_T = reg_value[29:24];
         DX3BDLR0_RESERVED_31_30_dx3_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx3_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx3_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx3_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx3_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx3_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx3_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx3_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx3_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx3_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx3_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX3BDLR0
//--------------------------------------------
   task sample_cov_DX3BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX3BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX3BDLR1
//--------------------------------------------
   task set_cov_DX3BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3BDLR1(reg_value,select);  
      sample_cov_DX3BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3BDLR1
//--------------------------------------------
   task unpack_DX3BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx3 = reg_value[5:0];
         DQ6WBD_11_6_dx3 = reg_value[11:6];
         DQ7WBD_17_12_dx3 = reg_value[17:12];
         DMWBD_23_18_dx3 = reg_value[23:18];
         DSWBD_29_24_dx3 = reg_value[29:24];
         //DX3BDLR1_RESERVED_31_30_dx3 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx3_T = reg_value[5:0];
         DQ6WBD_11_6_dx3_T = reg_value[11:6];
         DQ7WBD_17_12_dx3_T = reg_value[17:12];
         DMWBD_23_18_dx3_T = reg_value[23:18];
         DSWBD_29_24_dx3_T = reg_value[29:24];
         DX3BDLR1_RESERVED_31_30_dx3_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx3_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx3_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx3_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx3_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx3_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx3_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx3_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx3_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx3_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx3_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX3BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX3BDLR1
//--------------------------------------------
   task sample_cov_DX3BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX3BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX3BDLR2
//--------------------------------------------
   task set_cov_DX3BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3BDLR2(reg_value,select);  
      sample_cov_DX3BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3BDLR2
//--------------------------------------------
   task unpack_DX3BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx3   = reg_value[5:0];
         DQOEBD_11_6_dx3  = reg_value[11:6];
         DSRBD_17_12_dx3  = reg_value[17:12];
         DSNRBD_23_18_dx3 = reg_value[23:18];
         //DX3BDLR2_RESERVED_31_24_dx3 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx3_T   = reg_value[5:0];
         DQOEBD_11_6_dx3_T  = reg_value[11:6];
         DSRBD_17_12_dx3_T  = reg_value[17:12];
         DSNRBD_23_18_dx3_T = reg_value[23:18];
         DX3BDLR2_RESERVED_31_24_dx3_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx3_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx3_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx3_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx3_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx3_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx3_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx3_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx3_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX3BDLR2
//--------------------------------------------
   task sample_cov_DX3BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX3BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX3BDLR3
//--------------------------------------------
   task set_cov_DX3BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3BDLR3(reg_value,select);  
      sample_cov_DX3BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3BDLR3
//--------------------------------------------
   task unpack_DX3BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx3 = reg_value[5:0];
         DQ1RBD_11_6_dx3 = reg_value[11:6];
         DQ2RBD_17_12_dx3 = reg_value[17:12];
         DQ3RBD_23_18_dx3 = reg_value[23:18];
         DQ4RBD_29_24_dx3 = reg_value[29:24];
         //DX3BDLR3_RESERVED_31_30_dx3 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx3_T = reg_value[5:0];
         DQ1RBD_11_6_dx3_T = reg_value[11:6];
         DQ2RBD_17_12_dx3_T = reg_value[17:12];
         DQ3RBD_23_18_dx3_T = reg_value[23:18];
         DQ4RBD_29_24_dx3_T = reg_value[29:24];
         DX3BDLR3_RESERVED_31_30_dx3_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx3_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx3_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx3_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx3_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx3_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx3_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx3_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx3_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx3_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx3_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX3BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX3BDLR3
//--------------------------------------------
   task sample_cov_DX3BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX3BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX3BDLR4
//--------------------------------------------
   task set_cov_DX3BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3BDLR4(reg_value,select);  
      sample_cov_DX3BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3BDLR4
//--------------------------------------------
   task unpack_DX3BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx3 = reg_value[5:0];
         DQ6RBD_11_6_dx3 = reg_value[11:6];
         DQ7RBD_17_12_dx3 = reg_value[17:12];
         DMRBD_23_18_dx3 = reg_value[23:18];
         //DX3BDLR4_RESERVED_31_24_dx3 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx3_T = reg_value[5:0];
         DQ6RBD_11_6_dx3_T = reg_value[11:6];
         DQ7RBD_17_12_dx3_T = reg_value[17:12];
         DMRBD_23_18_dx3_T = reg_value[23:18];
         DX3BDLR4_RESERVED_31_24_dx3_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx3_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx3_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx3_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx3_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx3_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx3_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx3_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx3_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX3BDLR4
//--------------------------------------------
   task sample_cov_DX3BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX3BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX3LCDLR0
//--------------------------------------------
   task set_cov_DX3LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3LCDLR0(reg_value,select);  
      sample_cov_DX3LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3LCDLR0
//--------------------------------------------
   task unpack_DX3LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx3 = reg_value[7:0];
         R1WLD_15_8_dx3 = reg_value[15:8];   
         R2WLD_23_16_dx3 = reg_value[23:16];
         R3WLD_31_24_dx3 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx3_T = reg_value[7:0];
         R1WLD_15_8_dx3_T = reg_value[15:8];   
         R2WLD_23_16_dx3_T = reg_value[23:16];
         R3WLD_31_24_dx3_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx3_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx3_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx3_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx3_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx3_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx3_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx3_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx3_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX3LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX3LCDLR0
//--------------------------------------------
   task sample_cov_DX3LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX3LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX3LCDLR1
//--------------------------------------------
   task set_cov_DX3LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3LCDLR1(reg_value,select);  
      sample_cov_DX3LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3LCDLR1
//--------------------------------------------
   task unpack_DX3LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx3     = reg_value[7:0];
         RDQSD_15_8_dx3   = reg_value[15:8];   
         RDQSND_23_16_dx3 = reg_value[23:16];   
         //DX3LCDLR1_RESERVED_31_24_dx3 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx3_T     = reg_value[7:0];
         RDQSD_15_8_dx3_T   = reg_value[15:8];   
         RDQSND_23_16_dx3_T = reg_value[23:16];   
         DX3LCDLR1_RESERVED_31_24_dx3_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx3_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx3_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx3_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx3_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx3_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx3_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX3LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX3LCDLR1
//--------------------------------------------
   task sample_cov_DX3LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX3LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX3LCDLR2
//--------------------------------------------
   task set_cov_DX3LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3LCDLR2(reg_value,select);  
      sample_cov_DX3LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3LCDLR2
//--------------------------------------------
   task unpack_DX3LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx3 = reg_value[7:0];
         R1DQSGD_15_8_dx3 = reg_value[15:8];   
         R2DQSGD_23_16_dx3 = reg_value[23:16];
         R3DQSGD_31_24_dx3 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx3_T = reg_value[7:0];
         R1DQSGD_15_8_dx3_T = reg_value[15:8];   
         R2DQSGD_23_16_dx3_T = reg_value[23:16];
         R3DQSGD_31_24_dx3_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx3_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx3_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx3_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx3_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx3_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx3_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx3_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx3_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX3LCDLR2
//--------------------------------------------
   task sample_cov_DX3LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX3LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX3MDLR
//--------------------------------------------
   task set_cov_DX3MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3MDLR(reg_value,select);  
      sample_cov_DX3MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3MDLR
//--------------------------------------------
   task unpack_DX3MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx3 = reg_value[7:0];
         TPRD_15_8_dx3 = reg_value[15:8];
         MDLD_23_16_dx3 = reg_value[23:16];  
         //DX3MDLR_RESERVED_31_24_dx3 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx3_T = reg_value[7:0];
         TPRD_15_8_dx3_T = reg_value[15:8];
         MDLD_23_16_dx3_T = reg_value[23:16];  
         DX3MDLR_RESERVED_31_24_dx3_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx3_vt_drift = reg_value[7:0];
         TPRD_15_8_dx3_vt_drift = reg_value[15:8];
         MDLD_23_16_dx3_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx3_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx3_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx3_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3MDLR   

   
//--------------------------------------------   
// Task to sample the register DX3MDLR
//--------------------------------------------
   task sample_cov_DX3MDLR_param;
     begin 
`ifdef FUNCOV   
     DX3MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3MDLR_param



//--------------------------------------------
// Task to set coverage on the DX3GTR
//--------------------------------------------
   task set_cov_DX3GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX3GTR(reg_value,select);  
      sample_cov_DX3GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3GTR  
//--------------------------------------------
   task unpack_DX3GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx3        = reg_value[2:0];           
        R1DGSL_5_3_dx3				= reg_value[5:3];           
        R2DGSL_8_6_dx3				= reg_value[8:6];           
        R3DGSL_11_9_dx3				= reg_value[11:9];          
        R0WLSL_13_12_dx3			= reg_value[13:12];         
        R1WLSL_15_14_dx3			= reg_value[15:14];         
        R2WLSL_17_16_dx3			= reg_value[17:16];         
        R3WLSL_19_18_dx3			= reg_value[19:18];         
        //DX3GTR_RESERVED_31_20_dx3			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx3_T        = reg_value[2:0];           
        R1DGSL_5_3_dx3_T				= reg_value[5:3];           
        R2DGSL_8_6_dx3_T				= reg_value[8:6];           
        R3DGSL_11_9_dx3_T				= reg_value[11:9];          
        R0WLSL_13_12_dx3_T			= reg_value[13:12];         
        R1WLSL_15_14_dx3_T			= reg_value[15:14];         
        R2WLSL_17_16_dx3_T			= reg_value[17:16];         
        R3WLSL_19_18_dx3_T			= reg_value[19:18];         
        DX3GTR_RESERVED_31_20_dx3_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX3GTR   

   
//--------------------------------------------   
// Task to sample the register DX3GTR  
//--------------------------------------------
   task sample_cov_DX3GTR_param;
    begin  
`ifdef FUNCOV   
     DX3GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX3GTR_param


//--------------------------------------------
// Task to set coverage on the DX3GSR2
//--------------------------------------------
   task set_cov_DX3GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX3GSR2(reg_value,select);  
      sample_cov_DX3GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX3GSR2
//--------------------------------------------
   task unpack_DX3GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx3  = reg_value[0];
         RDWN_1_dx3   = reg_value[1]; 
         WDERR_2_dx3  = reg_value[2];
         WDWN_3_dx3   = reg_value[3]; 
         REERR_4_dx3  = reg_value[4];
         REWN_5_dx3   = reg_value[5]; 
         WEERR_6_dx3  = reg_value[6];
         WEWN_7_dx3   = reg_value[7]; 
         ESTAT_11_8_dx3  = reg_value[11:8];
         //DX3GSR2_RESERVED_31_12_dx3 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx3_T  = reg_value[0];
         RDWN_1_dx3_T   = reg_value[1]; 
         WDERR_2_dx3_T  = reg_value[2];
         WDWN_3_dx3_T   = reg_value[3]; 
         REERR_4_dx3_T  = reg_value[4];
         REWN_5_dx3_T   = reg_value[5]; 
         WEERR_6_dx3_T  = reg_value[6];
         WEWN_7_dx3_T   = reg_value[7]; 
         ESTAT_11_8_dx3_T  = reg_value[11:8];
         DX3GSR2_RESERVED_31_12_dx3_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX3GSR2   

   
//--------------------------------------------   
// Task to sample the register DX3GSR2
//--------------------------------------------
   task sample_cov_DX3GSR2_param;
    begin  
`ifdef FUNCOV   
     DX3GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX3GSR2_param




//DX4
//--------------------------------------------
// Task to set coverage on the DX4GCR
//--------------------------------------------
   task set_cov_DX4GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4GCR(reg_value,select);  
      sample_cov_DX4GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4GCR
//--------------------------------------------
   task unpack_DX4GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx4        = reg_value[0];     
        DQSODT_1_dx4      = reg_value[1];   
        DQODT_2_dx4       = reg_value[2];    
        DXIOM_3_dx4       = reg_value[3];    
        DXPDD_4_dx4       = reg_value[4];    
        DXPDR_5_dx4       = reg_value[5];    
        DQSRPD_6_dx4      = reg_value[6];   
        DSEN_8_7_dx4      = reg_value[8:7];   
        DQSRTT_9_dx4      = reg_value[9];   
        DQRTT_10_dx4      = reg_value[10];   
        RTTOH_12_11_dx4   = reg_value[12:11];
        RTTOAL_13_dx4     = reg_value[13];   
        DXOEO_15_14_dx4   = reg_value[15:14];
        PLLRST_16_dx4			= reg_value[16];            
        PLLPD_17_dx4			= reg_value[17];             
        GSHIFT_18_dx4			= reg_value[18];            
        PLLBYP_19_dx4			= reg_value[19];            
        //DX4GCR_RESERVED_25_20_dx4			= reg_value[25:20];
        WLRKEN_29_26_dx4	= reg_value[29:26];         
        MDLEN_30_dx4			= reg_value[30];             
        CALBYP_31_dx4			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx4_T       = reg_value[0];     
        DQSODT_1_dx4_T     = reg_value[1];    
        DQODT_2_dx4_T      = reg_value[2];    
        DXIOM_3_dx4_T      = reg_value[3];    
        DXPDD_4_dx4_T      = reg_value[4];    
        DXPDR_5_dx4_T      = reg_value[5];    
        DQSRPD_6_dx4_T     = reg_value[6];    
        DSEN_8_7_dx4_T     = reg_value[8:7];  
        DQSRTT_9_dx4_T     = reg_value[9];    
        DQRTT_10_dx4_T     = reg_value[10];   
        RTTOH_12_11_dx4_T  = reg_value[12:11];
        RTTOAL_13_dx4_T    = reg_value[13];   
        DXOEO_15_14_dx4_T  = reg_value[15:14];      
        PLLRST_16_dx4_T			= reg_value[16];            
        PLLPD_17_dx4_T			= reg_value[17];             
        GSHIFT_18_dx4_T			= reg_value[18];            
        PLLBYP_19_dx4_T			= reg_value[19];            
        DX4GCR_RESERVED_25_20_dx4_T			= reg_value[25:20];
        WLRKEN_29_26_dx4_T  = reg_value[29:26];         
        MDLEN_30_dx4_T			= reg_value[30];             
        CALBYP_31_dx4_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX4GCR   

   
//--------------------------------------------   
// Task to sample the register DX4GCR
//--------------------------------------------
   task sample_cov_DX4GCR_param;
    begin       
`ifdef FUNCOV   
     DX4GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4GCR_param





//--------------------------------------------
// Task to set coverage on the DX4GSR0
//--------------------------------------------
   task set_cov_DX4GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4GSR0(reg_value,select);  
      sample_cov_DX4GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4GSR0
//--------------------------------------------
   task unpack_DX4GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx4 			= reg_value[0];
         RDQSCAL_1_dx4 			= reg_value[1];
         RDQSNCAL_2_dx4 		= reg_value[2];
         GDQSCAL_3_dx4 			= reg_value[3];
         WLCAL_4_dx4 			  = reg_value[4];
         WLDONE_5_dx4 			= reg_value[5];
         WLERR_6_dx4 			  = reg_value[6];
         WLPRD_14_7_dx4 		= reg_value[14:7];
         DPLOCK_15_dx4 			= reg_value[15];
         GDQSPRD_23_16_dx4 	= reg_value[23:16];
         QSGERR_27_24_dx4 	= reg_value[27:24];
         WLDQ_28_dx4 			  = reg_value[28];
         //DX4GSR0_RESERVED_31_29_dx4 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx4_T 			= reg_value[0];
         RDQSCAL_1_dx4_T 			= reg_value[1];
         RDQSNCAL_2_dx4_T 	 	= reg_value[2];
         GDQSCAL_3_dx4_T 			= reg_value[3];
         WLCAL_4_dx4_T        = reg_value[4];
         WLDONE_5_dx4_T 			= reg_value[5];
         WLERR_6_dx4_T        = reg_value[6];
         WLPRD_14_7_dx4_T 	 	= reg_value[14:7];
         DPLOCK_15_dx4_T 			= reg_value[15];
         GDQSPRD_23_16_dx4_T 	= reg_value[23:16];
         QSGERR_27_24_dx4_T 	= reg_value[27:24];
         WLDQ_28_dx4_T 			  = reg_value[28];
         DX4GSR0_RESERVED_31_29_dx4_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX4GSR0   

   
//--------------------------------------------   
// Task to sample the register DX4GSR0
//--------------------------------------------
   task sample_cov_DX4GSR0_param;
     begin 
`ifdef FUNCOV   
     DX4GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX4GSR1
//--------------------------------------------
   task set_cov_DX4GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4GSR1(reg_value,select);  
      sample_cov_DX4GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4GSR1
//--------------------------------------------
   task unpack_DX4GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx4 = reg_value[0];
         DLTCODE_24_1_dx4 = reg_value[24:1];
         //DX4GSR1_RESERVED_31_25_dx4 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx4_T = reg_value[0];
         DLTCODE_24_1_dx4_T = reg_value[24:1];
         DX4GSR1_RESERVED_31_25_dx4_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4GSR1   

   
//--------------------------------------------   
// Task to sample the register DX4GSR1
//--------------------------------------------
   task sample_cov_DX4GSR1_param;
    begin  
`ifdef FUNCOV   
     DX4GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4GSR1_param


//--------------------------------------------
// Task to set coverage on the DX4BDLR0
//--------------------------------------------
   task set_cov_DX4BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4BDLR0(reg_value,select);  
      sample_cov_DX4BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4BDLR0
//--------------------------------------------
   task unpack_DX4BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx4 = reg_value[5:0];
         DQ1WBD_11_6_dx4 = reg_value[11:6];
         DQ2WBD_17_12_dx4 = reg_value[17:12];
         DQ3WBD_23_18_dx4 = reg_value[23:18];
         DQ4WBD_29_24_dx4 = reg_value[29:24];
         //DX4BDLR0_RESERVED_31_30_dx4 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx4_T = reg_value[5:0];
         DQ1WBD_11_6_dx4_T = reg_value[11:6];
         DQ2WBD_17_12_dx4_T = reg_value[17:12];
         DQ3WBD_23_18_dx4_T = reg_value[23:18];
         DQ4WBD_29_24_dx4_T = reg_value[29:24];
         DX4BDLR0_RESERVED_31_30_dx4_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx4_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx4_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx4_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx4_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx4_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx4_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx4_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx4_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx4_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx4_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX4BDLR0
//--------------------------------------------
   task sample_cov_DX4BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX4BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX4BDLR1
//--------------------------------------------
   task set_cov_DX4BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4BDLR1(reg_value,select);  
      sample_cov_DX4BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4BDLR1
//--------------------------------------------
   task unpack_DX4BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx4 = reg_value[5:0];
         DQ6WBD_11_6_dx4 = reg_value[11:6];
         DQ7WBD_17_12_dx4 = reg_value[17:12];
         DMWBD_23_18_dx4 = reg_value[23:18];
         DSWBD_29_24_dx4 = reg_value[29:24];
         //DX4BDLR1_RESERVED_31_30_dx4 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx4_T = reg_value[5:0];
         DQ6WBD_11_6_dx4_T = reg_value[11:6];
         DQ7WBD_17_12_dx4_T = reg_value[17:12];
         DMWBD_23_18_dx4_T = reg_value[23:18];
         DSWBD_29_24_dx4_T = reg_value[29:24];
         DX4BDLR1_RESERVED_31_30_dx4_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx4_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx4_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx4_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx4_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx4_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx4_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx4_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx4_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx4_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx4_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX4BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX4BDLR1
//--------------------------------------------
   task sample_cov_DX4BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX4BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX4BDLR2
//--------------------------------------------
   task set_cov_DX4BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4BDLR2(reg_value,select);  
      sample_cov_DX4BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4BDLR2
//--------------------------------------------
   task unpack_DX4BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx4   = reg_value[5:0];
         DQOEBD_11_6_dx4  = reg_value[11:6];
         DSRBD_17_12_dx4  = reg_value[17:12];
         DSNRBD_23_18_dx4 = reg_value[23:18];
         //DX4BDLR2_RESERVED_31_24_dx4 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx4_T   = reg_value[5:0];
         DQOEBD_11_6_dx4_T  = reg_value[11:6];
         DSRBD_17_12_dx4_T  = reg_value[17:12];
         DSNRBD_23_18_dx4_T = reg_value[23:18];
         DX4BDLR2_RESERVED_31_24_dx4_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx4_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx4_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx4_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx4_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx4_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx4_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx4_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx4_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX4BDLR2
//--------------------------------------------
   task sample_cov_DX4BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX4BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX4BDLR3
//--------------------------------------------
   task set_cov_DX4BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4BDLR3(reg_value,select);  
      sample_cov_DX4BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4BDLR3
//--------------------------------------------
   task unpack_DX4BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx4 = reg_value[5:0];
         DQ1RBD_11_6_dx4 = reg_value[11:6];
         DQ2RBD_17_12_dx4 = reg_value[17:12];
         DQ3RBD_23_18_dx4 = reg_value[23:18];
         DQ4RBD_29_24_dx4 = reg_value[29:24];
         //DX4BDLR3_RESERVED_31_30_dx4 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx4_T = reg_value[5:0];
         DQ1RBD_11_6_dx4_T = reg_value[11:6];
         DQ2RBD_17_12_dx4_T = reg_value[17:12];
         DQ3RBD_23_18_dx4_T = reg_value[23:18];
         DQ4RBD_29_24_dx4_T = reg_value[29:24];
         DX4BDLR3_RESERVED_31_30_dx4_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx4_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx4_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx4_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx4_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx4_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx4_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx4_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx4_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx4_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx4_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX4BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX4BDLR3
//--------------------------------------------
   task sample_cov_DX4BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX4BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX4BDLR4
//--------------------------------------------
   task set_cov_DX4BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4BDLR4(reg_value,select);  
      sample_cov_DX4BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4BDLR4
//--------------------------------------------
   task unpack_DX4BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx4 = reg_value[5:0];
         DQ6RBD_11_6_dx4 = reg_value[11:6];
         DQ7RBD_17_12_dx4 = reg_value[17:12];
         DMRBD_23_18_dx4 = reg_value[23:18];
         //DX4BDLR4_RESERVED_31_24_dx4 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx4_T = reg_value[5:0];
         DQ6RBD_11_6_dx4_T = reg_value[11:6];
         DQ7RBD_17_12_dx4_T = reg_value[17:12];
         DMRBD_23_18_dx4_T = reg_value[23:18];
         DX4BDLR4_RESERVED_31_24_dx4_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx4_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx4_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx4_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx4_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx4_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx4_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx4_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx4_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX4BDLR4
//--------------------------------------------
   task sample_cov_DX4BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX4BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX4LCDLR0
//--------------------------------------------
   task set_cov_DX4LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4LCDLR0(reg_value,select);  
      sample_cov_DX4LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4LCDLR0
//--------------------------------------------
   task unpack_DX4LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx4 = reg_value[7:0];
         R1WLD_15_8_dx4 = reg_value[15:8];   
         R2WLD_23_16_dx4 = reg_value[23:16];
         R3WLD_31_24_dx4 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx4_T = reg_value[7:0];
         R1WLD_15_8_dx4_T = reg_value[15:8];   
         R2WLD_23_16_dx4_T = reg_value[23:16];
         R3WLD_31_24_dx4_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx4_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx4_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx4_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx4_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx4_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx4_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx4_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx4_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX4LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX4LCDLR0
//--------------------------------------------
   task sample_cov_DX4LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX4LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX4LCDLR1
//--------------------------------------------
   task set_cov_DX4LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4LCDLR1(reg_value,select);  
      sample_cov_DX4LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4LCDLR1
//--------------------------------------------
   task unpack_DX4LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx4     = reg_value[7:0];
         RDQSD_15_8_dx4   = reg_value[15:8];   
         RDQSND_23_16_dx4 = reg_value[23:16];   
         //DX4LCDLR1_RESERVED_31_24_dx4 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx4_T     = reg_value[7:0];
         RDQSD_15_8_dx4_T   = reg_value[15:8];   
         RDQSND_23_16_dx4_T = reg_value[23:16];   
         DX4LCDLR1_RESERVED_31_24_dx4_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx4_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx4_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx4_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx4_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx4_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx4_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX4LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX4LCDLR1
//--------------------------------------------
   task sample_cov_DX4LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX4LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX4LCDLR2
//--------------------------------------------
   task set_cov_DX4LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4LCDLR2(reg_value,select);  
      sample_cov_DX4LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4LCDLR2
//--------------------------------------------
   task unpack_DX4LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx4 = reg_value[7:0];
         R1DQSGD_15_8_dx4 = reg_value[15:8];   
         R2DQSGD_23_16_dx4 = reg_value[23:16];
         R3DQSGD_31_24_dx4 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx4_T = reg_value[7:0];
         R1DQSGD_15_8_dx4_T = reg_value[15:8];   
         R2DQSGD_23_16_dx4_T = reg_value[23:16];
         R3DQSGD_31_24_dx4_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx4_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx4_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx4_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx4_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx4_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx4_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx4_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx4_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX4LCDLR2
//--------------------------------------------
   task sample_cov_DX4LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX4LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX4MDLR
//--------------------------------------------
   task set_cov_DX4MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4MDLR(reg_value,select);  
      sample_cov_DX4MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4MDLR
//--------------------------------------------
   task unpack_DX4MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx4 = reg_value[7:0];
         TPRD_15_8_dx4 = reg_value[15:8];
         MDLD_23_16_dx4 = reg_value[23:16];  
         //DX4MDLR_RESERVED_31_24_dx4 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx4_T = reg_value[7:0];
         TPRD_15_8_dx4_T = reg_value[15:8];
         MDLD_23_16_dx4_T = reg_value[23:16];  
         DX4MDLR_RESERVED_31_24_dx4_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx4_vt_drift = reg_value[7:0];
         TPRD_15_8_dx4_vt_drift = reg_value[15:8];
         MDLD_23_16_dx4_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx4_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx4_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx4_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4MDLR   

   
//--------------------------------------------   
// Task to sample the register DX4MDLR
//--------------------------------------------
   task sample_cov_DX4MDLR_param;
     begin 
`ifdef FUNCOV   
     DX4MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4MDLR_param



//--------------------------------------------
// Task to set coverage on the DX4GTR
//--------------------------------------------
   task set_cov_DX4GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX4GTR(reg_value,select);  
      sample_cov_DX4GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4GTR  
//--------------------------------------------
   task unpack_DX4GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx4        = reg_value[2:0];           
        R1DGSL_5_3_dx4				= reg_value[5:3];           
        R2DGSL_8_6_dx4				= reg_value[8:6];           
        R3DGSL_11_9_dx4				= reg_value[11:9];          
        R0WLSL_13_12_dx4			= reg_value[13:12];         
        R1WLSL_15_14_dx4			= reg_value[15:14];         
        R2WLSL_17_16_dx4			= reg_value[17:16];         
        R3WLSL_19_18_dx4			= reg_value[19:18];         
        //DX4GTR_RESERVED_31_20_dx4			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx4_T        = reg_value[2:0];           
        R1DGSL_5_3_dx4_T				= reg_value[5:3];           
        R2DGSL_8_6_dx4_T				= reg_value[8:6];           
        R3DGSL_11_9_dx4_T				= reg_value[11:9];          
        R0WLSL_13_12_dx4_T			= reg_value[13:12];         
        R1WLSL_15_14_dx4_T			= reg_value[15:14];         
        R2WLSL_17_16_dx4_T			= reg_value[17:16];         
        R3WLSL_19_18_dx4_T			= reg_value[19:18];         
        DX4GTR_RESERVED_31_20_dx4_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX4GTR   

   
//--------------------------------------------   
// Task to sample the register DX4GTR  
//--------------------------------------------
   task sample_cov_DX4GTR_param;
    begin  
`ifdef FUNCOV   
     DX4GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX4GTR_param


//--------------------------------------------
// Task to set coverage on the DX4GSR2
//--------------------------------------------
   task set_cov_DX4GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX4GSR2(reg_value,select);  
      sample_cov_DX4GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX4GSR2
//--------------------------------------------
   task unpack_DX4GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx4  = reg_value[0];
         RDWN_1_dx4   = reg_value[1]; 
         WDERR_2_dx4  = reg_value[2];
         WDWN_3_dx4   = reg_value[3]; 
         REERR_4_dx4  = reg_value[4];
         REWN_5_dx4   = reg_value[5]; 
         WEERR_6_dx4  = reg_value[6];
         WEWN_7_dx4   = reg_value[7]; 
         ESTAT_11_8_dx4  = reg_value[11:8];
         //DX4GSR2_RESERVED_31_12_dx4 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx4_T  = reg_value[0];
         RDWN_1_dx4_T   = reg_value[1]; 
         WDERR_2_dx4_T  = reg_value[2];
         WDWN_3_dx4_T   = reg_value[3]; 
         REERR_4_dx4_T  = reg_value[4];
         REWN_5_dx4_T   = reg_value[5]; 
         WEERR_6_dx4_T  = reg_value[6];
         WEWN_7_dx4_T   = reg_value[7]; 
         ESTAT_11_8_dx4_T  = reg_value[11:8];
         DX4GSR2_RESERVED_31_12_dx4_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX4GSR2   

   
//--------------------------------------------   
// Task to sample the register DX4GSR2
//--------------------------------------------
   task sample_cov_DX4GSR2_param;
    begin  
`ifdef FUNCOV   
     DX4GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX4GSR2_param




//DX5       
//--------------------------------------------
// Task to set coverage on the DX5GCR
//--------------------------------------------
   task set_cov_DX5GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5GCR(reg_value,select);  
      sample_cov_DX5GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5GCR
//--------------------------------------------
   task unpack_DX5GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx5        = reg_value[0];     
        DQSODT_1_dx5      = reg_value[1];   
        DQODT_2_dx5       = reg_value[2];    
        DXIOM_3_dx5       = reg_value[3];    
        DXPDD_4_dx5       = reg_value[4];    
        DXPDR_5_dx5       = reg_value[5];    
        DQSRPD_6_dx5      = reg_value[6];   
        DSEN_8_7_dx5      = reg_value[8:7];   
        DQSRTT_9_dx5      = reg_value[9];   
        DQRTT_10_dx5      = reg_value[10];   
        RTTOH_12_11_dx5   = reg_value[12:11];
        RTTOAL_13_dx5     = reg_value[13];   
        DXOEO_15_14_dx5   = reg_value[15:14];
        PLLRST_16_dx5			= reg_value[16];            
        PLLPD_17_dx5			= reg_value[17];             
        GSHIFT_18_dx5			= reg_value[18];            
        PLLBYP_19_dx5			= reg_value[19];            
        //DX5GCR_RESERVED_25_20_dx5			= reg_value[25:20];
        WLRKEN_29_26_dx5	= reg_value[29:26];         
        MDLEN_30_dx5			= reg_value[30];             
        CALBYP_31_dx5			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx5_T       = reg_value[0];     
        DQSODT_1_dx5_T     = reg_value[1];    
        DQODT_2_dx5_T      = reg_value[2];    
        DXIOM_3_dx5_T      = reg_value[3];    
        DXPDD_4_dx5_T      = reg_value[4];    
        DXPDR_5_dx5_T      = reg_value[5];    
        DQSRPD_6_dx5_T     = reg_value[6];    
        DSEN_8_7_dx5_T     = reg_value[8:7];  
        DQSRTT_9_dx5_T     = reg_value[9];    
        DQRTT_10_dx5_T     = reg_value[10];   
        RTTOH_12_11_dx5_T  = reg_value[12:11];
        RTTOAL_13_dx5_T    = reg_value[13];   
        DXOEO_15_14_dx5_T  = reg_value[15:14];      
        PLLRST_16_dx5_T			= reg_value[16];            
        PLLPD_17_dx5_T			= reg_value[17];             
        GSHIFT_18_dx5_T			= reg_value[18];            
        PLLBYP_19_dx5_T			= reg_value[19];            
        DX5GCR_RESERVED_25_20_dx5_T			= reg_value[25:20];
        WLRKEN_29_26_dx5_T  = reg_value[29:26];         
        MDLEN_30_dx5_T			= reg_value[30];             
        CALBYP_31_dx5_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX5GCR   

   
//--------------------------------------------   
// Task to sample the register DX5GCR
//--------------------------------------------
   task sample_cov_DX5GCR_param;
    begin       
`ifdef FUNCOV   
     DX5GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5GCR_param





//--------------------------------------------
// Task to set coverage on the DX5GSR0
//--------------------------------------------
   task set_cov_DX5GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5GSR0(reg_value,select);  
      sample_cov_DX5GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5GSR0
//--------------------------------------------
   task unpack_DX5GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx5 			= reg_value[0];
         RDQSCAL_1_dx5 			= reg_value[1];
         RDQSNCAL_2_dx5 		= reg_value[2];
         GDQSCAL_3_dx5 			= reg_value[3];
         WLCAL_4_dx5 			  = reg_value[4];
         WLDONE_5_dx5 			= reg_value[5];
         WLERR_6_dx5 			  = reg_value[6];
         WLPRD_14_7_dx5 		= reg_value[14:7];
         DPLOCK_15_dx5 			= reg_value[15];
         GDQSPRD_23_16_dx5 	= reg_value[23:16];
         QSGERR_27_24_dx5 	= reg_value[27:24];
         WLDQ_28_dx5 			  = reg_value[28];
         //DX5GSR0_RESERVED_31_29_dx5 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx5_T 			= reg_value[0];
         RDQSCAL_1_dx5_T 			= reg_value[1];
         RDQSNCAL_2_dx5_T 	 	= reg_value[2];
         GDQSCAL_3_dx5_T 			= reg_value[3];
         WLCAL_4_dx5_T        = reg_value[4];
         WLDONE_5_dx5_T 			= reg_value[5];
         WLERR_6_dx5_T        = reg_value[6];
         WLPRD_14_7_dx5_T 	 	= reg_value[14:7];
         DPLOCK_15_dx5_T 			= reg_value[15];
         GDQSPRD_23_16_dx5_T 	= reg_value[23:16];
         QSGERR_27_24_dx5_T 	= reg_value[27:24];
         WLDQ_28_dx5_T 			  = reg_value[28];
         DX5GSR0_RESERVED_31_29_dx5_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX5GSR0   

   
//--------------------------------------------   
// Task to sample the register DX5GSR0
//--------------------------------------------
   task sample_cov_DX5GSR0_param;
     begin 
`ifdef FUNCOV   
     DX5GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX5GSR1
//--------------------------------------------
   task set_cov_DX5GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5GSR1(reg_value,select);  
      sample_cov_DX5GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5GSR1
//--------------------------------------------
   task unpack_DX5GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx5 = reg_value[0];
         DLTCODE_24_1_dx5 = reg_value[24:1];
         //DX5GSR1_RESERVED_31_25_dx5 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx5_T = reg_value[0];
         DLTCODE_24_1_dx5_T = reg_value[24:1];
         DX5GSR1_RESERVED_31_25_dx5_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5GSR1   

   
//--------------------------------------------   
// Task to sample the register DX5GSR1
//--------------------------------------------
   task sample_cov_DX5GSR1_param;
    begin  
`ifdef FUNCOV   
     DX5GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5GSR1_param


//--------------------------------------------
// Task to set coverage on the DX5BDLR0
//--------------------------------------------
   task set_cov_DX5BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5BDLR0(reg_value,select);  
      sample_cov_DX5BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5BDLR0
//--------------------------------------------
   task unpack_DX5BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx5 = reg_value[5:0];
         DQ1WBD_11_6_dx5 = reg_value[11:6];
         DQ2WBD_17_12_dx5 = reg_value[17:12];
         DQ3WBD_23_18_dx5 = reg_value[23:18];
         DQ4WBD_29_24_dx5 = reg_value[29:24];
         //DX5BDLR0_RESERVED_31_30_dx5 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx5_T = reg_value[5:0];
         DQ1WBD_11_6_dx5_T = reg_value[11:6];
         DQ2WBD_17_12_dx5_T = reg_value[17:12];
         DQ3WBD_23_18_dx5_T = reg_value[23:18];
         DQ4WBD_29_24_dx5_T = reg_value[29:24];
         DX5BDLR0_RESERVED_31_30_dx5_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx5_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx5_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx5_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx5_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx5_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx5_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx5_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx5_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx5_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx5_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX5BDLR0
//--------------------------------------------
   task sample_cov_DX5BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX5BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX5BDLR1
//--------------------------------------------
   task set_cov_DX5BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5BDLR1(reg_value,select);  
      sample_cov_DX5BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5BDLR1
//--------------------------------------------
   task unpack_DX5BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx5 = reg_value[5:0];
         DQ6WBD_11_6_dx5 = reg_value[11:6];
         DQ7WBD_17_12_dx5 = reg_value[17:12];
         DMWBD_23_18_dx5 = reg_value[23:18];
         DSWBD_29_24_dx5 = reg_value[29:24];
         //DX5BDLR1_RESERVED_31_30_dx5 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx5_T = reg_value[5:0];
         DQ6WBD_11_6_dx5_T = reg_value[11:6];
         DQ7WBD_17_12_dx5_T = reg_value[17:12];
         DMWBD_23_18_dx5_T = reg_value[23:18];
         DSWBD_29_24_dx5_T = reg_value[29:24];
         DX5BDLR1_RESERVED_31_30_dx5_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx5_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx5_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx5_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx5_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx5_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx5_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx5_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx5_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx5_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx5_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX5BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX5BDLR1
//--------------------------------------------
   task sample_cov_DX5BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX5BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX5BDLR2
//--------------------------------------------
   task set_cov_DX5BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5BDLR2(reg_value,select);  
      sample_cov_DX5BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5BDLR2
//--------------------------------------------
   task unpack_DX5BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx5   = reg_value[5:0];
         DQOEBD_11_6_dx5  = reg_value[11:6];
         DSRBD_17_12_dx5  = reg_value[17:12];
         DSNRBD_23_18_dx5 = reg_value[23:18];
         //DX5BDLR2_RESERVED_31_24_dx5 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx5_T   = reg_value[5:0];
         DQOEBD_11_6_dx5_T  = reg_value[11:6];
         DSRBD_17_12_dx5_T  = reg_value[17:12];
         DSNRBD_23_18_dx5_T = reg_value[23:18];
         DX5BDLR2_RESERVED_31_24_dx5_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx5_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx5_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx5_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx5_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx5_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx5_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx5_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx5_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX5BDLR2
//--------------------------------------------
   task sample_cov_DX5BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX5BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX5BDLR3
//--------------------------------------------
   task set_cov_DX5BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5BDLR3(reg_value,select);  
      sample_cov_DX5BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5BDLR3
//--------------------------------------------
   task unpack_DX5BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx5 = reg_value[5:0];
         DQ1RBD_11_6_dx5 = reg_value[11:6];
         DQ2RBD_17_12_dx5 = reg_value[17:12];
         DQ3RBD_23_18_dx5 = reg_value[23:18];
         DQ4RBD_29_24_dx5 = reg_value[29:24];
         //DX5BDLR3_RESERVED_31_30_dx5 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx5_T = reg_value[5:0];
         DQ1RBD_11_6_dx5_T = reg_value[11:6];
         DQ2RBD_17_12_dx5_T = reg_value[17:12];
         DQ3RBD_23_18_dx5_T = reg_value[23:18];
         DQ4RBD_29_24_dx5_T = reg_value[29:24];
         DX5BDLR3_RESERVED_31_30_dx5_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx5_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx5_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx5_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx5_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx5_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx5_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx5_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx5_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx5_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx5_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX5BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX5BDLR3
//--------------------------------------------
   task sample_cov_DX5BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX5BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX5BDLR4
//--------------------------------------------
   task set_cov_DX5BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5BDLR4(reg_value,select);  
      sample_cov_DX5BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5BDLR4
//--------------------------------------------
   task unpack_DX5BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx5 = reg_value[5:0];
         DQ6RBD_11_6_dx5 = reg_value[11:6];
         DQ7RBD_17_12_dx5 = reg_value[17:12];
         DMRBD_23_18_dx5 = reg_value[23:18];
         //DX5BDLR4_RESERVED_31_24_dx5 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx5_T = reg_value[5:0];
         DQ6RBD_11_6_dx5_T = reg_value[11:6];
         DQ7RBD_17_12_dx5_T = reg_value[17:12];
         DMRBD_23_18_dx5_T = reg_value[23:18];
         DX5BDLR4_RESERVED_31_24_dx5_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx5_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx5_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx5_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx5_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx5_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx5_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx5_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx5_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX5BDLR4
//--------------------------------------------
   task sample_cov_DX5BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX5BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX5LCDLR0
//--------------------------------------------
   task set_cov_DX5LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5LCDLR0(reg_value,select);  
      sample_cov_DX5LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5LCDLR0
//--------------------------------------------
   task unpack_DX5LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx5 = reg_value[7:0];
         R1WLD_15_8_dx5 = reg_value[15:8];   
         R2WLD_23_16_dx5 = reg_value[23:16];
         R3WLD_31_24_dx5 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx5_T = reg_value[7:0];
         R1WLD_15_8_dx5_T = reg_value[15:8];   
         R2WLD_23_16_dx5_T = reg_value[23:16];
         R3WLD_31_24_dx5_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx5_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx5_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx5_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx5_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx5_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx5_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx5_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx5_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX5LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX5LCDLR0
//--------------------------------------------
   task sample_cov_DX5LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX5LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX5LCDLR1
//--------------------------------------------
   task set_cov_DX5LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5LCDLR1(reg_value,select);  
      sample_cov_DX5LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5LCDLR1
//--------------------------------------------
   task unpack_DX5LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx5     = reg_value[7:0];
         RDQSD_15_8_dx5   = reg_value[15:8];   
         RDQSND_23_16_dx5 = reg_value[23:16];   
         //DX5LCDLR1_RESERVED_31_24_dx5 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx5_T     = reg_value[7:0];
         RDQSD_15_8_dx5_T   = reg_value[15:8];   
         RDQSND_23_16_dx5_T = reg_value[23:16];   
         DX5LCDLR1_RESERVED_31_24_dx5_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx5_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx5_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx5_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx5_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx5_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx5_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX5LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX5LCDLR1
//--------------------------------------------
   task sample_cov_DX5LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX5LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX5LCDLR2
//--------------------------------------------
   task set_cov_DX5LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5LCDLR2(reg_value,select);  
      sample_cov_DX5LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5LCDLR2
//--------------------------------------------
   task unpack_DX5LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx5 = reg_value[7:0];
         R1DQSGD_15_8_dx5 = reg_value[15:8];   
         R2DQSGD_23_16_dx5 = reg_value[23:16];
         R3DQSGD_31_24_dx5 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx5_T = reg_value[7:0];
         R1DQSGD_15_8_dx5_T = reg_value[15:8];   
         R2DQSGD_23_16_dx5_T = reg_value[23:16];
         R3DQSGD_31_24_dx5_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx5_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx5_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx5_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx5_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx5_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx5_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx5_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx5_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX5LCDLR2
//--------------------------------------------
   task sample_cov_DX5LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX5LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX5MDLR
//--------------------------------------------
   task set_cov_DX5MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5MDLR(reg_value,select);  
      sample_cov_DX5MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5MDLR
//--------------------------------------------
   task unpack_DX5MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx5 = reg_value[7:0];
         TPRD_15_8_dx5 = reg_value[15:8];
         MDLD_23_16_dx5 = reg_value[23:16];  
         //DX5MDLR_RESERVED_31_24_dx5 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx5_T = reg_value[7:0];
         TPRD_15_8_dx5_T = reg_value[15:8];
         MDLD_23_16_dx5_T = reg_value[23:16];  
         DX5MDLR_RESERVED_31_24_dx5_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx5_vt_drift = reg_value[7:0];
         TPRD_15_8_dx5_vt_drift = reg_value[15:8];
         MDLD_23_16_dx5_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx5_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx5_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx5_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5MDLR   

   
//--------------------------------------------   
// Task to sample the register DX5MDLR
//--------------------------------------------
   task sample_cov_DX5MDLR_param;
     begin 
`ifdef FUNCOV   
     DX5MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5MDLR_param



//--------------------------------------------
// Task to set coverage on the DX5GTR
//--------------------------------------------
   task set_cov_DX5GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX5GTR(reg_value,select);  
      sample_cov_DX5GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5GTR  
//--------------------------------------------
   task unpack_DX5GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx5        = reg_value[2:0];           
        R1DGSL_5_3_dx5				= reg_value[5:3];           
        R2DGSL_8_6_dx5				= reg_value[8:6];           
        R3DGSL_11_9_dx5				= reg_value[11:9];          
        R0WLSL_13_12_dx5			= reg_value[13:12];         
        R1WLSL_15_14_dx5			= reg_value[15:14];         
        R2WLSL_17_16_dx5			= reg_value[17:16];         
        R3WLSL_19_18_dx5			= reg_value[19:18];         
        //DX5GTR_RESERVED_31_20_dx5			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx5_T        = reg_value[2:0];           
        R1DGSL_5_3_dx5_T				= reg_value[5:3];           
        R2DGSL_8_6_dx5_T				= reg_value[8:6];           
        R3DGSL_11_9_dx5_T				= reg_value[11:9];          
        R0WLSL_13_12_dx5_T			= reg_value[13:12];         
        R1WLSL_15_14_dx5_T			= reg_value[15:14];         
        R2WLSL_17_16_dx5_T			= reg_value[17:16];         
        R3WLSL_19_18_dx5_T			= reg_value[19:18];         
        DX5GTR_RESERVED_31_20_dx5_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX5GTR   

   
//--------------------------------------------   
// Task to sample the register DX5GTR  
//--------------------------------------------
   task sample_cov_DX5GTR_param;
    begin  
`ifdef FUNCOV   
     DX5GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX5GTR_param


//--------------------------------------------
// Task to set coverage on the DX5GSR2
//--------------------------------------------
   task set_cov_DX5GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX5GSR2(reg_value,select);  
      sample_cov_DX5GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX5GSR2
//--------------------------------------------
   task unpack_DX5GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx5  = reg_value[0];
         RDWN_1_dx5   = reg_value[1]; 
         WDERR_2_dx5  = reg_value[2];
         WDWN_3_dx5   = reg_value[3]; 
         REERR_4_dx5  = reg_value[4];
         REWN_5_dx5   = reg_value[5]; 
         WEERR_6_dx5  = reg_value[6];
         WEWN_7_dx5   = reg_value[7]; 
         ESTAT_11_8_dx5  = reg_value[11:8];
         //DX5GSR2_RESERVED_31_12_dx5 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx5_T  = reg_value[0];
         RDWN_1_dx5_T   = reg_value[1]; 
         WDERR_2_dx5_T  = reg_value[2];
         WDWN_3_dx5_T   = reg_value[3]; 
         REERR_4_dx5_T  = reg_value[4];
         REWN_5_dx5_T   = reg_value[5]; 
         WEERR_6_dx5_T  = reg_value[6];
         WEWN_7_dx5_T   = reg_value[7]; 
         ESTAT_11_8_dx5_T  = reg_value[11:8];
         DX5GSR2_RESERVED_31_12_dx5_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX5GSR2   

   
//--------------------------------------------   
// Task to sample the register DX5GSR2
//--------------------------------------------
   task sample_cov_DX5GSR2_param;
    begin  
`ifdef FUNCOV   
     DX5GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX5GSR2_param





//DX6
//--------------------------------------------
// Task to set coverage on the DX6GCR
//--------------------------------------------
   task set_cov_DX6GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6GCR(reg_value,select);  
      sample_cov_DX6GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6GCR
//--------------------------------------------
   task unpack_DX6GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx6        = reg_value[0];     
        DQSODT_1_dx6      = reg_value[1];   
        DQODT_2_dx6       = reg_value[2];    
        DXIOM_3_dx6       = reg_value[3];    
        DXPDD_4_dx6       = reg_value[4];    
        DXPDR_5_dx6       = reg_value[5];    
        DQSRPD_6_dx6      = reg_value[6];   
        DSEN_8_7_dx6      = reg_value[8:7];   
        DQSRTT_9_dx6      = reg_value[9];   
        DQRTT_10_dx6      = reg_value[10];   
        RTTOH_12_11_dx6   = reg_value[12:11];
        RTTOAL_13_dx6     = reg_value[13];   
        DXOEO_15_14_dx6   = reg_value[15:14];
        PLLRST_16_dx6			= reg_value[16];            
        PLLPD_17_dx6			= reg_value[17];             
        GSHIFT_18_dx6			= reg_value[18];            
        PLLBYP_19_dx6			= reg_value[19];            
        //DX6GCR_RESERVED_25_20_dx6			= reg_value[25:20];
        WLRKEN_29_26_dx6	= reg_value[29:26];         
        MDLEN_30_dx6			= reg_value[30];             
        CALBYP_31_dx6			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx6_T       = reg_value[0];     
        DQSODT_1_dx6_T     = reg_value[1];    
        DQODT_2_dx6_T      = reg_value[2];    
        DXIOM_3_dx6_T      = reg_value[3];    
        DXPDD_4_dx6_T      = reg_value[4];    
        DXPDR_5_dx6_T      = reg_value[5];    
        DQSRPD_6_dx6_T     = reg_value[6];    
        DSEN_8_7_dx6_T     = reg_value[8:7];  
        DQSRTT_9_dx6_T     = reg_value[9];    
        DQRTT_10_dx6_T     = reg_value[10];   
        RTTOH_12_11_dx6_T  = reg_value[12:11];
        RTTOAL_13_dx6_T    = reg_value[13];   
        DXOEO_15_14_dx6_T  = reg_value[15:14];      
        PLLRST_16_dx6_T			= reg_value[16];            
        PLLPD_17_dx6_T			= reg_value[17];             
        GSHIFT_18_dx6_T			= reg_value[18];            
        PLLBYP_19_dx6_T			= reg_value[19];            
        DX6GCR_RESERVED_25_20_dx6_T			= reg_value[25:20];
        WLRKEN_29_26_dx6_T  = reg_value[29:26];         
        MDLEN_30_dx6_T			= reg_value[30];             
        CALBYP_31_dx6_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX6GCR   

   
//--------------------------------------------   
// Task to sample the register DX6GCR
//--------------------------------------------
   task sample_cov_DX6GCR_param;
    begin       
`ifdef FUNCOV   
     DX6GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6GCR_param





//--------------------------------------------
// Task to set coverage on the DX6GSR0
//--------------------------------------------
   task set_cov_DX6GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6GSR0(reg_value,select);  
      sample_cov_DX6GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6GSR0
//--------------------------------------------
   task unpack_DX6GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx6 			= reg_value[0];
         RDQSCAL_1_dx6 			= reg_value[1];
         RDQSNCAL_2_dx6 		= reg_value[2];
         GDQSCAL_3_dx6 			= reg_value[3];
         WLCAL_4_dx6 			  = reg_value[4];
         WLDONE_5_dx6 			= reg_value[5];
         WLERR_6_dx6 			  = reg_value[6];
         WLPRD_14_7_dx6 		= reg_value[14:7];
         DPLOCK_15_dx6 			= reg_value[15];
         GDQSPRD_23_16_dx6 	= reg_value[23:16];
         QSGERR_27_24_dx6 	= reg_value[27:24];
         WLDQ_28_dx6 			  = reg_value[28];
         //DX6GSR0_RESERVED_31_29_dx6 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx6_T 			= reg_value[0];
         RDQSCAL_1_dx6_T 			= reg_value[1];
         RDQSNCAL_2_dx6_T 	 	= reg_value[2];
         GDQSCAL_3_dx6_T 			= reg_value[3];
         WLCAL_4_dx6_T        = reg_value[4];
         WLDONE_5_dx6_T 			= reg_value[5];
         WLERR_6_dx6_T        = reg_value[6];
         WLPRD_14_7_dx6_T 	 	= reg_value[14:7];
         DPLOCK_15_dx6_T 			= reg_value[15];
         GDQSPRD_23_16_dx6_T 	= reg_value[23:16];
         QSGERR_27_24_dx6_T 	= reg_value[27:24];
         WLDQ_28_dx6_T 			  = reg_value[28];
         DX6GSR0_RESERVED_31_29_dx6_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX6GSR0   

   
//--------------------------------------------   
// Task to sample the register DX6GSR0
//--------------------------------------------
   task sample_cov_DX6GSR0_param;
     begin 
`ifdef FUNCOV   
     DX6GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX6GSR1
//--------------------------------------------
   task set_cov_DX6GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6GSR1(reg_value,select);  
      sample_cov_DX6GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6GSR1
//--------------------------------------------
   task unpack_DX6GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx6 = reg_value[0];
         DLTCODE_24_1_dx6 = reg_value[24:1];
         //DX6GSR1_RESERVED_31_25_dx6 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx6_T = reg_value[0];
         DLTCODE_24_1_dx6_T = reg_value[24:1];
         DX6GSR1_RESERVED_31_25_dx6_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6GSR1   

   
//--------------------------------------------   
// Task to sample the register DX6GSR1
//--------------------------------------------
   task sample_cov_DX6GSR1_param;
    begin  
`ifdef FUNCOV   
     DX6GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6GSR1_param


//--------------------------------------------
// Task to set coverage on the DX6BDLR0
//--------------------------------------------
   task set_cov_DX6BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6BDLR0(reg_value,select);  
      sample_cov_DX6BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6BDLR0
//--------------------------------------------
   task unpack_DX6BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx6 = reg_value[5:0];
         DQ1WBD_11_6_dx6 = reg_value[11:6];
         DQ2WBD_17_12_dx6 = reg_value[17:12];
         DQ3WBD_23_18_dx6 = reg_value[23:18];
         DQ4WBD_29_24_dx6 = reg_value[29:24];
         //DX6BDLR0_RESERVED_31_30_dx6 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx6_T = reg_value[5:0];
         DQ1WBD_11_6_dx6_T = reg_value[11:6];
         DQ2WBD_17_12_dx6_T = reg_value[17:12];
         DQ3WBD_23_18_dx6_T = reg_value[23:18];
         DQ4WBD_29_24_dx6_T = reg_value[29:24];
         DX6BDLR0_RESERVED_31_30_dx6_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx6_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx6_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx6_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx6_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx6_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx6_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx6_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx6_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx6_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx6_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX6BDLR0
//--------------------------------------------
   task sample_cov_DX6BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX6BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX6BDLR1
//--------------------------------------------
   task set_cov_DX6BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6BDLR1(reg_value,select);  
      sample_cov_DX6BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6BDLR1
//--------------------------------------------
   task unpack_DX6BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx6 = reg_value[5:0];
         DQ6WBD_11_6_dx6 = reg_value[11:6];
         DQ7WBD_17_12_dx6 = reg_value[17:12];
         DMWBD_23_18_dx6 = reg_value[23:18];
         DSWBD_29_24_dx6 = reg_value[29:24];
         //DX6BDLR1_RESERVED_31_30_dx6 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx6_T = reg_value[5:0];
         DQ6WBD_11_6_dx6_T = reg_value[11:6];
         DQ7WBD_17_12_dx6_T = reg_value[17:12];
         DMWBD_23_18_dx6_T = reg_value[23:18];
         DSWBD_29_24_dx6_T = reg_value[29:24];
         DX6BDLR1_RESERVED_31_30_dx6_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx6_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx6_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx6_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx6_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx6_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx6_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx6_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx6_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx6_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx6_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX6BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX6BDLR1
//--------------------------------------------
   task sample_cov_DX6BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX6BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX6BDLR2
//--------------------------------------------
   task set_cov_DX6BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6BDLR2(reg_value,select);  
      sample_cov_DX6BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6BDLR2
//--------------------------------------------
   task unpack_DX6BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx6   = reg_value[5:0];
         DQOEBD_11_6_dx6  = reg_value[11:6];
         DSRBD_17_12_dx6  = reg_value[17:12];
         DSNRBD_23_18_dx6 = reg_value[23:18];
         //DX6BDLR2_RESERVED_31_24_dx6 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx6_T   = reg_value[5:0];
         DQOEBD_11_6_dx6_T  = reg_value[11:6];
         DSRBD_17_12_dx6_T  = reg_value[17:12];
         DSNRBD_23_18_dx6_T = reg_value[23:18];
         DX6BDLR2_RESERVED_31_24_dx6_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx6_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx6_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx6_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx6_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx6_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx6_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx6_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx6_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX6BDLR2
//--------------------------------------------
   task sample_cov_DX6BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX6BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX6BDLR3
//--------------------------------------------
   task set_cov_DX6BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6BDLR3(reg_value,select);  
      sample_cov_DX6BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6BDLR3
//--------------------------------------------
   task unpack_DX6BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx6 = reg_value[5:0];
         DQ1RBD_11_6_dx6 = reg_value[11:6];
         DQ2RBD_17_12_dx6 = reg_value[17:12];
         DQ3RBD_23_18_dx6 = reg_value[23:18];
         DQ4RBD_29_24_dx6 = reg_value[29:24];
         //DX6BDLR3_RESERVED_31_30_dx6 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx6_T = reg_value[5:0];
         DQ1RBD_11_6_dx6_T = reg_value[11:6];
         DQ2RBD_17_12_dx6_T = reg_value[17:12];
         DQ3RBD_23_18_dx6_T = reg_value[23:18];
         DQ4RBD_29_24_dx6_T = reg_value[29:24];
         DX6BDLR3_RESERVED_31_30_dx6_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx6_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx6_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx6_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx6_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx6_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx6_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx6_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx6_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx6_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx6_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX6BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX6BDLR3
//--------------------------------------------
   task sample_cov_DX6BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX6BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX6BDLR4
//--------------------------------------------
   task set_cov_DX6BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6BDLR4(reg_value,select);  
      sample_cov_DX6BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6BDLR4
//--------------------------------------------
   task unpack_DX6BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx6 = reg_value[5:0];
         DQ6RBD_11_6_dx6 = reg_value[11:6];
         DQ7RBD_17_12_dx6 = reg_value[17:12];
         DMRBD_23_18_dx6 = reg_value[23:18];
         //DX6BDLR4_RESERVED_31_24_dx6 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx6_T = reg_value[5:0];
         DQ6RBD_11_6_dx6_T = reg_value[11:6];
         DQ7RBD_17_12_dx6_T = reg_value[17:12];
         DMRBD_23_18_dx6_T = reg_value[23:18];
         DX6BDLR4_RESERVED_31_24_dx6_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx6_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx6_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx6_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx6_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx6_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx6_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx6_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx6_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX6BDLR4
//--------------------------------------------
   task sample_cov_DX6BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX6BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX6LCDLR0
//--------------------------------------------
   task set_cov_DX6LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6LCDLR0(reg_value,select);  
      sample_cov_DX6LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6LCDLR0
//--------------------------------------------
   task unpack_DX6LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx6 = reg_value[7:0];
         R1WLD_15_8_dx6 = reg_value[15:8];   
         R2WLD_23_16_dx6 = reg_value[23:16];
         R3WLD_31_24_dx6 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx6_T = reg_value[7:0];
         R1WLD_15_8_dx6_T = reg_value[15:8];   
         R2WLD_23_16_dx6_T = reg_value[23:16];
         R3WLD_31_24_dx6_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx6_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx6_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx6_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx6_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx6_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx6_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx6_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx6_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX6LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX6LCDLR0
//--------------------------------------------
   task sample_cov_DX6LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX6LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX6LCDLR1
//--------------------------------------------
   task set_cov_DX6LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6LCDLR1(reg_value,select);  
      sample_cov_DX6LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6LCDLR1
//--------------------------------------------
   task unpack_DX6LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx6     = reg_value[7:0];
         RDQSD_15_8_dx6   = reg_value[15:8];   
         RDQSND_23_16_dx6 = reg_value[23:16];   
         //DX6LCDLR1_RESERVED_31_24_dx6 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx6_T     = reg_value[7:0];
         RDQSD_15_8_dx6_T   = reg_value[15:8];   
         RDQSND_23_16_dx6_T = reg_value[23:16];   
         DX6LCDLR1_RESERVED_31_24_dx6_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx6_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx6_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx6_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx6_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx6_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx6_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX6LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX6LCDLR1
//--------------------------------------------
   task sample_cov_DX6LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX6LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX6LCDLR2
//--------------------------------------------
   task set_cov_DX6LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6LCDLR2(reg_value,select);  
      sample_cov_DX6LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6LCDLR2
//--------------------------------------------
   task unpack_DX6LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx6 = reg_value[7:0];
         R1DQSGD_15_8_dx6 = reg_value[15:8];   
         R2DQSGD_23_16_dx6 = reg_value[23:16];
         R3DQSGD_31_24_dx6 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx6_T = reg_value[7:0];
         R1DQSGD_15_8_dx6_T = reg_value[15:8];   
         R2DQSGD_23_16_dx6_T = reg_value[23:16];
         R3DQSGD_31_24_dx6_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx6_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx6_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx6_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx6_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx6_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx6_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx6_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx6_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX6LCDLR2
//--------------------------------------------
   task sample_cov_DX6LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX6LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX6MDLR
//--------------------------------------------
   task set_cov_DX6MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6MDLR(reg_value,select);  
      sample_cov_DX6MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6MDLR
//--------------------------------------------
   task unpack_DX6MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx6 = reg_value[7:0];
         TPRD_15_8_dx6 = reg_value[15:8];
         MDLD_23_16_dx6 = reg_value[23:16];  
         //DX6MDLR_RESERVED_31_24_dx6 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx6_T = reg_value[7:0];
         TPRD_15_8_dx6_T = reg_value[15:8];
         MDLD_23_16_dx6_T = reg_value[23:16];  
         DX6MDLR_RESERVED_31_24_dx6_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx6_vt_drift = reg_value[7:0];
         TPRD_15_8_dx6_vt_drift = reg_value[15:8];
         MDLD_23_16_dx6_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx6_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx6_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx6_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6MDLR   

   
//--------------------------------------------   
// Task to sample the register DX6MDLR
//--------------------------------------------
   task sample_cov_DX6MDLR_param;
     begin 
`ifdef FUNCOV   
     DX6MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6MDLR_param



//--------------------------------------------
// Task to set coverage on the DX6GTR
//--------------------------------------------
   task set_cov_DX6GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX6GTR(reg_value,select);  
      sample_cov_DX6GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6GTR  
//--------------------------------------------
   task unpack_DX6GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx6        = reg_value[2:0];           
        R1DGSL_5_3_dx6				= reg_value[5:3];           
        R2DGSL_8_6_dx6				= reg_value[8:6];           
        R3DGSL_11_9_dx6				= reg_value[11:9];          
        R0WLSL_13_12_dx6			= reg_value[13:12];         
        R1WLSL_15_14_dx6			= reg_value[15:14];         
        R2WLSL_17_16_dx6			= reg_value[17:16];         
        R3WLSL_19_18_dx6			= reg_value[19:18];         
        //DX6GTR_RESERVED_31_20_dx6			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx6_T        = reg_value[2:0];           
        R1DGSL_5_3_dx6_T				= reg_value[5:3];           
        R2DGSL_8_6_dx6_T				= reg_value[8:6];           
        R3DGSL_11_9_dx6_T				= reg_value[11:9];          
        R0WLSL_13_12_dx6_T			= reg_value[13:12];         
        R1WLSL_15_14_dx6_T			= reg_value[15:14];         
        R2WLSL_17_16_dx6_T			= reg_value[17:16];         
        R3WLSL_19_18_dx6_T			= reg_value[19:18];         
        DX6GTR_RESERVED_31_20_dx6_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX6GTR   

   
//--------------------------------------------   
// Task to sample the register DX6GTR  
//--------------------------------------------
   task sample_cov_DX6GTR_param;
    begin  
`ifdef FUNCOV   
     DX6GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX6GTR_param


//--------------------------------------------
// Task to set coverage on the DX6GSR2
//--------------------------------------------
   task set_cov_DX6GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX6GSR2(reg_value,select);  
      sample_cov_DX6GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX6GSR2
//--------------------------------------------
   task unpack_DX6GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx6  = reg_value[0];
         RDWN_1_dx6   = reg_value[1]; 
         WDERR_2_dx6  = reg_value[2];
         WDWN_3_dx6   = reg_value[3]; 
         REERR_4_dx6  = reg_value[4];
         REWN_5_dx6   = reg_value[5]; 
         WEERR_6_dx6  = reg_value[6];
         WEWN_7_dx6   = reg_value[7]; 
         ESTAT_11_8_dx6  = reg_value[11:8];
         //DX6GSR2_RESERVED_31_12_dx6 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx6_T  = reg_value[0];
         RDWN_1_dx6_T   = reg_value[1]; 
         WDERR_2_dx6_T  = reg_value[2];
         WDWN_3_dx6_T   = reg_value[3]; 
         REERR_4_dx6_T  = reg_value[4];
         REWN_5_dx6_T   = reg_value[5]; 
         WEERR_6_dx6_T  = reg_value[6];
         WEWN_7_dx6_T   = reg_value[7]; 
         ESTAT_11_8_dx6_T  = reg_value[11:8];
         DX6GSR2_RESERVED_31_12_dx6_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX6GSR2   

   
//--------------------------------------------   
// Task to sample the register DX6GSR2
//--------------------------------------------
   task sample_cov_DX6GSR2_param;
    begin  
`ifdef FUNCOV   
     DX6GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX6GSR2_param




//DX7
//--------------------------------------------
// Task to set coverage on the DX7GCR
//--------------------------------------------
   task set_cov_DX7GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7GCR(reg_value,select);  
      sample_cov_DX7GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7GCR
//--------------------------------------------
   task unpack_DX7GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx7        = reg_value[0];     
        DQSODT_1_dx7      = reg_value[1];   
        DQODT_2_dx7       = reg_value[2];    
        DXIOM_3_dx7       = reg_value[3];    
        DXPDD_4_dx7       = reg_value[4];    
        DXPDR_5_dx7       = reg_value[5];    
        DQSRPD_6_dx7      = reg_value[6];   
        DSEN_8_7_dx7      = reg_value[8:7];   
        DQSRTT_9_dx7      = reg_value[9];   
        DQRTT_10_dx7      = reg_value[10];   
        RTTOH_12_11_dx7   = reg_value[12:11];
        RTTOAL_13_dx7     = reg_value[13];   
        DXOEO_15_14_dx7   = reg_value[15:14];
        PLLRST_16_dx7			= reg_value[16];            
        PLLPD_17_dx7			= reg_value[17];             
        GSHIFT_18_dx7			= reg_value[18];            
        PLLBYP_19_dx7			= reg_value[19];            
        //DX7GCR_RESERVED_25_20_dx7			= reg_value[25:20];
        WLRKEN_29_26_dx7	= reg_value[29:26];         
        MDLEN_30_dx7			= reg_value[30];             
        CALBYP_31_dx7			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx7_T       = reg_value[0];     
        DQSODT_1_dx7_T     = reg_value[1];    
        DQODT_2_dx7_T      = reg_value[2];    
        DXIOM_3_dx7_T      = reg_value[3];    
        DXPDD_4_dx7_T      = reg_value[4];    
        DXPDR_5_dx7_T      = reg_value[5];    
        DQSRPD_6_dx7_T     = reg_value[6];    
        DSEN_8_7_dx7_T     = reg_value[8:7];  
        DQSRTT_9_dx7_T     = reg_value[9];    
        DQRTT_10_dx7_T     = reg_value[10];   
        RTTOH_12_11_dx7_T  = reg_value[12:11];
        RTTOAL_13_dx7_T    = reg_value[13];   
        DXOEO_15_14_dx7_T  = reg_value[15:14];      
        PLLRST_16_dx7_T			= reg_value[16];            
        PLLPD_17_dx7_T			= reg_value[17];             
        GSHIFT_18_dx7_T			= reg_value[18];            
        PLLBYP_19_dx7_T			= reg_value[19];            
        DX7GCR_RESERVED_25_20_dx7_T			= reg_value[25:20];
        WLRKEN_29_26_dx7_T  = reg_value[29:26];         
        MDLEN_30_dx7_T			= reg_value[30];             
        CALBYP_31_dx7_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX7GCR   

   
//--------------------------------------------   
// Task to sample the register DX7GCR
//--------------------------------------------
   task sample_cov_DX7GCR_param;
    begin       
`ifdef FUNCOV   
     DX7GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7GCR_param





//--------------------------------------------
// Task to set coverage on the DX7GSR0
//--------------------------------------------
   task set_cov_DX7GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7GSR0(reg_value,select);  
      sample_cov_DX7GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7GSR0
//--------------------------------------------
   task unpack_DX7GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx7 			= reg_value[0];
         RDQSCAL_1_dx7 			= reg_value[1];
         RDQSNCAL_2_dx7 		= reg_value[2];
         GDQSCAL_3_dx7 			= reg_value[3];
         WLCAL_4_dx7 			  = reg_value[4];
         WLDONE_5_dx7 			= reg_value[5];
         WLERR_6_dx7 			  = reg_value[6];
         WLPRD_14_7_dx7 		= reg_value[14:7];
         DPLOCK_15_dx7 			= reg_value[15];
         GDQSPRD_23_16_dx7 	= reg_value[23:16];
         QSGERR_27_24_dx7 	= reg_value[27:24];
         WLDQ_28_dx7 			  = reg_value[28];
         //DX7GSR0_RESERVED_31_29_dx7 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx7_T 			= reg_value[0];
         RDQSCAL_1_dx7_T 			= reg_value[1];
         RDQSNCAL_2_dx7_T 	 	= reg_value[2];
         GDQSCAL_3_dx7_T 			= reg_value[3];
         WLCAL_4_dx7_T        = reg_value[4];
         WLDONE_5_dx7_T 			= reg_value[5];
         WLERR_6_dx7_T        = reg_value[6];
         WLPRD_14_7_dx7_T 	 	= reg_value[14:7];
         DPLOCK_15_dx7_T 			= reg_value[15];
         GDQSPRD_23_16_dx7_T 	= reg_value[23:16];
         QSGERR_27_24_dx7_T 	= reg_value[27:24];
         WLDQ_28_dx7_T 			  = reg_value[28];
         DX7GSR0_RESERVED_31_29_dx7_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX7GSR0   

   
//--------------------------------------------   
// Task to sample the register DX7GSR0
//--------------------------------------------
   task sample_cov_DX7GSR0_param;
     begin 
`ifdef FUNCOV   
     DX7GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX7GSR1
//--------------------------------------------
   task set_cov_DX7GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7GSR1(reg_value,select);  
      sample_cov_DX7GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7GSR1
//--------------------------------------------
   task unpack_DX7GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx7 = reg_value[0];
         DLTCODE_24_1_dx7 = reg_value[24:1];
         //DX7GSR1_RESERVED_31_25_dx7 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx7_T = reg_value[0];
         DLTCODE_24_1_dx7_T = reg_value[24:1];
         DX7GSR1_RESERVED_31_25_dx7_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7GSR1   

   
//--------------------------------------------   
// Task to sample the register DX7GSR1
//--------------------------------------------
   task sample_cov_DX7GSR1_param;
    begin  
`ifdef FUNCOV   
     DX7GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7GSR1_param


//--------------------------------------------
// Task to set coverage on the DX7BDLR0
//--------------------------------------------
   task set_cov_DX7BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7BDLR0(reg_value,select);  
      sample_cov_DX7BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7BDLR0
//--------------------------------------------
   task unpack_DX7BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx7 = reg_value[5:0];
         DQ1WBD_11_6_dx7 = reg_value[11:6];
         DQ2WBD_17_12_dx7 = reg_value[17:12];
         DQ3WBD_23_18_dx7 = reg_value[23:18];
         DQ4WBD_29_24_dx7 = reg_value[29:24];
         //DX7BDLR0_RESERVED_31_30_dx7 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx7_T = reg_value[5:0];
         DQ1WBD_11_6_dx7_T = reg_value[11:6];
         DQ2WBD_17_12_dx7_T = reg_value[17:12];
         DQ3WBD_23_18_dx7_T = reg_value[23:18];
         DQ4WBD_29_24_dx7_T = reg_value[29:24];
         DX7BDLR0_RESERVED_31_30_dx7_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx7_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx7_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx7_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx7_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx7_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx7_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx7_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx7_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx7_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx7_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX7BDLR0
//--------------------------------------------
   task sample_cov_DX7BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX7BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX7BDLR1
//--------------------------------------------
   task set_cov_DX7BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7BDLR1(reg_value,select);  
      sample_cov_DX7BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7BDLR1
//--------------------------------------------
   task unpack_DX7BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx7 = reg_value[5:0];
         DQ6WBD_11_6_dx7 = reg_value[11:6];
         DQ7WBD_17_12_dx7 = reg_value[17:12];
         DMWBD_23_18_dx7 = reg_value[23:18];
         DSWBD_29_24_dx7 = reg_value[29:24];
         //DX7BDLR1_RESERVED_31_30_dx7 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx7_T = reg_value[5:0];
         DQ6WBD_11_6_dx7_T = reg_value[11:6];
         DQ7WBD_17_12_dx7_T = reg_value[17:12];
         DMWBD_23_18_dx7_T = reg_value[23:18];
         DSWBD_29_24_dx7_T = reg_value[29:24];
         DX7BDLR1_RESERVED_31_30_dx7_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx7_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx7_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx7_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx7_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx7_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx7_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx7_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx7_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx7_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx7_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX7BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX7BDLR1
//--------------------------------------------
   task sample_cov_DX7BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX7BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX7BDLR2
//--------------------------------------------
   task set_cov_DX7BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7BDLR2(reg_value,select);  
      sample_cov_DX7BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7BDLR2
//--------------------------------------------
   task unpack_DX7BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx7   = reg_value[5:0];
         DQOEBD_11_6_dx7  = reg_value[11:6];
         DSRBD_17_12_dx7  = reg_value[17:12];
         DSNRBD_23_18_dx7 = reg_value[23:18];
         //DX7BDLR2_RESERVED_31_24_dx7 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx7_T   = reg_value[5:0];
         DQOEBD_11_6_dx7_T  = reg_value[11:6];
         DSRBD_17_12_dx7_T  = reg_value[17:12];
         DSNRBD_23_18_dx7_T = reg_value[23:18];
         DX7BDLR2_RESERVED_31_24_dx7_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx7_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx7_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx7_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx7_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx7_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx7_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx7_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx7_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX7BDLR2
//--------------------------------------------
   task sample_cov_DX7BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX7BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX7BDLR3
//--------------------------------------------
   task set_cov_DX7BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7BDLR3(reg_value,select);  
      sample_cov_DX7BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7BDLR3
//--------------------------------------------
   task unpack_DX7BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx7 = reg_value[5:0];
         DQ1RBD_11_6_dx7 = reg_value[11:6];
         DQ2RBD_17_12_dx7 = reg_value[17:12];
         DQ3RBD_23_18_dx7 = reg_value[23:18];
         DQ4RBD_29_24_dx7 = reg_value[29:24];
         //DX7BDLR3_RESERVED_31_30_dx7 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx7_T = reg_value[5:0];
         DQ1RBD_11_6_dx7_T = reg_value[11:6];
         DQ2RBD_17_12_dx7_T = reg_value[17:12];
         DQ3RBD_23_18_dx7_T = reg_value[23:18];
         DQ4RBD_29_24_dx7_T = reg_value[29:24];
         DX7BDLR3_RESERVED_31_30_dx7_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx7_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx7_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx7_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx7_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx7_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx7_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx7_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx7_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx7_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx7_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX7BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX7BDLR3
//--------------------------------------------
   task sample_cov_DX7BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX7BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX7BDLR4
//--------------------------------------------
   task set_cov_DX7BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7BDLR4(reg_value,select);  
      sample_cov_DX7BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7BDLR4
//--------------------------------------------
   task unpack_DX7BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx7 = reg_value[5:0];
         DQ6RBD_11_6_dx7 = reg_value[11:6];
         DQ7RBD_17_12_dx7 = reg_value[17:12];
         DMRBD_23_18_dx7 = reg_value[23:18];
         //DX7BDLR4_RESERVED_31_24_dx7 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx7_T = reg_value[5:0];
         DQ6RBD_11_6_dx7_T = reg_value[11:6];
         DQ7RBD_17_12_dx7_T = reg_value[17:12];
         DMRBD_23_18_dx7_T = reg_value[23:18];
         DX7BDLR4_RESERVED_31_24_dx7_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx7_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx7_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx7_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx7_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx7_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx7_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx7_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx7_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX7BDLR4
//--------------------------------------------
   task sample_cov_DX7BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX7BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX7LCDLR0
//--------------------------------------------
   task set_cov_DX7LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7LCDLR0(reg_value,select);  
      sample_cov_DX7LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7LCDLR0
//--------------------------------------------
   task unpack_DX7LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx7 = reg_value[7:0];
         R1WLD_15_8_dx7 = reg_value[15:8];   
         R2WLD_23_16_dx7 = reg_value[23:16];
         R3WLD_31_24_dx7 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx7_T = reg_value[7:0];
         R1WLD_15_8_dx7_T = reg_value[15:8];   
         R2WLD_23_16_dx7_T = reg_value[23:16];
         R3WLD_31_24_dx7_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx7_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx7_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx7_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx7_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx7_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx7_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx7_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx7_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX7LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX7LCDLR0
//--------------------------------------------
   task sample_cov_DX7LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX7LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX7LCDLR1
//--------------------------------------------
   task set_cov_DX7LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7LCDLR1(reg_value,select);  
      sample_cov_DX7LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7LCDLR1
//--------------------------------------------
   task unpack_DX7LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx7     = reg_value[7:0];
         RDQSD_15_8_dx7   = reg_value[15:8];   
         RDQSND_23_16_dx7 = reg_value[23:16];   
         //DX7LCDLR1_RESERVED_31_24_dx7 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx7_T     = reg_value[7:0];
         RDQSD_15_8_dx7_T   = reg_value[15:8];   
         RDQSND_23_16_dx7_T = reg_value[23:16];   
         DX7LCDLR1_RESERVED_31_24_dx7_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx7_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx7_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx7_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx7_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx7_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx7_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX7LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX7LCDLR1
//--------------------------------------------
   task sample_cov_DX7LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX7LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX7LCDLR2
//--------------------------------------------
   task set_cov_DX7LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7LCDLR2(reg_value,select);  
      sample_cov_DX7LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7LCDLR2
//--------------------------------------------
   task unpack_DX7LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx7 = reg_value[7:0];
         R1DQSGD_15_8_dx7 = reg_value[15:8];   
         R2DQSGD_23_16_dx7 = reg_value[23:16];
         R3DQSGD_31_24_dx7 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx7_T = reg_value[7:0];
         R1DQSGD_15_8_dx7_T = reg_value[15:8];   
         R2DQSGD_23_16_dx7_T = reg_value[23:16];
         R3DQSGD_31_24_dx7_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx7_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx7_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx7_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx7_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx7_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx7_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx7_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx7_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX7LCDLR2
//--------------------------------------------
   task sample_cov_DX7LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX7LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX7MDLR
//--------------------------------------------
   task set_cov_DX7MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7MDLR(reg_value,select);  
      sample_cov_DX7MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7MDLR
//--------------------------------------------
   task unpack_DX7MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx7 = reg_value[7:0];
         TPRD_15_8_dx7 = reg_value[15:8];
         MDLD_23_16_dx7 = reg_value[23:16];  
         //DX7MDLR_RESERVED_31_24_dx7 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx7_T = reg_value[7:0];
         TPRD_15_8_dx7_T = reg_value[15:8];
         MDLD_23_16_dx7_T = reg_value[23:16];  
         DX7MDLR_RESERVED_31_24_dx7_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx7_vt_drift = reg_value[7:0];
         TPRD_15_8_dx7_vt_drift = reg_value[15:8];
         MDLD_23_16_dx7_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx7_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx7_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx7_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7MDLR   

   
//--------------------------------------------   
// Task to sample the register DX7MDLR
//--------------------------------------------
   task sample_cov_DX7MDLR_param;
     begin 
`ifdef FUNCOV   
     DX7MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7MDLR_param



//--------------------------------------------
// Task to set coverage on the DX7GTR
//--------------------------------------------
   task set_cov_DX7GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX7GTR(reg_value,select);  
      sample_cov_DX7GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7GTR  
//--------------------------------------------
   task unpack_DX7GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx7        = reg_value[2:0];           
        R1DGSL_5_3_dx7				= reg_value[5:3];           
        R2DGSL_8_6_dx7				= reg_value[8:6];           
        R3DGSL_11_9_dx7				= reg_value[11:9];          
        R0WLSL_13_12_dx7			= reg_value[13:12];         
        R1WLSL_15_14_dx7			= reg_value[15:14];         
        R2WLSL_17_16_dx7			= reg_value[17:16];         
        R3WLSL_19_18_dx7			= reg_value[19:18];         
        //DX7GTR_RESERVED_31_20_dx7			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx7_T        = reg_value[2:0];           
        R1DGSL_5_3_dx7_T				= reg_value[5:3];           
        R2DGSL_8_6_dx7_T				= reg_value[8:6];           
        R3DGSL_11_9_dx7_T				= reg_value[11:9];          
        R0WLSL_13_12_dx7_T			= reg_value[13:12];         
        R1WLSL_15_14_dx7_T			= reg_value[15:14];         
        R2WLSL_17_16_dx7_T			= reg_value[17:16];         
        R3WLSL_19_18_dx7_T			= reg_value[19:18];         
        DX7GTR_RESERVED_31_20_dx7_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX7GTR   

   
//--------------------------------------------   
// Task to sample the register DX7GTR  
//--------------------------------------------
   task sample_cov_DX7GTR_param;
    begin  
`ifdef FUNCOV   
     DX7GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX7GTR_param


//--------------------------------------------
// Task to set coverage on the DX7GSR2
//--------------------------------------------
   task set_cov_DX7GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX7GSR2(reg_value,select);  
      sample_cov_DX7GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX7GSR2
//--------------------------------------------
   task unpack_DX7GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx7  = reg_value[0];
         RDWN_1_dx7   = reg_value[1]; 
         WDERR_2_dx7  = reg_value[2];
         WDWN_3_dx7   = reg_value[3]; 
         REERR_4_dx7  = reg_value[4];
         REWN_5_dx7   = reg_value[5]; 
         WEERR_6_dx7  = reg_value[6];
         WEWN_7_dx7   = reg_value[7]; 
         ESTAT_11_8_dx7  = reg_value[11:8];
         //DX7GSR2_RESERVED_31_12_dx7 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx7_T  = reg_value[0];
         RDWN_1_dx7_T   = reg_value[1]; 
         WDERR_2_dx7_T  = reg_value[2];
         WDWN_3_dx7_T   = reg_value[3]; 
         REERR_4_dx7_T  = reg_value[4];
         REWN_5_dx7_T   = reg_value[5]; 
         WEERR_6_dx7_T  = reg_value[6];
         WEWN_7_dx7_T   = reg_value[7]; 
         ESTAT_11_8_dx7_T  = reg_value[11:8];
         DX7GSR2_RESERVED_31_12_dx7_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX7GSR2   

   
//--------------------------------------------   
// Task to sample the register DX7GSR2
//--------------------------------------------
   task sample_cov_DX7GSR2_param;
    begin  
`ifdef FUNCOV   
     DX7GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX7GSR2_param




  
//DX8
//--------------------------------------------
// Task to set coverage on the DX8GCR
//--------------------------------------------
   task set_cov_DX8GCR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8GCR(reg_value,select);  
      sample_cov_DX8GCR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8GCR
//--------------------------------------------
   task unpack_DX8GCR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
        DXEN_0_dx8        = reg_value[0];     
        DQSODT_1_dx8      = reg_value[1];   
        DQODT_2_dx8       = reg_value[2];    
        DXIOM_3_dx8       = reg_value[3];    
        DXPDD_4_dx8       = reg_value[4];    
        DXPDR_5_dx8       = reg_value[5];    
        DQSRPD_6_dx8      = reg_value[6];   
        DSEN_8_7_dx8      = reg_value[8:7];   
        DQSRTT_9_dx8      = reg_value[9];   
        DQRTT_10_dx8      = reg_value[10];   
        RTTOH_12_11_dx8   = reg_value[12:11];
        RTTOAL_13_dx8     = reg_value[13];   
        DXOEO_15_14_dx8   = reg_value[15:14];
        PLLRST_16_dx8			= reg_value[16];            
        PLLPD_17_dx8			= reg_value[17];             
        GSHIFT_18_dx8			= reg_value[18];            
        PLLBYP_19_dx8			= reg_value[19];            
        //DX8GCR_RESERVED_25_20_dx8			= reg_value[25:20];
        WLRKEN_29_26_dx8	= reg_value[29:26];         
        MDLEN_30_dx8			= reg_value[30];             
        CALBYP_31_dx8			= reg_value[31];            
       end
      1:begin
        DXEN_0_dx8_T       = reg_value[0];     
        DQSODT_1_dx8_T     = reg_value[1];    
        DQODT_2_dx8_T      = reg_value[2];    
        DXIOM_3_dx8_T      = reg_value[3];    
        DXPDD_4_dx8_T      = reg_value[4];    
        DXPDR_5_dx8_T      = reg_value[5];    
        DQSRPD_6_dx8_T     = reg_value[6];    
        DSEN_8_7_dx8_T     = reg_value[8:7];  
        DQSRTT_9_dx8_T     = reg_value[9];    
        DQRTT_10_dx8_T     = reg_value[10];   
        RTTOH_12_11_dx8_T  = reg_value[12:11];
        RTTOAL_13_dx8_T    = reg_value[13];   
        DXOEO_15_14_dx8_T  = reg_value[15:14];      
        PLLRST_16_dx8_T			= reg_value[16];            
        PLLPD_17_dx8_T			= reg_value[17];             
        GSHIFT_18_dx8_T			= reg_value[18];            
        PLLBYP_19_dx8_T			= reg_value[19];            
        DX8GCR_RESERVED_25_20_dx8_T			= reg_value[25:20];
        WLRKEN_29_26_dx8_T  = reg_value[29:26];         
        MDLEN_30_dx8_T			= reg_value[30];             
        CALBYP_31_dx8_T			= reg_value[31];            
       end
      endcase
`endif
           
    end      
   endtask // unpack_DX8GCR   

   
//--------------------------------------------   
// Task to sample the register DX8GCR
//--------------------------------------------
   task sample_cov_DX8GCR_param;
    begin       
`ifdef FUNCOV   
     DX8GCRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8GCR_param





//--------------------------------------------
// Task to set coverage on the DX8GSR0
//--------------------------------------------
   task set_cov_DX8GSR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8GSR0(reg_value,select);  
      sample_cov_DX8GSR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8GSR0
//--------------------------------------------
   task unpack_DX8GSR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQCAL_0_dx8 			= reg_value[0];
         RDQSCAL_1_dx8 			= reg_value[1];
         RDQSNCAL_2_dx8 		= reg_value[2];
         GDQSCAL_3_dx8 			= reg_value[3];
         WLCAL_4_dx8 			  = reg_value[4];
         WLDONE_5_dx8 			= reg_value[5];
         WLERR_6_dx8 			  = reg_value[6];
         WLPRD_14_7_dx8 		= reg_value[14:7];
         DPLOCK_15_dx8 			= reg_value[15];
         GDQSPRD_23_16_dx8 	= reg_value[23:16];
         QSGERR_27_24_dx8 	= reg_value[27:24];
         WLDQ_28_dx8 			  = reg_value[28];
         //DX8GSR0_RESERVED_31_29_dx8 			= reg_value[31:29];      
      end // case: 0  
      1:begin
         WDQCAL_0_dx8_T 			= reg_value[0];
         RDQSCAL_1_dx8_T 			= reg_value[1];
         RDQSNCAL_2_dx8_T 	 	= reg_value[2];
         GDQSCAL_3_dx8_T 			= reg_value[3];
         WLCAL_4_dx8_T        = reg_value[4];
         WLDONE_5_dx8_T 			= reg_value[5];
         WLERR_6_dx8_T        = reg_value[6];
         WLPRD_14_7_dx8_T 	 	= reg_value[14:7];
         DPLOCK_15_dx8_T 			= reg_value[15];
         GDQSPRD_23_16_dx8_T 	= reg_value[23:16];
         QSGERR_27_24_dx8_T 	= reg_value[27:24];
         WLDQ_28_dx8_T 			  = reg_value[28];
         DX8GSR0_RESERVED_31_29_dx8_T 			= reg_value[31:29];      
      end // case: 1      
    endcase  
`endif
           
    end      
   endtask // unpack_DX8GSR0   

   
//--------------------------------------------   
// Task to sample the register DX8GSR0
//--------------------------------------------
   task sample_cov_DX8GSR0_param;
     begin 
`ifdef FUNCOV   
     DX8GSR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8GSR0_param
   
   
//--------------------------------------------
// Task to set coverage on the DX8GSR1
//--------------------------------------------
   task set_cov_DX8GSR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8GSR1(reg_value,select);  
      sample_cov_DX8GSR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8GSR1
//--------------------------------------------
   task unpack_DX8GSR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         DLTDONE_0_dx8 = reg_value[0];
         DLTCODE_24_1_dx8 = reg_value[24:1];
         //DX8GSR1_RESERVED_31_25_dx8 = reg_value[31:25];         
      end
      1:begin
         DLTDONE_0_dx8_T = reg_value[0];
         DLTCODE_24_1_dx8_T = reg_value[24:1];
         DX8GSR1_RESERVED_31_25_dx8_T = reg_value[31:25];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8GSR1   

   
//--------------------------------------------   
// Task to sample the register DX8GSR1
//--------------------------------------------
   task sample_cov_DX8GSR1_param;
    begin  
`ifdef FUNCOV   
     DX8GSR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8GSR1_param


//--------------------------------------------
// Task to set coverage on the DX8BDLR0
//--------------------------------------------
   task set_cov_DX8BDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8BDLR0(reg_value,select);  
      sample_cov_DX8BDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8BDLR0
//--------------------------------------------
   task unpack_DX8BDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV        
    case(select)
      0:begin
         DQ0WBD_5_0_dx8 = reg_value[5:0];
         DQ1WBD_11_6_dx8 = reg_value[11:6];
         DQ2WBD_17_12_dx8 = reg_value[17:12];
         DQ3WBD_23_18_dx8 = reg_value[23:18];
         DQ4WBD_29_24_dx8 = reg_value[29:24];
         //DX8BDLR0_RESERVED_31_30_dx8 = reg_value[31:30];      
      end
      1:begin
         DQ0WBD_5_0_dx8_T = reg_value[5:0];
         DQ1WBD_11_6_dx8_T = reg_value[11:6];
         DQ2WBD_17_12_dx8_T = reg_value[17:12];
         DQ3WBD_23_18_dx8_T = reg_value[23:18];
         DQ4WBD_29_24_dx8_T = reg_value[29:24];
         DX8BDLR0_RESERVED_31_30_dx8_T = reg_value[31:30];      
      end
      2:begin         
         DQ0WBD_5_0_dx8_vt_drift = reg_value[5:0];
         DQ1WBD_11_6_dx8_vt_drift = reg_value[11:6];
         DQ2WBD_17_12_dx8_vt_drift = reg_value[17:12];
         DQ3WBD_23_18_dx8_vt_drift = reg_value[23:18];
         DQ4WBD_29_24_dx8_vt_drift = reg_value[29:24];  
         DQ0WBD_5_0_dx8_vt_drift_wo_upd = reg_value[5:0];
         DQ1WBD_11_6_dx8_vt_drift_wo_upd = reg_value[11:6];
         DQ2WBD_17_12_dx8_vt_drift_wo_upd = reg_value[17:12];
         DQ3WBD_23_18_dx8_vt_drift_wo_upd = reg_value[23:18];
         DQ4WBD_29_24_dx8_vt_drift_wo_upd = reg_value[29:24];    
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8BDLR0   

   
//--------------------------------------------   
// Task to sample the register DX8BDLR0
//--------------------------------------------
   task sample_cov_DX8BDLR0_param;
    begin  
`ifdef FUNCOV   
     DX8BDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8BDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX8BDLR1
//--------------------------------------------
   task set_cov_DX8BDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8BDLR1(reg_value,select);  
      sample_cov_DX8BDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8BDLR1
//--------------------------------------------
   task unpack_DX8BDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5WBD_5_0_dx8 = reg_value[5:0];
         DQ6WBD_11_6_dx8 = reg_value[11:6];
         DQ7WBD_17_12_dx8 = reg_value[17:12];
         DMWBD_23_18_dx8 = reg_value[23:18];
         DSWBD_29_24_dx8 = reg_value[29:24];
         //DX8BDLR1_RESERVED_31_30_dx8 = reg_value[31:30];    
      end
      1:begin
         DQ5WBD_5_0_dx8_T = reg_value[5:0];
         DQ6WBD_11_6_dx8_T = reg_value[11:6];
         DQ7WBD_17_12_dx8_T = reg_value[17:12];
         DMWBD_23_18_dx8_T = reg_value[23:18];
         DSWBD_29_24_dx8_T = reg_value[29:24];
         DX8BDLR1_RESERVED_31_30_dx8_T = reg_value[31:30];    
      end
      2:begin
         DQ5WBD_5_0_dx8_vt_drift = reg_value[5:0];
         DQ6WBD_11_6_dx8_vt_drift  = reg_value[11:6];
         DQ7WBD_17_12_dx8_vt_drift  = reg_value[17:12];
         DMWBD_23_18_dx8_vt_drift  = reg_value[23:18];
         DSWBD_29_24_dx8_vt_drift  = reg_value[29:24];
         DQ5WBD_5_0_dx8_vt_drift_wo_upd = reg_value[5:0];
         DQ6WBD_11_6_dx8_vt_drift_wo_upd  = reg_value[11:6];
         DQ7WBD_17_12_dx8_vt_drift_wo_upd  = reg_value[17:12];
         DMWBD_23_18_dx8_vt_drift_wo_upd  = reg_value[23:18];
         DSWBD_29_24_dx8_vt_drift_wo_upd  = reg_value[29:24];        
      end
     endcase
`endif           
    end      
   endtask // unpack_DX8BDLR1   

   
//--------------------------------------------   
// Task to sample the register DX8BDLR1
//--------------------------------------------
   task sample_cov_DX8BDLR1_param;
    begin  
`ifdef FUNCOV   
     DX8BDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8BDLR1_param

   
//--------------------------------------------
// Task to set coverage on the DX8BDLR2
//--------------------------------------------
   task set_cov_DX8BDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8BDLR2(reg_value,select);  
      sample_cov_DX8BDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8BDLR2
//--------------------------------------------
   task unpack_DX8BDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         DSOEBD_5_0_dx8   = reg_value[5:0];
         DQOEBD_11_6_dx8  = reg_value[11:6];
         DSRBD_17_12_dx8  = reg_value[17:12];
         DSNRBD_23_18_dx8 = reg_value[23:18];
         //DX8BDLR2_RESERVED_31_24_dx8 = reg_value[31:24];            
      end
      1:begin
         DSOEBD_5_0_dx8_T   = reg_value[5:0];
         DQOEBD_11_6_dx8_T  = reg_value[11:6];
         DSRBD_17_12_dx8_T  = reg_value[17:12];
         DSNRBD_23_18_dx8_T = reg_value[23:18];
         DX8BDLR2_RESERVED_31_24_dx8_T = reg_value[31:24];            
      end      
      2:begin
         DSOEBD_5_0_dx8_vt_drift   = reg_value[5:0];
         DQOEBD_11_6_dx8_vt_drift  = reg_value[11:6];
         DSRBD_17_12_dx8_vt_drift  = reg_value[17:12];
         DSNRBD_23_18_dx8_vt_drift = reg_value[23:18];
         DSOEBD_5_0_dx8_vt_drift_wo_upd   = reg_value[5:0];
         DQOEBD_11_6_dx8_vt_drift_wo_upd  = reg_value[11:6];               
         DSRBD_17_12_dx8_vt_drift_wo_upd  = reg_value[17:12];
         DSNRBD_23_18_dx8_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8BDLR2   

   
//--------------------------------------------   
// Task to sample the register DX8BDLR2
//--------------------------------------------
   task sample_cov_DX8BDLR2_param;
     begin 
`ifdef FUNCOV   
     DX8BDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8BDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX8BDLR3
//--------------------------------------------
   task set_cov_DX8BDLR3;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8BDLR3(reg_value,select);  
      sample_cov_DX8BDLR3_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8BDLR3
//--------------------------------------------
   task unpack_DX8BDLR3;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ0RBD_5_0_dx8 = reg_value[5:0];
         DQ1RBD_11_6_dx8 = reg_value[11:6];
         DQ2RBD_17_12_dx8 = reg_value[17:12];
         DQ3RBD_23_18_dx8 = reg_value[23:18];
         DQ4RBD_29_24_dx8 = reg_value[29:24];
         //DX8BDLR3_RESERVED_31_30_dx8 = reg_value[31:30];   
      end
      1:begin
         DQ0RBD_5_0_dx8_T = reg_value[5:0];
         DQ1RBD_11_6_dx8_T = reg_value[11:6];
         DQ2RBD_17_12_dx8_T = reg_value[17:12];
         DQ3RBD_23_18_dx8_T = reg_value[23:18];
         DQ4RBD_29_24_dx8_T = reg_value[29:24];
         DX8BDLR3_RESERVED_31_30_dx8_T = reg_value[31:30];   
      end
      2:begin
         DQ0RBD_5_0_dx8_vt_drift = reg_value[5:0];
         DQ1RBD_11_6_dx8_vt_drift = reg_value[11:6];
         DQ2RBD_17_12_dx8_vt_drift = reg_value[17:12];
         DQ3RBD_23_18_dx8_vt_drift = reg_value[23:18];
         DQ4RBD_29_24_dx8_vt_drift = reg_value[29:24];
         DQ0RBD_5_0_dx8_vt_drift_wo_upd = reg_value[5:0];
         DQ1RBD_11_6_dx8_vt_drift_wo_upd = reg_value[11:6];
         DQ2RBD_17_12_dx8_vt_drift_wo_upd = reg_value[17:12];
         DQ3RBD_23_18_dx8_vt_drift_wo_upd = reg_value[23:18];
         DQ4RBD_29_24_dx8_vt_drift_wo_upd = reg_value[29:24];
      end   
     endcase
`endif
           
    end      
   endtask // unpack_DX8BDLR3   

   
//--------------------------------------------   
// Task to sample the register DX8BDLR3
//--------------------------------------------
   task sample_cov_DX8BDLR3_param;
    begin       
`ifdef FUNCOV   
     DX8BDLR3cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8BDLR3_param

   
//--------------------------------------------
// Task to set coverage on the DX8BDLR4
//--------------------------------------------
   task set_cov_DX8BDLR4;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8BDLR4(reg_value,select);  
      sample_cov_DX8BDLR4_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8BDLR4
//--------------------------------------------
   task unpack_DX8BDLR4;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         DQ5RBD_5_0_dx8 = reg_value[5:0];
         DQ6RBD_11_6_dx8 = reg_value[11:6];
         DQ7RBD_17_12_dx8 = reg_value[17:12];
         DMRBD_23_18_dx8 = reg_value[23:18];
         //DX8BDLR4_RESERVED_31_24_dx8 = reg_value[31:24];      
      end
      1:begin
         DQ5RBD_5_0_dx8_T = reg_value[5:0];
         DQ6RBD_11_6_dx8_T = reg_value[11:6];
         DQ7RBD_17_12_dx8_T = reg_value[17:12];
         DMRBD_23_18_dx8_T = reg_value[23:18];
         DX8BDLR4_RESERVED_31_24_dx8_T = reg_value[31:24];      
      end
      2:begin
         DQ5RBD_5_0_dx8_vt_drift = reg_value[5:0];
         DQ6RBD_11_6_dx8_vt_drift = reg_value[11:6];
         DQ7RBD_17_12_dx8_vt_drift = reg_value[17:12];
         DMRBD_23_18_dx8_vt_drift = reg_value[23:18];
         DQ5RBD_5_0_dx8_vt_drift_wo_upd = reg_value[5:0];
         DQ6RBD_11_6_dx8_vt_drift_wo_upd = reg_value[11:6];
         DQ7RBD_17_12_dx8_vt_drift_wo_upd = reg_value[17:12];
         DMRBD_23_18_dx8_vt_drift_wo_upd = reg_value[23:18];
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8BDLR4   

   
//--------------------------------------------   
// Task to sample the register DX8BDLR4
//--------------------------------------------
   task sample_cov_DX8BDLR4_param;
    begin  
`ifdef FUNCOV   
     DX8BDLR4cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8BDLR4_param

   
//--------------------------------------------
// Task to set coverage on the DX8LCDLR0
//--------------------------------------------
   task set_cov_DX8LCDLR0;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8LCDLR0(reg_value,select);  
      sample_cov_DX8LCDLR0_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8LCDLR0
//--------------------------------------------
   task unpack_DX8LCDLR0;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0WLD_7_0_dx8 = reg_value[7:0];
         R1WLD_15_8_dx8 = reg_value[15:8];   
         R2WLD_23_16_dx8 = reg_value[23:16];
         R3WLD_31_24_dx8 = reg_value[31:24];     
      end
      1:begin
         R0WLD_7_0_dx8_T = reg_value[7:0];
         R1WLD_15_8_dx8_T = reg_value[15:8];   
         R2WLD_23_16_dx8_T = reg_value[23:16];
         R3WLD_31_24_dx8_T = reg_value[31:24];     
      end      
      2:begin
         R0WLD_7_0_dx8_vt_drift = reg_value[7:0];
         R1WLD_15_8_dx8_vt_drift = reg_value[15:8];   
         R2WLD_23_16_dx8_vt_drift = reg_value[23:16];
         R3WLD_31_24_dx8_vt_drift = reg_value[31:24];     
         R0WLD_7_0_dx8_vt_drift_wo_upd = reg_value[7:0];
         R1WLD_15_8_dx8_vt_drift_wo_upd = reg_value[15:8];   
         R2WLD_23_16_dx8_vt_drift_wo_upd = reg_value[23:16];
         R3WLD_31_24_dx8_vt_drift_wo_upd = reg_value[31:24];
      end
    endcase
`endif
           
    end      
   endtask // unpack_DX8LCDLR0   

   
//--------------------------------------------   
// Task to sample the register DX8LCDLR0
//--------------------------------------------
   task sample_cov_DX8LCDLR0_param;
    begin       
`ifdef FUNCOV   
     DX8LCDLR0cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8LCDLR0_param

   
//--------------------------------------------
// Task to set coverage on the DX8LCDLR1
//--------------------------------------------
   task set_cov_DX8LCDLR1;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8LCDLR1(reg_value,select);  
      sample_cov_DX8LCDLR1_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8LCDLR1
//--------------------------------------------
   task unpack_DX8LCDLR1;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin       
`ifdef FUNCOV 
    case(select)
      0:begin
         WDQD_7_0_dx8     = reg_value[7:0];
         RDQSD_15_8_dx8   = reg_value[15:8];   
         RDQSND_23_16_dx8 = reg_value[23:16];   
         //DX8LCDLR1_RESERVED_31_24_dx8 = reg_value[31:24];        
      end
      1:begin
         WDQD_7_0_dx8_T     = reg_value[7:0];
         RDQSD_15_8_dx8_T   = reg_value[15:8];   
         RDQSND_23_16_dx8_T = reg_value[23:16];   
         DX8LCDLR1_RESERVED_31_24_dx8_T = reg_value[31:24];        
      end
      2:begin
         WDQD_7_0_dx8_vt_drift = reg_value[7:0];
         RDQSD_15_8_dx8_vt_drift = reg_value[15:8];               
         RDQSND_23_16_dx8_vt_drift = reg_value[23:16];   
         WDQD_7_0_dx8_vt_drift_wo_upd = reg_value[7:0];
         RDQSD_15_8_dx8_vt_drift_wo_upd = reg_value[15:8]; 
         RDQSND_23_16_dx8_vt_drift_wo_upd = reg_value[23:16];   
        end
     endcase
`endif
           
    end      
   endtask // unpack_DX8LCDLR1   

   
//--------------------------------------------   
// Task to sample the register DX8LCDLR1
//--------------------------------------------
   task sample_cov_DX8LCDLR1_param;
     begin 
`ifdef FUNCOV   
     DX8LCDLR1cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8LCDLR1_param

      
//--------------------------------------------
// Task to set coverage on the DX8LCDLR2
//--------------------------------------------
   task set_cov_DX8LCDLR2;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8LCDLR2(reg_value,select);  
      sample_cov_DX8LCDLR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8LCDLR2
//--------------------------------------------
   task unpack_DX8LCDLR2;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin  
`ifdef FUNCOV 
    case(select)
      0:begin
         R0DQSGD_7_0_dx8 = reg_value[7:0];
         R1DQSGD_15_8_dx8 = reg_value[15:8];   
         R2DQSGD_23_16_dx8 = reg_value[23:16];
         R3DQSGD_31_24_dx8 = reg_value[31:24];       
      end
      1:begin
         R0DQSGD_7_0_dx8_T = reg_value[7:0];
         R1DQSGD_15_8_dx8_T = reg_value[15:8];   
         R2DQSGD_23_16_dx8_T = reg_value[23:16];
         R3DQSGD_31_24_dx8_T = reg_value[31:24];       
      end     
      2:begin
         R0DQSGD_7_0_dx8_vt_drift = reg_value[7:0];
         R1DQSGD_15_8_dx8_vt_drift = reg_value[15:8];   
         R2DQSGD_23_16_dx8_vt_drift = reg_value[23:16];
         R3DQSGD_31_24_dx8_vt_drift = reg_value[31:24];       
         R0DQSGD_7_0_dx8_vt_drift_wo_upd = reg_value[7:0];
         R1DQSGD_15_8_dx8_vt_drift_wo_upd = reg_value[15:8];   
         R2DQSGD_23_16_dx8_vt_drift_wo_upd = reg_value[23:16];
         R3DQSGD_31_24_dx8_vt_drift_wo_upd = reg_value[31:24];   
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8LCDLR2   

   
//--------------------------------------------   
// Task to sample the register DX8LCDLR2
//--------------------------------------------
   task sample_cov_DX8LCDLR2_param;
    begin       
`ifdef FUNCOV   
     DX8LCDLR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8LCDLR2_param

   
//--------------------------------------------
// Task to set coverage on the DX8MDLR
//--------------------------------------------
   task set_cov_DX8MDLR;         
      input [31:0]       reg_value;   
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8MDLR(reg_value,select);  
      sample_cov_DX8MDLR_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8MDLR
//--------------------------------------------
   task unpack_DX8MDLR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
     begin 
`ifdef FUNCOV 
    case(select)
      0:begin
         IPRD_7_0_dx8 = reg_value[7:0];
         TPRD_15_8_dx8 = reg_value[15:8];
         MDLD_23_16_dx8 = reg_value[23:16];  
         //DX8MDLR_RESERVED_31_24_dx8 = reg_value[31:24];      
      end
      1:begin
         IPRD_7_0_dx8_T = reg_value[7:0];
         TPRD_15_8_dx8_T = reg_value[15:8];
         MDLD_23_16_dx8_T = reg_value[23:16];  
         DX8MDLR_RESERVED_31_24_dx8_T = reg_value[31:24];      
      end
      2:begin
         //IPRD_7_0_dx8_vt_drift = reg_value[7:0];
         TPRD_15_8_dx8_vt_drift = reg_value[15:8];
         MDLD_23_16_dx8_vt_drift = reg_value[23:16];              
         //IPRD_7_0_dx8_vt_drift_wo_upd = reg_value[7:0];
         TPRD_15_8_dx8_vt_drift_wo_upd = reg_value[15:8];
         MDLD_23_16_dx8_vt_drift_wo_upd = reg_value[23:16];       
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8MDLR   

   
//--------------------------------------------   
// Task to sample the register DX8MDLR
//--------------------------------------------
   task sample_cov_DX8MDLR_param;
     begin 
`ifdef FUNCOV   
     DX8MDLRcov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8MDLR_param



//--------------------------------------------
// Task to set coverage on the DX8GTR
//--------------------------------------------
   task set_cov_DX8GTR;         
      input [31:0]       reg_value; 
      input    [1:0]     select;   
    begin
`ifdef FUNCOV   
      unpack_DX8GTR(reg_value,select);  
      sample_cov_DX8GTR_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8GTR  
//--------------------------------------------
   task unpack_DX8GTR;
      input [31:0]       reg_value;
      input    [1:0]     select; 
    begin 
`ifdef FUNCOV    
     case(select)
      0:begin     
        R0DGSL_2_0_dx8        = reg_value[2:0];           
        R1DGSL_5_3_dx8				= reg_value[5:3];           
        R2DGSL_8_6_dx8				= reg_value[8:6];           
        R3DGSL_11_9_dx8				= reg_value[11:9];          
        R0WLSL_13_12_dx8			= reg_value[13:12];         
        R1WLSL_15_14_dx8			= reg_value[15:14];         
        R2WLSL_17_16_dx8			= reg_value[17:16];         
        R3WLSL_19_18_dx8			= reg_value[19:18];         
        //DX8GTR_RESERVED_31_20_dx8			= reg_value[31:20];
      end       
      1:begin         
        R0DGSL_2_0_dx8_T        = reg_value[2:0];           
        R1DGSL_5_3_dx8_T				= reg_value[5:3];           
        R2DGSL_8_6_dx8_T				= reg_value[8:6];           
        R3DGSL_11_9_dx8_T				= reg_value[11:9];          
        R0WLSL_13_12_dx8_T			= reg_value[13:12];         
        R1WLSL_15_14_dx8_T			= reg_value[15:14];         
        R2WLSL_17_16_dx8_T			= reg_value[17:16];         
        R3WLSL_19_18_dx8_T			= reg_value[19:18];         
        DX8GTR_RESERVED_31_20_dx8_T			= reg_value[31:20];
      end       
     endcase // case (select)       
`endif        
    end   
   endtask // unpack_DX8GTR   

   
//--------------------------------------------   
// Task to sample the register DX8GTR  
//--------------------------------------------
   task sample_cov_DX8GTR_param;
    begin  
`ifdef FUNCOV   
     DX8GTRcov.sample();    
`endif
    end   
   endtask // sample_cov_DX8GTR_param



//--------------------------------------------
// Task to set coverage on the DX8GSR2
//--------------------------------------------
   task set_cov_DX8GSR2;         
      input [31:0]       reg_value;   
      input  [1:0]       select; 
    begin 
`ifdef FUNCOV   
      unpack_DX8GSR2(reg_value,select);  
      sample_cov_DX8GSR2_param();
`endif
            
    end
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the register DX8GSR2
//--------------------------------------------
   task unpack_DX8GSR2;
      input [31:0]       reg_value;
      input  [1:0]       select; 
    begin       
`ifdef FUNCOV  
    case(select)
      0:begin
         RDERR_0_dx8  = reg_value[0];
         RDWN_1_dx8   = reg_value[1]; 
         WDERR_2_dx8  = reg_value[2];
         WDWN_3_dx8   = reg_value[3]; 
         REERR_4_dx8  = reg_value[4];
         REWN_5_dx8   = reg_value[5]; 
         WEERR_6_dx8  = reg_value[6];
         WEWN_7_dx8   = reg_value[7]; 
         ESTAT_11_8_dx8  = reg_value[11:8];
         //DX8GSR2_RESERVED_31_12_dx8 = reg_value[31:12];         
      end
      1:begin
         RDERR_0_dx8_T  = reg_value[0];
         RDWN_1_dx8_T   = reg_value[1]; 
         WDERR_2_dx8_T  = reg_value[2];
         WDWN_3_dx8_T   = reg_value[3]; 
         REERR_4_dx8_T  = reg_value[4];
         REWN_5_dx8_T   = reg_value[5]; 
         WEERR_6_dx8_T  = reg_value[6];
         WEWN_7_dx8_T   = reg_value[7]; 
         ESTAT_11_8_dx8_T  = reg_value[11:8];
         DX8GSR2_RESERVED_31_12_dx8_T = reg_value[31:12];         
      end
     endcase
`endif
           
    end      
   endtask // unpack_DX8GSR2   

   
//--------------------------------------------   
// Task to sample the register DX8GSR2
//--------------------------------------------
   task sample_cov_DX8GSR2_param;
    begin  
`ifdef FUNCOV   
     DX8GSR2cov.sample();
`endif
           
    end      
   endtask // sample_cov_DX8GSR2_param






//-------------------------------------------------
// Task to set coverage on the RESRERVED Addresses
//------------------------------------------------
   task set_cov_RESERVED_ADDRESSES; 
      input [31:0]       reg_addr;         
      input [31:0]       reg_value;      
    begin
`ifdef FUNCOV   
      unpack_RESERVED_ADDRESSES(reg_addr,reg_value);  
      sample_cov_RESERVED_ADDRESSES_param();     
`endif
    end     
      
   endtask // endtask


//--------------------------------------------   
// Task to unpack the  RESRERVED Addresses
//--------------------------------------------
   task unpack_RESERVED_ADDRESSES;
      input [31:0]       reg_addr;
      input [31:0]       reg_value;     
    begin 
`ifdef FUNCOV    
     case(reg_addr)
       `RESERVED_36	: BIT_VALUE_RESERVED_36 = reg_value;	              
       `RESERVED_37	: BIT_VALUE_RESERVED_37 = reg_value;	             
       `RESERVED_38	: BIT_VALUE_RESERVED_38 = reg_value;	            
       `RESERVED_39	: BIT_VALUE_RESERVED_39 = reg_value;	             
       `RESERVED_40	: BIT_VALUE_RESERVED_40 = reg_value;	            
       `RESERVED_41	: BIT_VALUE_RESERVED_41 = reg_value;	              
       `RESERVED_42	: BIT_VALUE_RESERVED_42 = reg_value;	             
       `RESERVED_43	: BIT_VALUE_RESERVED_43 = reg_value;	            

       `RESERVED_56	: BIT_VALUE_RESERVED_56 = reg_value;	            
       `RESERVED_57	: BIT_VALUE_RESERVED_57 = reg_value;	             
       `RESERVED_58	: BIT_VALUE_RESERVED_58 = reg_value;	            
       `RESERVED_59	: BIT_VALUE_RESERVED_59 = reg_value;	             
       `RESERVED_60	: BIT_VALUE_RESERVED_60 = reg_value;	            
       `RESERVED_61	: BIT_VALUE_RESERVED_61 = reg_value;	             
       `RESERVED_62	: BIT_VALUE_RESERVED_62 = reg_value;	            
       `RESERVED_63	: BIT_VALUE_RESERVED_63 = reg_value;	           

       `RESERVED_84	: BIT_VALUE_RESERVED_84 = reg_value;	            
       `RESERVED_85	: BIT_VALUE_RESERVED_85 = reg_value;	          
       `RESERVED_86	: BIT_VALUE_RESERVED_86 = reg_value;	            
       `RESERVED_87	: BIT_VALUE_RESERVED_87 = reg_value;	             
       `RESERVED_88	: BIT_VALUE_RESERVED_88 = reg_value;	            
       `RESERVED_89	: BIT_VALUE_RESERVED_89 = reg_value;	            
       `RESERVED_90	: BIT_VALUE_RESERVED_90 = reg_value;	            
       `RESERVED_91	: BIT_VALUE_RESERVED_91 = reg_value;	            
       `RESERVED_92	: BIT_VALUE_RESERVED_92 = reg_value;	              
       `RESERVED_93	: BIT_VALUE_RESERVED_93 = reg_value;	             
       //`RESERVED_94	: BIT_VALUE_RESERVED_94 = reg_value;	           
       //`RESERVED_95	: BIT_VALUE_RESERVED_95 = reg_value;	             

       `RESERVED_126	: BIT_VALUE_RESERVED_126 = reg_value;            
       `RESERVED_127	: BIT_VALUE_RESERVED_127 = reg_value;             

       `RESERVED_142 	: BIT_VALUE_RESERVED_142 = reg_value;            
       `RESERVED_143	: BIT_VALUE_RESERVED_143 = reg_value;             

       `RESERVED_158 	: BIT_VALUE_RESERVED_158 = reg_value;           
       `RESERVED_159 	: BIT_VALUE_RESERVED_159 = reg_value;           

       `RESERVED_174	: BIT_VALUE_RESERVED_174 = reg_value;           
       `RESERVED_175	: BIT_VALUE_RESERVED_175 = reg_value;             

       `RESERVED_190 	: BIT_VALUE_RESERVED_190 = reg_value;             
       `RESERVED_191 	: BIT_VALUE_RESERVED_191 = reg_value;            

       `RESERVED_206 	: BIT_VALUE_RESERVED_206 = reg_value;             
       `RESERVED_207 	: BIT_VALUE_RESERVED_207 = reg_value;            

       `RESERVED_222 	: BIT_VALUE_RESERVED_222 = reg_value;            
       `RESERVED_223	: BIT_VALUE_RESERVED_223 = reg_value;            

       `RESERVED_238	: BIT_VALUE_RESERVED_238 = reg_value;             
       `RESERVED_239	: BIT_VALUE_RESERVED_239 = reg_value;            

       `RESERVED_254 	: BIT_VALUE_RESERVED_254 = reg_value;             
       `RESERVED_255 	: BIT_VALUE_RESERVED_255 = reg_value;                     
     endcase // case (select)       
`endif        
    end   
   endtask  

   
//--------------------------------------------   
// Task to sample the register RIDR  
//--------------------------------------------
   task sample_cov_RESERVED_ADDRESSES_param;
    begin  
`ifdef FUNCOV   
     RESERVED_ADDRESSEScov.sample();    
`endif
    end   
   endtask 
   
//-------------------------------------------------------------
// Task to set coverage on VT Drift scenarios coverage
//-------------------------------------------------------------   
   task set_cov_vt_drift_scenario;
     
      input integer      vt_drift_scn1i;          
      
     begin
`ifdef FUNCOV    
       case(vt_drift_scn1i)
        `VT_DRIFT_INC_W_UPD    :     vt_drift_scn1  = INCREMENT_VT_DRIFT_10PS_WITH_VT_UPDATE;       
        `VT_DRIFT_INC_W_OUT_UPD:     vt_drift_scn2  = INCREMENT_VT_DRIFT_10PS_WITHOUT_VT_UPDATE;  
        `VT_DRIFT_DEC_W_UPD    :     vt_drift_scn1  = DECREMENT_VT_DRIFT_10PS_WITH_VT_UPDATE;
        `VT_DRIFT_DEC_W_OUT_UPD:     vt_drift_scn2  = DECREMENT_VT_DRIFT_10PS_WITHOUT_VT_UPDATE;         
        `VT_DRIFT_RANDOM_W_UPD :     vt_drift_scn1  = RANDOM_VT_DRIFT_WITH_VT_UPDATE;
        `VT_DRIFT_RANDOM_W_OUT_UPD : vt_drift_scn2  = RANDOM_VT_DRIFT_WITHOUT_VT_UPDATE;                    
      endcase       
      sample_cov_vt_drift_scenario_param();      
`endif     
     end
   endtask // set_cov_vt_drift_scenario
              

//-------------------------------------------------
// Task to sample the VT Drift scenarios
//-------------------------------------------------   
   task sample_cov_vt_drift_scenario_param;      
     begin
`ifdef FUNCOV      
      vt_drift_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_vt_drift_scenario_param


//-------------------------------------------------------------
// Task to set coverage on VT Update request scenarios coverage
//-------------------------------------------------------------   
   task set_cov_vt_upd_req_scenario;
     
      input integer      vt_upd_req_scni;          
      
     begin
`ifdef FUNCOV    
       case(vt_upd_req_scni)
         `NO_REQ_VT_UPD          :     vt_upd_req_scn  = NO_VT_UPD_REQUEST;
         `PHY_REQ_VT_UPD         :     vt_upd_req_scn  = PHY_VT_UPD_REQUEST;       
         `CTRL_REQ_VT_UPD        :     vt_upd_req_scn  = CTRL_VT_UPD_REQUEST;
      endcase       
      sample_cov_vt_upd_req_scenario_param();      
`endif     
     end
   endtask // set_cov_vt_upd_req_scenario
              
 
//-------------------------------------------------
// Task to sample the VT Update request scenarios
//-------------------------------------------------   
   task sample_cov_vt_upd_req_scenario_param;      
     begin
`ifdef FUNCOV      
      vt_upd_req_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_vt_upd_req_scenario_param

             
//-----------------------------------------------------------------------------------
// Task to set coverage on PIR init triggered pll dcal phy dram scenarios coverage
//-----------------------------------------------------------------------------------   
   task set_cov_init_trig_pll_dcal_phy_dram_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross PHYINIT_0, ZCAL_1, PLLINIT_4, DCAL_5, PHYRST_6, DRAMRST_7, DRAMINIT_8 
      sample_cov_init_trig_pll_dcal_phy_dram_scenario_param();      
`endif     
     end
   endtask // set_cov_init_trig_pll_dcal_phy_dram_scenario
              

//-----------------------------------------------------------------------
// Task to sample the PIR init triggered pll dcal phy dram scenarios
//-----------------------------------------------------------------------   
   task sample_cov_init_trig_pll_dcal_phy_dram_scenario_param;      
     begin
`ifdef FUNCOV      
      init_trig_pll_dcal_phy_dram_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_init_trig_pll_dcal_phy_dram_scenario_param

              
//-------------------------------------------------------------------------------------------------
// Task to set coverage on PIR init triggered wl read dqs gate and data eye train scenarios coverage
//-------------------------------------------------------------------------------------------------   
   task set_cov_init_trig_wl_dqsg_data_eye_train_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross ddr_m, PDQ_6_4, MPRDQ_7, BYTEMASK_17_10, DTMPR_6 
      sample_cov_init_trig_wl_dqsg_data_eye_train_scenario_param();      
`endif     
     end
   endtask // set_cov_init_trig_wl_dqsg_data_eye_train_scenario
              

//-------------------------------------------------------------------------------------
// Task to sample the PIR init triggered wl read dqs gate and data eye train scenarios
//-------------------------------------------------------------------------------------   
   task sample_cov_init_trig_wl_dqsg_data_eye_train_scenario_param;      
     begin
`ifdef FUNCOV      
      init_trig_wl_dqsg_data_eye_train_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_init_trig_wl_dqsg_data_eye_train_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on VT Compensation Enable Config scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_vt_comp_enable_cfg_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross WLLVT_0, WDLVT_1, RDLVT_2, RGLVT_3, WDBVT_4, RDBVT_5, DLDLMT_22_15;
      sample_cov_vt_comp_enable_cfg_scenario_param();      
`endif     
     end
   endtask // set_cov_vt_comp_enable_cfg_scenario
              

//--------------------------------------------------------------------
// Task to sample the  VT Compensation Enable Config scenarios
//--------------------------------------------------------------------   
   task sample_cov_vt_comp_enable_cfg_scenario_param;      
     begin
`ifdef FUNCOV      
      vt_comp_enable_cfg_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_vt_comp_enable_cfg_scenario_param


//----------------------------------------------------------------------------------
// Task to set coverage on Write Leveling configuration scenarios coverage
//----------------------------------------------------------------------------------   
   task set_cov_write_level_cfg_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross WLMODE_1, WLSTEP_2, WLUNCRT_3, RANKEN_27_24, WLSELT_6;
      sample_cov_write_level_cfg_scenario_param();      
`endif     
     end
   endtask // set_cov_write_level_cfg_scenario
              

//----------------------------------------------------------------------
// Task to sample the Write Leveling configuration scenarios
//----------------------------------------------------------------------   
   task sample_cov_write_level_cfg_scenario_param;      
     begin
`ifdef FUNCOV      
      write_level_cfg_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_write_level_cfg_scenario_param

  

//-------------------------------------------------------------
// Task to set coverage on Loopback config scenarios coverage
//-------------------------------------------------------------   
   task set_cov_loopback_cfg_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross IOLB_27, LBDQSS_28, LBGDQS_30_29, LBMODE_31;
      sample_cov_loopback_cfg_scenario_param();      
`endif     
     end
   endtask // set_cov_loopback_cfg_scenario
              

//-------------------------------------------------
// Task to sample the Loopback config scenarios
//-------------------------------------------------   
   task sample_cov_loopback_cfg_scenario_param;      
     begin
`ifdef FUNCOV      
      loopback_cfg_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_loopback_cfg_scenario_param




//----------------------------------------------------------------------------
// Task to set coverage on Controller Phy Update Request scenarios coverage
//----------------------------------------------------------------------------   
   task set_cov_ctrl_phy_upd_req_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross PUREN_0, ZUEN_2, CUAEN_5, vt_upd_req_scn;
      sample_cov_ctrl_phy_upd_req_scenario_param();      
`endif     
     end
   endtask // set_cov_ctrl_phy_upd_req_scenario
              

//----------------------------------------------------------------
// Task to sample the Controller Phy Update Request scenarios
//----------------------------------------------------------------   
   task sample_cov_ctrl_phy_upd_req_scenario_param;      
     begin
`ifdef FUNCOV      
      ctrl_phy_upd_req_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_ctrl_phy_upd_req_scenario_param


//-------------------------------------------------------------
// Task to set coverage on MPR scenarios coverage
//-------------------------------------------------------------   
   task set_cov_mpr_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross ddr_m, PDQ_6_4, MPRDQ_7, BYTEMASK_17_10, DTMPR_6 
      sample_cov_mpr_scenario_param();      
`endif     
     end
   endtask // set_cov_mpr_scenario
              

//-------------------------------------------------
// Task to sample the MPR scenarios
//-------------------------------------------------   
   task sample_cov_mpr_scenario_param;      
     begin
`ifdef FUNCOV      
      mpr_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_mpr_scenario_param



//--------------------------------------------------------------------------------
// Task to set coverage on Data eye train config scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_data_eye_train_cfg_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross DTRPTN_3_0, DTRANK_5_4, DTMPR_6, DTCMPD_7, DTWDQM_11_8, DTWBDDM_12, DTEXG_23, RANKEN_27_24
      sample_cov_data_eye_train_cfg_scenario_param();      
`endif     
     end
   endtask // set_cov_data_eye_train_cfg_scenario
              

//--------------------------------------------------------------------
// Task to sample the Data eye train config scenarios
//--------------------------------------------------------------------   
   task sample_cov_data_eye_train_cfg_scenario_param;      
     begin
`ifdef FUNCOV      
      data_eye_train_cfg_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_data_eye_train_cfg_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on Data eye train debug scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_data_eye_train_debug_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross DTDBS_19_16, DTDEN_20, DTDSTP_21
      sample_cov_data_eye_train_debug_scenario_param();      
`endif     
     end
   endtask // set_cov_data_eye_train_debug_scenario
              

//--------------------------------------------------------------------
// Task to sample the Data eye train debug scenarios
//--------------------------------------------------------------------   
   task sample_cov_data_eye_train_debug_scenario_param;      
     begin
`ifdef FUNCOV      
      data_eye_train_debug_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_data_eye_train_debug_scenario_param


//-------------------------------------------------------------
// Task to set coverage on DCU loop cfg scenarios coverage
//-------------------------------------------------------------   
   task set_cov_dcu_setup_cfg_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross DINST_3_0, SADDR_7_4, EADDR_11_8, NFAIL_19_12, SONF_20, SCOF_21, RCEN_22, XCEN_23, LCNT_15_8, LINF_16
      sample_cov_dcu_setup_cfg_scenario_param();      
`endif     
     end
   endtask // set_cov_dcu_setup_cfg_scenario
              

//-------------------------------------------------
// Task to sample the DCU loop cfg scenarios
//-------------------------------------------------   
   task sample_cov_dcu_setup_cfg_scenario_param;      
     begin
`ifdef FUNCOV      
      dcu_setup_cfg_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_dcu_setup_cfg_scenario_param


//-------------------------------------------------------------
// Task to set coverage on DCU loop cfg scenarios coverage
//-------------------------------------------------------------   
   task set_cov_dcu_loop_cfg_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross LSADDR_3_0, LEADDR_7_4, LCNT_15_8, LINF_16, IDA_17, XLEADDR_31_28
      sample_cov_dcu_loop_cfg_scenario_param();      
`endif     
     end
   endtask // set_cov_dcu_loop_cfg_scenario
              

//-------------------------------------------------
// Task to sample the DCU loop cfg scenarios
//-------------------------------------------------   
   task sample_cov_dcu_loop_cfg_scenario_param;      
     begin
`ifdef FUNCOV      
      dcu_loop_cfg_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_dcu_loop_cfg_scenario_param



//--------------------------------------------------------------------------------
// Task to set coverage on AC BIST issue NOP inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_ac_issue_nop_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BACEN_15, BDPAT_18_17, BCKSEL_24_23, BCCSEL_26_25, BWCNT_15_0, BDONE_0, BACERR_1
      sample_cov_bist_ac_issue_nop_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_ac_issue_nop_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the AC BIST issue NOP inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_ac_issue_nop_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_ac_issue_nop_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_ac_issue_nop_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on AC BIST issue RUN inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_ac_issue_run_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BACEN_15, BDPAT_18_17, BCKSEL_24_23, BCCSEL_26_25, BWCNT_15_0, BDONE_0, BACERR_1
      sample_cov_bist_ac_issue_run_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_ac_issue_run_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the AC BIST issue RUN inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_ac_issue_run_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_ac_issue_run_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_ac_issue_run_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on AC BIST issue STOP inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_ac_issue_stop_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BACEN_15, BDPAT_18_17, BCKSEL_24_23, BCCSEL_26_25, BWCNT_15_0, BDONE_0, BACERR_1
      sample_cov_bist_ac_issue_stop_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_ac_issue_stop_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the AC BIST issue STOP inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_ac_issue_stop_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_ac_issue_stop_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_ac_issue_stop_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on AC BIST issue RESET inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_ac_issue_reset_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BACEN_15, BDPAT_18_17, BCKSEL_24_23, BCCSEL_26_25, BWCNT_15_0, BDONE_0, BACERR_1
      sample_cov_bist_ac_issue_reset_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_ac_issue_reset_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the AC BIST issue RESET inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_ac_issue_reset_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_ac_issue_reset_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_ac_issue_reset_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on DX BIST issue NOP inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_dx_issue_nop_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BDXEN_14, BDMEN_16, BDPAT_18_17, BDXSEL_22_19, BWCNT_15_0, BDONE_0, BDXERR_2
      sample_cov_bist_dx_issue_nop_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_dx_issue_nop_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the DX BIST issue NOP inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_dx_issue_nop_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_dx_issue_nop_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_dx_issue_nop_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on DX BIST issue RUN inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_dx_issue_run_lpbk_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BDXEN_14, BDMEN_16, BDPAT_18_17, BDXSEL_22_19, BWCNT_15_0, BDONE_0, BDXERR_2
      sample_cov_bist_dx_issue_run_lpbk_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_dx_issue_run_lpbk_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the DX BIST issue RUN inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_dx_issue_run_lpbk_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_dx_issue_run_lpbk_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_dx_issue_run_lpbk_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on DX BIST issue RUN inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_dx_issue_run_dram_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BDXEN_14, BDMEN_16, BDPAT_18_17, BDXSEL_22_19, BWCNT_15_0, BDONE_0, BDXERR_2
      sample_cov_bist_dx_issue_run_dram_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_dx_issue_run_dram_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the DX BIST issue RUN inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_dx_issue_run_dram_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_dx_issue_run_dram_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_dx_issue_run_dram_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on DX BIST issue STOP inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_dx_issue_stop_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BDXEN_14, BDMEN_16, BDPAT_18_17, BDXSEL_22_19, BWCNT_15_0, BDONE_0, BDXERR_2
      sample_cov_bist_dx_issue_stop_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_dx_issue_stop_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the DX BIST issue STOP inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_dx_issue_stop_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_dx_issue_stop_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_dx_issue_stop_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on DX BIST issue RESET inst scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_dx_issue_reset_inst_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BDXEN_14, BDMEN_16, BDPAT_18_17, BDXSEL_22_19, BWCNT_15_0, BDONE_0, BDXERR_2
      sample_cov_bist_dx_issue_reset_inst_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_dx_issue_reset_inst_scenario
              

//--------------------------------------------------------------------
// Task to sample the DX BIST issue RESET inst scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_dx_issue_reset_inst_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_dx_issue_reset_inst_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_dx_issue_reset_inst_scenario_param


//--------------------------------------------------------------------------------
// Task to set coverage on AC and DX not enable same time scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov_bist_setup_ac_dx_not_enable_same_time_scenario;
     begin
`ifdef FUNCOV
      // Make sure following register fields have already been sampled during 
      // write_register.
      // cross BINST_2_0, BMODE_3, BINF_4, NFAIL_12_5, BSONF_13, BDXEN_14, BDMEN_16, BDPAT_18_17, BDXSEL_22_19, BWCNT_15_0, BDONE_0, BDXERR_2
      sample_cov_bist_setup_ac_dx_not_enable_same_time_scenario_param();      
`endif     
     end
   endtask // set_cov_bist_setup_ac_dx_not_enable_same_time_scenario
              

//--------------------------------------------------------------------
// Task to sample the AC and DX not enable same time scenarios
//--------------------------------------------------------------------   
   task sample_cov_bist_setup_ac_dx_not_enable_same_time_scenario_param;      
     begin
`ifdef FUNCOV      
      bist_setup_ac_dx_not_enable_same_time_scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov_bist_setup_ac_dx_not_enable_same_time_scenario_param




/*
//--------------------------------------------------------------------------------
// Task to set coverage on  scenarios coverage
//--------------------------------------------------------------------------------   
   task set_cov__scenario;
     
      input integer      _scni;          
      
     begin
`ifdef FUNCOV    
       case(_scni)
         `          :     _scn  = ;       
         `          :     _scn  = ;
         `          :     _scn  = ;
      endcase       
      sample_cov__scenario_param();      
`endif     
     end
   endtask // set_cov__scenario
              

//--------------------------------------------------------------------
// Task to sample the  scenarios
//--------------------------------------------------------------------   
   task sample_cov__scenario_param;      
     begin
`ifdef FUNCOV      
      _scenariocov.sample(); 
`endif          
     end
   endtask // sample_cov__scenario_param
*/


  
endmodule // ddr_reg_fcov


