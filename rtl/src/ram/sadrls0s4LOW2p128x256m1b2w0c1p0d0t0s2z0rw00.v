//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and SMIC.                                                          
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: P-2019.06-SP1                            
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : sm14n0s42p11sadrl128sa03p1                    
//  Platform           : Linux3.10.0-1160.11.1.el7.x86_64              
//                     : #1 SMP Fri Dec 18 16:34:56 UTC 2020x86_64     
//  Date of Generation : Mon Aug 16 15:57:07 CST 2021                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 4.1.6                      
//   --------------------------------------------------------------     
//                 * Synchronous, 2-Port Register File *              
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00          
//   Memory Size:128 words x 256 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QB[255:0]                        
//               Input Ports:                                         
//                                   ADRA[6:0]                        
//                                   DA[255:0]                        
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   TEST1A                           
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   ADRB[6:0]                        
//                                   MEB                              
//                                   CLKB                             
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[3:0]                         

// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = LOW option.         
// -------------------------------------------------------------------- 
`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 
`define True    1'b1
`define False   1'b0




module sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00 ( QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, RMEA, RMA, ADRB, MEB, CLKB, TEST1B, RMEB, RMB);

output  [255:0] QB;
input  [6:0] ADRA;
input  [255:0] DA;
input WEA;
input MEA;
input CLKA;
input TEST1A;
input RMEA;
input  [3:0] RMA;
input  [6:0] ADRB;
input MEB;
input CLKB;
input TEST1B;
input RMEB;
input  [3:0] RMB;


// Local registers, wires, etc

`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif // MEM_CHECK_OFF
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_IGNORE_SAME_ADDR_MSG
parameter debug_mode = 0;
`else
parameter debug_mode = 1;
`endif // VIRAGE_IGNORE_SAME_ADDR_MSG

`ifdef VIRAGE_FAST_VERILOG
`else
// Notifiers Declaration
reg notif_adra;
wire [255:0] notif_da;
reg notif_da_255, notif_da_254, notif_da_253, notif_da_252, notif_da_251, notif_da_250, notif_da_249, notif_da_248, notif_da_247, notif_da_246, notif_da_245, notif_da_244, notif_da_243, notif_da_242, notif_da_241, notif_da_240, notif_da_239, notif_da_238, notif_da_237, notif_da_236, notif_da_235, notif_da_234, notif_da_233, notif_da_232, notif_da_231, notif_da_230, notif_da_229, notif_da_228, notif_da_227, notif_da_226, notif_da_225, notif_da_224, notif_da_223, notif_da_222, notif_da_221, notif_da_220, notif_da_219, notif_da_218, notif_da_217, notif_da_216, notif_da_215, notif_da_214, notif_da_213, notif_da_212, notif_da_211, notif_da_210, notif_da_209, notif_da_208, notif_da_207, notif_da_206, notif_da_205, notif_da_204, notif_da_203, notif_da_202, notif_da_201, notif_da_200, notif_da_199, notif_da_198, notif_da_197, notif_da_196, notif_da_195, notif_da_194, notif_da_193, notif_da_192, notif_da_191, notif_da_190, notif_da_189, notif_da_188, notif_da_187, notif_da_186, notif_da_185, notif_da_184, 
notif_da_183, notif_da_182, notif_da_181, notif_da_180, notif_da_179, notif_da_178, notif_da_177, notif_da_176, notif_da_175, notif_da_174, notif_da_173, notif_da_172, notif_da_171, notif_da_170, notif_da_169, notif_da_168, notif_da_167, notif_da_166, notif_da_165, notif_da_164, notif_da_163, notif_da_162, notif_da_161, notif_da_160, notif_da_159, notif_da_158, notif_da_157, notif_da_156, notif_da_155, notif_da_154, notif_da_153, notif_da_152, notif_da_151, notif_da_150, notif_da_149, notif_da_148, notif_da_147, notif_da_146, notif_da_145, notif_da_144, notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, notif_da_111, 
notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, notif_da_87, notif_da_86, notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, 
notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_clka;
reg notif_clka_CLKB_rise_rise_rec;
reg notif_test1a;
reg notif_rmea;
reg notif_rma;
reg notif_adrb;
reg notif_meb;
reg notif_clkb;
reg notif_clkb_CLKA_rise_rise_rec;
reg notif_test1b;
reg notif_rmeb;
reg notif_rmb;
`endif // VIRAGE_FAST_VERILOG
reg  [6 : 0 ] ADRA_buf_L;
reg  [6 : 0 ] ADRA_pre;
reg flag_ADRA_x;
reg  MEA_pre;
reg [255:0] DA_pre;
reg  WEA_pre;
reg  CLKB_tcq;
reg  [6 : 0 ] ADRB_buf_L;
reg  [6 : 0 ] ADRB_pre;
reg flag_ADRB_x;
reg  MEB_pre;




wire [255:0] QB_final;

`ifdef VIRAGE_FAST_VERILOG
wire [255:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
assign QB[32] = QB_buf[32];
assign QB[33] = QB_buf[33];
assign QB[34] = QB_buf[34];
assign QB[35] = QB_buf[35];
assign QB[36] = QB_buf[36];
assign QB[37] = QB_buf[37];
assign QB[38] = QB_buf[38];
assign QB[39] = QB_buf[39];
assign QB[40] = QB_buf[40];
assign QB[41] = QB_buf[41];
assign QB[42] = QB_buf[42];
assign QB[43] = QB_buf[43];
assign QB[44] = QB_buf[44];
assign QB[45] = QB_buf[45];
assign QB[46] = QB_buf[46];
assign QB[47] = QB_buf[47];
assign QB[48] = QB_buf[48];
assign QB[49] = QB_buf[49];
assign QB[50] = QB_buf[50];
assign QB[51] = QB_buf[51];
assign QB[52] = QB_buf[52];
assign QB[53] = QB_buf[53];
assign QB[54] = QB_buf[54];
assign QB[55] = QB_buf[55];
assign QB[56] = QB_buf[56];
assign QB[57] = QB_buf[57];
assign QB[58] = QB_buf[58];
assign QB[59] = QB_buf[59];
assign QB[60] = QB_buf[60];
assign QB[61] = QB_buf[61];
assign QB[62] = QB_buf[62];
assign QB[63] = QB_buf[63];
assign QB[64] = QB_buf[64];
assign QB[65] = QB_buf[65];
assign QB[66] = QB_buf[66];
assign QB[67] = QB_buf[67];
assign QB[68] = QB_buf[68];
assign QB[69] = QB_buf[69];
assign QB[70] = QB_buf[70];
assign QB[71] = QB_buf[71];
assign QB[72] = QB_buf[72];
assign QB[73] = QB_buf[73];
assign QB[74] = QB_buf[74];
assign QB[75] = QB_buf[75];
assign QB[76] = QB_buf[76];
assign QB[77] = QB_buf[77];
assign QB[78] = QB_buf[78];
assign QB[79] = QB_buf[79];
assign QB[80] = QB_buf[80];
assign QB[81] = QB_buf[81];
assign QB[82] = QB_buf[82];
assign QB[83] = QB_buf[83];
assign QB[84] = QB_buf[84];
assign QB[85] = QB_buf[85];
assign QB[86] = QB_buf[86];
assign QB[87] = QB_buf[87];
assign QB[88] = QB_buf[88];
assign QB[89] = QB_buf[89];
assign QB[90] = QB_buf[90];
assign QB[91] = QB_buf[91];
assign QB[92] = QB_buf[92];
assign QB[93] = QB_buf[93];
assign QB[94] = QB_buf[94];
assign QB[95] = QB_buf[95];
assign QB[96] = QB_buf[96];
assign QB[97] = QB_buf[97];
assign QB[98] = QB_buf[98];
assign QB[99] = QB_buf[99];
assign QB[100] = QB_buf[100];
assign QB[101] = QB_buf[101];
assign QB[102] = QB_buf[102];
assign QB[103] = QB_buf[103];
assign QB[104] = QB_buf[104];
assign QB[105] = QB_buf[105];
assign QB[106] = QB_buf[106];
assign QB[107] = QB_buf[107];
assign QB[108] = QB_buf[108];
assign QB[109] = QB_buf[109];
assign QB[110] = QB_buf[110];
assign QB[111] = QB_buf[111];
assign QB[112] = QB_buf[112];
assign QB[113] = QB_buf[113];
assign QB[114] = QB_buf[114];
assign QB[115] = QB_buf[115];
assign QB[116] = QB_buf[116];
assign QB[117] = QB_buf[117];
assign QB[118] = QB_buf[118];
assign QB[119] = QB_buf[119];
assign QB[120] = QB_buf[120];
assign QB[121] = QB_buf[121];
assign QB[122] = QB_buf[122];
assign QB[123] = QB_buf[123];
assign QB[124] = QB_buf[124];
assign QB[125] = QB_buf[125];
assign QB[126] = QB_buf[126];
assign QB[127] = QB_buf[127];
assign QB[128] = QB_buf[128];
assign QB[129] = QB_buf[129];
assign QB[130] = QB_buf[130];
assign QB[131] = QB_buf[131];
assign QB[132] = QB_buf[132];
assign QB[133] = QB_buf[133];
assign QB[134] = QB_buf[134];
assign QB[135] = QB_buf[135];
assign QB[136] = QB_buf[136];
assign QB[137] = QB_buf[137];
assign QB[138] = QB_buf[138];
assign QB[139] = QB_buf[139];
assign QB[140] = QB_buf[140];
assign QB[141] = QB_buf[141];
assign QB[142] = QB_buf[142];
assign QB[143] = QB_buf[143];
assign QB[144] = QB_buf[144];
assign QB[145] = QB_buf[145];
assign QB[146] = QB_buf[146];
assign QB[147] = QB_buf[147];
assign QB[148] = QB_buf[148];
assign QB[149] = QB_buf[149];
assign QB[150] = QB_buf[150];
assign QB[151] = QB_buf[151];
assign QB[152] = QB_buf[152];
assign QB[153] = QB_buf[153];
assign QB[154] = QB_buf[154];
assign QB[155] = QB_buf[155];
assign QB[156] = QB_buf[156];
assign QB[157] = QB_buf[157];
assign QB[158] = QB_buf[158];
assign QB[159] = QB_buf[159];
assign QB[160] = QB_buf[160];
assign QB[161] = QB_buf[161];
assign QB[162] = QB_buf[162];
assign QB[163] = QB_buf[163];
assign QB[164] = QB_buf[164];
assign QB[165] = QB_buf[165];
assign QB[166] = QB_buf[166];
assign QB[167] = QB_buf[167];
assign QB[168] = QB_buf[168];
assign QB[169] = QB_buf[169];
assign QB[170] = QB_buf[170];
assign QB[171] = QB_buf[171];
assign QB[172] = QB_buf[172];
assign QB[173] = QB_buf[173];
assign QB[174] = QB_buf[174];
assign QB[175] = QB_buf[175];
assign QB[176] = QB_buf[176];
assign QB[177] = QB_buf[177];
assign QB[178] = QB_buf[178];
assign QB[179] = QB_buf[179];
assign QB[180] = QB_buf[180];
assign QB[181] = QB_buf[181];
assign QB[182] = QB_buf[182];
assign QB[183] = QB_buf[183];
assign QB[184] = QB_buf[184];
assign QB[185] = QB_buf[185];
assign QB[186] = QB_buf[186];
assign QB[187] = QB_buf[187];
assign QB[188] = QB_buf[188];
assign QB[189] = QB_buf[189];
assign QB[190] = QB_buf[190];
assign QB[191] = QB_buf[191];
assign QB[192] = QB_buf[192];
assign QB[193] = QB_buf[193];
assign QB[194] = QB_buf[194];
assign QB[195] = QB_buf[195];
assign QB[196] = QB_buf[196];
assign QB[197] = QB_buf[197];
assign QB[198] = QB_buf[198];
assign QB[199] = QB_buf[199];
assign QB[200] = QB_buf[200];
assign QB[201] = QB_buf[201];
assign QB[202] = QB_buf[202];
assign QB[203] = QB_buf[203];
assign QB[204] = QB_buf[204];
assign QB[205] = QB_buf[205];
assign QB[206] = QB_buf[206];
assign QB[207] = QB_buf[207];
assign QB[208] = QB_buf[208];
assign QB[209] = QB_buf[209];
assign QB[210] = QB_buf[210];
assign QB[211] = QB_buf[211];
assign QB[212] = QB_buf[212];
assign QB[213] = QB_buf[213];
assign QB[214] = QB_buf[214];
assign QB[215] = QB_buf[215];
assign QB[216] = QB_buf[216];
assign QB[217] = QB_buf[217];
assign QB[218] = QB_buf[218];
assign QB[219] = QB_buf[219];
assign QB[220] = QB_buf[220];
assign QB[221] = QB_buf[221];
assign QB[222] = QB_buf[222];
assign QB[223] = QB_buf[223];
assign QB[224] = QB_buf[224];
assign QB[225] = QB_buf[225];
assign QB[226] = QB_buf[226];
assign QB[227] = QB_buf[227];
assign QB[228] = QB_buf[228];
assign QB[229] = QB_buf[229];
assign QB[230] = QB_buf[230];
assign QB[231] = QB_buf[231];
assign QB[232] = QB_buf[232];
assign QB[233] = QB_buf[233];
assign QB[234] = QB_buf[234];
assign QB[235] = QB_buf[235];
assign QB[236] = QB_buf[236];
assign QB[237] = QB_buf[237];
assign QB[238] = QB_buf[238];
assign QB[239] = QB_buf[239];
assign QB[240] = QB_buf[240];
assign QB[241] = QB_buf[241];
assign QB[242] = QB_buf[242];
assign QB[243] = QB_buf[243];
assign QB[244] = QB_buf[244];
assign QB[245] = QB_buf[245];
assign QB[246] = QB_buf[246];
assign QB[247] = QB_buf[247];
assign QB[248] = QB_buf[248];
assign QB[249] = QB_buf[249];
assign QB[250] = QB_buf[250];
assign QB[251] = QB_buf[251];
assign QB[252] = QB_buf[252];
assign QB[253] = QB_buf[253];
assign QB[254] = QB_buf[254];
assign QB[255] = QB_buf[255];
wire [6:0] ADRA_buf;
assign  ADRA_buf[0] = (ADRA[0] === 1'bZ) ? 1'bX : ( ADRA[0]);
assign  ADRA_buf[1] = (ADRA[1] === 1'bZ) ? 1'bX : ( ADRA[1]);
assign  ADRA_buf[2] = (ADRA[2] === 1'bZ) ? 1'bX : ( ADRA[2]);
assign  ADRA_buf[3] = (ADRA[3] === 1'bZ) ? 1'bX : ( ADRA[3]);
assign  ADRA_buf[4] = (ADRA[4] === 1'bZ) ? 1'bX : ( ADRA[4]);
assign  ADRA_buf[5] = (ADRA[5] === 1'bZ) ? 1'bX : ( ADRA[5]);
assign  ADRA_buf[6] = (ADRA[6] === 1'bZ) ? 1'bX : ( ADRA[6]);
wire [255:0] DA_buf;
assign  DA_buf[0] = (DA[0] === 1'bZ) ? 1'bX : ( DA[0]);
assign  DA_buf[1] = (DA[1] === 1'bZ) ? 1'bX : ( DA[1]);
assign  DA_buf[2] = (DA[2] === 1'bZ) ? 1'bX : ( DA[2]);
assign  DA_buf[3] = (DA[3] === 1'bZ) ? 1'bX : ( DA[3]);
assign  DA_buf[4] = (DA[4] === 1'bZ) ? 1'bX : ( DA[4]);
assign  DA_buf[5] = (DA[5] === 1'bZ) ? 1'bX : ( DA[5]);
assign  DA_buf[6] = (DA[6] === 1'bZ) ? 1'bX : ( DA[6]);
assign  DA_buf[7] = (DA[7] === 1'bZ) ? 1'bX : ( DA[7]);
assign  DA_buf[8] = (DA[8] === 1'bZ) ? 1'bX : ( DA[8]);
assign  DA_buf[9] = (DA[9] === 1'bZ) ? 1'bX : ( DA[9]);
assign  DA_buf[10] = (DA[10] === 1'bZ) ? 1'bX : ( DA[10]);
assign  DA_buf[11] = (DA[11] === 1'bZ) ? 1'bX : ( DA[11]);
assign  DA_buf[12] = (DA[12] === 1'bZ) ? 1'bX : ( DA[12]);
assign  DA_buf[13] = (DA[13] === 1'bZ) ? 1'bX : ( DA[13]);
assign  DA_buf[14] = (DA[14] === 1'bZ) ? 1'bX : ( DA[14]);
assign  DA_buf[15] = (DA[15] === 1'bZ) ? 1'bX : ( DA[15]);
assign  DA_buf[16] = (DA[16] === 1'bZ) ? 1'bX : ( DA[16]);
assign  DA_buf[17] = (DA[17] === 1'bZ) ? 1'bX : ( DA[17]);
assign  DA_buf[18] = (DA[18] === 1'bZ) ? 1'bX : ( DA[18]);
assign  DA_buf[19] = (DA[19] === 1'bZ) ? 1'bX : ( DA[19]);
assign  DA_buf[20] = (DA[20] === 1'bZ) ? 1'bX : ( DA[20]);
assign  DA_buf[21] = (DA[21] === 1'bZ) ? 1'bX : ( DA[21]);
assign  DA_buf[22] = (DA[22] === 1'bZ) ? 1'bX : ( DA[22]);
assign  DA_buf[23] = (DA[23] === 1'bZ) ? 1'bX : ( DA[23]);
assign  DA_buf[24] = (DA[24] === 1'bZ) ? 1'bX : ( DA[24]);
assign  DA_buf[25] = (DA[25] === 1'bZ) ? 1'bX : ( DA[25]);
assign  DA_buf[26] = (DA[26] === 1'bZ) ? 1'bX : ( DA[26]);
assign  DA_buf[27] = (DA[27] === 1'bZ) ? 1'bX : ( DA[27]);
assign  DA_buf[28] = (DA[28] === 1'bZ) ? 1'bX : ( DA[28]);
assign  DA_buf[29] = (DA[29] === 1'bZ) ? 1'bX : ( DA[29]);
assign  DA_buf[30] = (DA[30] === 1'bZ) ? 1'bX : ( DA[30]);
assign  DA_buf[31] = (DA[31] === 1'bZ) ? 1'bX : ( DA[31]);
assign  DA_buf[32] = (DA[32] === 1'bZ) ? 1'bX : ( DA[32]);
assign  DA_buf[33] = (DA[33] === 1'bZ) ? 1'bX : ( DA[33]);
assign  DA_buf[34] = (DA[34] === 1'bZ) ? 1'bX : ( DA[34]);
assign  DA_buf[35] = (DA[35] === 1'bZ) ? 1'bX : ( DA[35]);
assign  DA_buf[36] = (DA[36] === 1'bZ) ? 1'bX : ( DA[36]);
assign  DA_buf[37] = (DA[37] === 1'bZ) ? 1'bX : ( DA[37]);
assign  DA_buf[38] = (DA[38] === 1'bZ) ? 1'bX : ( DA[38]);
assign  DA_buf[39] = (DA[39] === 1'bZ) ? 1'bX : ( DA[39]);
assign  DA_buf[40] = (DA[40] === 1'bZ) ? 1'bX : ( DA[40]);
assign  DA_buf[41] = (DA[41] === 1'bZ) ? 1'bX : ( DA[41]);
assign  DA_buf[42] = (DA[42] === 1'bZ) ? 1'bX : ( DA[42]);
assign  DA_buf[43] = (DA[43] === 1'bZ) ? 1'bX : ( DA[43]);
assign  DA_buf[44] = (DA[44] === 1'bZ) ? 1'bX : ( DA[44]);
assign  DA_buf[45] = (DA[45] === 1'bZ) ? 1'bX : ( DA[45]);
assign  DA_buf[46] = (DA[46] === 1'bZ) ? 1'bX : ( DA[46]);
assign  DA_buf[47] = (DA[47] === 1'bZ) ? 1'bX : ( DA[47]);
assign  DA_buf[48] = (DA[48] === 1'bZ) ? 1'bX : ( DA[48]);
assign  DA_buf[49] = (DA[49] === 1'bZ) ? 1'bX : ( DA[49]);
assign  DA_buf[50] = (DA[50] === 1'bZ) ? 1'bX : ( DA[50]);
assign  DA_buf[51] = (DA[51] === 1'bZ) ? 1'bX : ( DA[51]);
assign  DA_buf[52] = (DA[52] === 1'bZ) ? 1'bX : ( DA[52]);
assign  DA_buf[53] = (DA[53] === 1'bZ) ? 1'bX : ( DA[53]);
assign  DA_buf[54] = (DA[54] === 1'bZ) ? 1'bX : ( DA[54]);
assign  DA_buf[55] = (DA[55] === 1'bZ) ? 1'bX : ( DA[55]);
assign  DA_buf[56] = (DA[56] === 1'bZ) ? 1'bX : ( DA[56]);
assign  DA_buf[57] = (DA[57] === 1'bZ) ? 1'bX : ( DA[57]);
assign  DA_buf[58] = (DA[58] === 1'bZ) ? 1'bX : ( DA[58]);
assign  DA_buf[59] = (DA[59] === 1'bZ) ? 1'bX : ( DA[59]);
assign  DA_buf[60] = (DA[60] === 1'bZ) ? 1'bX : ( DA[60]);
assign  DA_buf[61] = (DA[61] === 1'bZ) ? 1'bX : ( DA[61]);
assign  DA_buf[62] = (DA[62] === 1'bZ) ? 1'bX : ( DA[62]);
assign  DA_buf[63] = (DA[63] === 1'bZ) ? 1'bX : ( DA[63]);
assign  DA_buf[64] = (DA[64] === 1'bZ) ? 1'bX : ( DA[64]);
assign  DA_buf[65] = (DA[65] === 1'bZ) ? 1'bX : ( DA[65]);
assign  DA_buf[66] = (DA[66] === 1'bZ) ? 1'bX : ( DA[66]);
assign  DA_buf[67] = (DA[67] === 1'bZ) ? 1'bX : ( DA[67]);
assign  DA_buf[68] = (DA[68] === 1'bZ) ? 1'bX : ( DA[68]);
assign  DA_buf[69] = (DA[69] === 1'bZ) ? 1'bX : ( DA[69]);
assign  DA_buf[70] = (DA[70] === 1'bZ) ? 1'bX : ( DA[70]);
assign  DA_buf[71] = (DA[71] === 1'bZ) ? 1'bX : ( DA[71]);
assign  DA_buf[72] = (DA[72] === 1'bZ) ? 1'bX : ( DA[72]);
assign  DA_buf[73] = (DA[73] === 1'bZ) ? 1'bX : ( DA[73]);
assign  DA_buf[74] = (DA[74] === 1'bZ) ? 1'bX : ( DA[74]);
assign  DA_buf[75] = (DA[75] === 1'bZ) ? 1'bX : ( DA[75]);
assign  DA_buf[76] = (DA[76] === 1'bZ) ? 1'bX : ( DA[76]);
assign  DA_buf[77] = (DA[77] === 1'bZ) ? 1'bX : ( DA[77]);
assign  DA_buf[78] = (DA[78] === 1'bZ) ? 1'bX : ( DA[78]);
assign  DA_buf[79] = (DA[79] === 1'bZ) ? 1'bX : ( DA[79]);
assign  DA_buf[80] = (DA[80] === 1'bZ) ? 1'bX : ( DA[80]);
assign  DA_buf[81] = (DA[81] === 1'bZ) ? 1'bX : ( DA[81]);
assign  DA_buf[82] = (DA[82] === 1'bZ) ? 1'bX : ( DA[82]);
assign  DA_buf[83] = (DA[83] === 1'bZ) ? 1'bX : ( DA[83]);
assign  DA_buf[84] = (DA[84] === 1'bZ) ? 1'bX : ( DA[84]);
assign  DA_buf[85] = (DA[85] === 1'bZ) ? 1'bX : ( DA[85]);
assign  DA_buf[86] = (DA[86] === 1'bZ) ? 1'bX : ( DA[86]);
assign  DA_buf[87] = (DA[87] === 1'bZ) ? 1'bX : ( DA[87]);
assign  DA_buf[88] = (DA[88] === 1'bZ) ? 1'bX : ( DA[88]);
assign  DA_buf[89] = (DA[89] === 1'bZ) ? 1'bX : ( DA[89]);
assign  DA_buf[90] = (DA[90] === 1'bZ) ? 1'bX : ( DA[90]);
assign  DA_buf[91] = (DA[91] === 1'bZ) ? 1'bX : ( DA[91]);
assign  DA_buf[92] = (DA[92] === 1'bZ) ? 1'bX : ( DA[92]);
assign  DA_buf[93] = (DA[93] === 1'bZ) ? 1'bX : ( DA[93]);
assign  DA_buf[94] = (DA[94] === 1'bZ) ? 1'bX : ( DA[94]);
assign  DA_buf[95] = (DA[95] === 1'bZ) ? 1'bX : ( DA[95]);
assign  DA_buf[96] = (DA[96] === 1'bZ) ? 1'bX : ( DA[96]);
assign  DA_buf[97] = (DA[97] === 1'bZ) ? 1'bX : ( DA[97]);
assign  DA_buf[98] = (DA[98] === 1'bZ) ? 1'bX : ( DA[98]);
assign  DA_buf[99] = (DA[99] === 1'bZ) ? 1'bX : ( DA[99]);
assign  DA_buf[100] = (DA[100] === 1'bZ) ? 1'bX : ( DA[100]);
assign  DA_buf[101] = (DA[101] === 1'bZ) ? 1'bX : ( DA[101]);
assign  DA_buf[102] = (DA[102] === 1'bZ) ? 1'bX : ( DA[102]);
assign  DA_buf[103] = (DA[103] === 1'bZ) ? 1'bX : ( DA[103]);
assign  DA_buf[104] = (DA[104] === 1'bZ) ? 1'bX : ( DA[104]);
assign  DA_buf[105] = (DA[105] === 1'bZ) ? 1'bX : ( DA[105]);
assign  DA_buf[106] = (DA[106] === 1'bZ) ? 1'bX : ( DA[106]);
assign  DA_buf[107] = (DA[107] === 1'bZ) ? 1'bX : ( DA[107]);
assign  DA_buf[108] = (DA[108] === 1'bZ) ? 1'bX : ( DA[108]);
assign  DA_buf[109] = (DA[109] === 1'bZ) ? 1'bX : ( DA[109]);
assign  DA_buf[110] = (DA[110] === 1'bZ) ? 1'bX : ( DA[110]);
assign  DA_buf[111] = (DA[111] === 1'bZ) ? 1'bX : ( DA[111]);
assign  DA_buf[112] = (DA[112] === 1'bZ) ? 1'bX : ( DA[112]);
assign  DA_buf[113] = (DA[113] === 1'bZ) ? 1'bX : ( DA[113]);
assign  DA_buf[114] = (DA[114] === 1'bZ) ? 1'bX : ( DA[114]);
assign  DA_buf[115] = (DA[115] === 1'bZ) ? 1'bX : ( DA[115]);
assign  DA_buf[116] = (DA[116] === 1'bZ) ? 1'bX : ( DA[116]);
assign  DA_buf[117] = (DA[117] === 1'bZ) ? 1'bX : ( DA[117]);
assign  DA_buf[118] = (DA[118] === 1'bZ) ? 1'bX : ( DA[118]);
assign  DA_buf[119] = (DA[119] === 1'bZ) ? 1'bX : ( DA[119]);
assign  DA_buf[120] = (DA[120] === 1'bZ) ? 1'bX : ( DA[120]);
assign  DA_buf[121] = (DA[121] === 1'bZ) ? 1'bX : ( DA[121]);
assign  DA_buf[122] = (DA[122] === 1'bZ) ? 1'bX : ( DA[122]);
assign  DA_buf[123] = (DA[123] === 1'bZ) ? 1'bX : ( DA[123]);
assign  DA_buf[124] = (DA[124] === 1'bZ) ? 1'bX : ( DA[124]);
assign  DA_buf[125] = (DA[125] === 1'bZ) ? 1'bX : ( DA[125]);
assign  DA_buf[126] = (DA[126] === 1'bZ) ? 1'bX : ( DA[126]);
assign  DA_buf[127] = (DA[127] === 1'bZ) ? 1'bX : ( DA[127]);
assign  DA_buf[128] = (DA[128] === 1'bZ) ? 1'bX : ( DA[128]);
assign  DA_buf[129] = (DA[129] === 1'bZ) ? 1'bX : ( DA[129]);
assign  DA_buf[130] = (DA[130] === 1'bZ) ? 1'bX : ( DA[130]);
assign  DA_buf[131] = (DA[131] === 1'bZ) ? 1'bX : ( DA[131]);
assign  DA_buf[132] = (DA[132] === 1'bZ) ? 1'bX : ( DA[132]);
assign  DA_buf[133] = (DA[133] === 1'bZ) ? 1'bX : ( DA[133]);
assign  DA_buf[134] = (DA[134] === 1'bZ) ? 1'bX : ( DA[134]);
assign  DA_buf[135] = (DA[135] === 1'bZ) ? 1'bX : ( DA[135]);
assign  DA_buf[136] = (DA[136] === 1'bZ) ? 1'bX : ( DA[136]);
assign  DA_buf[137] = (DA[137] === 1'bZ) ? 1'bX : ( DA[137]);
assign  DA_buf[138] = (DA[138] === 1'bZ) ? 1'bX : ( DA[138]);
assign  DA_buf[139] = (DA[139] === 1'bZ) ? 1'bX : ( DA[139]);
assign  DA_buf[140] = (DA[140] === 1'bZ) ? 1'bX : ( DA[140]);
assign  DA_buf[141] = (DA[141] === 1'bZ) ? 1'bX : ( DA[141]);
assign  DA_buf[142] = (DA[142] === 1'bZ) ? 1'bX : ( DA[142]);
assign  DA_buf[143] = (DA[143] === 1'bZ) ? 1'bX : ( DA[143]);
assign  DA_buf[144] = (DA[144] === 1'bZ) ? 1'bX : ( DA[144]);
assign  DA_buf[145] = (DA[145] === 1'bZ) ? 1'bX : ( DA[145]);
assign  DA_buf[146] = (DA[146] === 1'bZ) ? 1'bX : ( DA[146]);
assign  DA_buf[147] = (DA[147] === 1'bZ) ? 1'bX : ( DA[147]);
assign  DA_buf[148] = (DA[148] === 1'bZ) ? 1'bX : ( DA[148]);
assign  DA_buf[149] = (DA[149] === 1'bZ) ? 1'bX : ( DA[149]);
assign  DA_buf[150] = (DA[150] === 1'bZ) ? 1'bX : ( DA[150]);
assign  DA_buf[151] = (DA[151] === 1'bZ) ? 1'bX : ( DA[151]);
assign  DA_buf[152] = (DA[152] === 1'bZ) ? 1'bX : ( DA[152]);
assign  DA_buf[153] = (DA[153] === 1'bZ) ? 1'bX : ( DA[153]);
assign  DA_buf[154] = (DA[154] === 1'bZ) ? 1'bX : ( DA[154]);
assign  DA_buf[155] = (DA[155] === 1'bZ) ? 1'bX : ( DA[155]);
assign  DA_buf[156] = (DA[156] === 1'bZ) ? 1'bX : ( DA[156]);
assign  DA_buf[157] = (DA[157] === 1'bZ) ? 1'bX : ( DA[157]);
assign  DA_buf[158] = (DA[158] === 1'bZ) ? 1'bX : ( DA[158]);
assign  DA_buf[159] = (DA[159] === 1'bZ) ? 1'bX : ( DA[159]);
assign  DA_buf[160] = (DA[160] === 1'bZ) ? 1'bX : ( DA[160]);
assign  DA_buf[161] = (DA[161] === 1'bZ) ? 1'bX : ( DA[161]);
assign  DA_buf[162] = (DA[162] === 1'bZ) ? 1'bX : ( DA[162]);
assign  DA_buf[163] = (DA[163] === 1'bZ) ? 1'bX : ( DA[163]);
assign  DA_buf[164] = (DA[164] === 1'bZ) ? 1'bX : ( DA[164]);
assign  DA_buf[165] = (DA[165] === 1'bZ) ? 1'bX : ( DA[165]);
assign  DA_buf[166] = (DA[166] === 1'bZ) ? 1'bX : ( DA[166]);
assign  DA_buf[167] = (DA[167] === 1'bZ) ? 1'bX : ( DA[167]);
assign  DA_buf[168] = (DA[168] === 1'bZ) ? 1'bX : ( DA[168]);
assign  DA_buf[169] = (DA[169] === 1'bZ) ? 1'bX : ( DA[169]);
assign  DA_buf[170] = (DA[170] === 1'bZ) ? 1'bX : ( DA[170]);
assign  DA_buf[171] = (DA[171] === 1'bZ) ? 1'bX : ( DA[171]);
assign  DA_buf[172] = (DA[172] === 1'bZ) ? 1'bX : ( DA[172]);
assign  DA_buf[173] = (DA[173] === 1'bZ) ? 1'bX : ( DA[173]);
assign  DA_buf[174] = (DA[174] === 1'bZ) ? 1'bX : ( DA[174]);
assign  DA_buf[175] = (DA[175] === 1'bZ) ? 1'bX : ( DA[175]);
assign  DA_buf[176] = (DA[176] === 1'bZ) ? 1'bX : ( DA[176]);
assign  DA_buf[177] = (DA[177] === 1'bZ) ? 1'bX : ( DA[177]);
assign  DA_buf[178] = (DA[178] === 1'bZ) ? 1'bX : ( DA[178]);
assign  DA_buf[179] = (DA[179] === 1'bZ) ? 1'bX : ( DA[179]);
assign  DA_buf[180] = (DA[180] === 1'bZ) ? 1'bX : ( DA[180]);
assign  DA_buf[181] = (DA[181] === 1'bZ) ? 1'bX : ( DA[181]);
assign  DA_buf[182] = (DA[182] === 1'bZ) ? 1'bX : ( DA[182]);
assign  DA_buf[183] = (DA[183] === 1'bZ) ? 1'bX : ( DA[183]);
assign  DA_buf[184] = (DA[184] === 1'bZ) ? 1'bX : ( DA[184]);
assign  DA_buf[185] = (DA[185] === 1'bZ) ? 1'bX : ( DA[185]);
assign  DA_buf[186] = (DA[186] === 1'bZ) ? 1'bX : ( DA[186]);
assign  DA_buf[187] = (DA[187] === 1'bZ) ? 1'bX : ( DA[187]);
assign  DA_buf[188] = (DA[188] === 1'bZ) ? 1'bX : ( DA[188]);
assign  DA_buf[189] = (DA[189] === 1'bZ) ? 1'bX : ( DA[189]);
assign  DA_buf[190] = (DA[190] === 1'bZ) ? 1'bX : ( DA[190]);
assign  DA_buf[191] = (DA[191] === 1'bZ) ? 1'bX : ( DA[191]);
assign  DA_buf[192] = (DA[192] === 1'bZ) ? 1'bX : ( DA[192]);
assign  DA_buf[193] = (DA[193] === 1'bZ) ? 1'bX : ( DA[193]);
assign  DA_buf[194] = (DA[194] === 1'bZ) ? 1'bX : ( DA[194]);
assign  DA_buf[195] = (DA[195] === 1'bZ) ? 1'bX : ( DA[195]);
assign  DA_buf[196] = (DA[196] === 1'bZ) ? 1'bX : ( DA[196]);
assign  DA_buf[197] = (DA[197] === 1'bZ) ? 1'bX : ( DA[197]);
assign  DA_buf[198] = (DA[198] === 1'bZ) ? 1'bX : ( DA[198]);
assign  DA_buf[199] = (DA[199] === 1'bZ) ? 1'bX : ( DA[199]);
assign  DA_buf[200] = (DA[200] === 1'bZ) ? 1'bX : ( DA[200]);
assign  DA_buf[201] = (DA[201] === 1'bZ) ? 1'bX : ( DA[201]);
assign  DA_buf[202] = (DA[202] === 1'bZ) ? 1'bX : ( DA[202]);
assign  DA_buf[203] = (DA[203] === 1'bZ) ? 1'bX : ( DA[203]);
assign  DA_buf[204] = (DA[204] === 1'bZ) ? 1'bX : ( DA[204]);
assign  DA_buf[205] = (DA[205] === 1'bZ) ? 1'bX : ( DA[205]);
assign  DA_buf[206] = (DA[206] === 1'bZ) ? 1'bX : ( DA[206]);
assign  DA_buf[207] = (DA[207] === 1'bZ) ? 1'bX : ( DA[207]);
assign  DA_buf[208] = (DA[208] === 1'bZ) ? 1'bX : ( DA[208]);
assign  DA_buf[209] = (DA[209] === 1'bZ) ? 1'bX : ( DA[209]);
assign  DA_buf[210] = (DA[210] === 1'bZ) ? 1'bX : ( DA[210]);
assign  DA_buf[211] = (DA[211] === 1'bZ) ? 1'bX : ( DA[211]);
assign  DA_buf[212] = (DA[212] === 1'bZ) ? 1'bX : ( DA[212]);
assign  DA_buf[213] = (DA[213] === 1'bZ) ? 1'bX : ( DA[213]);
assign  DA_buf[214] = (DA[214] === 1'bZ) ? 1'bX : ( DA[214]);
assign  DA_buf[215] = (DA[215] === 1'bZ) ? 1'bX : ( DA[215]);
assign  DA_buf[216] = (DA[216] === 1'bZ) ? 1'bX : ( DA[216]);
assign  DA_buf[217] = (DA[217] === 1'bZ) ? 1'bX : ( DA[217]);
assign  DA_buf[218] = (DA[218] === 1'bZ) ? 1'bX : ( DA[218]);
assign  DA_buf[219] = (DA[219] === 1'bZ) ? 1'bX : ( DA[219]);
assign  DA_buf[220] = (DA[220] === 1'bZ) ? 1'bX : ( DA[220]);
assign  DA_buf[221] = (DA[221] === 1'bZ) ? 1'bX : ( DA[221]);
assign  DA_buf[222] = (DA[222] === 1'bZ) ? 1'bX : ( DA[222]);
assign  DA_buf[223] = (DA[223] === 1'bZ) ? 1'bX : ( DA[223]);
assign  DA_buf[224] = (DA[224] === 1'bZ) ? 1'bX : ( DA[224]);
assign  DA_buf[225] = (DA[225] === 1'bZ) ? 1'bX : ( DA[225]);
assign  DA_buf[226] = (DA[226] === 1'bZ) ? 1'bX : ( DA[226]);
assign  DA_buf[227] = (DA[227] === 1'bZ) ? 1'bX : ( DA[227]);
assign  DA_buf[228] = (DA[228] === 1'bZ) ? 1'bX : ( DA[228]);
assign  DA_buf[229] = (DA[229] === 1'bZ) ? 1'bX : ( DA[229]);
assign  DA_buf[230] = (DA[230] === 1'bZ) ? 1'bX : ( DA[230]);
assign  DA_buf[231] = (DA[231] === 1'bZ) ? 1'bX : ( DA[231]);
assign  DA_buf[232] = (DA[232] === 1'bZ) ? 1'bX : ( DA[232]);
assign  DA_buf[233] = (DA[233] === 1'bZ) ? 1'bX : ( DA[233]);
assign  DA_buf[234] = (DA[234] === 1'bZ) ? 1'bX : ( DA[234]);
assign  DA_buf[235] = (DA[235] === 1'bZ) ? 1'bX : ( DA[235]);
assign  DA_buf[236] = (DA[236] === 1'bZ) ? 1'bX : ( DA[236]);
assign  DA_buf[237] = (DA[237] === 1'bZ) ? 1'bX : ( DA[237]);
assign  DA_buf[238] = (DA[238] === 1'bZ) ? 1'bX : ( DA[238]);
assign  DA_buf[239] = (DA[239] === 1'bZ) ? 1'bX : ( DA[239]);
assign  DA_buf[240] = (DA[240] === 1'bZ) ? 1'bX : ( DA[240]);
assign  DA_buf[241] = (DA[241] === 1'bZ) ? 1'bX : ( DA[241]);
assign  DA_buf[242] = (DA[242] === 1'bZ) ? 1'bX : ( DA[242]);
assign  DA_buf[243] = (DA[243] === 1'bZ) ? 1'bX : ( DA[243]);
assign  DA_buf[244] = (DA[244] === 1'bZ) ? 1'bX : ( DA[244]);
assign  DA_buf[245] = (DA[245] === 1'bZ) ? 1'bX : ( DA[245]);
assign  DA_buf[246] = (DA[246] === 1'bZ) ? 1'bX : ( DA[246]);
assign  DA_buf[247] = (DA[247] === 1'bZ) ? 1'bX : ( DA[247]);
assign  DA_buf[248] = (DA[248] === 1'bZ) ? 1'bX : ( DA[248]);
assign  DA_buf[249] = (DA[249] === 1'bZ) ? 1'bX : ( DA[249]);
assign  DA_buf[250] = (DA[250] === 1'bZ) ? 1'bX : ( DA[250]);
assign  DA_buf[251] = (DA[251] === 1'bZ) ? 1'bX : ( DA[251]);
assign  DA_buf[252] = (DA[252] === 1'bZ) ? 1'bX : ( DA[252]);
assign  DA_buf[253] = (DA[253] === 1'bZ) ? 1'bX : ( DA[253]);
assign  DA_buf[254] = (DA[254] === 1'bZ) ? 1'bX : ( DA[254]);
assign  DA_buf[255] = (DA[255] === 1'bZ) ? 1'bX : ( DA[255]);
wire WEA_buf;
assign  WEA_buf = (WEA === 1'bZ) ? 1'bX : ( WEA);
wire MEA_buf;
assign  MEA_buf = (MEA === 1'bZ) ? 1'bX : ( MEA);
wire CLKA_buf;
assign  CLKA_buf = (CLKA === 1'bZ) ? 1'bX : ( CLKA);
wire TEST1A_buf;
assign  TEST1A_buf = (TEST1A === 1'bZ) ? 1'bX : ( TEST1A);
wire RMEA_buf;
assign  RMEA_buf = (RMEA === 1'bZ) ? 1'bX : ( RMEA);
wire [3:0] RMA_buf;
wire [3:0] RMA_int;
assign  RMA_buf[0] = (RMA[0] === 1'bZ) ? 1'bX : ( RMA[0]);
assign  RMA_buf[1] = (RMA[1] === 1'bZ) ? 1'bX : ( RMA[1]);
assign  RMA_buf[2] = (RMA[2] === 1'bZ) ? 1'bX : ( RMA[2]);
assign  RMA_buf[3] = (RMA[3] === 1'bZ) ? 1'bX : ( RMA[3]);
wire [6:0] ADRB_buf;
assign  ADRB_buf[0] = (ADRB[0] === 1'bZ) ? 1'bX : ( ADRB[0]);
assign  ADRB_buf[1] = (ADRB[1] === 1'bZ) ? 1'bX : ( ADRB[1]);
assign  ADRB_buf[2] = (ADRB[2] === 1'bZ) ? 1'bX : ( ADRB[2]);
assign  ADRB_buf[3] = (ADRB[3] === 1'bZ) ? 1'bX : ( ADRB[3]);
assign  ADRB_buf[4] = (ADRB[4] === 1'bZ) ? 1'bX : ( ADRB[4]);
assign  ADRB_buf[5] = (ADRB[5] === 1'bZ) ? 1'bX : ( ADRB[5]);
assign  ADRB_buf[6] = (ADRB[6] === 1'bZ) ? 1'bX : ( ADRB[6]);
wire MEB_buf;
assign  MEB_buf = (MEB === 1'bZ) ? 1'bX : ( MEB);
wire CLKB_buf;
assign  CLKB_buf = (CLKB === 1'bZ) ? 1'bX : ( CLKB);
wire TEST1B_buf;
assign  TEST1B_buf = (TEST1B === 1'bZ) ? 1'bX : ( TEST1B);
wire RMEB_buf;
assign  RMEB_buf = (RMEB === 1'bZ) ? 1'bX : ( RMEB);
wire [3:0] RMB_buf;
wire [3:0] RMB_int;
assign  RMB_buf[0] = (RMB[0] === 1'bZ) ? 1'bX : ( RMB[0]);
assign  RMB_buf[1] = (RMB[1] === 1'bZ) ? 1'bX : ( RMB[1]);
assign  RMB_buf[2] = (RMB[2] === 1'bZ) ? 1'bX : ( RMB[2]);
assign  RMB_buf[3] = (RMB[3] === 1'bZ) ? 1'bX : ( RMB[3]);
`else
wire [255:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB_final[0],QB[0]);
buf (QB[1], QB_buf[1]);
buf (QB_final[1],QB[1]);
buf (QB[2], QB_buf[2]);
buf (QB_final[2],QB[2]);
buf (QB[3], QB_buf[3]);
buf (QB_final[3],QB[3]);
buf (QB[4], QB_buf[4]);
buf (QB_final[4],QB[4]);
buf (QB[5], QB_buf[5]);
buf (QB_final[5],QB[5]);
buf (QB[6], QB_buf[6]);
buf (QB_final[6],QB[6]);
buf (QB[7], QB_buf[7]);
buf (QB_final[7],QB[7]);
buf (QB[8], QB_buf[8]);
buf (QB_final[8],QB[8]);
buf (QB[9], QB_buf[9]);
buf (QB_final[9],QB[9]);
buf (QB[10], QB_buf[10]);
buf (QB_final[10],QB[10]);
buf (QB[11], QB_buf[11]);
buf (QB_final[11],QB[11]);
buf (QB[12], QB_buf[12]);
buf (QB_final[12],QB[12]);
buf (QB[13], QB_buf[13]);
buf (QB_final[13],QB[13]);
buf (QB[14], QB_buf[14]);
buf (QB_final[14],QB[14]);
buf (QB[15], QB_buf[15]);
buf (QB_final[15],QB[15]);
buf (QB[16], QB_buf[16]);
buf (QB_final[16],QB[16]);
buf (QB[17], QB_buf[17]);
buf (QB_final[17],QB[17]);
buf (QB[18], QB_buf[18]);
buf (QB_final[18],QB[18]);
buf (QB[19], QB_buf[19]);
buf (QB_final[19],QB[19]);
buf (QB[20], QB_buf[20]);
buf (QB_final[20],QB[20]);
buf (QB[21], QB_buf[21]);
buf (QB_final[21],QB[21]);
buf (QB[22], QB_buf[22]);
buf (QB_final[22],QB[22]);
buf (QB[23], QB_buf[23]);
buf (QB_final[23],QB[23]);
buf (QB[24], QB_buf[24]);
buf (QB_final[24],QB[24]);
buf (QB[25], QB_buf[25]);
buf (QB_final[25],QB[25]);
buf (QB[26], QB_buf[26]);
buf (QB_final[26],QB[26]);
buf (QB[27], QB_buf[27]);
buf (QB_final[27],QB[27]);
buf (QB[28], QB_buf[28]);
buf (QB_final[28],QB[28]);
buf (QB[29], QB_buf[29]);
buf (QB_final[29],QB[29]);
buf (QB[30], QB_buf[30]);
buf (QB_final[30],QB[30]);
buf (QB[31], QB_buf[31]);
buf (QB_final[31],QB[31]);
buf (QB[32], QB_buf[32]);
buf (QB_final[32],QB[32]);
buf (QB[33], QB_buf[33]);
buf (QB_final[33],QB[33]);
buf (QB[34], QB_buf[34]);
buf (QB_final[34],QB[34]);
buf (QB[35], QB_buf[35]);
buf (QB_final[35],QB[35]);
buf (QB[36], QB_buf[36]);
buf (QB_final[36],QB[36]);
buf (QB[37], QB_buf[37]);
buf (QB_final[37],QB[37]);
buf (QB[38], QB_buf[38]);
buf (QB_final[38],QB[38]);
buf (QB[39], QB_buf[39]);
buf (QB_final[39],QB[39]);
buf (QB[40], QB_buf[40]);
buf (QB_final[40],QB[40]);
buf (QB[41], QB_buf[41]);
buf (QB_final[41],QB[41]);
buf (QB[42], QB_buf[42]);
buf (QB_final[42],QB[42]);
buf (QB[43], QB_buf[43]);
buf (QB_final[43],QB[43]);
buf (QB[44], QB_buf[44]);
buf (QB_final[44],QB[44]);
buf (QB[45], QB_buf[45]);
buf (QB_final[45],QB[45]);
buf (QB[46], QB_buf[46]);
buf (QB_final[46],QB[46]);
buf (QB[47], QB_buf[47]);
buf (QB_final[47],QB[47]);
buf (QB[48], QB_buf[48]);
buf (QB_final[48],QB[48]);
buf (QB[49], QB_buf[49]);
buf (QB_final[49],QB[49]);
buf (QB[50], QB_buf[50]);
buf (QB_final[50],QB[50]);
buf (QB[51], QB_buf[51]);
buf (QB_final[51],QB[51]);
buf (QB[52], QB_buf[52]);
buf (QB_final[52],QB[52]);
buf (QB[53], QB_buf[53]);
buf (QB_final[53],QB[53]);
buf (QB[54], QB_buf[54]);
buf (QB_final[54],QB[54]);
buf (QB[55], QB_buf[55]);
buf (QB_final[55],QB[55]);
buf (QB[56], QB_buf[56]);
buf (QB_final[56],QB[56]);
buf (QB[57], QB_buf[57]);
buf (QB_final[57],QB[57]);
buf (QB[58], QB_buf[58]);
buf (QB_final[58],QB[58]);
buf (QB[59], QB_buf[59]);
buf (QB_final[59],QB[59]);
buf (QB[60], QB_buf[60]);
buf (QB_final[60],QB[60]);
buf (QB[61], QB_buf[61]);
buf (QB_final[61],QB[61]);
buf (QB[62], QB_buf[62]);
buf (QB_final[62],QB[62]);
buf (QB[63], QB_buf[63]);
buf (QB_final[63],QB[63]);
buf (QB[64], QB_buf[64]);
buf (QB_final[64],QB[64]);
buf (QB[65], QB_buf[65]);
buf (QB_final[65],QB[65]);
buf (QB[66], QB_buf[66]);
buf (QB_final[66],QB[66]);
buf (QB[67], QB_buf[67]);
buf (QB_final[67],QB[67]);
buf (QB[68], QB_buf[68]);
buf (QB_final[68],QB[68]);
buf (QB[69], QB_buf[69]);
buf (QB_final[69],QB[69]);
buf (QB[70], QB_buf[70]);
buf (QB_final[70],QB[70]);
buf (QB[71], QB_buf[71]);
buf (QB_final[71],QB[71]);
buf (QB[72], QB_buf[72]);
buf (QB_final[72],QB[72]);
buf (QB[73], QB_buf[73]);
buf (QB_final[73],QB[73]);
buf (QB[74], QB_buf[74]);
buf (QB_final[74],QB[74]);
buf (QB[75], QB_buf[75]);
buf (QB_final[75],QB[75]);
buf (QB[76], QB_buf[76]);
buf (QB_final[76],QB[76]);
buf (QB[77], QB_buf[77]);
buf (QB_final[77],QB[77]);
buf (QB[78], QB_buf[78]);
buf (QB_final[78],QB[78]);
buf (QB[79], QB_buf[79]);
buf (QB_final[79],QB[79]);
buf (QB[80], QB_buf[80]);
buf (QB_final[80],QB[80]);
buf (QB[81], QB_buf[81]);
buf (QB_final[81],QB[81]);
buf (QB[82], QB_buf[82]);
buf (QB_final[82],QB[82]);
buf (QB[83], QB_buf[83]);
buf (QB_final[83],QB[83]);
buf (QB[84], QB_buf[84]);
buf (QB_final[84],QB[84]);
buf (QB[85], QB_buf[85]);
buf (QB_final[85],QB[85]);
buf (QB[86], QB_buf[86]);
buf (QB_final[86],QB[86]);
buf (QB[87], QB_buf[87]);
buf (QB_final[87],QB[87]);
buf (QB[88], QB_buf[88]);
buf (QB_final[88],QB[88]);
buf (QB[89], QB_buf[89]);
buf (QB_final[89],QB[89]);
buf (QB[90], QB_buf[90]);
buf (QB_final[90],QB[90]);
buf (QB[91], QB_buf[91]);
buf (QB_final[91],QB[91]);
buf (QB[92], QB_buf[92]);
buf (QB_final[92],QB[92]);
buf (QB[93], QB_buf[93]);
buf (QB_final[93],QB[93]);
buf (QB[94], QB_buf[94]);
buf (QB_final[94],QB[94]);
buf (QB[95], QB_buf[95]);
buf (QB_final[95],QB[95]);
buf (QB[96], QB_buf[96]);
buf (QB_final[96],QB[96]);
buf (QB[97], QB_buf[97]);
buf (QB_final[97],QB[97]);
buf (QB[98], QB_buf[98]);
buf (QB_final[98],QB[98]);
buf (QB[99], QB_buf[99]);
buf (QB_final[99],QB[99]);
buf (QB[100], QB_buf[100]);
buf (QB_final[100],QB[100]);
buf (QB[101], QB_buf[101]);
buf (QB_final[101],QB[101]);
buf (QB[102], QB_buf[102]);
buf (QB_final[102],QB[102]);
buf (QB[103], QB_buf[103]);
buf (QB_final[103],QB[103]);
buf (QB[104], QB_buf[104]);
buf (QB_final[104],QB[104]);
buf (QB[105], QB_buf[105]);
buf (QB_final[105],QB[105]);
buf (QB[106], QB_buf[106]);
buf (QB_final[106],QB[106]);
buf (QB[107], QB_buf[107]);
buf (QB_final[107],QB[107]);
buf (QB[108], QB_buf[108]);
buf (QB_final[108],QB[108]);
buf (QB[109], QB_buf[109]);
buf (QB_final[109],QB[109]);
buf (QB[110], QB_buf[110]);
buf (QB_final[110],QB[110]);
buf (QB[111], QB_buf[111]);
buf (QB_final[111],QB[111]);
buf (QB[112], QB_buf[112]);
buf (QB_final[112],QB[112]);
buf (QB[113], QB_buf[113]);
buf (QB_final[113],QB[113]);
buf (QB[114], QB_buf[114]);
buf (QB_final[114],QB[114]);
buf (QB[115], QB_buf[115]);
buf (QB_final[115],QB[115]);
buf (QB[116], QB_buf[116]);
buf (QB_final[116],QB[116]);
buf (QB[117], QB_buf[117]);
buf (QB_final[117],QB[117]);
buf (QB[118], QB_buf[118]);
buf (QB_final[118],QB[118]);
buf (QB[119], QB_buf[119]);
buf (QB_final[119],QB[119]);
buf (QB[120], QB_buf[120]);
buf (QB_final[120],QB[120]);
buf (QB[121], QB_buf[121]);
buf (QB_final[121],QB[121]);
buf (QB[122], QB_buf[122]);
buf (QB_final[122],QB[122]);
buf (QB[123], QB_buf[123]);
buf (QB_final[123],QB[123]);
buf (QB[124], QB_buf[124]);
buf (QB_final[124],QB[124]);
buf (QB[125], QB_buf[125]);
buf (QB_final[125],QB[125]);
buf (QB[126], QB_buf[126]);
buf (QB_final[126],QB[126]);
buf (QB[127], QB_buf[127]);
buf (QB_final[127],QB[127]);
buf (QB[128], QB_buf[128]);
buf (QB_final[128],QB[128]);
buf (QB[129], QB_buf[129]);
buf (QB_final[129],QB[129]);
buf (QB[130], QB_buf[130]);
buf (QB_final[130],QB[130]);
buf (QB[131], QB_buf[131]);
buf (QB_final[131],QB[131]);
buf (QB[132], QB_buf[132]);
buf (QB_final[132],QB[132]);
buf (QB[133], QB_buf[133]);
buf (QB_final[133],QB[133]);
buf (QB[134], QB_buf[134]);
buf (QB_final[134],QB[134]);
buf (QB[135], QB_buf[135]);
buf (QB_final[135],QB[135]);
buf (QB[136], QB_buf[136]);
buf (QB_final[136],QB[136]);
buf (QB[137], QB_buf[137]);
buf (QB_final[137],QB[137]);
buf (QB[138], QB_buf[138]);
buf (QB_final[138],QB[138]);
buf (QB[139], QB_buf[139]);
buf (QB_final[139],QB[139]);
buf (QB[140], QB_buf[140]);
buf (QB_final[140],QB[140]);
buf (QB[141], QB_buf[141]);
buf (QB_final[141],QB[141]);
buf (QB[142], QB_buf[142]);
buf (QB_final[142],QB[142]);
buf (QB[143], QB_buf[143]);
buf (QB_final[143],QB[143]);
buf (QB[144], QB_buf[144]);
buf (QB_final[144],QB[144]);
buf (QB[145], QB_buf[145]);
buf (QB_final[145],QB[145]);
buf (QB[146], QB_buf[146]);
buf (QB_final[146],QB[146]);
buf (QB[147], QB_buf[147]);
buf (QB_final[147],QB[147]);
buf (QB[148], QB_buf[148]);
buf (QB_final[148],QB[148]);
buf (QB[149], QB_buf[149]);
buf (QB_final[149],QB[149]);
buf (QB[150], QB_buf[150]);
buf (QB_final[150],QB[150]);
buf (QB[151], QB_buf[151]);
buf (QB_final[151],QB[151]);
buf (QB[152], QB_buf[152]);
buf (QB_final[152],QB[152]);
buf (QB[153], QB_buf[153]);
buf (QB_final[153],QB[153]);
buf (QB[154], QB_buf[154]);
buf (QB_final[154],QB[154]);
buf (QB[155], QB_buf[155]);
buf (QB_final[155],QB[155]);
buf (QB[156], QB_buf[156]);
buf (QB_final[156],QB[156]);
buf (QB[157], QB_buf[157]);
buf (QB_final[157],QB[157]);
buf (QB[158], QB_buf[158]);
buf (QB_final[158],QB[158]);
buf (QB[159], QB_buf[159]);
buf (QB_final[159],QB[159]);
buf (QB[160], QB_buf[160]);
buf (QB_final[160],QB[160]);
buf (QB[161], QB_buf[161]);
buf (QB_final[161],QB[161]);
buf (QB[162], QB_buf[162]);
buf (QB_final[162],QB[162]);
buf (QB[163], QB_buf[163]);
buf (QB_final[163],QB[163]);
buf (QB[164], QB_buf[164]);
buf (QB_final[164],QB[164]);
buf (QB[165], QB_buf[165]);
buf (QB_final[165],QB[165]);
buf (QB[166], QB_buf[166]);
buf (QB_final[166],QB[166]);
buf (QB[167], QB_buf[167]);
buf (QB_final[167],QB[167]);
buf (QB[168], QB_buf[168]);
buf (QB_final[168],QB[168]);
buf (QB[169], QB_buf[169]);
buf (QB_final[169],QB[169]);
buf (QB[170], QB_buf[170]);
buf (QB_final[170],QB[170]);
buf (QB[171], QB_buf[171]);
buf (QB_final[171],QB[171]);
buf (QB[172], QB_buf[172]);
buf (QB_final[172],QB[172]);
buf (QB[173], QB_buf[173]);
buf (QB_final[173],QB[173]);
buf (QB[174], QB_buf[174]);
buf (QB_final[174],QB[174]);
buf (QB[175], QB_buf[175]);
buf (QB_final[175],QB[175]);
buf (QB[176], QB_buf[176]);
buf (QB_final[176],QB[176]);
buf (QB[177], QB_buf[177]);
buf (QB_final[177],QB[177]);
buf (QB[178], QB_buf[178]);
buf (QB_final[178],QB[178]);
buf (QB[179], QB_buf[179]);
buf (QB_final[179],QB[179]);
buf (QB[180], QB_buf[180]);
buf (QB_final[180],QB[180]);
buf (QB[181], QB_buf[181]);
buf (QB_final[181],QB[181]);
buf (QB[182], QB_buf[182]);
buf (QB_final[182],QB[182]);
buf (QB[183], QB_buf[183]);
buf (QB_final[183],QB[183]);
buf (QB[184], QB_buf[184]);
buf (QB_final[184],QB[184]);
buf (QB[185], QB_buf[185]);
buf (QB_final[185],QB[185]);
buf (QB[186], QB_buf[186]);
buf (QB_final[186],QB[186]);
buf (QB[187], QB_buf[187]);
buf (QB_final[187],QB[187]);
buf (QB[188], QB_buf[188]);
buf (QB_final[188],QB[188]);
buf (QB[189], QB_buf[189]);
buf (QB_final[189],QB[189]);
buf (QB[190], QB_buf[190]);
buf (QB_final[190],QB[190]);
buf (QB[191], QB_buf[191]);
buf (QB_final[191],QB[191]);
buf (QB[192], QB_buf[192]);
buf (QB_final[192],QB[192]);
buf (QB[193], QB_buf[193]);
buf (QB_final[193],QB[193]);
buf (QB[194], QB_buf[194]);
buf (QB_final[194],QB[194]);
buf (QB[195], QB_buf[195]);
buf (QB_final[195],QB[195]);
buf (QB[196], QB_buf[196]);
buf (QB_final[196],QB[196]);
buf (QB[197], QB_buf[197]);
buf (QB_final[197],QB[197]);
buf (QB[198], QB_buf[198]);
buf (QB_final[198],QB[198]);
buf (QB[199], QB_buf[199]);
buf (QB_final[199],QB[199]);
buf (QB[200], QB_buf[200]);
buf (QB_final[200],QB[200]);
buf (QB[201], QB_buf[201]);
buf (QB_final[201],QB[201]);
buf (QB[202], QB_buf[202]);
buf (QB_final[202],QB[202]);
buf (QB[203], QB_buf[203]);
buf (QB_final[203],QB[203]);
buf (QB[204], QB_buf[204]);
buf (QB_final[204],QB[204]);
buf (QB[205], QB_buf[205]);
buf (QB_final[205],QB[205]);
buf (QB[206], QB_buf[206]);
buf (QB_final[206],QB[206]);
buf (QB[207], QB_buf[207]);
buf (QB_final[207],QB[207]);
buf (QB[208], QB_buf[208]);
buf (QB_final[208],QB[208]);
buf (QB[209], QB_buf[209]);
buf (QB_final[209],QB[209]);
buf (QB[210], QB_buf[210]);
buf (QB_final[210],QB[210]);
buf (QB[211], QB_buf[211]);
buf (QB_final[211],QB[211]);
buf (QB[212], QB_buf[212]);
buf (QB_final[212],QB[212]);
buf (QB[213], QB_buf[213]);
buf (QB_final[213],QB[213]);
buf (QB[214], QB_buf[214]);
buf (QB_final[214],QB[214]);
buf (QB[215], QB_buf[215]);
buf (QB_final[215],QB[215]);
buf (QB[216], QB_buf[216]);
buf (QB_final[216],QB[216]);
buf (QB[217], QB_buf[217]);
buf (QB_final[217],QB[217]);
buf (QB[218], QB_buf[218]);
buf (QB_final[218],QB[218]);
buf (QB[219], QB_buf[219]);
buf (QB_final[219],QB[219]);
buf (QB[220], QB_buf[220]);
buf (QB_final[220],QB[220]);
buf (QB[221], QB_buf[221]);
buf (QB_final[221],QB[221]);
buf (QB[222], QB_buf[222]);
buf (QB_final[222],QB[222]);
buf (QB[223], QB_buf[223]);
buf (QB_final[223],QB[223]);
buf (QB[224], QB_buf[224]);
buf (QB_final[224],QB[224]);
buf (QB[225], QB_buf[225]);
buf (QB_final[225],QB[225]);
buf (QB[226], QB_buf[226]);
buf (QB_final[226],QB[226]);
buf (QB[227], QB_buf[227]);
buf (QB_final[227],QB[227]);
buf (QB[228], QB_buf[228]);
buf (QB_final[228],QB[228]);
buf (QB[229], QB_buf[229]);
buf (QB_final[229],QB[229]);
buf (QB[230], QB_buf[230]);
buf (QB_final[230],QB[230]);
buf (QB[231], QB_buf[231]);
buf (QB_final[231],QB[231]);
buf (QB[232], QB_buf[232]);
buf (QB_final[232],QB[232]);
buf (QB[233], QB_buf[233]);
buf (QB_final[233],QB[233]);
buf (QB[234], QB_buf[234]);
buf (QB_final[234],QB[234]);
buf (QB[235], QB_buf[235]);
buf (QB_final[235],QB[235]);
buf (QB[236], QB_buf[236]);
buf (QB_final[236],QB[236]);
buf (QB[237], QB_buf[237]);
buf (QB_final[237],QB[237]);
buf (QB[238], QB_buf[238]);
buf (QB_final[238],QB[238]);
buf (QB[239], QB_buf[239]);
buf (QB_final[239],QB[239]);
buf (QB[240], QB_buf[240]);
buf (QB_final[240],QB[240]);
buf (QB[241], QB_buf[241]);
buf (QB_final[241],QB[241]);
buf (QB[242], QB_buf[242]);
buf (QB_final[242],QB[242]);
buf (QB[243], QB_buf[243]);
buf (QB_final[243],QB[243]);
buf (QB[244], QB_buf[244]);
buf (QB_final[244],QB[244]);
buf (QB[245], QB_buf[245]);
buf (QB_final[245],QB[245]);
buf (QB[246], QB_buf[246]);
buf (QB_final[246],QB[246]);
buf (QB[247], QB_buf[247]);
buf (QB_final[247],QB[247]);
buf (QB[248], QB_buf[248]);
buf (QB_final[248],QB[248]);
buf (QB[249], QB_buf[249]);
buf (QB_final[249],QB[249]);
buf (QB[250], QB_buf[250]);
buf (QB_final[250],QB[250]);
buf (QB[251], QB_buf[251]);
buf (QB_final[251],QB[251]);
buf (QB[252], QB_buf[252]);
buf (QB_final[252],QB[252]);
buf (QB[253], QB_buf[253]);
buf (QB_final[253],QB[253]);
buf (QB[254], QB_buf[254]);
buf (QB_final[254],QB[254]);
buf (QB[255], QB_buf[255]);
buf (QB_final[255],QB[255]);
wire [6:0] ADRA_buf;
wire [6:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
wire [255:0] DA_buf;
wire [255:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
buf (DA_buf[32], delayed_DA[32]);
buf (DA_buf[33], delayed_DA[33]);
buf (DA_buf[34], delayed_DA[34]);
buf (DA_buf[35], delayed_DA[35]);
buf (DA_buf[36], delayed_DA[36]);
buf (DA_buf[37], delayed_DA[37]);
buf (DA_buf[38], delayed_DA[38]);
buf (DA_buf[39], delayed_DA[39]);
buf (DA_buf[40], delayed_DA[40]);
buf (DA_buf[41], delayed_DA[41]);
buf (DA_buf[42], delayed_DA[42]);
buf (DA_buf[43], delayed_DA[43]);
buf (DA_buf[44], delayed_DA[44]);
buf (DA_buf[45], delayed_DA[45]);
buf (DA_buf[46], delayed_DA[46]);
buf (DA_buf[47], delayed_DA[47]);
buf (DA_buf[48], delayed_DA[48]);
buf (DA_buf[49], delayed_DA[49]);
buf (DA_buf[50], delayed_DA[50]);
buf (DA_buf[51], delayed_DA[51]);
buf (DA_buf[52], delayed_DA[52]);
buf (DA_buf[53], delayed_DA[53]);
buf (DA_buf[54], delayed_DA[54]);
buf (DA_buf[55], delayed_DA[55]);
buf (DA_buf[56], delayed_DA[56]);
buf (DA_buf[57], delayed_DA[57]);
buf (DA_buf[58], delayed_DA[58]);
buf (DA_buf[59], delayed_DA[59]);
buf (DA_buf[60], delayed_DA[60]);
buf (DA_buf[61], delayed_DA[61]);
buf (DA_buf[62], delayed_DA[62]);
buf (DA_buf[63], delayed_DA[63]);
buf (DA_buf[64], delayed_DA[64]);
buf (DA_buf[65], delayed_DA[65]);
buf (DA_buf[66], delayed_DA[66]);
buf (DA_buf[67], delayed_DA[67]);
buf (DA_buf[68], delayed_DA[68]);
buf (DA_buf[69], delayed_DA[69]);
buf (DA_buf[70], delayed_DA[70]);
buf (DA_buf[71], delayed_DA[71]);
buf (DA_buf[72], delayed_DA[72]);
buf (DA_buf[73], delayed_DA[73]);
buf (DA_buf[74], delayed_DA[74]);
buf (DA_buf[75], delayed_DA[75]);
buf (DA_buf[76], delayed_DA[76]);
buf (DA_buf[77], delayed_DA[77]);
buf (DA_buf[78], delayed_DA[78]);
buf (DA_buf[79], delayed_DA[79]);
buf (DA_buf[80], delayed_DA[80]);
buf (DA_buf[81], delayed_DA[81]);
buf (DA_buf[82], delayed_DA[82]);
buf (DA_buf[83], delayed_DA[83]);
buf (DA_buf[84], delayed_DA[84]);
buf (DA_buf[85], delayed_DA[85]);
buf (DA_buf[86], delayed_DA[86]);
buf (DA_buf[87], delayed_DA[87]);
buf (DA_buf[88], delayed_DA[88]);
buf (DA_buf[89], delayed_DA[89]);
buf (DA_buf[90], delayed_DA[90]);
buf (DA_buf[91], delayed_DA[91]);
buf (DA_buf[92], delayed_DA[92]);
buf (DA_buf[93], delayed_DA[93]);
buf (DA_buf[94], delayed_DA[94]);
buf (DA_buf[95], delayed_DA[95]);
buf (DA_buf[96], delayed_DA[96]);
buf (DA_buf[97], delayed_DA[97]);
buf (DA_buf[98], delayed_DA[98]);
buf (DA_buf[99], delayed_DA[99]);
buf (DA_buf[100], delayed_DA[100]);
buf (DA_buf[101], delayed_DA[101]);
buf (DA_buf[102], delayed_DA[102]);
buf (DA_buf[103], delayed_DA[103]);
buf (DA_buf[104], delayed_DA[104]);
buf (DA_buf[105], delayed_DA[105]);
buf (DA_buf[106], delayed_DA[106]);
buf (DA_buf[107], delayed_DA[107]);
buf (DA_buf[108], delayed_DA[108]);
buf (DA_buf[109], delayed_DA[109]);
buf (DA_buf[110], delayed_DA[110]);
buf (DA_buf[111], delayed_DA[111]);
buf (DA_buf[112], delayed_DA[112]);
buf (DA_buf[113], delayed_DA[113]);
buf (DA_buf[114], delayed_DA[114]);
buf (DA_buf[115], delayed_DA[115]);
buf (DA_buf[116], delayed_DA[116]);
buf (DA_buf[117], delayed_DA[117]);
buf (DA_buf[118], delayed_DA[118]);
buf (DA_buf[119], delayed_DA[119]);
buf (DA_buf[120], delayed_DA[120]);
buf (DA_buf[121], delayed_DA[121]);
buf (DA_buf[122], delayed_DA[122]);
buf (DA_buf[123], delayed_DA[123]);
buf (DA_buf[124], delayed_DA[124]);
buf (DA_buf[125], delayed_DA[125]);
buf (DA_buf[126], delayed_DA[126]);
buf (DA_buf[127], delayed_DA[127]);
buf (DA_buf[128], delayed_DA[128]);
buf (DA_buf[129], delayed_DA[129]);
buf (DA_buf[130], delayed_DA[130]);
buf (DA_buf[131], delayed_DA[131]);
buf (DA_buf[132], delayed_DA[132]);
buf (DA_buf[133], delayed_DA[133]);
buf (DA_buf[134], delayed_DA[134]);
buf (DA_buf[135], delayed_DA[135]);
buf (DA_buf[136], delayed_DA[136]);
buf (DA_buf[137], delayed_DA[137]);
buf (DA_buf[138], delayed_DA[138]);
buf (DA_buf[139], delayed_DA[139]);
buf (DA_buf[140], delayed_DA[140]);
buf (DA_buf[141], delayed_DA[141]);
buf (DA_buf[142], delayed_DA[142]);
buf (DA_buf[143], delayed_DA[143]);
buf (DA_buf[144], delayed_DA[144]);
buf (DA_buf[145], delayed_DA[145]);
buf (DA_buf[146], delayed_DA[146]);
buf (DA_buf[147], delayed_DA[147]);
buf (DA_buf[148], delayed_DA[148]);
buf (DA_buf[149], delayed_DA[149]);
buf (DA_buf[150], delayed_DA[150]);
buf (DA_buf[151], delayed_DA[151]);
buf (DA_buf[152], delayed_DA[152]);
buf (DA_buf[153], delayed_DA[153]);
buf (DA_buf[154], delayed_DA[154]);
buf (DA_buf[155], delayed_DA[155]);
buf (DA_buf[156], delayed_DA[156]);
buf (DA_buf[157], delayed_DA[157]);
buf (DA_buf[158], delayed_DA[158]);
buf (DA_buf[159], delayed_DA[159]);
buf (DA_buf[160], delayed_DA[160]);
buf (DA_buf[161], delayed_DA[161]);
buf (DA_buf[162], delayed_DA[162]);
buf (DA_buf[163], delayed_DA[163]);
buf (DA_buf[164], delayed_DA[164]);
buf (DA_buf[165], delayed_DA[165]);
buf (DA_buf[166], delayed_DA[166]);
buf (DA_buf[167], delayed_DA[167]);
buf (DA_buf[168], delayed_DA[168]);
buf (DA_buf[169], delayed_DA[169]);
buf (DA_buf[170], delayed_DA[170]);
buf (DA_buf[171], delayed_DA[171]);
buf (DA_buf[172], delayed_DA[172]);
buf (DA_buf[173], delayed_DA[173]);
buf (DA_buf[174], delayed_DA[174]);
buf (DA_buf[175], delayed_DA[175]);
buf (DA_buf[176], delayed_DA[176]);
buf (DA_buf[177], delayed_DA[177]);
buf (DA_buf[178], delayed_DA[178]);
buf (DA_buf[179], delayed_DA[179]);
buf (DA_buf[180], delayed_DA[180]);
buf (DA_buf[181], delayed_DA[181]);
buf (DA_buf[182], delayed_DA[182]);
buf (DA_buf[183], delayed_DA[183]);
buf (DA_buf[184], delayed_DA[184]);
buf (DA_buf[185], delayed_DA[185]);
buf (DA_buf[186], delayed_DA[186]);
buf (DA_buf[187], delayed_DA[187]);
buf (DA_buf[188], delayed_DA[188]);
buf (DA_buf[189], delayed_DA[189]);
buf (DA_buf[190], delayed_DA[190]);
buf (DA_buf[191], delayed_DA[191]);
buf (DA_buf[192], delayed_DA[192]);
buf (DA_buf[193], delayed_DA[193]);
buf (DA_buf[194], delayed_DA[194]);
buf (DA_buf[195], delayed_DA[195]);
buf (DA_buf[196], delayed_DA[196]);
buf (DA_buf[197], delayed_DA[197]);
buf (DA_buf[198], delayed_DA[198]);
buf (DA_buf[199], delayed_DA[199]);
buf (DA_buf[200], delayed_DA[200]);
buf (DA_buf[201], delayed_DA[201]);
buf (DA_buf[202], delayed_DA[202]);
buf (DA_buf[203], delayed_DA[203]);
buf (DA_buf[204], delayed_DA[204]);
buf (DA_buf[205], delayed_DA[205]);
buf (DA_buf[206], delayed_DA[206]);
buf (DA_buf[207], delayed_DA[207]);
buf (DA_buf[208], delayed_DA[208]);
buf (DA_buf[209], delayed_DA[209]);
buf (DA_buf[210], delayed_DA[210]);
buf (DA_buf[211], delayed_DA[211]);
buf (DA_buf[212], delayed_DA[212]);
buf (DA_buf[213], delayed_DA[213]);
buf (DA_buf[214], delayed_DA[214]);
buf (DA_buf[215], delayed_DA[215]);
buf (DA_buf[216], delayed_DA[216]);
buf (DA_buf[217], delayed_DA[217]);
buf (DA_buf[218], delayed_DA[218]);
buf (DA_buf[219], delayed_DA[219]);
buf (DA_buf[220], delayed_DA[220]);
buf (DA_buf[221], delayed_DA[221]);
buf (DA_buf[222], delayed_DA[222]);
buf (DA_buf[223], delayed_DA[223]);
buf (DA_buf[224], delayed_DA[224]);
buf (DA_buf[225], delayed_DA[225]);
buf (DA_buf[226], delayed_DA[226]);
buf (DA_buf[227], delayed_DA[227]);
buf (DA_buf[228], delayed_DA[228]);
buf (DA_buf[229], delayed_DA[229]);
buf (DA_buf[230], delayed_DA[230]);
buf (DA_buf[231], delayed_DA[231]);
buf (DA_buf[232], delayed_DA[232]);
buf (DA_buf[233], delayed_DA[233]);
buf (DA_buf[234], delayed_DA[234]);
buf (DA_buf[235], delayed_DA[235]);
buf (DA_buf[236], delayed_DA[236]);
buf (DA_buf[237], delayed_DA[237]);
buf (DA_buf[238], delayed_DA[238]);
buf (DA_buf[239], delayed_DA[239]);
buf (DA_buf[240], delayed_DA[240]);
buf (DA_buf[241], delayed_DA[241]);
buf (DA_buf[242], delayed_DA[242]);
buf (DA_buf[243], delayed_DA[243]);
buf (DA_buf[244], delayed_DA[244]);
buf (DA_buf[245], delayed_DA[245]);
buf (DA_buf[246], delayed_DA[246]);
buf (DA_buf[247], delayed_DA[247]);
buf (DA_buf[248], delayed_DA[248]);
buf (DA_buf[249], delayed_DA[249]);
buf (DA_buf[250], delayed_DA[250]);
buf (DA_buf[251], delayed_DA[251]);
buf (DA_buf[252], delayed_DA[252]);
buf (DA_buf[253], delayed_DA[253]);
buf (DA_buf[254], delayed_DA[254]);
buf (DA_buf[255], delayed_DA[255]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_CLKA;
buf (CLKA_buf, delayed_CLKA);
wire delayed_TEST1A;
buf (TEST1A_buf, delayed_TEST1A);
wire delayed_RMEA;
buf (RMEA_buf, delayed_RMEA);
wire [3:0] RMA_int;
wire [3:0] RMA_buf;
wire [3:0] delayed_RMA;
buf (RMA_buf[0], delayed_RMA[0]);
buf (RMA_buf[1], delayed_RMA[1]);
buf (RMA_buf[2], delayed_RMA[2]);
buf (RMA_buf[3], delayed_RMA[3]);
wire [6:0] ADRB_buf;
wire [6:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_CLKB;
buf (CLKB_buf, delayed_CLKB);
wire delayed_TEST1B;
buf (TEST1B_buf, delayed_TEST1B);
wire delayed_RMEB;
buf (RMEB_buf, delayed_RMEB);
wire [3:0] RMB_int;
wire [3:0] RMB_buf;
wire [3:0] delayed_RMB;
buf (RMB_buf[0], delayed_RMB[0]);
buf (RMB_buf[1], delayed_RMB[1]);
buf (RMB_buf[2], delayed_RMB[2]);
buf (RMB_buf[3], delayed_RMB[3]);
`endif // VIRAGE_FAST_VERILOG

// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [6 : 0] address;
input [7:0] bit_pos;
input flt_type;
begin
  if (uut.faultinj_en == 0)
  begin
    if (flt_type == 1)
    begin
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b1 ;
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b1 ;
    end
    else
    begin
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b0 ;
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b0 ;
    end
  end
end
endtask
`endif


reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
initial
begin : reinit_msg_blk
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
  end
end


`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for CLK: ENCLK
wire ENCLKA;

assign ENCLKA = (( (TEST1A_buf === 1'b0))?1'b1:1'b0) ;
wire ENCLKA_test1;
assign ENCLKA_test1 = ((  (TEST1A_buf === 1'b1))?1'b1:1'b0) ;
wire ENCLKA_rmezo,ENCLKA_vdm,ENCLKA_slw,ENCLKA_def,ENCLKA_fst,ENCLKA_fster;
assign ENCLKA_rmezo = (( RMEA_buf !== 1'b1 )?1'b1:1'b0);
assign ENCLKA_vdm = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_slw = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_def = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_fst = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_fster = (( RMEA_buf === 1'b1  && ((RMA_buf[2] !== 1'b0) && (RMA_buf[3] !== 1'b1)) )?1'b1:1'b0);
// Setup/hold condition for CLK: ENCLK
wire ENCLKB;

assign ENCLKB = (( (TEST1B_buf === 1'b0))?1'b1:1'b0) ;
wire ENCLKB_test1;
assign ENCLKB_test1 = ((  (TEST1B_buf === 1'b1))?1'b1:1'b0) ;
wire ENCLKB_rmezo,ENCLKB_vdm,ENCLKB_slw,ENCLKB_def,ENCLKB_fst,ENCLKB_fster;
assign ENCLKB_rmezo = (( RMEB_buf !== 1'b1 )?1'b1:1'b0);
assign ENCLKB_vdm = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_slw = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_def = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_fst = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_fster = (( RMEB_buf === 1'b1  && ((RMB_buf[2] !== 1'b0) && (RMB_buf[3] !== 1'b1)) )?1'b1:1'b0);
`endif // VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
 
 
always @ (QB_final)
 begin   
  if (QB_final !== 256'bx )
       CLKB_tcq = 1'b0;
 end
always @ (negedge CLKB_buf)
 begin
   CLKB_tcq = 1'b0;
 end
wire ADRA_valid;
assign ADRA_valid = ( ( ADRA_pre < 128 )?1'b1:1'b0);


wire ADRB_valid;
assign ADRB_valid = ( ( ADRB_pre < 128 )?1'b1:1'b0);


`endif // VIRAGE_FAST_VERILOG

// Setup/hold conditions for syncronous signals
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRA
wire ENADRA;
assign ENADRA = (((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0)))   ) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEA is : ENMEA
wire ENMEA;
assign ENMEA = (((((WEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x))))   ) ?1'b1:1'b0);

// Setup/hold condition for Write Enable: WEA is : ENWEA
wire ENWEA;
assign ENWEA = (((((MEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x) )))   ) ?1'b1:1'b0);

// Setup/hold condition for Data In: DA is : ENDA
wire ENDA;
assign ENDA = (( ADRA_valid && ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0))   )?1'b1:1'b0) ;

// Setup/hold condition for test1 Vector: TEST1A is : ENTEST1A
wire ENTEST1A;
assign ENTEST1A = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid  )?1'b1:1'b0);
 

// Setup/hold condition for Read Margin Vector: RMA is : ENRMA
wire ENRMA;
assign ENRMA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid && RMEA_buf !== 1'b0  )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMEA is : ENRMEA
wire ENRMEA;
assign ENRMEA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid  )?1'b1:1'b0);
// Setup/hold condition for Address: ADRB is : ENADRB
wire ENADRB;
assign ENADRB = (((((MEB_pre !== 1'b0)))  ) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEB is : ENMEB
wire ENMEB;
assign ENMEB = (( (ADRB_valid || flag_ADRB_x)  ) ?1'b1:1'b0);


// Setup/hold condition for test1 Vector: TEST1B is : ENTEST1B
wire ENTEST1B;
assign ENTEST1B = ((MEB_pre !== 1'b0 && ADRB_valid  )?1'b1:1'b0);
 

// Setup/hold condition for Read Margin Vector: RMB is : ENRMB
wire ENRMB;
assign ENRMB = ((MEB_pre !== 1'b0 && ADRB_valid && RMEB_buf !== 1'b0  )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMEB is : ENRMEB
wire ENRMEB;
assign ENRMEB = ((MEB_pre !== 1'b0 && ADRB_valid  )?1'b1:1'b0);

`endif // VIRAGE_FAST_VERILOG

reg MEA_buf_L;
reg WEA_buf_L;
reg MEB_buf_L;

`ifdef VIRAGE_FAST_VERILOG
`else

// Recovery conditions for clock signals



wire ADRA_same;
wire  [6 : 0 ] ADRB_chk;
real CLKA_UTIME;
real CLKB_UTIME;
assign ADRB_chk = ((CLKA_UTIME == CLKB_UTIME)? ADRB_pre : ADRB_buf_L);

assign ADRA_same = (((ADRA_pre == ADRB_chk) && ADRA_valid) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_pre^ADRA_pre) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0)) ? 1'b1:1'b0;


wire WEA_active;
assign WEA_active = ( ( WEA_pre === 1'b0 ) )?1'b0:1'b1;

wire MEA_active;
wire MEB_chk;
assign MEB_chk = ((CLKA_UTIME == CLKB_UTIME)? MEB_pre : MEB_buf_L);
assign MEA_active = ( ( MEA_pre !== 1'b0 ) && ( MEB_chk !== 1'b0 ))?1'b1:1'b0;

wire   ENCLKBCLKArec;
assign ENCLKBCLKArec = ( ( ADRA_same  && MEA_active && WEA_active   ) ? 1'b1:1'b0);

wire ADRB_same;
wire  [6 : 0 ] ADRA_chk;
assign ADRA_chk = ((CLKA_UTIME == CLKB_UTIME)? ADRA_pre : ADRA_buf_L);

assign ADRB_same = (((ADRB_pre == ADRA_chk) && ADRB_valid) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_pre^ADRB_pre) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0)) ? 1'b1:1'b0;


wire _active;
wire WEA_chk;
assign WEA_chk = ((CLKA_UTIME == CLKB_UTIME)? WEA_pre : WEA_buf_L);
assign _active = ( ( WEA_chk === 1'b0 ) )?1'b0:1'b1;

wire MEB_active;
wire MEA_chk;
assign MEA_chk = ((CLKA_UTIME == CLKB_UTIME)? MEA_pre : MEA_buf_L);
assign MEB_active = ( ( MEB_pre !== 1'b0 ) && ( MEA_chk !== 1'b0 ))?1'b1:1'b0;

wire   ENCLKACLKBrec;
assign ENCLKACLKBrec = ( ( ADRB_same  && MEB_active && _active   ) ? 1'b1:1'b0);

wire recovery_ab;
assign recovery_ab = ( WEA_buf_L !== 1'b0 );
`endif // VIRAGE_FAST_VERILOG


`ifdef VIRAGE_FAST_VERILOG
`else
specify
 

    specparam

        Tac = 0.115,
        Tcax = 0.121,
        Tdc = 0.002,
        Tcdx = 0.191,
        Twc = 0.090,
        Tcwx = 0.042,
        Tmc = 0.090,
        Tcmx = 0.017,
        Tcsep = 0.974,
        Tcl = 0.138,
        Tcltest1 = 0.588,
        Tch = 0.097,
        Tchtest1 = 0.689,
        Tcc = 0.960,
        Tccvddmin = 1.622,
        Tccslow = 1.078,
        Tccdef = 0.960,
        Tccfast = 0.881,
        Tccfaster = 0.864,
        Tt1c = 0.115,
        Tct1x = 0.936,
        Trmec = 0.277,
        Tcrmex = 0.121,
        Trmc = 0.277,
        Trm2c = 0.111,
        Trm3c = 0.167,
        Tcrmx = 0.121,
        Tcrm2x = 0.974,
        Tcrm3x = 0.974,
        Tcq = 0.588,
        Tcqx = 0.260,
        Tcqvddmin = 0.626,
        Tcqvddminx = 0.260,
        Tcqslow = 0.626,
        Tcqslowx = 0.260,
        Tcqdef = 0.588,
        Tcqdefx = 0.260,
        Tcqfast = 0.579,
        Tcqfastx = 0.260,
        Tcqfaster = 0.569,
        Tcqfasterx = 0.260,
        Tcqtest1x = 0.260,
        Tcqtest1 = 0.588;
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if ( TEST1B )
       ( posedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TEST1B )
       ( negedge CLKB => (  QB[255]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[254]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[253]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[252]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[251]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[250]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[249]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[248]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[247]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[246]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[245]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[244]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[243]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[242]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[241]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[240]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[239]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[238]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[237]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[236]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[235]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[234]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[233]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[232]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[231]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[230]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[229]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[228]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[227]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[226]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[225]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[224]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[223]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[222]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[221]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[220]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[219]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[218]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[217]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[216]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[215]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[214]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[213]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[212]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[211]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[210]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[209]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[208]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[207]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[206]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[205]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[204]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[203]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[202]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[201]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[200]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[199]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[198]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[197]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[196]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[195]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[194]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[193]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[192]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[191]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[190]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[189]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[188]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[187]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[186]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[185]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[184]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[183]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[182]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[181]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[180]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[179]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[178]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[177]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[176]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[175]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[174]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[173]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[172]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[171]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[170]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[169]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[168]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[167]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[166]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[165]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[164]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[163]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[162]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[161]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[160]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TEST1B )
       ( negedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );



// Timing Checks

  $width (negedge CLKA &&& ENCLKA, Tcl, 0, notif_clka);
  $width (negedge CLKA &&& ENCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA, Tch, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (negedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (posedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (negedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (negedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (posedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (negedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $period (negedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fster, Tccfaster, notif_clka);
  $period (negedge CLKA &&& ENCLKA_fster, Tccfaster, notif_clka);
  $width (negedge CLKB &&& ENCLKB, Tcl, 0, notif_clkb);
  $width (negedge CLKB &&& ENCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB, Tch, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fster, Tccfaster, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_fster, Tccfaster, notif_clkb);

  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLKA, delayed_DA[75] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLKA, delayed_DA[75] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLKA, delayed_DA[76] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLKA, delayed_DA[76] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLKA, delayed_DA[77] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLKA, delayed_DA[77] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLKA, delayed_DA[78] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLKA, delayed_DA[78] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLKA, delayed_DA[79] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLKA, delayed_DA[79] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_CLKA, delayed_DA[80] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_CLKA, delayed_DA[80] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_CLKA, delayed_DA[81] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_CLKA, delayed_DA[81] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_CLKA, delayed_DA[82] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_CLKA, delayed_DA[82] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_CLKA, delayed_DA[83] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_CLKA, delayed_DA[83] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_CLKA, delayed_DA[84] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_CLKA, delayed_DA[84] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_CLKA, delayed_DA[85] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_CLKA, delayed_DA[85] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_CLKA, delayed_DA[86] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_CLKA, delayed_DA[86] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_CLKA, delayed_DA[87] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_CLKA, delayed_DA[87] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_CLKA, delayed_DA[88] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_CLKA, delayed_DA[88] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_CLKA, delayed_DA[89] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_CLKA, delayed_DA[89] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_CLKA, delayed_DA[90] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_CLKA, delayed_DA[90] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_CLKA, delayed_DA[91] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_CLKA, delayed_DA[91] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_CLKA, delayed_DA[92] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_CLKA, delayed_DA[92] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_CLKA, delayed_DA[93] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_CLKA, delayed_DA[93] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_CLKA, delayed_DA[94] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_CLKA, delayed_DA[94] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_CLKA, delayed_DA[95] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_CLKA, delayed_DA[95] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_CLKA, delayed_DA[96] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_CLKA, delayed_DA[96] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_CLKA, delayed_DA[97] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_CLKA, delayed_DA[97] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_CLKA, delayed_DA[98] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_CLKA, delayed_DA[98] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_CLKA, delayed_DA[99] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_CLKA, delayed_DA[99] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_CLKA, delayed_DA[100] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_CLKA, delayed_DA[100] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_CLKA, delayed_DA[101] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_CLKA, delayed_DA[101] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_CLKA, delayed_DA[102] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_CLKA, delayed_DA[102] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_CLKA, delayed_DA[103] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_CLKA, delayed_DA[103] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_CLKA, delayed_DA[104] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_CLKA, delayed_DA[104] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_CLKA, delayed_DA[105] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_CLKA, delayed_DA[105] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_CLKA, delayed_DA[106] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_CLKA, delayed_DA[106] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_CLKA, delayed_DA[107] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_CLKA, delayed_DA[107] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_CLKA, delayed_DA[108] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_CLKA, delayed_DA[108] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_CLKA, delayed_DA[109] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_CLKA, delayed_DA[109] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_CLKA, delayed_DA[110] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_CLKA, delayed_DA[110] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_CLKA, delayed_DA[111] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_CLKA, delayed_DA[111] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_CLKA, delayed_DA[112] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_CLKA, delayed_DA[112] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_CLKA, delayed_DA[113] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_CLKA, delayed_DA[113] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_CLKA, delayed_DA[114] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_CLKA, delayed_DA[114] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_CLKA, delayed_DA[115] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_CLKA, delayed_DA[115] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_CLKA, delayed_DA[116] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_CLKA, delayed_DA[116] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_CLKA, delayed_DA[117] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_CLKA, delayed_DA[117] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_CLKA, delayed_DA[118] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_CLKA, delayed_DA[118] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_CLKA, delayed_DA[119] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_CLKA, delayed_DA[119] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_CLKA, delayed_DA[120] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_CLKA, delayed_DA[120] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_CLKA, delayed_DA[121] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_CLKA, delayed_DA[121] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_CLKA, delayed_DA[122] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_CLKA, delayed_DA[122] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_CLKA, delayed_DA[123] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_CLKA, delayed_DA[123] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_CLKA, delayed_DA[124] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_CLKA, delayed_DA[124] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_CLKA, delayed_DA[125] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_CLKA, delayed_DA[125] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_CLKA, delayed_DA[126] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_CLKA, delayed_DA[126] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_CLKA, delayed_DA[127] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_CLKA, delayed_DA[127] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_CLKA, delayed_DA[128] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_CLKA, delayed_DA[128] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_CLKA, delayed_DA[129] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_CLKA, delayed_DA[129] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_CLKA, delayed_DA[130] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_CLKA, delayed_DA[130] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_CLKA, delayed_DA[131] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_CLKA, delayed_DA[131] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_CLKA, delayed_DA[132] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_CLKA, delayed_DA[132] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_CLKA, delayed_DA[133] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_CLKA, delayed_DA[133] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_CLKA, delayed_DA[134] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_CLKA, delayed_DA[134] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_CLKA, delayed_DA[135] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_CLKA, delayed_DA[135] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_CLKA, delayed_DA[136] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_CLKA, delayed_DA[136] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_CLKA, delayed_DA[137] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_CLKA, delayed_DA[137] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_CLKA, delayed_DA[138] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_CLKA, delayed_DA[138] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_CLKA, delayed_DA[139] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_CLKA, delayed_DA[139] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_CLKA, delayed_DA[140] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_CLKA, delayed_DA[140] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_CLKA, delayed_DA[141] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_CLKA, delayed_DA[141] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_CLKA, delayed_DA[142] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_CLKA, delayed_DA[142] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_CLKA, delayed_DA[143] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_CLKA, delayed_DA[143] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[144], Tdc, Tcdx, notif_da_144,,, delayed_CLKA, delayed_DA[144] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[144], Tdc, Tcdx, notif_da_144,,, delayed_CLKA, delayed_DA[144] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[145], Tdc, Tcdx, notif_da_145,,, delayed_CLKA, delayed_DA[145] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[145], Tdc, Tcdx, notif_da_145,,, delayed_CLKA, delayed_DA[145] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[146], Tdc, Tcdx, notif_da_146,,, delayed_CLKA, delayed_DA[146] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[146], Tdc, Tcdx, notif_da_146,,, delayed_CLKA, delayed_DA[146] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[147], Tdc, Tcdx, notif_da_147,,, delayed_CLKA, delayed_DA[147] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[147], Tdc, Tcdx, notif_da_147,,, delayed_CLKA, delayed_DA[147] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[148], Tdc, Tcdx, notif_da_148,,, delayed_CLKA, delayed_DA[148] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[148], Tdc, Tcdx, notif_da_148,,, delayed_CLKA, delayed_DA[148] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[149], Tdc, Tcdx, notif_da_149,,, delayed_CLKA, delayed_DA[149] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[149], Tdc, Tcdx, notif_da_149,,, delayed_CLKA, delayed_DA[149] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[150], Tdc, Tcdx, notif_da_150,,, delayed_CLKA, delayed_DA[150] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[150], Tdc, Tcdx, notif_da_150,,, delayed_CLKA, delayed_DA[150] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[151], Tdc, Tcdx, notif_da_151,,, delayed_CLKA, delayed_DA[151] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[151], Tdc, Tcdx, notif_da_151,,, delayed_CLKA, delayed_DA[151] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[152], Tdc, Tcdx, notif_da_152,,, delayed_CLKA, delayed_DA[152] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[152], Tdc, Tcdx, notif_da_152,,, delayed_CLKA, delayed_DA[152] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[153], Tdc, Tcdx, notif_da_153,,, delayed_CLKA, delayed_DA[153] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[153], Tdc, Tcdx, notif_da_153,,, delayed_CLKA, delayed_DA[153] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[154], Tdc, Tcdx, notif_da_154,,, delayed_CLKA, delayed_DA[154] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[154], Tdc, Tcdx, notif_da_154,,, delayed_CLKA, delayed_DA[154] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[155], Tdc, Tcdx, notif_da_155,,, delayed_CLKA, delayed_DA[155] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[155], Tdc, Tcdx, notif_da_155,,, delayed_CLKA, delayed_DA[155] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[156], Tdc, Tcdx, notif_da_156,,, delayed_CLKA, delayed_DA[156] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[156], Tdc, Tcdx, notif_da_156,,, delayed_CLKA, delayed_DA[156] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[157], Tdc, Tcdx, notif_da_157,,, delayed_CLKA, delayed_DA[157] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[157], Tdc, Tcdx, notif_da_157,,, delayed_CLKA, delayed_DA[157] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[158], Tdc, Tcdx, notif_da_158,,, delayed_CLKA, delayed_DA[158] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[158], Tdc, Tcdx, notif_da_158,,, delayed_CLKA, delayed_DA[158] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[159], Tdc, Tcdx, notif_da_159,,, delayed_CLKA, delayed_DA[159] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[159], Tdc, Tcdx, notif_da_159,,, delayed_CLKA, delayed_DA[159] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[160], Tdc, Tcdx, notif_da_160,,, delayed_CLKA, delayed_DA[160] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[160], Tdc, Tcdx, notif_da_160,,, delayed_CLKA, delayed_DA[160] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[161], Tdc, Tcdx, notif_da_161,,, delayed_CLKA, delayed_DA[161] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[161], Tdc, Tcdx, notif_da_161,,, delayed_CLKA, delayed_DA[161] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[162], Tdc, Tcdx, notif_da_162,,, delayed_CLKA, delayed_DA[162] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[162], Tdc, Tcdx, notif_da_162,,, delayed_CLKA, delayed_DA[162] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[163], Tdc, Tcdx, notif_da_163,,, delayed_CLKA, delayed_DA[163] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[163], Tdc, Tcdx, notif_da_163,,, delayed_CLKA, delayed_DA[163] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[164], Tdc, Tcdx, notif_da_164,,, delayed_CLKA, delayed_DA[164] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[164], Tdc, Tcdx, notif_da_164,,, delayed_CLKA, delayed_DA[164] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[165], Tdc, Tcdx, notif_da_165,,, delayed_CLKA, delayed_DA[165] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[165], Tdc, Tcdx, notif_da_165,,, delayed_CLKA, delayed_DA[165] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[166], Tdc, Tcdx, notif_da_166,,, delayed_CLKA, delayed_DA[166] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[166], Tdc, Tcdx, notif_da_166,,, delayed_CLKA, delayed_DA[166] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[167], Tdc, Tcdx, notif_da_167,,, delayed_CLKA, delayed_DA[167] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[167], Tdc, Tcdx, notif_da_167,,, delayed_CLKA, delayed_DA[167] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[168], Tdc, Tcdx, notif_da_168,,, delayed_CLKA, delayed_DA[168] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[168], Tdc, Tcdx, notif_da_168,,, delayed_CLKA, delayed_DA[168] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[169], Tdc, Tcdx, notif_da_169,,, delayed_CLKA, delayed_DA[169] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[169], Tdc, Tcdx, notif_da_169,,, delayed_CLKA, delayed_DA[169] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[170], Tdc, Tcdx, notif_da_170,,, delayed_CLKA, delayed_DA[170] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[170], Tdc, Tcdx, notif_da_170,,, delayed_CLKA, delayed_DA[170] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[171], Tdc, Tcdx, notif_da_171,,, delayed_CLKA, delayed_DA[171] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[171], Tdc, Tcdx, notif_da_171,,, delayed_CLKA, delayed_DA[171] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[172], Tdc, Tcdx, notif_da_172,,, delayed_CLKA, delayed_DA[172] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[172], Tdc, Tcdx, notif_da_172,,, delayed_CLKA, delayed_DA[172] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[173], Tdc, Tcdx, notif_da_173,,, delayed_CLKA, delayed_DA[173] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[173], Tdc, Tcdx, notif_da_173,,, delayed_CLKA, delayed_DA[173] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[174], Tdc, Tcdx, notif_da_174,,, delayed_CLKA, delayed_DA[174] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[174], Tdc, Tcdx, notif_da_174,,, delayed_CLKA, delayed_DA[174] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[175], Tdc, Tcdx, notif_da_175,,, delayed_CLKA, delayed_DA[175] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[175], Tdc, Tcdx, notif_da_175,,, delayed_CLKA, delayed_DA[175] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[176], Tdc, Tcdx, notif_da_176,,, delayed_CLKA, delayed_DA[176] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[176], Tdc, Tcdx, notif_da_176,,, delayed_CLKA, delayed_DA[176] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[177], Tdc, Tcdx, notif_da_177,,, delayed_CLKA, delayed_DA[177] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[177], Tdc, Tcdx, notif_da_177,,, delayed_CLKA, delayed_DA[177] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[178], Tdc, Tcdx, notif_da_178,,, delayed_CLKA, delayed_DA[178] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[178], Tdc, Tcdx, notif_da_178,,, delayed_CLKA, delayed_DA[178] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[179], Tdc, Tcdx, notif_da_179,,, delayed_CLKA, delayed_DA[179] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[179], Tdc, Tcdx, notif_da_179,,, delayed_CLKA, delayed_DA[179] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[180], Tdc, Tcdx, notif_da_180,,, delayed_CLKA, delayed_DA[180] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[180], Tdc, Tcdx, notif_da_180,,, delayed_CLKA, delayed_DA[180] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[181], Tdc, Tcdx, notif_da_181,,, delayed_CLKA, delayed_DA[181] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[181], Tdc, Tcdx, notif_da_181,,, delayed_CLKA, delayed_DA[181] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[182], Tdc, Tcdx, notif_da_182,,, delayed_CLKA, delayed_DA[182] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[182], Tdc, Tcdx, notif_da_182,,, delayed_CLKA, delayed_DA[182] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[183], Tdc, Tcdx, notif_da_183,,, delayed_CLKA, delayed_DA[183] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[183], Tdc, Tcdx, notif_da_183,,, delayed_CLKA, delayed_DA[183] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[184], Tdc, Tcdx, notif_da_184,,, delayed_CLKA, delayed_DA[184] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[184], Tdc, Tcdx, notif_da_184,,, delayed_CLKA, delayed_DA[184] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[185], Tdc, Tcdx, notif_da_185,,, delayed_CLKA, delayed_DA[185] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[185], Tdc, Tcdx, notif_da_185,,, delayed_CLKA, delayed_DA[185] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[186], Tdc, Tcdx, notif_da_186,,, delayed_CLKA, delayed_DA[186] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[186], Tdc, Tcdx, notif_da_186,,, delayed_CLKA, delayed_DA[186] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[187], Tdc, Tcdx, notif_da_187,,, delayed_CLKA, delayed_DA[187] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[187], Tdc, Tcdx, notif_da_187,,, delayed_CLKA, delayed_DA[187] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[188], Tdc, Tcdx, notif_da_188,,, delayed_CLKA, delayed_DA[188] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[188], Tdc, Tcdx, notif_da_188,,, delayed_CLKA, delayed_DA[188] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[189], Tdc, Tcdx, notif_da_189,,, delayed_CLKA, delayed_DA[189] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[189], Tdc, Tcdx, notif_da_189,,, delayed_CLKA, delayed_DA[189] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[190], Tdc, Tcdx, notif_da_190,,, delayed_CLKA, delayed_DA[190] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[190], Tdc, Tcdx, notif_da_190,,, delayed_CLKA, delayed_DA[190] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[191], Tdc, Tcdx, notif_da_191,,, delayed_CLKA, delayed_DA[191] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[191], Tdc, Tcdx, notif_da_191,,, delayed_CLKA, delayed_DA[191] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[192], Tdc, Tcdx, notif_da_192,,, delayed_CLKA, delayed_DA[192] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[192], Tdc, Tcdx, notif_da_192,,, delayed_CLKA, delayed_DA[192] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[193], Tdc, Tcdx, notif_da_193,,, delayed_CLKA, delayed_DA[193] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[193], Tdc, Tcdx, notif_da_193,,, delayed_CLKA, delayed_DA[193] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[194], Tdc, Tcdx, notif_da_194,,, delayed_CLKA, delayed_DA[194] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[194], Tdc, Tcdx, notif_da_194,,, delayed_CLKA, delayed_DA[194] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[195], Tdc, Tcdx, notif_da_195,,, delayed_CLKA, delayed_DA[195] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[195], Tdc, Tcdx, notif_da_195,,, delayed_CLKA, delayed_DA[195] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[196], Tdc, Tcdx, notif_da_196,,, delayed_CLKA, delayed_DA[196] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[196], Tdc, Tcdx, notif_da_196,,, delayed_CLKA, delayed_DA[196] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[197], Tdc, Tcdx, notif_da_197,,, delayed_CLKA, delayed_DA[197] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[197], Tdc, Tcdx, notif_da_197,,, delayed_CLKA, delayed_DA[197] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[198], Tdc, Tcdx, notif_da_198,,, delayed_CLKA, delayed_DA[198] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[198], Tdc, Tcdx, notif_da_198,,, delayed_CLKA, delayed_DA[198] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[199], Tdc, Tcdx, notif_da_199,,, delayed_CLKA, delayed_DA[199] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[199], Tdc, Tcdx, notif_da_199,,, delayed_CLKA, delayed_DA[199] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[200], Tdc, Tcdx, notif_da_200,,, delayed_CLKA, delayed_DA[200] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[200], Tdc, Tcdx, notif_da_200,,, delayed_CLKA, delayed_DA[200] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[201], Tdc, Tcdx, notif_da_201,,, delayed_CLKA, delayed_DA[201] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[201], Tdc, Tcdx, notif_da_201,,, delayed_CLKA, delayed_DA[201] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[202], Tdc, Tcdx, notif_da_202,,, delayed_CLKA, delayed_DA[202] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[202], Tdc, Tcdx, notif_da_202,,, delayed_CLKA, delayed_DA[202] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[203], Tdc, Tcdx, notif_da_203,,, delayed_CLKA, delayed_DA[203] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[203], Tdc, Tcdx, notif_da_203,,, delayed_CLKA, delayed_DA[203] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[204], Tdc, Tcdx, notif_da_204,,, delayed_CLKA, delayed_DA[204] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[204], Tdc, Tcdx, notif_da_204,,, delayed_CLKA, delayed_DA[204] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[205], Tdc, Tcdx, notif_da_205,,, delayed_CLKA, delayed_DA[205] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[205], Tdc, Tcdx, notif_da_205,,, delayed_CLKA, delayed_DA[205] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[206], Tdc, Tcdx, notif_da_206,,, delayed_CLKA, delayed_DA[206] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[206], Tdc, Tcdx, notif_da_206,,, delayed_CLKA, delayed_DA[206] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[207], Tdc, Tcdx, notif_da_207,,, delayed_CLKA, delayed_DA[207] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[207], Tdc, Tcdx, notif_da_207,,, delayed_CLKA, delayed_DA[207] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[208], Tdc, Tcdx, notif_da_208,,, delayed_CLKA, delayed_DA[208] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[208], Tdc, Tcdx, notif_da_208,,, delayed_CLKA, delayed_DA[208] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[209], Tdc, Tcdx, notif_da_209,,, delayed_CLKA, delayed_DA[209] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[209], Tdc, Tcdx, notif_da_209,,, delayed_CLKA, delayed_DA[209] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[210], Tdc, Tcdx, notif_da_210,,, delayed_CLKA, delayed_DA[210] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[210], Tdc, Tcdx, notif_da_210,,, delayed_CLKA, delayed_DA[210] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[211], Tdc, Tcdx, notif_da_211,,, delayed_CLKA, delayed_DA[211] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[211], Tdc, Tcdx, notif_da_211,,, delayed_CLKA, delayed_DA[211] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[212], Tdc, Tcdx, notif_da_212,,, delayed_CLKA, delayed_DA[212] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[212], Tdc, Tcdx, notif_da_212,,, delayed_CLKA, delayed_DA[212] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[213], Tdc, Tcdx, notif_da_213,,, delayed_CLKA, delayed_DA[213] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[213], Tdc, Tcdx, notif_da_213,,, delayed_CLKA, delayed_DA[213] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[214], Tdc, Tcdx, notif_da_214,,, delayed_CLKA, delayed_DA[214] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[214], Tdc, Tcdx, notif_da_214,,, delayed_CLKA, delayed_DA[214] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[215], Tdc, Tcdx, notif_da_215,,, delayed_CLKA, delayed_DA[215] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[215], Tdc, Tcdx, notif_da_215,,, delayed_CLKA, delayed_DA[215] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[216], Tdc, Tcdx, notif_da_216,,, delayed_CLKA, delayed_DA[216] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[216], Tdc, Tcdx, notif_da_216,,, delayed_CLKA, delayed_DA[216] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[217], Tdc, Tcdx, notif_da_217,,, delayed_CLKA, delayed_DA[217] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[217], Tdc, Tcdx, notif_da_217,,, delayed_CLKA, delayed_DA[217] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[218], Tdc, Tcdx, notif_da_218,,, delayed_CLKA, delayed_DA[218] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[218], Tdc, Tcdx, notif_da_218,,, delayed_CLKA, delayed_DA[218] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[219], Tdc, Tcdx, notif_da_219,,, delayed_CLKA, delayed_DA[219] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[219], Tdc, Tcdx, notif_da_219,,, delayed_CLKA, delayed_DA[219] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[220], Tdc, Tcdx, notif_da_220,,, delayed_CLKA, delayed_DA[220] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[220], Tdc, Tcdx, notif_da_220,,, delayed_CLKA, delayed_DA[220] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[221], Tdc, Tcdx, notif_da_221,,, delayed_CLKA, delayed_DA[221] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[221], Tdc, Tcdx, notif_da_221,,, delayed_CLKA, delayed_DA[221] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[222], Tdc, Tcdx, notif_da_222,,, delayed_CLKA, delayed_DA[222] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[222], Tdc, Tcdx, notif_da_222,,, delayed_CLKA, delayed_DA[222] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[223], Tdc, Tcdx, notif_da_223,,, delayed_CLKA, delayed_DA[223] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[223], Tdc, Tcdx, notif_da_223,,, delayed_CLKA, delayed_DA[223] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[224], Tdc, Tcdx, notif_da_224,,, delayed_CLKA, delayed_DA[224] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[224], Tdc, Tcdx, notif_da_224,,, delayed_CLKA, delayed_DA[224] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[225], Tdc, Tcdx, notif_da_225,,, delayed_CLKA, delayed_DA[225] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[225], Tdc, Tcdx, notif_da_225,,, delayed_CLKA, delayed_DA[225] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[226], Tdc, Tcdx, notif_da_226,,, delayed_CLKA, delayed_DA[226] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[226], Tdc, Tcdx, notif_da_226,,, delayed_CLKA, delayed_DA[226] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[227], Tdc, Tcdx, notif_da_227,,, delayed_CLKA, delayed_DA[227] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[227], Tdc, Tcdx, notif_da_227,,, delayed_CLKA, delayed_DA[227] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[228], Tdc, Tcdx, notif_da_228,,, delayed_CLKA, delayed_DA[228] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[228], Tdc, Tcdx, notif_da_228,,, delayed_CLKA, delayed_DA[228] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[229], Tdc, Tcdx, notif_da_229,,, delayed_CLKA, delayed_DA[229] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[229], Tdc, Tcdx, notif_da_229,,, delayed_CLKA, delayed_DA[229] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[230], Tdc, Tcdx, notif_da_230,,, delayed_CLKA, delayed_DA[230] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[230], Tdc, Tcdx, notif_da_230,,, delayed_CLKA, delayed_DA[230] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[231], Tdc, Tcdx, notif_da_231,,, delayed_CLKA, delayed_DA[231] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[231], Tdc, Tcdx, notif_da_231,,, delayed_CLKA, delayed_DA[231] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[232], Tdc, Tcdx, notif_da_232,,, delayed_CLKA, delayed_DA[232] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[232], Tdc, Tcdx, notif_da_232,,, delayed_CLKA, delayed_DA[232] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[233], Tdc, Tcdx, notif_da_233,,, delayed_CLKA, delayed_DA[233] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[233], Tdc, Tcdx, notif_da_233,,, delayed_CLKA, delayed_DA[233] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[234], Tdc, Tcdx, notif_da_234,,, delayed_CLKA, delayed_DA[234] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[234], Tdc, Tcdx, notif_da_234,,, delayed_CLKA, delayed_DA[234] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[235], Tdc, Tcdx, notif_da_235,,, delayed_CLKA, delayed_DA[235] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[235], Tdc, Tcdx, notif_da_235,,, delayed_CLKA, delayed_DA[235] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[236], Tdc, Tcdx, notif_da_236,,, delayed_CLKA, delayed_DA[236] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[236], Tdc, Tcdx, notif_da_236,,, delayed_CLKA, delayed_DA[236] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[237], Tdc, Tcdx, notif_da_237,,, delayed_CLKA, delayed_DA[237] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[237], Tdc, Tcdx, notif_da_237,,, delayed_CLKA, delayed_DA[237] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[238], Tdc, Tcdx, notif_da_238,,, delayed_CLKA, delayed_DA[238] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[238], Tdc, Tcdx, notif_da_238,,, delayed_CLKA, delayed_DA[238] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[239], Tdc, Tcdx, notif_da_239,,, delayed_CLKA, delayed_DA[239] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[239], Tdc, Tcdx, notif_da_239,,, delayed_CLKA, delayed_DA[239] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[240], Tdc, Tcdx, notif_da_240,,, delayed_CLKA, delayed_DA[240] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[240], Tdc, Tcdx, notif_da_240,,, delayed_CLKA, delayed_DA[240] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[241], Tdc, Tcdx, notif_da_241,,, delayed_CLKA, delayed_DA[241] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[241], Tdc, Tcdx, notif_da_241,,, delayed_CLKA, delayed_DA[241] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[242], Tdc, Tcdx, notif_da_242,,, delayed_CLKA, delayed_DA[242] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[242], Tdc, Tcdx, notif_da_242,,, delayed_CLKA, delayed_DA[242] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[243], Tdc, Tcdx, notif_da_243,,, delayed_CLKA, delayed_DA[243] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[243], Tdc, Tcdx, notif_da_243,,, delayed_CLKA, delayed_DA[243] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[244], Tdc, Tcdx, notif_da_244,,, delayed_CLKA, delayed_DA[244] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[244], Tdc, Tcdx, notif_da_244,,, delayed_CLKA, delayed_DA[244] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[245], Tdc, Tcdx, notif_da_245,,, delayed_CLKA, delayed_DA[245] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[245], Tdc, Tcdx, notif_da_245,,, delayed_CLKA, delayed_DA[245] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[246], Tdc, Tcdx, notif_da_246,,, delayed_CLKA, delayed_DA[246] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[246], Tdc, Tcdx, notif_da_246,,, delayed_CLKA, delayed_DA[246] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[247], Tdc, Tcdx, notif_da_247,,, delayed_CLKA, delayed_DA[247] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[247], Tdc, Tcdx, notif_da_247,,, delayed_CLKA, delayed_DA[247] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[248], Tdc, Tcdx, notif_da_248,,, delayed_CLKA, delayed_DA[248] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[248], Tdc, Tcdx, notif_da_248,,, delayed_CLKA, delayed_DA[248] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[249], Tdc, Tcdx, notif_da_249,,, delayed_CLKA, delayed_DA[249] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[249], Tdc, Tcdx, notif_da_249,,, delayed_CLKA, delayed_DA[249] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[250], Tdc, Tcdx, notif_da_250,,, delayed_CLKA, delayed_DA[250] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[250], Tdc, Tcdx, notif_da_250,,, delayed_CLKA, delayed_DA[250] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[251], Tdc, Tcdx, notif_da_251,,, delayed_CLKA, delayed_DA[251] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[251], Tdc, Tcdx, notif_da_251,,, delayed_CLKA, delayed_DA[251] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[252], Tdc, Tcdx, notif_da_252,,, delayed_CLKA, delayed_DA[252] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[252], Tdc, Tcdx, notif_da_252,,, delayed_CLKA, delayed_DA[252] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[253], Tdc, Tcdx, notif_da_253,,, delayed_CLKA, delayed_DA[253] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[253], Tdc, Tcdx, notif_da_253,,, delayed_CLKA, delayed_DA[253] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[254], Tdc, Tcdx, notif_da_254,,, delayed_CLKA, delayed_DA[254] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[254], Tdc, Tcdx, notif_da_254,,, delayed_CLKA, delayed_DA[254] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[255], Tdc, Tcdx, notif_da_255,,, delayed_CLKA, delayed_DA[255] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[255], Tdc, Tcdx, notif_da_255,,, delayed_CLKA, delayed_DA[255] );
  $setuphold (posedge CLKA  &&& ENWEA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENWEA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENMEA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENMEA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENTEST1A, posedge TEST1A,Tt1c, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST1A, negedge TEST1A,Tt1c, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, posedge TEST1A,0, Tct1x, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, negedge TEST1A,0, Tct1x, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[2], Trm2c, Tcrm2x, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[2], Trm2c, Tcrm2x, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENMEB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENMEB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENTEST1B, posedge TEST1B,Tt1c, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST1B, negedge TEST1B,Tt1c, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, posedge TEST1B,0, Tct1x, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, negedge TEST1B,0, Tct1x, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[2], Trm2c, Tcrm2x, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[2], Trm2c, Tcrm2x, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrec, Tcsep, 0, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArec, Tcsep, 0, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);

endspecify
`endif // VIRAGE_FAST_VERILOG
wire CLKA_mem;
wire CLKB_mem;







`ifdef VIRAGE_FAST_VERILOG

generic_behav_sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00 #(MES_CNTRL, debug_mode, MemFault_Inj) uut (  .QB (QB_buf), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .ADRB (ADRB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB (RMB_int) );

`else

generic_behav_sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00 #(MES_CNTRL, debug_mode, MemFault_Inj) uut (  .QB (QB_buf), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .ADRB (ADRB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .CLKB_tcq (CLKB_tcq),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_clka(notif_clka), .notif_clka_CLKB_rise_rise_rec(notif_clka_CLKB_rise_rise_rec), .notif_test1a(notif_test1a), .notif_rmea(notif_rmea), .notif_rma(notif_rma), .notif_adrb(notif_adrb), .notif_meb(notif_meb), .notif_clkb(notif_clkb), .notif_clkb_CLKA_rise_rise_rec(notif_clkb_CLKA_rise_rise_rec), .notif_test1b(notif_test1b), .notif_rmeb(notif_rmeb), .notif_rmb(notif_rmb) );

`endif // VIRAGE_FAST_VERILOG


always @( ADRA_buf or negedge CLKA_buf)
 begin
  #0;
   if ( CLKA_buf == 1'b0)
   begin
     ADRA_pre = ADRA_buf;
   end
   if ( ^ADRA_buf === 1'bx )
   begin
     flag_ADRA_x = 1'b1;
   end
   else
   begin
     flag_ADRA_x = 1'b0;
   end
 end

always @( MEA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) MEA_pre = MEA_buf;
  end

always @( DA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) DA_pre = DA_buf;
  end

always @( WEA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) WEA_pre = WEA_buf;
  end


assign RMA_int = ((RMEA_buf===1'b1)?RMA_buf:((RMEA_buf===1'b0)?4'b0010:4'bx));

always @( posedge CLKA_buf)
begin
    MEA_buf_L = MEA_pre;
    WEA_buf_L = WEA_pre;
  `ifdef VIRAGE_FAST_VERILOG
  `else

    CLKA_UTIME = $realtime;
    ADRA_buf_L = ADRA_pre;
    #0;

    if (CLKA_UTIME == CLKB_UTIME)
    begin
    #0;
      if (((ADRA_buf_L === ADRB_buf_L) && ADRA_valid) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_buf_L^ADRA_buf_L) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0))
      begin
         if ((MEA_buf_L !== 1'b0 && MEB_buf_L !== 1'b0) && (recovery_ab == 1'b1))
         begin

           if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid == 1'b1)
           begin
             $display("\n VIRL_MEM_ERR:Entered recovery block (posedge CLKA,posedge CLKB) (time %t), instance=%m", $time);
           end // end of if(MES_CNTRL=="ON" && $realtime != 0 

           if(notif_clkb_CLKA_rise_rise_rec === 1'bx)
             notif_clkb_CLKA_rise_rise_rec = 1'b0;
           else
             notif_clkb_CLKA_rise_rise_rec = !notif_clkb_CLKA_rise_rise_rec;
         end 
      end
    end //end of if (uut.CLKA_UTIME == uut.CLKB_UTIME)

    `endif // VIRAGE_FAST_VERILOG

end  // end of always @( posedge CLKA_buf)

always @( ADRB_buf or negedge CLKB_buf)
 begin
  #0;
   if ( CLKB_buf == 1'b0)
   begin
     ADRB_pre = ADRB_buf;
   end
   if ( ^ADRB_buf === 1'bx )
   begin
     flag_ADRB_x = 1'b1;
   end
   else
   begin
     flag_ADRB_x = 1'b0;
   end
 end

always @( MEB_buf or negedge CLKB_buf)
  begin
  #0;
    if ( CLKB_buf == 1'b0) MEB_pre = MEB_buf;
  end



assign RMB_int = ((RMEB_buf===1'b1)?RMB_buf:((RMEB_buf===1'b0)?4'b0010:4'bx));

always @( posedge CLKB_buf)
begin
    MEB_buf_L = MEB_pre;
  `ifdef VIRAGE_FAST_VERILOG
  `else

    CLKB_tcq = 1'b1;
    CLKB_UTIME = $realtime;
    ADRB_buf_L = ADRB_pre;
    #0;

    if (CLKB_UTIME == CLKA_UTIME)
    begin
    #0;
      if (((ADRB_buf_L === ADRA_buf_L) && ADRB_valid) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_buf_L^ADRB_buf_L) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0))
      begin
         if ((MEB_buf_L !== 1'b0 && MEA_buf_L !== 1'b0) && (recovery_ab == 1'b1))
         begin

           if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid == 1'b1)
           begin
             $display("\n VIRL_MEM_ERR:Entered recovery block (posedge CLKB,posedge CLKA) (time %t), instance=%m", $time);
           end // end of if(MES_CNTRL=="ON" && $realtime != 0 

           if(notif_clka_CLKB_rise_rise_rec === 1'bx)
             notif_clka_CLKB_rise_rise_rec = 1'b0;
           else
             notif_clka_CLKB_rise_rise_rec = !notif_clka_CLKB_rise_rise_rec;
         end 
      end
    end //end of if (uut.CLKB_UTIME == uut.CLKA_UTIME)

    `endif // VIRAGE_FAST_VERILOG

end  // end of always @( posedge CLKB_buf)




`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_da = {notif_da_255, notif_da_254, notif_da_253, notif_da_252, notif_da_251, notif_da_250, notif_da_249, notif_da_248, notif_da_247, notif_da_246, notif_da_245, notif_da_244, notif_da_243, notif_da_242, notif_da_241, notif_da_240, notif_da_239, notif_da_238, notif_da_237, notif_da_236, notif_da_235, notif_da_234, notif_da_233, notif_da_232, notif_da_231, notif_da_230, notif_da_229, notif_da_228, notif_da_227, notif_da_226, notif_da_225, notif_da_224, notif_da_223, notif_da_222, notif_da_221, notif_da_220, notif_da_219, notif_da_218, notif_da_217, notif_da_216, notif_da_215, notif_da_214, notif_da_213, notif_da_212, notif_da_211, notif_da_210, notif_da_209, notif_da_208, notif_da_207, notif_da_206, notif_da_205, notif_da_204, notif_da_203, notif_da_202, notif_da_201, notif_da_200, notif_da_199, notif_da_198, notif_da_197, notif_da_196, notif_da_195, notif_da_194, notif_da_193, notif_da_192, notif_da_191, notif_da_190, notif_da_189, notif_da_188, notif_da_187, notif_da_186, notif_da_185, 
notif_da_184, notif_da_183, notif_da_182, notif_da_181, notif_da_180, notif_da_179, notif_da_178, notif_da_177, notif_da_176, notif_da_175, notif_da_174, notif_da_173, notif_da_172, notif_da_171, notif_da_170, notif_da_169, notif_da_168, notif_da_167, notif_da_166, notif_da_165, notif_da_164, notif_da_163, notif_da_162, notif_da_161, notif_da_160, notif_da_159, notif_da_158, notif_da_157, notif_da_156, notif_da_155, notif_da_154, notif_da_153, notif_da_152, notif_da_151, notif_da_150, notif_da_149, notif_da_148, notif_da_147, notif_da_146, notif_da_145, notif_da_144, notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, 
notif_da_111, notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, notif_da_87, notif_da_86, notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, 
notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0};

`endif // endif of VIRAGE_FAST_VERILOG






reg del_CLKA_buf, del_CLKB_buf;
always @(CLKA_mem)
begin
  if (CLKA_mem === 1'b1)
  begin
    del_CLKA_buf = CLKA_mem && MEA_pre && WEA_pre;
    if (TEST1A_buf === 1'b0)
      #0.626 del_CLKA_buf = 1'b0;
  end
  else
  begin
    del_CLKA_buf = CLKA_mem;
  end
end
always @(CLKB_mem)
begin
  if (CLKB_mem === 1'b1)
  begin
    del_CLKB_buf = CLKB_mem && MEB_pre;
    if (TEST1B_buf === 1'b0)
      #0.626 del_CLKB_buf = 1'b0;
  end
  else
  begin
    del_CLKB_buf = CLKB_mem;
  end
end
assign CLKA_mem = CLKA_buf;
assign CLKB_mem = CLKB_buf;


endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG

module generic_behav_sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00 (  QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, RMEA, RMA, ADRB, MEB, CLKB, TEST1B, RMEB, RMB );

`else

module generic_behav_sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00 (  QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, RMEA, RMA, ADRB, MEB, CLKB, TEST1B, RMEB, RMB, CLKB_tcq,notif_adra, notif_da, notif_wea, notif_mea, notif_clka, notif_clka_CLKB_rise_rise_rec, notif_test1a, notif_rmea, notif_rma, notif_adrb, notif_meb, notif_clkb, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_rmeb, notif_rmb );

`endif //VIRAGE_FAST_VERILOG

 parameter MES_CNTRL = "ON";
parameter debug_mode = 1;
parameter MemFault_Inj = 0;

parameter words = 128, bits = 256, addrbits = 7, timingmode = 1, rmbits=4;

output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input CLKA;
input TEST1A;
input RMEA;
input [rmbits-1:0] RMA;
input [addrbits-1:0] ADRB;
input MEB;
input CLKB;
input TEST1B;
input RMEB;
input [rmbits-1:0] RMB;



`ifdef VIRAGE_FAST_VERILOG
`else
input CLKB_tcq;
input [255:0] notif_da;
input notif_adra, notif_wea, notif_mea, notif_clka, notif_clka_CLKB_rise_rise_rec, notif_test1a, notif_rmea, notif_rma, notif_adrb, notif_meb, notif_clkb, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_rmeb, notif_rmb;

`endif // VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };


reg mes_all_valid;
reg  [bits-1:0] mem_core_array [0:words -1];
wire  [bits-1:0]  QB_temp;
reg  [bits-1:0]  QB;
reg  [bits-1:0]  QB_local;
reg  [bits-1:0]  QB_local_inj;

reg
        flaga_we_ok,
        flaga_d_ok,
        flaga_adr_ok,
        flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_adr_x;

reg  [addrbits-1:0] ADRAlatched;
reg  [addrbits-1:0] ADRA_old;
reg  [bits-1:0] DAlatched;
reg  [bits-1:0] DA_old;
reg WEAlatched;
reg WEA_old;
reg  TEST1Alatched;
reg  TEST1A_old;
reg  MEAlatched;
reg  MEA_old;
reg  MEA_chk;
real CLKA_TIME;
reg
        flagb_read_ok,
        flagb_rm_ok,
        flagb_adr_ok,
        flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_adr_x;

event   event_on_B_port;

reg  [addrbits-1:0] ADRBlatched;
reg  [addrbits-1:0] ADRB_old;
reg  TEST1Blatched;
reg  TEST1B_old;
reg  MEBlatched;
reg  MEB_old;
reg  MEB_chk;
reg [bits-1:0] bit_corrupt;
reg [bits-1:0] memdata_bef_wrt;
reg flag_simul_clk;
real CLKB_TIME;

`ifdef VIRAGE_FAST_VERILOG
`else

real CLKB_tcqtime;

always @(negedge CLKB_tcq) begin
   CLKB_tcqtime = $realtime;
end
`endif // VIRAGE_FAST_VERILOG

integer i;
reg  [bits-1:0] mem_fault_array_XOR [0:words -1];
reg  [bits-1:0] mem_fault_array_sa0 [0:words -1];
reg  [bits-1:0] mem_fault_array_sa1 [0:words -1];
reg faultinj_en;
initial 
  begin : reinit_fault_blk
    faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
    faultinj_en = 1'b1;
`else
    if (MemFault_Inj == 1)
      faultinj_en = 1'b1;
`endif
    for (i=0; i< words ; i=i+1)
    begin
      if (faultinj_en == 1)
        mem_fault_array_XOR[i]=0;
      else
      begin
        mem_fault_array_sa0[i]={bits{1'b1}};
        mem_fault_array_sa1[i]=0;
      end
    end
    if (faultinj_en == 1)
    begin
      if ($test$plusargs("asap_error"))
        mem_fault_array_XOR[1] = 1'b1 << (bits - 1);
    end
  end



initial
begin
  mes_all_valid = 0;
  MEA_chk = 1'b0;
  MEB_chk = 1'b0;
end

function is_adr_Valid;  // 1-bit return value
 input [addrbits-1:0] addr_to_check;
 reg     ret_value;
 begin
  ret_value = `True;
   if ((^addr_to_check) === 1'bx ) begin
    flaga_adr_x = `True;
    flagb_adr_x = `True;
    ret_value = `False;
   end
   is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*6:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask



task corrupt_all_loc;
 input flag_range_ok;
 integer row_index;
 begin
                                     // do not corrupt entire memory if write to
                                    // out of range address, for all other cases
                                    // flag_range_ok is true, therefore corruption
                                    // will occur as before
  if( flag_range_ok == `True)
   begin
    for( row_index = 0; row_index < words; row_index = row_index + 1) begin
     mem_core_array[ row_index] = DataX;
    end
   end
 end
endtask

task corrupt_cur_loc;
 input[addrbits-1:0] loc_to_corrupt;
begin
  if (is_adr_Valid (loc_to_corrupt))
  begin
  mem_core_array[loc_to_corrupt] = DataX;
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (loc_to_corrupt)
end
endtask

always @( negedge CLKA or WEA )
begin
  if ( CLKA == 1'b0 )
  begin
    WEA_old <= WEA;
  end
end
always @( negedge CLKA or ADRA )
begin
  if ( CLKA == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end
end
always @( negedge CLKA or DA )
begin
  if ( CLKA == 1'b0 )
  begin
    DA_old <= DA;
  end
end
always @( negedge CLKA or MEA )
begin
  if ( CLKA == 1'b0 )
  begin
    MEA_old <= MEA;
  end
end
always @( negedge CLKA or TEST1A )
begin
  if ( CLKA == 1'b0 )
  begin
    TEST1A_old <= TEST1A;
  end
end



// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

 #0;                // let CLOCK and NOTIFIER stuff execute first
 case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0

  3'b111   : ;                                                // everything ok!!!

  3'b101,
  3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable

  3'b110   : if (WEAlatched !== 1'b0)
              corrupt_cur_loc(ADRAlatched);         // Data is unstable
  3'b000,
  3'b001   : corrupt_all_loc(flaga_range_ok);            // ADR and WE unstable
  3'b010,
  3'b011   : if (WEAlatched !== 1'b0)    // ADR unstable, WE stable
              corrupt_all_loc(flaga_range_ok);
 endcase
end
endtask

// PORT A FUNCTIONALITY (Handle violation behavior)


initial
 begin : reinit_uut_blkA
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_clk_valid = `True;
  flaga_adr_x = `False;
 end
initial
begin
  mes_all_valid = 1'b0;
  QB_local <= 256'bx;
end


`ifdef VIRAGE_FAST_VERILOG
`else

always @(notif_wea)            // PORT A WE violation
 begin
 
    flaga_we_ok = `False;
    checkSanityOnAport;
 end
always @(notif_clka)            // PORT A CLK violation
 begin

  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;

  if ( CLKB_tcq == 1'b1 && MEB_chk === 1'b1 )
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
   corrupt_all_loc(`True);
 end

always @(notif_mea)            // PORT A ME violation
 begin
 
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;
  if (MEB_chk === 1'b1 && (CLKB_tcq == 1'b1 || (CLKB_tcqtime == $realtime)))
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  corrupt_all_loc(`True);
end


always @(notif_adra)     // PORT A ADR violation
 begin

    if (MEBlatched === 1'b1 && WEAlatched === 1'b1 && (CLKB_tcq == 1'b1 || (CLKB_tcqtime == $realtime)))
     begin
      disable OUTPUT_1;
      flagb_read_ok = `False;
      -> event_on_B_port;
     end
    flaga_adr_ok = `False;
    corrupt_all_loc(`True);
 end // end of always block blk_notif_addr_0

genvar nk;
generate for (nk=0; nk<256; nk=nk+1)
begin : ENDA_blk

reg [255:0]  tmp_DA;

always @(notif_da[nk])
begin
    mem_core_array[ADRA_old][nk] = 1'bX;
end // end of always block blk_notif_di_0
end
endgenerate

always @(notif_test1a)               //PORT A TEST1 violation
 begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
 end // end of always block blk_notif_test1_0



always @(notif_rma)               //PORT A RM violation
 begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
 end
always @(notif_rmea)               //PORT A RME violation
 begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
 end



always @(notif_clka_CLKB_rise_rise_rec)
 begin

      flag_simul_clk = 1'b1;
      -> event_on_B_port;
 end

`endif // VIRAGE_FAST_VERILOG


always @(negedge CLKA)          // reset for next cycle
 begin
  if ( CLKA !== 1'bx ) begin
   #0.001;
   flaga_range_ok  = `True;
   flaga_clk_valid = `True;
   flaga_adr_x = `False;
   flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
  end
  else
  begin
    report_unknown("CLKA");
    flaga_clk_valid = `False;
    corrupt_all_loc(`True);
  end
end

// PORT A FUNCTIONALITY (Handle normal read/write)


always @(posedge CLKA)
begin
   memdata_bef_wrt = DataX;
  if (CLKA === 1'bx)
  begin
    report_unknown("CLKA");
    flaga_clk_valid = `False;
    corrupt_all_loc(`True);
  end // end of if (CLKA === 1'bx)

  CLKA_TIME = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  TEST1Alatched = TEST1A_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;

    if ((^DAlatched === 1'bx) && MEAlatched == 1'b1)
    begin
      if (DAlatched === 256'bx)
      begin
        flaga_d_ok  = `False;
      end
      if (WEAlatched !== 1'b0)
      begin
        report_unknown("DA");
      end  
    end



  if ( CLKA === 1'bx ) 
  begin
    report_unknown("CLKA");
    corrupt_all_loc(flaga_range_ok);
  end
  else if (flaga_clk_valid)
  begin
    if (MEAlatched !== 1'b0)
    begin
      if (TEST1Alatched === 1'bx)
      begin
        report_unknown("TEST1A");
        if (WEAlatched === 1'b1)
        begin
          flaga_d_ok = `False;
        end
      end
      if (WEAlatched === 1'bx)
      begin
        report_unknown("WEA");
        flaga_we_ok  = `False;
      end
      if (MEAlatched !== 1'b1)
       flaga_we_ok = `False;       // don't know if cycle is On or Off
      if (is_adr_Valid(ADRAlatched) != `True ) begin
       if ( flaga_adr_x ) begin
         report_unknown("ADRA");
       end
       flaga_adr_ok = `False;
       if( !(flaga_adr_x) )
       begin
         if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
         $display("<<VIRL_MEM_WARNING:address ADRA is out of range>>, RANGE:0 to 127 time=%0t instance=%m\n",$time);
         flaga_range_ok = `False;
       end
      end

      if ( MEAlatched === 1'bx )
      begin
         report_unknown("MEA");
            corrupt_all_loc(flaga_range_ok);
      end
      else
      begin
        if (WEAlatched == 1'b1)
        begin
          if (RMEA === 1'b1)
          begin
            if ((RMA >= 4'b1000) && (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
            begin
             $display("VIRL_MEM_WARNING:RMA = %b is not recommended value in Write mode\n",RMA);
             $display("      time=%t; instance=%m (sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00_core)",$realtime);
            end // if (RMA >= 4'b1000
          end
          else
          begin
            if ((RMA != 4'b0010) && (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
            begin
             $display("VIRL_MEM_WARN: RMA = %b is not recommended value in Write mode\n",RMA);
             $display("      time=%t; instance=%m (sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00_core)",$realtime);
            end // if (RMA != 4'b0010 
          end
        end
        if (WEAlatched == 1'b1)
        begin
          if (RMEA === 1'bX)
          begin
            flaga_d_ok = `False;
            report_unknown("RMEA");
          end
           if (^RMA === 1'bx)
           begin
             flaga_d_ok = `False;
             if (RMEA !== 1'bx)
             begin
               report_unknown("RMA");
             end
           end
        end
         if (flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
         begin
           memdata_bef_wrt = mem_core_array[ADRAlatched] ;
         end
         if (flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
         begin
         if (CLKB === 1'b1 && TEST1Blatched === 1'b1 )
         begin
           if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched))
           begin
             if(CLKA_TIME!=CLKB_TIME)
               flagb_read_ok <= #0.001 `False;
           end
         end
           
           mem_core_array[ADRAlatched] = DAlatched;  // write data in
           if (mes_all_valid == 0) mes_all_valid = 1;
	 end
         else
         begin
           checkSanityOnAport;
         end

  `ifdef VIRAGE_FAST_VERILOG
//-- Simultaneous Contention case
        #0.0;
        if(CLKA_TIME==CLKB_TIME)
        begin
          if((ADRAlatched===ADRBlatched) && ((MEAlatched && MEBlatched) || (WEAlatched && ((MEAlatched===1'bx && MEBlatched) || (MEAlatched && MEBlatched===1'bx)))))
          begin
            if(WEAlatched!==1'b0)
            begin
              if(MEBlatched)
              begin
                if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& debug_mode == 1 && mes_all_valid == 1) 
                begin
                  $display("<<VIRL_MEM_ERR: Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>> time = %t, instance = %m (RAMS1H)",$realtime);
                end // end of if(MES_CNTRL=="ON")
              
                   flag_simul_clk = 1'b1;
                   if (flagb_read_ok && !TEST1Blatched)
                   begin
                     -> event_on_B_port;
                   end
              end
            end
      end
    end
  `endif // VIRAGE_FAST_VERILOG 

       end
     end
   end
 end





always @ (TEST1A)
begin
  if ( CLKA === 1'b1 && MEA_old === 1'b1 )
  begin
    if (WEA_old === 1'b1 )
    begin
      flaga_we_ok = 1'b0;
      corrupt_cur_loc(ADRAlatched);
    end
    QB_local = 256'bx;
    flagb_read_ok = `False;
    flagb_read_ok <= #0.002 `True;
  end
  if ( TEST1A == 1'b1)
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
    begin
   $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0,but input value is TEST1A=1'b1>> (time %0t) instance=%m\n\n", $time);
    end
end


always @ (TEST1A)
begin
  if ( TEST1A == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
    begin
    $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0, but input value is TEST1A=1'b1 >>(time %0t) instance=%m", $time);
    end
  end
end // end of TEST1A


always @(negedge CLKB)
begin
 flag_simul_clk <= #0.002 1'b0;
end
always @(negedge CLKA)
begin
  if(CLKB != 1'b1)
  flag_simul_clk <= #0.002 1'b0;
end


always @( negedge CLKB or ADRB )
begin
  if ( CLKB == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end
end
always @( negedge CLKB or MEB )
begin
  if ( CLKB == 1'b0 )
  begin
    MEB_old <= MEB;
  end
end
always @( negedge CLKB or TEST1B )
begin
  if ( CLKB == 1'b0 )
  begin
    TEST1B_old <= TEST1B;
  end
end

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
 begin : reinit_uut_blkB
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  flagb_clk_valid = `True;
  flagb_adr_x = `False;
 end


`ifdef VIRAGE_FAST_VERILOG
`else

always @(notif_clkb)            // PORT B CLK violation
 begin

  if ( $realtime == CLKA_TIME )
   MEA_chk = MEA_old;
  else
   MEA_chk = MEAlatched;
  disable OUTPUT_1;
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  -> event_on_B_port;
 end

always @(notif_meb)            // PORT B ME violation
 begin
 
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  disable OUTPUT_1;
  -> event_on_B_port;
end


always @(notif_adrb)     // PORT B ADR violation
 begin

    flagb_adr_ok = `False;
    flagb_read_ok = `False; // irrespective of WE
    disable OUTPUT_1;
    -> event_on_B_port;
 end // end of always block blk_notif_addr_1


always @(notif_test1b)               //PORT B TEST1 violation
 begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
 end // end of always block blk_notif_test1_1

always @(notif_rmb)               //PORT B RM violation
 begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
 end // end of always block blk_notif_rm_1
always @(notif_rmeb)               //PORT B RME violation
 begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
 end // end of always block blk_notif_rmen_1





always @(notif_clkb_CLKA_rise_rise_rec)
 begin

      flag_simul_clk = 1'b1;
      -> event_on_B_port;
 end

`endif // VIRAGE_FAST_VERILOG


always @(negedge CLKB)          // reset for next cycle
 begin
 #0.001;
  if ( CLKB !== 1'bx ) begin
   #0.001;
   flagb_range_ok  = `True;
   flagb_read_ok = `True;
   flagb_rm_ok = `True;
   flagb_clk_valid = `True;
   flagb_adr_x = `False;
   flagb_adr_ok  = `True;
   TEST1Blatched = 1'b0;
  end
  else
  begin
    report_unknown("CLKB");
    flagb_clk_valid = `False;
    QB_local =  DataX;
  end
end

// PORT B FUNCTIONALITY (Handle normal read/write)


always @(posedge CLKB)
begin
  if (CLKB === 1'bx)
  begin
    report_unknown("CLKB");
    flagb_clk_valid = `False;
    QB_local =  DataX;
  end // end of if (CLKB === 1'bx)

  CLKB_TIME = $realtime;
  MEBlatched = MEB_old;
  TEST1Blatched = TEST1B_old;
  ADRBlatched = ADRB_old;



  if (!flagb_clk_valid) begin
    QB_local =  DataX;
  end 
  else
  begin
    if (MEBlatched !== 1'b0)
    begin
      if (TEST1Blatched === 1'bx)
      begin
        report_unknown("TEST1B");
        QB_local = 256'bx;
        flagb_read_ok = `False;
      end
      if (is_adr_Valid(ADRBlatched) != `True ) begin
       if ( flagb_adr_x ) begin
         report_unknown("ADRB");
       end
       flagb_adr_ok = `False;
       if( !(flagb_adr_x) )
       begin
         if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
         $display("<<VIRL_MEM_WARNING:address ADRB is out of range>>, RANGE:0 to 127 time=%0t instance=%m\n",$time);
         flagb_range_ok = `False;
       end
      end

      if ( MEBlatched === 1'bx )
      begin
         report_unknown("MEB");
          QB_local =  DataX;
      end
      else
      begin

  `ifdef VIRAGE_FAST_VERILOG
//-- Simultaneous Contention case
        #0.0;
        if(CLKB_TIME==CLKA_TIME)
        begin
          if((ADRBlatched===ADRAlatched) && ((MEBlatched && MEAlatched) || (WEAlatched && ((MEBlatched===1'bx && MEAlatched) || (MEBlatched && MEAlatched===1'bx)))))
          begin
            if(WEAlatched!==1'b0)
            begin
              if(MEBlatched)
              begin
                if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& debug_mode == 1 && mes_all_valid == 1) 
                begin
                  $display("<<VIRL_MEM_ERR: Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>> time = %t, instance = %m (RAMS1H)",$realtime);
                end // end of if(MES_CNTRL=="ON")
              
                   flag_simul_clk = 1'b1;
                   if (flagb_read_ok && !TEST1Blatched)
                   begin
                     -> event_on_B_port;
                   end
              end
            end
      end
    end
  `endif // VIRAGE_FAST_VERILOG 

        if (TEST1Blatched == 1 )
        begin
          #0.001;
          flagb_read_ok = `False;
          -> event_on_B_port;
          @(negedge CLKB)
          if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched) && WEAlatched === 1'b1 && CLKA_TIME == $realtime)
          begin
          flagb_read_ok = `False;
          QB_local <= DataX;
          end
        begin
         #0; -> event_on_B_port;
        end
	  flag_simul_clk <= #0.002 1'b0;
        end
        else
        -> event_on_B_port;
       end
     end
   end
 end


// START OF PORT B READ-OUT BLOCK 

always @(event_on_B_port)
begin
  #0; // let CLOCK and NOTIFIER module execute first
  if (RMEB === 1'b1)
  begin
    if (RMB >= 4'b1000)
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
      begin
       $display("VIRL_MEM_WARNING: RMB = %b is not recommended value ; time = %t, instance = %m (sadrls0s4LOW2p128x256m1b2w0c1p0d0t0s2z0rw00_core)",RMB,$realtime);
      end
    end
  end
  if (^RMB === 1'bx) begin
    flagb_rm_ok = `False;
    if (RMEB !== 1'bx)
      report_unknown("RMB");
    else
      report_unknown("RMEB");
  end
          `ifdef VIRAGE_FAST_VERILOG
          `else
             QB_local = DataX;
             #0.001
          `endif // VIRAGE_FAST_VERILOG

    if (flagb_adr_ok && (ADRBlatched <= words -1) && flagb_read_ok && flagb_rm_ok) begin : OUTPUT_1
         if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched) && WEAlatched === 1'b1 && (flag_simul_clk === 1'b1))
         begin
           bit_corrupt = memdata_bef_wrt ^ DAlatched;
           if (TEST1Blatched === 1'b1 )
           begin 
             QB_local = (DataX & bit_corrupt)^memdata_bef_wrt;
             if ( CLKB === 1'b1)
             begin
               QB_local =   DataX;
             end
             flag_simul_clk <= @(negedge CLKB) 1'b0;
           end
           else
           begin
             QB_local = (DataX & bit_corrupt)^memdata_bef_wrt;
             flag_simul_clk <= 1'b0;
           end 
          if (faultinj_en == 1)
          begin
            QB_local <= QB_local^mem_fault_array_XOR[ADRBlatched];
          end
          else
          begin
            QB_local <= ((QB_local&mem_fault_array_sa0[ADRBlatched])|mem_fault_array_sa1[ADRBlatched]);
          end
         end
         else
         begin
         if (flagb_read_ok)
        begin
          if (faultinj_en == 1)
          begin
            
            QB_local = mem_core_array[ADRBlatched]^mem_fault_array_XOR[ADRBlatched];

          end
          else
          begin
            
            QB_local = ((mem_core_array[ADRBlatched]&mem_fault_array_sa0[ADRBlatched])|mem_fault_array_sa1[ADRBlatched]);

          end
        end
            if (mes_all_valid == 0) mes_all_valid = 1;
      end // end of else of Simul block
    end // end of if (flagb_adr_ok && (ADRBlatched))
    else
    begin
        if (flag_simul_clk === 1'b0 || TEST1Blatched === 1'b1 || (ADRBlatched > words -1))
        QB_local =   DataX;
        flagb_read_ok = `True;
        if (TEST1Blatched === 1'b0 )
          flag_simul_clk <= #0.002 1'b0;
   end
   flagb_rm_ok = `True;
end // end of always @(event_on_B_port

// END OF PORT B READ-OUT BLOCK



assign QB_temp = QB_local;

// Final Output Update
always @ ( QB_temp )
begin : blk_output_1
     QB <= QB_temp;
end // end of always block blk_output_1


// START OF PORT B OUTPUT ENABLE BLOCK



always @ (TEST1B)
begin
  if ( CLKB === 1'b1 && MEB_old === 1'b1 )
  begin
    QB_local = 256'bx;
    flagb_read_ok = `False;
  end
  if ( TEST1B == 1'b1)
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
    begin
   $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0,but input value is TEST1B=1'b1>> (time %0t) instance=%m\n\n", $time);
    end
end


always @ (TEST1B)
begin
  if ( TEST1B == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
    begin
    $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0, but input value is TEST1B=1'b1 >>(time %0t) instance=%m", $time);
    end
  end
end // end of TEST1B


endmodule
