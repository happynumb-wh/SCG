// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module ram_16x53(
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [52:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [52:0] W0_data
);

  reg [52:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [63:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          for (logic [6:0] j = 7'h0; j < 7'h40; j += 7'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;
          end
          Memory[i[3:0]] = _RANDOM_MEM[52:0];
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 53'bx;
endmodule

module Queue16_fifo_adr(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_cmdtype,
  input         io_enq_bits_adr_rank,
  input  [1:0]  io_enq_bits_adr_group,
                io_enq_bits_adr_bank,
  input  [17:0] io_enq_bits_adr_row,
  input  [9:0]  io_enq_bits_adr_col,
  input  [16:0] io_enq_bits_adr_cmdToken,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_cmdtype,
  output        io_deq_bits_adr_rank,
  output [1:0]  io_deq_bits_adr_group,
                io_deq_bits_adr_bank,
  output [17:0] io_deq_bits_adr_row,
  output [9:0]  io_deq_bits_adr_col,
  output [16:0] io_deq_bits_adr_cmdToken
);

  wire [52:0] _ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg  [3:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  wire        do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_16x53 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_adr_cmdToken,
        io_enq_bits_adr_col,
        io_enq_bits_adr_row,
        io_enq_bits_adr_bank,
        io_enq_bits_adr_group,
        io_enq_bits_adr_rank,
        io_enq_bits_cmdtype})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_cmdtype = _ram_ext_R0_data[2:0];
  assign io_deq_bits_adr_rank = _ram_ext_R0_data[3];
  assign io_deq_bits_adr_group = _ram_ext_R0_data[5:4];
  assign io_deq_bits_adr_bank = _ram_ext_R0_data[7:6];
  assign io_deq_bits_adr_row = _ram_ext_R0_data[25:8];
  assign io_deq_bits_adr_col = _ram_ext_R0_data[35:26];
  assign io_deq_bits_adr_cmdToken = _ram_ext_R0_data[52:36];
endmodule

module fifo_wrap(
  input         clock,
                reset,
  output        io_din_ready,
  input         io_din_valid,
  input  [2:0]  io_din_bits_cmdtype,
  input         io_din_bits_adr_rank,
  input  [1:0]  io_din_bits_adr_group,
                io_din_bits_adr_bank,
  input  [17:0] io_din_bits_adr_row,
  input  [9:0]  io_din_bits_adr_col,
  input  [16:0] io_din_bits_adr_cmdToken,
  input  [3:0]  io_WrDataFifoRdy,
  input         io_dout_0_ready,
  output        io_dout_0_valid,
  output [2:0]  io_dout_0_bits_cmdtype,
  output        io_dout_0_bits_adr_rank,
  output [1:0]  io_dout_0_bits_adr_group,
                io_dout_0_bits_adr_bank,
  output [17:0] io_dout_0_bits_adr_row,
  output [9:0]  io_dout_0_bits_adr_col,
  output [16:0] io_dout_0_bits_adr_cmdToken,
  input         io_dout_1_ready,
  output        io_dout_1_valid,
  output [2:0]  io_dout_1_bits_cmdtype,
  output        io_dout_1_bits_adr_rank,
  output [1:0]  io_dout_1_bits_adr_group,
                io_dout_1_bits_adr_bank,
  output [17:0] io_dout_1_bits_adr_row,
  output [9:0]  io_dout_1_bits_adr_col,
  output [16:0] io_dout_1_bits_adr_cmdToken,
  input         io_dout_2_ready,
  output        io_dout_2_valid,
  output [2:0]  io_dout_2_bits_cmdtype,
  output        io_dout_2_bits_adr_rank,
  output [1:0]  io_dout_2_bits_adr_group,
                io_dout_2_bits_adr_bank,
  output [17:0] io_dout_2_bits_adr_row,
  output [9:0]  io_dout_2_bits_adr_col,
  output [16:0] io_dout_2_bits_adr_cmdToken,
  input         io_dout_3_ready,
  output        io_dout_3_valid,
  output [2:0]  io_dout_3_bits_cmdtype,
  output        io_dout_3_bits_adr_rank,
  output [1:0]  io_dout_3_bits_adr_group,
                io_dout_3_bits_adr_bank,
  output [17:0] io_dout_3_bits_adr_row,
  output [9:0]  io_dout_3_bits_adr_col,
  output [16:0] io_dout_3_bits_adr_cmdToken
);

  wire       _sync_fifo_inst_4_io_enq_ready;
  wire       _sync_fifo_inst_3_io_enq_ready;
  wire       _sync_fifo_inst_2_io_enq_ready;
  wire       _sync_fifo_inst_1_io_enq_ready;
  wire       _sync_fifo_inst_1_io_enq_valid_T_2 = io_din_bits_adr_group == 2'h0;
  wire       _sync_fifo_inst_2_io_enq_valid_T_2 = io_din_bits_adr_group == 2'h1;
  wire       _sync_fifo_inst_3_io_enq_valid_T_2 = io_din_bits_adr_group == 2'h2;
  wire [3:0] _GEN =
    {{(&io_din_bits_adr_group) & (io_din_bits_cmdtype[0] | io_WrDataFifoRdy[3])
        & _sync_fifo_inst_4_io_enq_ready},
     {(io_din_bits_cmdtype[0] | io_WrDataFifoRdy[2]) & _sync_fifo_inst_3_io_enq_ready},
     {(io_din_bits_cmdtype[0] | io_WrDataFifoRdy[1]) & _sync_fifo_inst_2_io_enq_ready},
     {(io_din_bits_cmdtype[0] | io_WrDataFifoRdy[0]) & _sync_fifo_inst_1_io_enq_ready}};
  Queue16_fifo_adr sync_fifo_inst_1 (
    .clock                    (clock),
    .reset                    (reset),
    .io_enq_ready             (_sync_fifo_inst_1_io_enq_ready),
    .io_enq_valid
      (io_din_bits_cmdtype[0]
         ? io_din_valid & _sync_fifo_inst_1_io_enq_valid_T_2
         : io_din_valid & _sync_fifo_inst_1_io_enq_valid_T_2 & io_WrDataFifoRdy[0]),
    .io_enq_bits_cmdtype      (io_din_bits_cmdtype),
    .io_enq_bits_adr_rank     (io_din_bits_adr_rank),
    .io_enq_bits_adr_group    (io_din_bits_adr_group),
    .io_enq_bits_adr_bank     (io_din_bits_adr_bank),
    .io_enq_bits_adr_row      (io_din_bits_adr_row),
    .io_enq_bits_adr_col      (io_din_bits_adr_col),
    .io_enq_bits_adr_cmdToken (io_din_bits_adr_cmdToken),
    .io_deq_ready             (io_dout_0_ready),
    .io_deq_valid             (io_dout_0_valid),
    .io_deq_bits_cmdtype      (io_dout_0_bits_cmdtype),
    .io_deq_bits_adr_rank     (io_dout_0_bits_adr_rank),
    .io_deq_bits_adr_group    (io_dout_0_bits_adr_group),
    .io_deq_bits_adr_bank     (io_dout_0_bits_adr_bank),
    .io_deq_bits_adr_row      (io_dout_0_bits_adr_row),
    .io_deq_bits_adr_col      (io_dout_0_bits_adr_col),
    .io_deq_bits_adr_cmdToken (io_dout_0_bits_adr_cmdToken)
  );
  Queue16_fifo_adr sync_fifo_inst_2 (
    .clock                    (clock),
    .reset                    (reset),
    .io_enq_ready             (_sync_fifo_inst_2_io_enq_ready),
    .io_enq_valid
      (io_din_bits_cmdtype[0]
         ? io_din_valid & _sync_fifo_inst_2_io_enq_valid_T_2
         : io_din_valid & _sync_fifo_inst_2_io_enq_valid_T_2 & io_WrDataFifoRdy[1]),
    .io_enq_bits_cmdtype      (io_din_bits_cmdtype),
    .io_enq_bits_adr_rank     (io_din_bits_adr_rank),
    .io_enq_bits_adr_group    (io_din_bits_adr_group),
    .io_enq_bits_adr_bank     (io_din_bits_adr_bank),
    .io_enq_bits_adr_row      (io_din_bits_adr_row),
    .io_enq_bits_adr_col      (io_din_bits_adr_col),
    .io_enq_bits_adr_cmdToken (io_din_bits_adr_cmdToken),
    .io_deq_ready             (io_dout_1_ready),
    .io_deq_valid             (io_dout_1_valid),
    .io_deq_bits_cmdtype      (io_dout_1_bits_cmdtype),
    .io_deq_bits_adr_rank     (io_dout_1_bits_adr_rank),
    .io_deq_bits_adr_group    (io_dout_1_bits_adr_group),
    .io_deq_bits_adr_bank     (io_dout_1_bits_adr_bank),
    .io_deq_bits_adr_row      (io_dout_1_bits_adr_row),
    .io_deq_bits_adr_col      (io_dout_1_bits_adr_col),
    .io_deq_bits_adr_cmdToken (io_dout_1_bits_adr_cmdToken)
  );
  Queue16_fifo_adr sync_fifo_inst_3 (
    .clock                    (clock),
    .reset                    (reset),
    .io_enq_ready             (_sync_fifo_inst_3_io_enq_ready),
    .io_enq_valid
      (io_din_bits_cmdtype[0]
         ? io_din_valid & _sync_fifo_inst_3_io_enq_valid_T_2
         : io_din_valid & _sync_fifo_inst_3_io_enq_valid_T_2 & io_WrDataFifoRdy[2]),
    .io_enq_bits_cmdtype      (io_din_bits_cmdtype),
    .io_enq_bits_adr_rank     (io_din_bits_adr_rank),
    .io_enq_bits_adr_group    (io_din_bits_adr_group),
    .io_enq_bits_adr_bank     (io_din_bits_adr_bank),
    .io_enq_bits_adr_row      (io_din_bits_adr_row),
    .io_enq_bits_adr_col      (io_din_bits_adr_col),
    .io_enq_bits_adr_cmdToken (io_din_bits_adr_cmdToken),
    .io_deq_ready             (io_dout_2_ready),
    .io_deq_valid             (io_dout_2_valid),
    .io_deq_bits_cmdtype      (io_dout_2_bits_cmdtype),
    .io_deq_bits_adr_rank     (io_dout_2_bits_adr_rank),
    .io_deq_bits_adr_group    (io_dout_2_bits_adr_group),
    .io_deq_bits_adr_bank     (io_dout_2_bits_adr_bank),
    .io_deq_bits_adr_row      (io_dout_2_bits_adr_row),
    .io_deq_bits_adr_col      (io_dout_2_bits_adr_col),
    .io_deq_bits_adr_cmdToken (io_dout_2_bits_adr_cmdToken)
  );
  Queue16_fifo_adr sync_fifo_inst_4 (
    .clock                    (clock),
    .reset                    (reset),
    .io_enq_ready             (_sync_fifo_inst_4_io_enq_ready),
    .io_enq_valid
      (io_din_bits_cmdtype[0]
         ? io_din_valid & (&io_din_bits_adr_group)
         : io_din_valid & (&io_din_bits_adr_group) & io_WrDataFifoRdy[3]),
    .io_enq_bits_cmdtype      (io_din_bits_cmdtype),
    .io_enq_bits_adr_rank     (io_din_bits_adr_rank),
    .io_enq_bits_adr_group    (io_din_bits_adr_group),
    .io_enq_bits_adr_bank     (io_din_bits_adr_bank),
    .io_enq_bits_adr_row      (io_din_bits_adr_row),
    .io_enq_bits_adr_col      (io_din_bits_adr_col),
    .io_enq_bits_adr_cmdToken (io_din_bits_adr_cmdToken),
    .io_deq_ready             (io_dout_3_ready),
    .io_deq_valid             (io_dout_3_valid),
    .io_deq_bits_cmdtype      (io_dout_3_bits_cmdtype),
    .io_deq_bits_adr_rank     (io_dout_3_bits_adr_rank),
    .io_deq_bits_adr_group    (io_dout_3_bits_adr_group),
    .io_deq_bits_adr_bank     (io_dout_3_bits_adr_bank),
    .io_deq_bits_adr_row      (io_dout_3_bits_adr_row),
    .io_deq_bits_adr_col      (io_dout_3_bits_adr_col),
    .io_deq_bits_adr_cmdToken (io_dout_3_bits_adr_cmdToken)
  );
  assign io_din_ready = _GEN[io_din_bits_adr_group];
endmodule

module RRArbiter(
  input        clock,
               io_in_0_valid,
               io_in_1_valid,
               io_in_2_valid,
               io_in_3_valid,
  output       io_out_valid,
  output [1:0] io_chosen
);

  wire [1:0] io_chosen_choice;
  wire [3:0] _GEN = {{io_in_3_valid}, {io_in_2_valid}, {io_in_1_valid}, {io_in_0_valid}};
  wire       io_out_valid_0 = _GEN[io_chosen_choice];
  reg  [1:0] ctrl_validMask_grantMask_lastGrant;
  wire       ctrl_validMask_1 =
    io_in_1_valid & ctrl_validMask_grantMask_lastGrant == 2'h0;
  wire       ctrl_validMask_2 = io_in_2_valid & ~(ctrl_validMask_grantMask_lastGrant[1]);
  wire       ctrl_validMask_3 =
    io_in_3_valid & ctrl_validMask_grantMask_lastGrant != 2'h3;
  wire [1:0] _GEN_0 =
    io_in_0_valid ? 2'h0 : io_in_1_valid ? 2'h1 : {1'h1, ~io_in_2_valid};
  assign io_chosen_choice =
    ctrl_validMask_1 ? 2'h1 : ctrl_validMask_2 ? 2'h2 : ctrl_validMask_3 ? 2'h3 : _GEN_0;
  always @(posedge clock) begin
    if (io_out_valid_0) begin
      if (ctrl_validMask_1)
        ctrl_validMask_grantMask_lastGrant <= 2'h1;
      else if (ctrl_validMask_2)
        ctrl_validMask_grantMask_lastGrant <= 2'h2;
      else if (ctrl_validMask_3)
        ctrl_validMask_grantMask_lastGrant <= 2'h3;
      else
        ctrl_validMask_grantMask_lastGrant <= _GEN_0;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        ctrl_validMask_grantMask_lastGrant = _RANDOM[/*Zero width*/ 1'b0][1:0];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = io_out_valid_0;
  assign io_chosen = io_chosen_choice;
endmodule

module arbitrate(
  input         clock,
                reset,
                io_ref2arb_refIss,
                io_ref2arb_zqIss,
                io_ref2arb_preIss,
  output        io_arb2RG_arbout_0_Pre_PopOK,
                io_arb2RG_arbout_0_Cas_PopOK,
                io_arb2RG_arbout_0_Act_PopOK,
                io_arb2RG_arbout_1_Pre_PopOK,
                io_arb2RG_arbout_1_Cas_PopOK,
                io_arb2RG_arbout_1_Act_PopOK,
                io_arb2RG_arbout_2_Pre_PopOK,
                io_arb2RG_arbout_2_Cas_PopOK,
                io_arb2RG_arbout_2_Act_PopOK,
                io_arb2RG_arbout_3_Pre_PopOK,
                io_arb2RG_arbout_3_Cas_PopOK,
                io_arb2RG_arbout_3_Act_PopOK,
  input         io_arb2RG_arbin_0_Cas_PopReq,
                io_arb2RG_arbin_0_Act_PopReq,
                io_arb2RG_arbin_0_Pre_PopReq,
                io_arb2RG_arbin_0_preReq,
                io_arb2RG_arbin_0_actReq,
                io_arb2RG_arbin_0_readReq,
                io_arb2RG_arbin_0_writeReq,
  input  [1:0]  io_arb2RG_arbin_0_actAdr_group,
                io_arb2RG_arbin_0_actAdr_bank,
  input  [17:0] io_arb2RG_arbin_0_actAdr_row,
  input  [1:0]  io_arb2RG_arbin_0_preAdr_group,
                io_arb2RG_arbin_0_preAdr_bank,
  input  [17:0] io_arb2RG_arbin_0_preAdr_row,
  input  [1:0]  io_arb2RG_arbin_0_casAdr_group,
                io_arb2RG_arbin_0_casAdr_bank,
  input  [9:0]  io_arb2RG_arbin_0_casAdr_col,
  input  [16:0] io_arb2RG_arbin_0_casAdr_cmdToken,
  input         io_arb2RG_arbin_1_Cas_PopReq,
                io_arb2RG_arbin_1_Act_PopReq,
                io_arb2RG_arbin_1_Pre_PopReq,
                io_arb2RG_arbin_1_preReq,
                io_arb2RG_arbin_1_actReq,
                io_arb2RG_arbin_1_readReq,
                io_arb2RG_arbin_1_writeReq,
  input  [1:0]  io_arb2RG_arbin_1_actAdr_group,
                io_arb2RG_arbin_1_actAdr_bank,
  input  [17:0] io_arb2RG_arbin_1_actAdr_row,
  input  [1:0]  io_arb2RG_arbin_1_preAdr_group,
                io_arb2RG_arbin_1_preAdr_bank,
  input  [17:0] io_arb2RG_arbin_1_preAdr_row,
  input  [1:0]  io_arb2RG_arbin_1_casAdr_group,
                io_arb2RG_arbin_1_casAdr_bank,
  input  [9:0]  io_arb2RG_arbin_1_casAdr_col,
  input  [16:0] io_arb2RG_arbin_1_casAdr_cmdToken,
  input         io_arb2RG_arbin_2_Cas_PopReq,
                io_arb2RG_arbin_2_Act_PopReq,
                io_arb2RG_arbin_2_Pre_PopReq,
                io_arb2RG_arbin_2_preReq,
                io_arb2RG_arbin_2_actReq,
                io_arb2RG_arbin_2_readReq,
                io_arb2RG_arbin_2_writeReq,
  input  [1:0]  io_arb2RG_arbin_2_actAdr_group,
                io_arb2RG_arbin_2_actAdr_bank,
  input  [17:0] io_arb2RG_arbin_2_actAdr_row,
  input  [1:0]  io_arb2RG_arbin_2_preAdr_group,
                io_arb2RG_arbin_2_preAdr_bank,
  input  [17:0] io_arb2RG_arbin_2_preAdr_row,
  input  [1:0]  io_arb2RG_arbin_2_casAdr_group,
                io_arb2RG_arbin_2_casAdr_bank,
  input  [9:0]  io_arb2RG_arbin_2_casAdr_col,
  input  [16:0] io_arb2RG_arbin_2_casAdr_cmdToken,
  input         io_arb2RG_arbin_3_Cas_PopReq,
                io_arb2RG_arbin_3_Act_PopReq,
                io_arb2RG_arbin_3_Pre_PopReq,
                io_arb2RG_arbin_3_preReq,
                io_arb2RG_arbin_3_actReq,
                io_arb2RG_arbin_3_readReq,
                io_arb2RG_arbin_3_writeReq,
  input  [1:0]  io_arb2RG_arbin_3_actAdr_group,
                io_arb2RG_arbin_3_actAdr_bank,
  input  [17:0] io_arb2RG_arbin_3_actAdr_row,
  input  [1:0]  io_arb2RG_arbin_3_preAdr_group,
                io_arb2RG_arbin_3_preAdr_bank,
  input  [17:0] io_arb2RG_arbin_3_preAdr_row,
  input  [1:0]  io_arb2RG_arbin_3_casAdr_group,
                io_arb2RG_arbin_3_casAdr_bank,
  input  [9:0]  io_arb2RG_arbin_3_casAdr_col,
  input  [16:0] io_arb2RG_arbin_3_casAdr_cmdToken,
  output        io_arb2WM_actReq,
  output [1:0]  io_arb2WM_winGroupA,
                io_arb2WM_winBankAT,
  output [17:0] io_arb2WM_winROW,
                io_arb2WM_winROWP,
  output        io_arb2WM_writeReq,
                io_arb2WM_readReq,
  output [16:0] io_arb2WM_readToken,
  output [1:0]  io_arb2WM_groupCas,
                io_arb2WM_bankCas,
  output [9:0]  io_arb2WM_winCOL,
  output        io_arb2WM_preReq,
  output [1:0]  io_arb2WM_winGroupP,
                io_arb2WM_winBankP,
  output        io_arb2WM_arb2WM_refInt_refIss,
                io_arb2WM_arb2WM_refInt_zqIss,
                io_arb2WM_arb2WM_refInt_preIss
);

  wire             _Cas_arbiter_io_out_valid;
  wire [1:0]       _Cas_arbiter_io_chosen;
  wire             _Pre_arbiter_io_out_valid;
  wire [1:0]       _Pre_arbiter_io_chosen;
  wire             _Act_arbiter_io_out_valid;
  wire [1:0]       _Act_arbiter_io_chosen;
  reg              wonPreReq;
  reg              wonActReq;
  reg              wonWriteReq;
  reg              wonReadReq;
  reg  [1:0]       wonPreAdr_group;
  reg  [1:0]       wonPreAdr_bank;
  reg  [17:0]      wonPreAdr_row;
  reg  [1:0]       wonActAdr_group;
  reg  [1:0]       wonActAdr_bank;
  reg  [17:0]      wonActAdr_row;
  reg  [1:0]       wonCasAdr_group;
  reg  [1:0]       wonCasAdr_bank;
  reg  [9:0]       wonCasAdr_col;
  reg  [16:0]      wonCasAdr_cmdToken;
  wire [3:0][1:0]  _GEN =
    {{io_arb2RG_arbin_3_preAdr_group},
     {io_arb2RG_arbin_2_preAdr_group},
     {io_arb2RG_arbin_1_preAdr_group},
     {io_arb2RG_arbin_0_preAdr_group}};
  wire [3:0][1:0]  _GEN_0 =
    {{io_arb2RG_arbin_3_preAdr_bank},
     {io_arb2RG_arbin_2_preAdr_bank},
     {io_arb2RG_arbin_1_preAdr_bank},
     {io_arb2RG_arbin_0_preAdr_bank}};
  wire [3:0][17:0] _GEN_1 =
    {{io_arb2RG_arbin_3_preAdr_row},
     {io_arb2RG_arbin_2_preAdr_row},
     {io_arb2RG_arbin_1_preAdr_row},
     {io_arb2RG_arbin_0_preAdr_row}};
  wire [3:0][1:0]  _GEN_2 =
    {{io_arb2RG_arbin_3_actAdr_group},
     {io_arb2RG_arbin_2_actAdr_group},
     {io_arb2RG_arbin_1_actAdr_group},
     {io_arb2RG_arbin_0_actAdr_group}};
  wire [3:0][1:0]  _GEN_3 =
    {{io_arb2RG_arbin_3_actAdr_bank},
     {io_arb2RG_arbin_2_actAdr_bank},
     {io_arb2RG_arbin_1_actAdr_bank},
     {io_arb2RG_arbin_0_actAdr_bank}};
  wire [3:0][17:0] _GEN_4 =
    {{io_arb2RG_arbin_3_actAdr_row},
     {io_arb2RG_arbin_2_actAdr_row},
     {io_arb2RG_arbin_1_actAdr_row},
     {io_arb2RG_arbin_0_actAdr_row}};
  wire [3:0][1:0]  _GEN_5 =
    {{io_arb2RG_arbin_3_casAdr_group},
     {io_arb2RG_arbin_2_casAdr_group},
     {io_arb2RG_arbin_1_casAdr_group},
     {io_arb2RG_arbin_0_casAdr_group}};
  wire [3:0][1:0]  _GEN_6 =
    {{io_arb2RG_arbin_3_casAdr_bank},
     {io_arb2RG_arbin_2_casAdr_bank},
     {io_arb2RG_arbin_1_casAdr_bank},
     {io_arb2RG_arbin_0_casAdr_bank}};
  wire [3:0][9:0]  _GEN_7 =
    {{io_arb2RG_arbin_3_casAdr_col},
     {io_arb2RG_arbin_2_casAdr_col},
     {io_arb2RG_arbin_1_casAdr_col},
     {io_arb2RG_arbin_0_casAdr_col}};
  wire [3:0][16:0] _GEN_8 =
    {{io_arb2RG_arbin_3_casAdr_cmdToken},
     {io_arb2RG_arbin_2_casAdr_cmdToken},
     {io_arb2RG_arbin_1_casAdr_cmdToken},
     {io_arb2RG_arbin_0_casAdr_cmdToken}};
  wire [3:0]       _GEN_9 =
    {{io_arb2RG_arbin_3_preReq},
     {io_arb2RG_arbin_2_preReq},
     {io_arb2RG_arbin_1_preReq},
     {io_arb2RG_arbin_0_preReq}};
  wire [3:0]       _GEN_10 =
    {{io_arb2RG_arbin_3_actReq},
     {io_arb2RG_arbin_2_actReq},
     {io_arb2RG_arbin_1_actReq},
     {io_arb2RG_arbin_0_actReq}};
  wire [3:0]       _GEN_11 =
    {{io_arb2RG_arbin_3_writeReq},
     {io_arb2RG_arbin_2_writeReq},
     {io_arb2RG_arbin_1_writeReq},
     {io_arb2RG_arbin_0_writeReq}};
  wire [3:0]       _GEN_12 =
    {{io_arb2RG_arbin_3_readReq},
     {io_arb2RG_arbin_2_readReq},
     {io_arb2RG_arbin_1_readReq},
     {io_arb2RG_arbin_0_readReq}};
  always @(posedge clock) begin
    if (reset) begin
      wonPreReq <= 1'h0;
      wonActReq <= 1'h0;
      wonWriteReq <= 1'h0;
      wonReadReq <= 1'h0;
      wonPreAdr_group <= 2'h0;
      wonPreAdr_bank <= 2'h0;
      wonPreAdr_row <= 18'h0;
      wonActAdr_group <= 2'h0;
      wonActAdr_bank <= 2'h0;
      wonActAdr_row <= 18'h0;
      wonCasAdr_group <= 2'h0;
      wonCasAdr_bank <= 2'h0;
      wonCasAdr_col <= 10'h0;
      wonCasAdr_cmdToken <= 17'h0;
    end
    else begin
      wonPreReq <= _Pre_arbiter_io_out_valid & _GEN_9[_Pre_arbiter_io_chosen];
      wonActReq <= _Act_arbiter_io_out_valid & _GEN_10[_Act_arbiter_io_chosen];
      wonWriteReq <= _Cas_arbiter_io_out_valid & _GEN_11[_Cas_arbiter_io_chosen];
      wonReadReq <= _Cas_arbiter_io_out_valid & _GEN_12[_Cas_arbiter_io_chosen];
      if (_Pre_arbiter_io_out_valid) begin
        wonPreAdr_group <= _GEN[_Pre_arbiter_io_chosen];
        wonPreAdr_bank <= _GEN_0[_Pre_arbiter_io_chosen];
        wonPreAdr_row <= _GEN_1[_Pre_arbiter_io_chosen];
      end
      if (_Act_arbiter_io_out_valid) begin
        wonActAdr_group <= _GEN_2[_Act_arbiter_io_chosen];
        wonActAdr_bank <= _GEN_3[_Act_arbiter_io_chosen];
        wonActAdr_row <= _GEN_4[_Act_arbiter_io_chosen];
      end
      if (_Cas_arbiter_io_out_valid) begin
        wonCasAdr_group <= _GEN_5[_Cas_arbiter_io_chosen];
        wonCasAdr_bank <= _GEN_6[_Cas_arbiter_io_chosen];
        wonCasAdr_col <= _GEN_7[_Cas_arbiter_io_chosen];
        wonCasAdr_cmdToken <= _GEN_8[_Cas_arbiter_io_chosen];
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        wonPreReq = _RANDOM[3'h0][0];
        wonActReq = _RANDOM[3'h0][1];
        wonWriteReq = _RANDOM[3'h0][2];
        wonReadReq = _RANDOM[3'h0][3];
        wonPreAdr_group = _RANDOM[3'h0][6:5];
        wonPreAdr_bank = _RANDOM[3'h0][8:7];
        wonPreAdr_row = _RANDOM[3'h0][26:9];
        wonActAdr_group = _RANDOM[3'h1][24:23];
        wonActAdr_bank = _RANDOM[3'h1][26:25];
        wonActAdr_row = {_RANDOM[3'h1][31:27], _RANDOM[3'h2][12:0]};
        wonCasAdr_group = _RANDOM[3'h3][10:9];
        wonCasAdr_bank = _RANDOM[3'h3][12:11];
        wonCasAdr_col = {_RANDOM[3'h3][31], _RANDOM[3'h4][8:0]};
        wonCasAdr_cmdToken = _RANDOM[3'h4][25:9];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  RRArbiter Act_arbiter (
    .clock         (clock),
    .io_in_0_valid (io_arb2RG_arbin_0_Act_PopReq),
    .io_in_1_valid (io_arb2RG_arbin_1_Act_PopReq),
    .io_in_2_valid (io_arb2RG_arbin_2_Act_PopReq),
    .io_in_3_valid (io_arb2RG_arbin_3_Act_PopReq),
    .io_out_valid  (_Act_arbiter_io_out_valid),
    .io_chosen     (_Act_arbiter_io_chosen)
  );
  RRArbiter Pre_arbiter (
    .clock         (clock),
    .io_in_0_valid (io_arb2RG_arbin_0_Pre_PopReq),
    .io_in_1_valid (io_arb2RG_arbin_1_Pre_PopReq),
    .io_in_2_valid (io_arb2RG_arbin_2_Pre_PopReq),
    .io_in_3_valid (io_arb2RG_arbin_3_Pre_PopReq),
    .io_out_valid  (_Pre_arbiter_io_out_valid),
    .io_chosen     (_Pre_arbiter_io_chosen)
  );
  RRArbiter Cas_arbiter (
    .clock         (clock),
    .io_in_0_valid (io_arb2RG_arbin_0_Cas_PopReq),
    .io_in_1_valid (io_arb2RG_arbin_1_Cas_PopReq),
    .io_in_2_valid (io_arb2RG_arbin_2_Cas_PopReq),
    .io_in_3_valid (io_arb2RG_arbin_3_Cas_PopReq),
    .io_out_valid  (_Cas_arbiter_io_out_valid),
    .io_chosen     (_Cas_arbiter_io_chosen)
  );
  assign io_arb2RG_arbout_0_Pre_PopOK =
    _Pre_arbiter_io_chosen == 2'h0 & _Pre_arbiter_io_out_valid;
  assign io_arb2RG_arbout_0_Cas_PopOK =
    _Cas_arbiter_io_chosen == 2'h0 & _Cas_arbiter_io_out_valid;
  assign io_arb2RG_arbout_0_Act_PopOK =
    _Act_arbiter_io_chosen == 2'h0 & _Act_arbiter_io_out_valid;
  assign io_arb2RG_arbout_1_Pre_PopOK =
    _Pre_arbiter_io_chosen == 2'h1 & _Pre_arbiter_io_out_valid;
  assign io_arb2RG_arbout_1_Cas_PopOK =
    _Cas_arbiter_io_chosen == 2'h1 & _Cas_arbiter_io_out_valid;
  assign io_arb2RG_arbout_1_Act_PopOK =
    _Act_arbiter_io_chosen == 2'h1 & _Act_arbiter_io_out_valid;
  assign io_arb2RG_arbout_2_Pre_PopOK =
    _Pre_arbiter_io_chosen == 2'h2 & _Pre_arbiter_io_out_valid;
  assign io_arb2RG_arbout_2_Cas_PopOK =
    _Cas_arbiter_io_chosen == 2'h2 & _Cas_arbiter_io_out_valid;
  assign io_arb2RG_arbout_2_Act_PopOK =
    _Act_arbiter_io_chosen == 2'h2 & _Act_arbiter_io_out_valid;
  assign io_arb2RG_arbout_3_Pre_PopOK =
    (&_Pre_arbiter_io_chosen) & _Pre_arbiter_io_out_valid;
  assign io_arb2RG_arbout_3_Cas_PopOK =
    (&_Cas_arbiter_io_chosen) & _Cas_arbiter_io_out_valid;
  assign io_arb2RG_arbout_3_Act_PopOK =
    (&_Act_arbiter_io_chosen) & _Act_arbiter_io_out_valid;
  assign io_arb2WM_actReq = wonActReq;
  assign io_arb2WM_winGroupA = wonActAdr_group;
  assign io_arb2WM_winBankAT = wonActAdr_bank;
  assign io_arb2WM_winROW = wonActAdr_row;
  assign io_arb2WM_winROWP = wonPreAdr_row;
  assign io_arb2WM_writeReq = wonWriteReq;
  assign io_arb2WM_readReq = wonReadReq;
  assign io_arb2WM_readToken = wonCasAdr_cmdToken;
  assign io_arb2WM_groupCas = wonCasAdr_group;
  assign io_arb2WM_bankCas = wonCasAdr_bank;
  assign io_arb2WM_winCOL = wonCasAdr_col;
  assign io_arb2WM_preReq = wonPreReq;
  assign io_arb2WM_winGroupP = wonPreAdr_group;
  assign io_arb2WM_winBankP = wonPreAdr_bank;
  assign io_arb2WM_arb2WM_refInt_refIss = io_ref2arb_refIss;
  assign io_arb2WM_arb2WM_refInt_zqIss = io_ref2arb_zqIss;
  assign io_arb2WM_arb2WM_refInt_preIss = io_ref2arb_preIss;
endmodule

module Ref(
  input         clock,
                reset,
                io_CalDone,
  output        io_linkRG_slave_flowReq,
                io_linkRG_slave_releaseReq,
                io_linkRG_slave_preIss,
  input         io_linkRG_master_flowAck_0,
                io_linkRG_master_flowAck_1,
                io_linkRG_master_flowAck_2,
                io_linkRG_master_flowAck_3,
  output        io_linkArb_refIss,
                io_linkArb_zqIss,
                io_linkArb_preIss,
  input  [15:0] io_time_tZQCS,
  input  [31:0] io_time_tZQINTVL,
  input  [15:0] io_time_tRP,
                io_time_tREFI,
                io_time_tRFC,
  input         io_PREA_OK_0,
                io_PREA_OK_1,
                io_PREA_OK_2,
                io_PREA_OK_3,
                io_RASA_OK_0,
                io_RASA_OK_1,
                io_RASA_OK_2,
                io_RASA_OK_3,
                io_WTPA_OK_0,
                io_WTPA_OK_1,
                io_WTPA_OK_2,
                io_WTPA_OK_3,
  output [2:0]  io_debug_ref_state
);

  reg  [2:0]      state;
  reg  [15:0]     tREFI_timer;
  reg             tREFI_timer_en;
  reg  [31:0]     tZQINTVL_timer;
  reg             tZQINTVL_timer_en;
  reg  [15:0]     tRP_timer;
  reg  [15:0]     tRFC_timer;
  reg  [15:0]     tZQCS_timer;
  reg             refpend;
  reg             zqpend;
  reg             BLOCK_REQ2PRECHARGE;
  wire            _GEN = tRP_timer == 16'h0;
  wire [7:0][2:0] _GEN_0 =
    {{3'h0},
     {refpend & ~(|tZQCS_timer) ? 3'h4 : refpend | (|tZQCS_timer) ? 3'h6 : 3'h0},
     {~(|tRFC_timer) & zqpend ? 3'h6 : (|tRFC_timer) | zqpend ? 3'h5 : 3'h0},
     {3'h5},
     {_GEN & refpend ? 3'h4 : _GEN & zqpend & ~refpend ? 3'h6 : 3'h3},
     {3'h3},
     {BLOCK_REQ2PRECHARGE & (&{io_PREA_OK_3, io_PREA_OK_2, io_PREA_OK_1, io_PREA_OK_0})
      & (&{io_RASA_OK_3, io_RASA_OK_2, io_RASA_OK_1, io_RASA_OK_0})
      & (&{io_WTPA_OK_3, io_WTPA_OK_2, io_WTPA_OK_1, io_WTPA_OK_0})
        ? 3'h2
        : 3'h1},
     {{2'h0, (refpend | zqpend) & io_CalDone}}};
  wire [2:0]      state_n = _GEN_0[state];
  wire            io_linkArb_preIss_0 = state == 3'h2;
  wire            _io_linkArb_zqIss_T = state == 3'h6;
  wire            io_linkArb_refIss_0 = state == 3'h4;
  wire [19:0]     _tRFC_timer_T_1 = {4'h0, io_time_tRFC} * 20'hD / 20'h3E8;
  wire            _tREFI_timer_T = tREFI_timer == 16'h0;
  wire            _tZQINTVL_timer_T = tZQINTVL_timer == 32'h0;
  wire            _GEN_1 = state == 3'h6;
  wire [19:0]     _tREFI_timer_T_2 = {4'h0, io_time_tREFI} * 20'hD / 20'h3E8;
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h0;
      tREFI_timer <= 16'h0;
      tREFI_timer_en <= 1'h0;
      tZQINTVL_timer <= 32'h0;
      tZQINTVL_timer_en <= 1'h0;
      tRP_timer <= 16'h0;
      tRFC_timer <= 16'h0;
      tZQCS_timer <= 16'h0;
      refpend <= 1'h0;
      zqpend <= 1'h0;
      BLOCK_REQ2PRECHARGE <= 1'h0;
    end
    else begin
      state <= state_n;
      tREFI_timer <=
        _tREFI_timer_T
          ? _tREFI_timer_T_2[15:0] - 16'h1
          : io_CalDone & (|tREFI_timer) ? tREFI_timer - 16'h1 : tREFI_timer;
      tREFI_timer_en <= 1'h1;
      tZQINTVL_timer <=
        _tZQINTVL_timer_T
          ? io_time_tZQINTVL * 32'h32C8 - 32'h1
          : io_CalDone & (|tZQINTVL_timer) ? tZQINTVL_timer - 32'h1 : tZQINTVL_timer;
      tZQINTVL_timer_en <= 1'h1;
      if (state == 3'h3) begin
        if (io_CalDone & state == 3'h3 & (|tRP_timer))
          tRP_timer <= tRP_timer - 16'h1;
      end
      else
        tRP_timer <= {1'h0, io_time_tRP[15:1] - 15'h1};
      if (state == 3'h5) begin
        if (io_CalDone & state == 3'h5 & (|tRFC_timer))
          tRFC_timer <= tRFC_timer - 16'h1;
      end
      else
        tRFC_timer <= _tRFC_timer_T_1[15:0] - 16'h1;
      if (_GEN_1) begin
        if (io_CalDone & state == 3'h6 & (|tZQCS_timer))
          tZQCS_timer <= tZQCS_timer - 16'h1;
      end
      else
        tZQCS_timer <= {1'h0, io_time_tZQCS[15:1] - 15'h1};
      refpend <= _tREFI_timer_T & tREFI_timer_en | ~io_linkArb_refIss_0 & refpend;
      zqpend <=
        _tZQINTVL_timer_T & tZQINTVL_timer_en | ~(_GEN_1 & ~(|tZQCS_timer)) & zqpend;
      BLOCK_REQ2PRECHARGE <=
        &{io_linkRG_master_flowAck_3,
          io_linkRG_master_flowAck_2,
          io_linkRG_master_flowAck_1,
          io_linkRG_master_flowAck_0};
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        state = _RANDOM[2'h0][2:0];
        tREFI_timer = _RANDOM[2'h0][18:3];
        tREFI_timer_en = _RANDOM[2'h0][19];
        tZQINTVL_timer = {_RANDOM[2'h0][31:20], _RANDOM[2'h1][19:0]};
        tZQINTVL_timer_en = _RANDOM[2'h1][20];
        tRP_timer = {_RANDOM[2'h1][31:21], _RANDOM[2'h2][4:0]};
        tRFC_timer = _RANDOM[2'h2][20:5];
        tZQCS_timer = {_RANDOM[2'h2][31:21], _RANDOM[2'h3][4:0]};
        refpend = _RANDOM[2'h3][5];
        zqpend = _RANDOM[2'h3][6];
        BLOCK_REQ2PRECHARGE = _RANDOM[2'h3][7];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_linkRG_slave_flowReq = state == 3'h1;
  assign io_linkRG_slave_releaseReq =
    ~(|tRFC_timer) & ~zqpend & state == 3'h5 | _io_linkArb_zqIss_T & ~refpend
    & ~(|tZQCS_timer);
  assign io_linkRG_slave_preIss = io_linkArb_preIss_0;
  assign io_linkArb_refIss = io_linkArb_refIss_0;
  assign io_linkArb_zqIss = _io_linkArb_zqIss_T & tZQCS_timer == io_time_tZQCS - 16'h1;
  assign io_linkArb_preIss = io_linkArb_preIss_0;
  assign io_debug_ref_state = state;
endmodule

// VCS coverage exclude_file
module ram_16x51(
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [50:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [50:0] W0_data
);

  reg [50:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [63:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          for (logic [6:0] j = 7'h0; j < 7'h40; j += 7'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;
          end
          Memory[i[3:0]] = _RANDOM_MEM[50:0];
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 51'bx;
endmodule

module Queue16_txn_fifo_adr(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
                io_enq_bits_cmdtype,
                io_enq_bits_adr_rank,
  input  [1:0]  io_enq_bits_adr_group,
                io_enq_bits_adr_bank,
  input  [17:0] io_enq_bits_adr_row,
  input  [9:0]  io_enq_bits_adr_col,
  input  [16:0] io_enq_bits_adr_cmdToken,
  input         io_deq_ready,
  output        io_deq_valid,
                io_deq_bits_cmdtype,
                io_deq_bits_adr_rank,
  output [1:0]  io_deq_bits_adr_group,
                io_deq_bits_adr_bank,
  output [17:0] io_deq_bits_adr_row,
  output [9:0]  io_deq_bits_adr_col,
  output [16:0] io_deq_bits_adr_cmdToken
);

  wire [50:0] _ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg  [3:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  wire        do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_16x51 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_adr_cmdToken,
        io_enq_bits_adr_col,
        io_enq_bits_adr_row,
        io_enq_bits_adr_bank,
        io_enq_bits_adr_group,
        io_enq_bits_adr_rank,
        io_enq_bits_cmdtype})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_cmdtype = _ram_ext_R0_data[0];
  assign io_deq_bits_adr_rank = _ram_ext_R0_data[1];
  assign io_deq_bits_adr_group = _ram_ext_R0_data[3:2];
  assign io_deq_bits_adr_bank = _ram_ext_R0_data[5:4];
  assign io_deq_bits_adr_row = _ram_ext_R0_data[23:6];
  assign io_deq_bits_adr_col = _ram_ext_R0_data[33:24];
  assign io_deq_bits_adr_cmdToken = _ram_ext_R0_data[50:34];
endmodule

module cmd_fifo(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
                io_enq_bits_cmdtype,
  input  [1:0]  io_enq_bits_adr_group,
                io_enq_bits_adr_bank,
  input  [9:0]  io_enq_bits_adr_col,
  input  [16:0] io_enq_bits_adr_cmdToken,
  input         io_deq_ready,
  output        io_deq_valid,
                io_deq_bits_cmdtype,
  output [1:0]  io_deq_bits_adr_group,
                io_deq_bits_adr_bank,
  output [9:0]  io_deq_bits_adr_col,
  output [16:0] io_deq_bits_adr_cmdToken,
  input  [1:0]  io_Query_QueryBG,
                io_Query_QueryBA,
  output        io_Query_Querye_empty
);

  reg               cmd_fifo_0_cmdtype;
  reg  [1:0]        cmd_fifo_0_adr_group;
  reg  [1:0]        cmd_fifo_0_adr_bank;
  reg  [9:0]        cmd_fifo_0_adr_col;
  reg  [16:0]       cmd_fifo_0_adr_cmdToken;
  reg               cmd_fifo_1_cmdtype;
  reg  [1:0]        cmd_fifo_1_adr_group;
  reg  [1:0]        cmd_fifo_1_adr_bank;
  reg  [9:0]        cmd_fifo_1_adr_col;
  reg  [16:0]       cmd_fifo_1_adr_cmdToken;
  reg               cmd_fifo_2_cmdtype;
  reg  [1:0]        cmd_fifo_2_adr_group;
  reg  [1:0]        cmd_fifo_2_adr_bank;
  reg  [9:0]        cmd_fifo_2_adr_col;
  reg  [16:0]       cmd_fifo_2_adr_cmdToken;
  reg               cmd_fifo_3_cmdtype;
  reg  [1:0]        cmd_fifo_3_adr_group;
  reg  [1:0]        cmd_fifo_3_adr_bank;
  reg  [9:0]        cmd_fifo_3_adr_col;
  reg  [16:0]       cmd_fifo_3_adr_cmdToken;
  reg               cmd_fifo_4_cmdtype;
  reg  [1:0]        cmd_fifo_4_adr_group;
  reg  [1:0]        cmd_fifo_4_adr_bank;
  reg  [9:0]        cmd_fifo_4_adr_col;
  reg  [16:0]       cmd_fifo_4_adr_cmdToken;
  reg               cmd_fifo_5_cmdtype;
  reg  [1:0]        cmd_fifo_5_adr_group;
  reg  [1:0]        cmd_fifo_5_adr_bank;
  reg  [9:0]        cmd_fifo_5_adr_col;
  reg  [16:0]       cmd_fifo_5_adr_cmdToken;
  reg               cmd_fifo_6_cmdtype;
  reg  [1:0]        cmd_fifo_6_adr_group;
  reg  [1:0]        cmd_fifo_6_adr_bank;
  reg  [9:0]        cmd_fifo_6_adr_col;
  reg  [16:0]       cmd_fifo_6_adr_cmdToken;
  reg               cmd_fifo_7_cmdtype;
  reg  [1:0]        cmd_fifo_7_adr_group;
  reg  [1:0]        cmd_fifo_7_adr_bank;
  reg  [9:0]        cmd_fifo_7_adr_col;
  reg  [16:0]       cmd_fifo_7_adr_cmdToken;
  reg               cmd_fifo_8_cmdtype;
  reg  [1:0]        cmd_fifo_8_adr_group;
  reg  [1:0]        cmd_fifo_8_adr_bank;
  reg  [9:0]        cmd_fifo_8_adr_col;
  reg  [16:0]       cmd_fifo_8_adr_cmdToken;
  reg               cmd_fifo_9_cmdtype;
  reg  [1:0]        cmd_fifo_9_adr_group;
  reg  [1:0]        cmd_fifo_9_adr_bank;
  reg  [9:0]        cmd_fifo_9_adr_col;
  reg  [16:0]       cmd_fifo_9_adr_cmdToken;
  reg               cmd_fifo_10_cmdtype;
  reg  [1:0]        cmd_fifo_10_adr_group;
  reg  [1:0]        cmd_fifo_10_adr_bank;
  reg  [9:0]        cmd_fifo_10_adr_col;
  reg  [16:0]       cmd_fifo_10_adr_cmdToken;
  reg               cmd_fifo_11_cmdtype;
  reg  [1:0]        cmd_fifo_11_adr_group;
  reg  [1:0]        cmd_fifo_11_adr_bank;
  reg  [9:0]        cmd_fifo_11_adr_col;
  reg  [16:0]       cmd_fifo_11_adr_cmdToken;
  reg               cmd_fifo_12_cmdtype;
  reg  [1:0]        cmd_fifo_12_adr_group;
  reg  [1:0]        cmd_fifo_12_adr_bank;
  reg  [9:0]        cmd_fifo_12_adr_col;
  reg  [16:0]       cmd_fifo_12_adr_cmdToken;
  reg               cmd_fifo_13_cmdtype;
  reg  [1:0]        cmd_fifo_13_adr_group;
  reg  [1:0]        cmd_fifo_13_adr_bank;
  reg  [9:0]        cmd_fifo_13_adr_col;
  reg  [16:0]       cmd_fifo_13_adr_cmdToken;
  reg               cmd_fifo_14_cmdtype;
  reg  [1:0]        cmd_fifo_14_adr_group;
  reg  [1:0]        cmd_fifo_14_adr_bank;
  reg  [9:0]        cmd_fifo_14_adr_col;
  reg  [16:0]       cmd_fifo_14_adr_cmdToken;
  reg               cmd_fifo_15_cmdtype;
  reg  [1:0]        cmd_fifo_15_adr_group;
  reg  [1:0]        cmd_fifo_15_adr_bank;
  reg  [9:0]        cmd_fifo_15_adr_col;
  reg  [16:0]       cmd_fifo_15_adr_cmdToken;
  reg  [4:0]        cmd_fifo_wptr;
  reg  [4:0]        cmd_fifo_rptr;
  wire              io_enq_ready_0 =
    {~(cmd_fifo_wptr[4]), cmd_fifo_wptr[3:0]} != cmd_fifo_rptr;
  wire              io_deq_valid_0 = cmd_fifo_wptr != cmd_fifo_rptr;
  wire [15:0]       _GEN =
    {{cmd_fifo_15_cmdtype},
     {cmd_fifo_14_cmdtype},
     {cmd_fifo_13_cmdtype},
     {cmd_fifo_12_cmdtype},
     {cmd_fifo_11_cmdtype},
     {cmd_fifo_10_cmdtype},
     {cmd_fifo_9_cmdtype},
     {cmd_fifo_8_cmdtype},
     {cmd_fifo_7_cmdtype},
     {cmd_fifo_6_cmdtype},
     {cmd_fifo_5_cmdtype},
     {cmd_fifo_4_cmdtype},
     {cmd_fifo_3_cmdtype},
     {cmd_fifo_2_cmdtype},
     {cmd_fifo_1_cmdtype},
     {cmd_fifo_0_cmdtype}};
  wire [15:0][1:0]  _GEN_0 =
    {{cmd_fifo_15_adr_group},
     {cmd_fifo_14_adr_group},
     {cmd_fifo_13_adr_group},
     {cmd_fifo_12_adr_group},
     {cmd_fifo_11_adr_group},
     {cmd_fifo_10_adr_group},
     {cmd_fifo_9_adr_group},
     {cmd_fifo_8_adr_group},
     {cmd_fifo_7_adr_group},
     {cmd_fifo_6_adr_group},
     {cmd_fifo_5_adr_group},
     {cmd_fifo_4_adr_group},
     {cmd_fifo_3_adr_group},
     {cmd_fifo_2_adr_group},
     {cmd_fifo_1_adr_group},
     {cmd_fifo_0_adr_group}};
  wire [15:0][1:0]  _GEN_1 =
    {{cmd_fifo_15_adr_bank},
     {cmd_fifo_14_adr_bank},
     {cmd_fifo_13_adr_bank},
     {cmd_fifo_12_adr_bank},
     {cmd_fifo_11_adr_bank},
     {cmd_fifo_10_adr_bank},
     {cmd_fifo_9_adr_bank},
     {cmd_fifo_8_adr_bank},
     {cmd_fifo_7_adr_bank},
     {cmd_fifo_6_adr_bank},
     {cmd_fifo_5_adr_bank},
     {cmd_fifo_4_adr_bank},
     {cmd_fifo_3_adr_bank},
     {cmd_fifo_2_adr_bank},
     {cmd_fifo_1_adr_bank},
     {cmd_fifo_0_adr_bank}};
  wire [15:0][9:0]  _GEN_2 =
    {{cmd_fifo_15_adr_col},
     {cmd_fifo_14_adr_col},
     {cmd_fifo_13_adr_col},
     {cmd_fifo_12_adr_col},
     {cmd_fifo_11_adr_col},
     {cmd_fifo_10_adr_col},
     {cmd_fifo_9_adr_col},
     {cmd_fifo_8_adr_col},
     {cmd_fifo_7_adr_col},
     {cmd_fifo_6_adr_col},
     {cmd_fifo_5_adr_col},
     {cmd_fifo_4_adr_col},
     {cmd_fifo_3_adr_col},
     {cmd_fifo_2_adr_col},
     {cmd_fifo_1_adr_col},
     {cmd_fifo_0_adr_col}};
  wire [15:0][16:0] _GEN_3 =
    {{cmd_fifo_15_adr_cmdToken},
     {cmd_fifo_14_adr_cmdToken},
     {cmd_fifo_13_adr_cmdToken},
     {cmd_fifo_12_adr_cmdToken},
     {cmd_fifo_11_adr_cmdToken},
     {cmd_fifo_10_adr_cmdToken},
     {cmd_fifo_9_adr_cmdToken},
     {cmd_fifo_8_adr_cmdToken},
     {cmd_fifo_7_adr_cmdToken},
     {cmd_fifo_6_adr_cmdToken},
     {cmd_fifo_5_adr_cmdToken},
     {cmd_fifo_4_adr_cmdToken},
     {cmd_fifo_3_adr_cmdToken},
     {cmd_fifo_2_adr_cmdToken},
     {cmd_fifo_1_adr_cmdToken},
     {cmd_fifo_0_adr_cmdToken}};
  reg  [15:0]       cmd_fifo_valid;
  wire              inc_cmd_fifo_rptr = io_deq_ready & io_deq_valid_0;
  wire              inc_cmd_fifo_wptr = io_enq_ready_0 & io_enq_valid;
  wire              _GEN_4 = _GEN[cmd_fifo_wptr[3:0]];
  wire [1:0]        _GEN_5 = _GEN_0[cmd_fifo_wptr[3:0]];
  wire [1:0]        _GEN_6 = _GEN_1[cmd_fifo_wptr[3:0]];
  wire [9:0]        _GEN_7 = _GEN_2[cmd_fifo_wptr[3:0]];
  wire [16:0]       _GEN_8 = _GEN_3[cmd_fifo_wptr[3:0]];
  wire              wdecode_vec_0 = cmd_fifo_wptr[3:0] == 4'h0;
  wire              wdecode_vec_1 = cmd_fifo_wptr[3:0] == 4'h1;
  wire              wdecode_vec_2 = cmd_fifo_wptr[3:0] == 4'h2;
  wire              wdecode_vec_3 = cmd_fifo_wptr[3:0] == 4'h3;
  wire              wdecode_vec_4 = cmd_fifo_wptr[3:0] == 4'h4;
  wire              wdecode_vec_5 = cmd_fifo_wptr[3:0] == 4'h5;
  wire              wdecode_vec_6 = cmd_fifo_wptr[3:0] == 4'h6;
  wire              wdecode_vec_7 = cmd_fifo_wptr[3:0] == 4'h7;
  wire              wdecode_vec_8 = cmd_fifo_wptr[3:0] == 4'h8;
  wire              wdecode_vec_9 = cmd_fifo_wptr[3:0] == 4'h9;
  wire              wdecode_vec_10 = cmd_fifo_wptr[3:0] == 4'hA;
  wire              wdecode_vec_11 = cmd_fifo_wptr[3:0] == 4'hB;
  wire              wdecode_vec_12 = cmd_fifo_wptr[3:0] == 4'hC;
  wire              wdecode_vec_13 = cmd_fifo_wptr[3:0] == 4'hD;
  wire              wdecode_vec_14 = cmd_fifo_wptr[3:0] == 4'hE;
  always @(posedge clock) begin
    if (wdecode_vec_0) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_0_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_0_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_0_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_0_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_0_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_0_cmdtype <= _GEN_4;
        cmd_fifo_0_adr_group <= _GEN_5;
        cmd_fifo_0_adr_bank <= _GEN_6;
        cmd_fifo_0_adr_col <= _GEN_7;
        cmd_fifo_0_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_1) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_1_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_1_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_1_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_1_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_1_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_1_cmdtype <= _GEN_4;
        cmd_fifo_1_adr_group <= _GEN_5;
        cmd_fifo_1_adr_bank <= _GEN_6;
        cmd_fifo_1_adr_col <= _GEN_7;
        cmd_fifo_1_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_2) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_2_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_2_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_2_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_2_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_2_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_2_cmdtype <= _GEN_4;
        cmd_fifo_2_adr_group <= _GEN_5;
        cmd_fifo_2_adr_bank <= _GEN_6;
        cmd_fifo_2_adr_col <= _GEN_7;
        cmd_fifo_2_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_3) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_3_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_3_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_3_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_3_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_3_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_3_cmdtype <= _GEN_4;
        cmd_fifo_3_adr_group <= _GEN_5;
        cmd_fifo_3_adr_bank <= _GEN_6;
        cmd_fifo_3_adr_col <= _GEN_7;
        cmd_fifo_3_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_4) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_4_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_4_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_4_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_4_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_4_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_4_cmdtype <= _GEN_4;
        cmd_fifo_4_adr_group <= _GEN_5;
        cmd_fifo_4_adr_bank <= _GEN_6;
        cmd_fifo_4_adr_col <= _GEN_7;
        cmd_fifo_4_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_5) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_5_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_5_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_5_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_5_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_5_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_5_cmdtype <= _GEN_4;
        cmd_fifo_5_adr_group <= _GEN_5;
        cmd_fifo_5_adr_bank <= _GEN_6;
        cmd_fifo_5_adr_col <= _GEN_7;
        cmd_fifo_5_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_6) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_6_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_6_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_6_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_6_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_6_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_6_cmdtype <= _GEN_4;
        cmd_fifo_6_adr_group <= _GEN_5;
        cmd_fifo_6_adr_bank <= _GEN_6;
        cmd_fifo_6_adr_col <= _GEN_7;
        cmd_fifo_6_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_7) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_7_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_7_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_7_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_7_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_7_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_7_cmdtype <= _GEN_4;
        cmd_fifo_7_adr_group <= _GEN_5;
        cmd_fifo_7_adr_bank <= _GEN_6;
        cmd_fifo_7_adr_col <= _GEN_7;
        cmd_fifo_7_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_8) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_8_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_8_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_8_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_8_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_8_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_8_cmdtype <= _GEN_4;
        cmd_fifo_8_adr_group <= _GEN_5;
        cmd_fifo_8_adr_bank <= _GEN_6;
        cmd_fifo_8_adr_col <= _GEN_7;
        cmd_fifo_8_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_9) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_9_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_9_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_9_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_9_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_9_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_9_cmdtype <= _GEN_4;
        cmd_fifo_9_adr_group <= _GEN_5;
        cmd_fifo_9_adr_bank <= _GEN_6;
        cmd_fifo_9_adr_col <= _GEN_7;
        cmd_fifo_9_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_10) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_10_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_10_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_10_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_10_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_10_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_10_cmdtype <= _GEN_4;
        cmd_fifo_10_adr_group <= _GEN_5;
        cmd_fifo_10_adr_bank <= _GEN_6;
        cmd_fifo_10_adr_col <= _GEN_7;
        cmd_fifo_10_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_11) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_11_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_11_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_11_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_11_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_11_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_11_cmdtype <= _GEN_4;
        cmd_fifo_11_adr_group <= _GEN_5;
        cmd_fifo_11_adr_bank <= _GEN_6;
        cmd_fifo_11_adr_col <= _GEN_7;
        cmd_fifo_11_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_12) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_12_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_12_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_12_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_12_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_12_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_12_cmdtype <= _GEN_4;
        cmd_fifo_12_adr_group <= _GEN_5;
        cmd_fifo_12_adr_bank <= _GEN_6;
        cmd_fifo_12_adr_col <= _GEN_7;
        cmd_fifo_12_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_13) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_13_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_13_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_13_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_13_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_13_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_13_cmdtype <= _GEN_4;
        cmd_fifo_13_adr_group <= _GEN_5;
        cmd_fifo_13_adr_bank <= _GEN_6;
        cmd_fifo_13_adr_col <= _GEN_7;
        cmd_fifo_13_adr_cmdToken <= _GEN_8;
      end
    end
    if (wdecode_vec_14) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_14_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_14_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_14_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_14_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_14_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_14_cmdtype <= _GEN_4;
        cmd_fifo_14_adr_group <= _GEN_5;
        cmd_fifo_14_adr_bank <= _GEN_6;
        cmd_fifo_14_adr_col <= _GEN_7;
        cmd_fifo_14_adr_cmdToken <= _GEN_8;
      end
    end
    if (&(cmd_fifo_wptr[3:0])) begin
      if (inc_cmd_fifo_wptr) begin
        cmd_fifo_15_cmdtype <= io_enq_bits_cmdtype;
        cmd_fifo_15_adr_group <= io_enq_bits_adr_group;
        cmd_fifo_15_adr_bank <= io_enq_bits_adr_bank;
        cmd_fifo_15_adr_col <= io_enq_bits_adr_col;
        cmd_fifo_15_adr_cmdToken <= io_enq_bits_adr_cmdToken;
      end
      else begin
        cmd_fifo_15_cmdtype <= _GEN_4;
        cmd_fifo_15_adr_group <= _GEN_5;
        cmd_fifo_15_adr_bank <= _GEN_6;
        cmd_fifo_15_adr_col <= _GEN_7;
        cmd_fifo_15_adr_cmdToken <= _GEN_8;
      end
    end
    if (reset) begin
      cmd_fifo_wptr <= 5'h0;
      cmd_fifo_rptr <= 5'h0;
      cmd_fifo_valid <= 16'h0;
    end
    else begin
      cmd_fifo_wptr <= cmd_fifo_wptr + {4'h0, inc_cmd_fifo_wptr};
      cmd_fifo_rptr <= cmd_fifo_rptr + {4'h0, inc_cmd_fifo_rptr};
      cmd_fifo_valid <=
        ~({&(cmd_fifo_rptr[3:0]),
           cmd_fifo_rptr[3:0] == 4'hE,
           cmd_fifo_rptr[3:0] == 4'hD,
           cmd_fifo_rptr[3:0] == 4'hC,
           cmd_fifo_rptr[3:0] == 4'hB,
           cmd_fifo_rptr[3:0] == 4'hA,
           cmd_fifo_rptr[3:0] == 4'h9,
           cmd_fifo_rptr[3:0] == 4'h8,
           cmd_fifo_rptr[3:0] == 4'h7,
           cmd_fifo_rptr[3:0] == 4'h6,
           cmd_fifo_rptr[3:0] == 4'h5,
           cmd_fifo_rptr[3:0] == 4'h4,
           cmd_fifo_rptr[3:0] == 4'h3,
           cmd_fifo_rptr[3:0] == 4'h2,
           cmd_fifo_rptr[3:0] == 4'h1,
           cmd_fifo_rptr[3:0] == 4'h0} & {16{inc_cmd_fifo_rptr}})
        & ({&(cmd_fifo_wptr[3:0]),
            wdecode_vec_14,
            wdecode_vec_13,
            wdecode_vec_12,
            wdecode_vec_11,
            wdecode_vec_10,
            wdecode_vec_9,
            wdecode_vec_8,
            wdecode_vec_7,
            wdecode_vec_6,
            wdecode_vec_5,
            wdecode_vec_4,
            wdecode_vec_3,
            wdecode_vec_2,
            wdecode_vec_1,
            wdecode_vec_0} & {16{inc_cmd_fifo_wptr}} | cmd_fifo_valid);
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:26];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1B; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        cmd_fifo_0_cmdtype = _RANDOM[5'h0][0];
        cmd_fifo_0_adr_group = _RANDOM[5'h0][3:2];
        cmd_fifo_0_adr_bank = _RANDOM[5'h0][5:4];
        cmd_fifo_0_adr_col = {_RANDOM[5'h0][31:24], _RANDOM[5'h1][1:0]};
        cmd_fifo_0_adr_cmdToken = _RANDOM[5'h1][18:2];
        cmd_fifo_1_cmdtype = _RANDOM[5'h1][19];
        cmd_fifo_1_adr_group = _RANDOM[5'h1][22:21];
        cmd_fifo_1_adr_bank = _RANDOM[5'h1][24:23];
        cmd_fifo_1_adr_col = _RANDOM[5'h2][20:11];
        cmd_fifo_1_adr_cmdToken = {_RANDOM[5'h2][31:21], _RANDOM[5'h3][5:0]};
        cmd_fifo_2_cmdtype = _RANDOM[5'h3][6];
        cmd_fifo_2_adr_group = _RANDOM[5'h3][9:8];
        cmd_fifo_2_adr_bank = _RANDOM[5'h3][11:10];
        cmd_fifo_2_adr_col = {_RANDOM[5'h3][31:30], _RANDOM[5'h4][7:0]};
        cmd_fifo_2_adr_cmdToken = _RANDOM[5'h4][24:8];
        cmd_fifo_3_cmdtype = _RANDOM[5'h4][25];
        cmd_fifo_3_adr_group = _RANDOM[5'h4][28:27];
        cmd_fifo_3_adr_bank = _RANDOM[5'h4][30:29];
        cmd_fifo_3_adr_col = _RANDOM[5'h5][26:17];
        cmd_fifo_3_adr_cmdToken = {_RANDOM[5'h5][31:27], _RANDOM[5'h6][11:0]};
        cmd_fifo_4_cmdtype = _RANDOM[5'h6][12];
        cmd_fifo_4_adr_group = _RANDOM[5'h6][15:14];
        cmd_fifo_4_adr_bank = _RANDOM[5'h6][17:16];
        cmd_fifo_4_adr_col = _RANDOM[5'h7][13:4];
        cmd_fifo_4_adr_cmdToken = _RANDOM[5'h7][30:14];
        cmd_fifo_5_cmdtype = _RANDOM[5'h7][31];
        cmd_fifo_5_adr_group = _RANDOM[5'h8][2:1];
        cmd_fifo_5_adr_bank = _RANDOM[5'h8][4:3];
        cmd_fifo_5_adr_col = {_RANDOM[5'h8][31:23], _RANDOM[5'h9][0]};
        cmd_fifo_5_adr_cmdToken = _RANDOM[5'h9][17:1];
        cmd_fifo_6_cmdtype = _RANDOM[5'h9][18];
        cmd_fifo_6_adr_group = _RANDOM[5'h9][21:20];
        cmd_fifo_6_adr_bank = _RANDOM[5'h9][23:22];
        cmd_fifo_6_adr_col = _RANDOM[5'hA][19:10];
        cmd_fifo_6_adr_cmdToken = {_RANDOM[5'hA][31:20], _RANDOM[5'hB][4:0]};
        cmd_fifo_7_cmdtype = _RANDOM[5'hB][5];
        cmd_fifo_7_adr_group = _RANDOM[5'hB][8:7];
        cmd_fifo_7_adr_bank = _RANDOM[5'hB][10:9];
        cmd_fifo_7_adr_col = {_RANDOM[5'hB][31:29], _RANDOM[5'hC][6:0]};
        cmd_fifo_7_adr_cmdToken = _RANDOM[5'hC][23:7];
        cmd_fifo_8_cmdtype = _RANDOM[5'hC][24];
        cmd_fifo_8_adr_group = _RANDOM[5'hC][27:26];
        cmd_fifo_8_adr_bank = _RANDOM[5'hC][29:28];
        cmd_fifo_8_adr_col = _RANDOM[5'hD][25:16];
        cmd_fifo_8_adr_cmdToken = {_RANDOM[5'hD][31:26], _RANDOM[5'hE][10:0]};
        cmd_fifo_9_cmdtype = _RANDOM[5'hE][11];
        cmd_fifo_9_adr_group = _RANDOM[5'hE][14:13];
        cmd_fifo_9_adr_bank = _RANDOM[5'hE][16:15];
        cmd_fifo_9_adr_col = _RANDOM[5'hF][12:3];
        cmd_fifo_9_adr_cmdToken = _RANDOM[5'hF][29:13];
        cmd_fifo_10_cmdtype = _RANDOM[5'hF][30];
        cmd_fifo_10_adr_group = _RANDOM[5'h10][1:0];
        cmd_fifo_10_adr_bank = _RANDOM[5'h10][3:2];
        cmd_fifo_10_adr_col = _RANDOM[5'h10][31:22];
        cmd_fifo_10_adr_cmdToken = _RANDOM[5'h11][16:0];
        cmd_fifo_11_cmdtype = _RANDOM[5'h11][17];
        cmd_fifo_11_adr_group = _RANDOM[5'h11][20:19];
        cmd_fifo_11_adr_bank = _RANDOM[5'h11][22:21];
        cmd_fifo_11_adr_col = _RANDOM[5'h12][18:9];
        cmd_fifo_11_adr_cmdToken = {_RANDOM[5'h12][31:19], _RANDOM[5'h13][3:0]};
        cmd_fifo_12_cmdtype = _RANDOM[5'h13][4];
        cmd_fifo_12_adr_group = _RANDOM[5'h13][7:6];
        cmd_fifo_12_adr_bank = _RANDOM[5'h13][9:8];
        cmd_fifo_12_adr_col = {_RANDOM[5'h13][31:28], _RANDOM[5'h14][5:0]};
        cmd_fifo_12_adr_cmdToken = _RANDOM[5'h14][22:6];
        cmd_fifo_13_cmdtype = _RANDOM[5'h14][23];
        cmd_fifo_13_adr_group = _RANDOM[5'h14][26:25];
        cmd_fifo_13_adr_bank = _RANDOM[5'h14][28:27];
        cmd_fifo_13_adr_col = _RANDOM[5'h15][24:15];
        cmd_fifo_13_adr_cmdToken = {_RANDOM[5'h15][31:25], _RANDOM[5'h16][9:0]};
        cmd_fifo_14_cmdtype = _RANDOM[5'h16][10];
        cmd_fifo_14_adr_group = _RANDOM[5'h16][13:12];
        cmd_fifo_14_adr_bank = _RANDOM[5'h16][15:14];
        cmd_fifo_14_adr_col = _RANDOM[5'h17][11:2];
        cmd_fifo_14_adr_cmdToken = _RANDOM[5'h17][28:12];
        cmd_fifo_15_cmdtype = _RANDOM[5'h17][29];
        cmd_fifo_15_adr_group = {_RANDOM[5'h17][31], _RANDOM[5'h18][0]};
        cmd_fifo_15_adr_bank = _RANDOM[5'h18][2:1];
        cmd_fifo_15_adr_col = _RANDOM[5'h18][30:21];
        cmd_fifo_15_adr_cmdToken = {_RANDOM[5'h18][31], _RANDOM[5'h19][15:0]};
        cmd_fifo_wptr = _RANDOM[5'h19][20:16];
        cmd_fifo_rptr = _RANDOM[5'h19][25:21];
        cmd_fifo_valid = {_RANDOM[5'h19][31:26], _RANDOM[5'h1A][9:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = io_enq_ready_0;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits_cmdtype = _GEN[cmd_fifo_rptr[3:0]];
  assign io_deq_bits_adr_group = _GEN_0[cmd_fifo_rptr[3:0]];
  assign io_deq_bits_adr_bank = _GEN_1[cmd_fifo_rptr[3:0]];
  assign io_deq_bits_adr_col = _GEN_2[cmd_fifo_rptr[3:0]];
  assign io_deq_bits_adr_cmdToken = _GEN_3[cmd_fifo_rptr[3:0]];
  assign io_Query_Querye_empty =
    ({io_Query_QueryBG == cmd_fifo_15_adr_group
        & io_Query_QueryBA == cmd_fifo_15_adr_bank,
      io_Query_QueryBG == cmd_fifo_14_adr_group
        & io_Query_QueryBA == cmd_fifo_14_adr_bank,
      io_Query_QueryBG == cmd_fifo_13_adr_group
        & io_Query_QueryBA == cmd_fifo_13_adr_bank,
      io_Query_QueryBG == cmd_fifo_12_adr_group
        & io_Query_QueryBA == cmd_fifo_12_adr_bank,
      io_Query_QueryBG == cmd_fifo_11_adr_group
        & io_Query_QueryBA == cmd_fifo_11_adr_bank,
      io_Query_QueryBG == cmd_fifo_10_adr_group
        & io_Query_QueryBA == cmd_fifo_10_adr_bank,
      io_Query_QueryBG == cmd_fifo_9_adr_group & io_Query_QueryBA == cmd_fifo_9_adr_bank,
      io_Query_QueryBG == cmd_fifo_8_adr_group & io_Query_QueryBA == cmd_fifo_8_adr_bank,
      io_Query_QueryBG == cmd_fifo_7_adr_group & io_Query_QueryBA == cmd_fifo_7_adr_bank,
      io_Query_QueryBG == cmd_fifo_6_adr_group & io_Query_QueryBA == cmd_fifo_6_adr_bank,
      io_Query_QueryBG == cmd_fifo_5_adr_group & io_Query_QueryBA == cmd_fifo_5_adr_bank,
      io_Query_QueryBG == cmd_fifo_4_adr_group & io_Query_QueryBA == cmd_fifo_4_adr_bank,
      io_Query_QueryBG == cmd_fifo_3_adr_group & io_Query_QueryBA == cmd_fifo_3_adr_bank,
      io_Query_QueryBG == cmd_fifo_2_adr_group & io_Query_QueryBA == cmd_fifo_2_adr_bank,
      io_Query_QueryBG == cmd_fifo_1_adr_group & io_Query_QueryBA == cmd_fifo_1_adr_bank,
      io_Query_QueryBG == cmd_fifo_0_adr_group & io_Query_QueryBA == cmd_fifo_0_adr_bank}
     & cmd_fifo_valid) == 16'h0;
endmodule

module RequestGenerate(
  input         clock,
                reset,
                io_calDone,
  input  [1:0]  io_ID,
                io_pre_policy,
  input  [15:0] io_closepage_time_init,
  output        io_trans_ready,
  input         io_trans_valid,
  input  [2:0]  io_trans_bits_cmdtype,
  input         io_trans_bits_adr_rank,
  input  [1:0]  io_trans_bits_adr_group,
                io_trans_bits_adr_bank,
  input  [17:0] io_trans_bits_adr_row,
  input  [9:0]  io_trans_bits_adr_col,
  input  [16:0] io_trans_bits_adr_cmdToken,
  input         io_ReflinkRG_slave_flowReq,
                io_ReflinkRG_slave_releaseReq,
                io_ReflinkRG_slave_preIss,
  output        io_ReflinkRG_master_flowAck_0,
  input         io_TClinkRG_tRRD_L_OK,
                io_TClinkRG_tRRD_S_OK,
                io_TClinkRG_tFAW_OK,
                io_TClinkRG_tRAS_OK_0,
                io_TClinkRG_tRAS_OK_1,
                io_TClinkRG_tRAS_OK_2,
                io_TClinkRG_tRAS_OK_3,
                io_TClinkRG_tRCD_OK_0,
                io_TClinkRG_tRCD_OK_1,
                io_TClinkRG_tRCD_OK_2,
                io_TClinkRG_tRCD_OK_3,
                io_TClinkRG_tRP_OK_0,
                io_TClinkRG_tRP_OK_1,
                io_TClinkRG_tRP_OK_2,
                io_TClinkRG_tRP_OK_3,
                io_TClinkRG_tCCD_L_OK,
                io_TClinkRG_tCCD_S_OK,
                io_TClinkRG_tWR_OK_0,
                io_TClinkRG_tWR_OK_1,
                io_TClinkRG_tWR_OK_2,
                io_TClinkRG_tWR_OK_3,
                io_TClinkRG_tRTW_OK,
                io_TClinkRG_tRTP_OK_0,
                io_TClinkRG_tRTP_OK_1,
                io_TClinkRG_tRTP_OK_2,
                io_TClinkRG_tRTP_OK_3,
                io_TClinkRG_tWTR_L_OK,
                io_TClinkRG_tWTR_S_OK,
                io_arblinkRG_in_Pre_PopOK,
                io_arblinkRG_in_Cas_PopOK,
                io_arblinkRG_in_Act_PopOK,
  output        io_arblinkRG_out_Cas_PopReq,
                io_arblinkRG_out_Act_PopReq,
                io_arblinkRG_out_Pre_PopReq,
                io_arblinkRG_out_preReq,
                io_arblinkRG_out_actReq,
                io_arblinkRG_out_readReq,
                io_arblinkRG_out_writeReq,
  output [1:0]  io_arblinkRG_out_actAdr_group,
                io_arblinkRG_out_actAdr_bank,
  output [17:0] io_arblinkRG_out_actAdr_row,
  output [1:0]  io_arblinkRG_out_preAdr_group,
                io_arblinkRG_out_preAdr_bank,
  output [17:0] io_arblinkRG_out_preAdr_row,
  output [1:0]  io_arblinkRG_out_casAdr_group,
                io_arblinkRG_out_casAdr_bank,
  output [9:0]  io_arblinkRG_out_casAdr_col,
  output [16:0] io_arblinkRG_out_casAdr_cmdToken,
  output        io_RG2TC_act_req,
  output [1:0]  io_RG2TC_act_ba,
  output        io_RG2TC_write_req,
                io_RG2TC_read_req,
  output [1:0]  io_RG2TC_cas_ba,
  output        io_RG2TC_pre_req,
  output [1:0]  io_RG2TC_pre_ba,
  input         io_WM2RG_write_phase0,
                io_WM2RG_write_phase1,
                io_WM2RG_read_phase0,
                io_WM2RG_read_phase1,
                io_WM2RG_act_phase0,
                io_WM2RG_act_phase1,
  input  [1:0]  io_WM2RG_dfi_phase0_bg,
                io_WM2RG_dfi_phase1_bg,
  output [2:0]  io_debug_state
);

  wire             io_arblinkRG_out_writeReq_0;
  wire             io_arblinkRG_out_readReq_0;
  wire             _cmd_fifo_io_enq_ready;
  wire             _cmd_fifo_io_deq_valid;
  wire             _cmd_fifo_io_deq_bits_cmdtype;
  wire [1:0]       _cmd_fifo_io_deq_bits_adr_group;
  wire [1:0]       _cmd_fifo_io_deq_bits_adr_bank;
  wire             _cmd_fifo_io_Query_Querye_empty;
  wire             _txn_fifo_io_enq_ready;
  wire             _txn_fifo_io_deq_valid;
  wire             _txn_fifo_io_deq_bits_cmdtype;
  wire [1:0]       _txn_fifo_io_deq_bits_adr_group;
  wire [1:0]       _txn_fifo_io_deq_bits_adr_bank;
  wire [17:0]      _txn_fifo_io_deq_bits_adr_row;
  wire [9:0]       _txn_fifo_io_deq_bits_adr_col;
  wire [16:0]      _txn_fifo_io_deq_bits_adr_cmdToken;
  reg  [2:0]       state;
  reg  [1:0]       Last_casBG;
  reg  [1:0]       Last_actBG;
  reg  [18:0]      page_0;
  reg  [18:0]      page_1;
  reg  [18:0]      page_2;
  reg  [18:0]      page_3;
  reg  [15:0]      closepage_timer_0;
  reg  [15:0]      closepage_timer_1;
  reg  [15:0]      closepage_timer_2;
  reg  [15:0]      closepage_timer_3;
  wire             _GEN = state == 3'h5;
  wire             _closepage_flag_T = closepage_timer_0 == 16'h0;
  wire             _closepage_flag_T_4 = closepage_timer_1 == 16'h0;
  wire             _closepage_flag_T_9 = closepage_timer_2 == 16'h0;
  wire             _closepage_flag_T_14 = closepage_timer_3 == 16'h0;
  wire             _cmd_fifo_io_enq_valid_T = state == 3'h4;
  wire             _cmd_fifo_io_enq_valid_T_1 =
    _txn_fifo_io_deq_valid & _cmd_fifo_io_enq_valid_T;
  wire [1:0]       _GEN_0 =
    _closepage_flag_T_4 ? 2'h1 : _closepage_flag_T_9 ? 2'h2 : {2{_closepage_flag_T_14}};
  wire [1:0]       _GEN_1 = _closepage_flag_T ? 2'h0 : _GEN_0;
  wire             _GEN_2 = state == 3'h2;
  wire             _io_arblinkRG_out_Cas_PopReq_T_3 =
    _cmd_fifo_io_deq_bits_adr_group == Last_casBG;
  wire [3:0]       _GEN_3 =
    {{io_TClinkRG_tRCD_OK_3},
     {io_TClinkRG_tRCD_OK_2},
     {io_TClinkRG_tRCD_OK_1},
     {io_TClinkRG_tRCD_OK_0}};
  wire             _GEN_4 = _GEN_3[_cmd_fifo_io_deq_bits_adr_bank];
  wire             io_arblinkRG_out_Cas_PopReq_0 =
    _cmd_fifo_io_deq_bits_cmdtype
      ? _cmd_fifo_io_deq_bits_cmdtype
        & (_cmd_fifo_io_deq_bits_adr_group == Last_casBG
             ? io_TClinkRG_tCCD_L_OK
             : io_TClinkRG_tCCD_S_OK) & _GEN_4 & io_TClinkRG_tRTW_OK
        & _cmd_fifo_io_deq_valid
      : (_io_arblinkRG_out_Cas_PopReq_T_3 ? io_TClinkRG_tWTR_L_OK : io_TClinkRG_tWTR_S_OK)
        & _GEN_4
        & (_io_arblinkRG_out_Cas_PopReq_T_3
             ? io_TClinkRG_tCCD_L_OK
             : io_TClinkRG_tCCD_S_OK) & _cmd_fifo_io_deq_valid
        & (_cmd_fifo_io_deq_bits_adr_group != io_ID | io_TClinkRG_tWTR_L_OK);
  wire [3:0]       _GEN_5 =
    {{io_TClinkRG_tRP_OK_3},
     {io_TClinkRG_tRP_OK_2},
     {io_TClinkRG_tRP_OK_1},
     {io_TClinkRG_tRP_OK_0}};
  wire             io_arblinkRG_out_Act_PopReq_0 =
    state == 3'h3
    & (_txn_fifo_io_deq_bits_adr_group == Last_actBG
         ? io_TClinkRG_tRRD_L_OK
         : io_TClinkRG_tRRD_S_OK) & io_TClinkRG_tFAW_OK
    & _GEN_5[_txn_fifo_io_deq_bits_adr_bank];
  wire [3:0]       _GEN_6 =
    {{io_TClinkRG_tRTP_OK_3},
     {io_TClinkRG_tRTP_OK_2},
     {io_TClinkRG_tRTP_OK_1},
     {io_TClinkRG_tRTP_OK_0}};
  wire [3:0]       _GEN_7 =
    {{io_TClinkRG_tRAS_OK_3},
     {io_TClinkRG_tRAS_OK_2},
     {io_TClinkRG_tRAS_OK_1},
     {io_TClinkRG_tRAS_OK_0}};
  wire [3:0]       _GEN_8 =
    {{io_TClinkRG_tWR_OK_3},
     {io_TClinkRG_tWR_OK_2},
     {io_TClinkRG_tWR_OK_1},
     {io_TClinkRG_tWR_OK_0}};
  wire             io_arblinkRG_out_Pre_PopReq_0 =
    _GEN_2
      ? _GEN_6[_txn_fifo_io_deq_bits_adr_bank] & _GEN_7[_txn_fifo_io_deq_bits_adr_bank]
        & _GEN_8[_txn_fifo_io_deq_bits_adr_bank]
      : _GEN
        & (_closepage_flag_T
             ? io_TClinkRG_tRTP_OK_0 & io_TClinkRG_tRAS_OK_0 & io_TClinkRG_tWR_OK_0
               & _cmd_fifo_io_Query_Querye_empty
             : _closepage_flag_T_4
                 ? io_TClinkRG_tRTP_OK_1 & io_TClinkRG_tRAS_OK_1 & io_TClinkRG_tWR_OK_1
                   & _cmd_fifo_io_Query_Querye_empty
                 : _closepage_flag_T_9
                     ? io_TClinkRG_tRTP_OK_2 & io_TClinkRG_tRAS_OK_2
                       & io_TClinkRG_tWR_OK_2 & _cmd_fifo_io_Query_Querye_empty
                     : _closepage_flag_T_14 & io_TClinkRG_tRTP_OK_3
                       & io_TClinkRG_tRAS_OK_3 & io_TClinkRG_tWR_OK_3
                       & _cmd_fifo_io_Query_Querye_empty);
  assign io_arblinkRG_out_readReq_0 =
    ~_cmd_fifo_io_deq_bits_cmdtype & _cmd_fifo_io_deq_valid & io_arblinkRG_in_Cas_PopOK
    & io_arblinkRG_out_Cas_PopReq_0;
  assign io_arblinkRG_out_writeReq_0 =
    _cmd_fifo_io_deq_bits_cmdtype & _cmd_fifo_io_deq_valid & io_arblinkRG_in_Cas_PopOK
    & io_arblinkRG_out_Cas_PopReq_0;
  wire             io_arblinkRG_out_actReq_0 =
    io_arblinkRG_in_Act_PopOK & io_arblinkRG_out_Act_PopReq_0;
  wire             io_arblinkRG_out_preReq_0 =
    io_arblinkRG_in_Pre_PopOK & io_arblinkRG_out_Pre_PopReq_0;
  wire [1:0]       io_arblinkRG_out_preAdr_bank_0 =
    _GEN_2 ? _txn_fifo_io_deq_bits_adr_bank : ~_GEN | _closepage_flag_T ? 2'h0 : _GEN_0;
  wire             _GEN_9 = io_calDone & ~io_ReflinkRG_slave_flowReq;
  wire             _GEN_10 = _GEN_9 & _txn_fifo_io_deq_valid;
  wire [3:0][18:0] _GEN_11 = {{page_3}, {page_2}, {page_1}, {page_0}};
  wire [18:0]      _GEN_12 = _GEN_11[_txn_fifo_io_deq_bits_adr_bank];
  wire             closepage_flag =
    _closepage_flag_T & page_0[0] | _closepage_flag_T_4 & page_1[0] | _closepage_flag_T_9
    & page_2[0] | _closepage_flag_T_14 & page_3[0];
  wire [18:0]      _page_T = {_txn_fifo_io_deq_bits_adr_row, 1'h0};
  wire [18:0]      _page_T_1 = {_txn_fifo_io_deq_bits_adr_row, 1'h1};
  wire [18:0]      _page_3_T = {_txn_fifo_io_deq_bits_adr_row, 1'h0};
  wire             _GEN_13 = state == 3'h1;
  wire             _GEN_14 = io_pre_policy == 2'h1;
  wire             _GEN_15 = _txn_fifo_io_deq_bits_adr_bank == 2'h0;
  wire             _GEN_16 = _txn_fifo_io_deq_bits_adr_bank == 2'h1;
  wire             _GEN_17 = _txn_fifo_io_deq_bits_adr_bank == 2'h2;
  wire             _GEN_18 = page_0[0] & (|closepage_timer_0);
  wire             _GEN_19 = page_1[0] & (|closepage_timer_1);
  wire             _GEN_20 = page_2[0] & (|closepage_timer_2);
  wire             _GEN_21 = page_3[0] & (|closepage_timer_3);
  wire             _GEN_22 = io_arblinkRG_out_preAdr_bank_0 == 2'h0;
  wire             _GEN_23 = io_arblinkRG_out_preAdr_bank_0 == 2'h1;
  wire             _GEN_24 = io_arblinkRG_out_preAdr_bank_0 == 2'h2;
  wire             _GEN_25 = state == 3'h3;
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h1;
      Last_casBG <= 2'h0;
      Last_actBG <= 2'h0;
      page_0 <= 19'h0;
      page_1 <= 19'h0;
      page_2 <= 19'h0;
      page_3 <= 19'h0;
      closepage_timer_0 <= 16'h0;
      closepage_timer_1 <= 16'h0;
      closepage_timer_2 <= 16'h0;
      closepage_timer_3 <= 16'h0;
    end
    else begin
      if (|state) begin
        if (_GEN_13)
          state <=
            io_calDone & io_ReflinkRG_slave_flowReq & ~_cmd_fifo_io_deq_valid
              ? 3'h0
              : _GEN_10 & _cmd_fifo_io_enq_ready
                & _txn_fifo_io_deq_bits_adr_row == _GEN_12[18:1] & _GEN_12[0]
                  ? 3'h4
                  : _GEN_10 & ~(_GEN_12[0])
                      ? 3'h3
                      : _GEN_10 & _txn_fifo_io_deq_bits_adr_row != _GEN_12[18:1]
                        & _GEN_12[0] & _cmd_fifo_io_Query_Querye_empty
                          ? 3'h2
                          : {_GEN_9 & _GEN_14 & closepage_flag, 2'h1};
        else if (_GEN_2) begin
          if (io_arblinkRG_out_preReq_0)
            state <= 3'h1;
          else
            state <= 3'h2;
        end
        else if (_GEN_25) begin
          if (io_arblinkRG_out_actReq_0)
            state <= 3'h4;
          else
            state <= 3'h3;
        end
        else if (state == 3'h4) begin
          if (_cmd_fifo_io_enq_ready & _cmd_fifo_io_enq_valid_T_1)
            state <= 3'h1;
          else
            state <= 3'h4;
        end
        else
          state <= {_GEN & closepage_flag, 2'h1};
      end
      else
        state <= {2'h0, io_ReflinkRG_slave_releaseReq};
      if (io_WM2RG_read_phase1 | io_WM2RG_write_phase1)
        Last_casBG <= io_WM2RG_dfi_phase1_bg;
      else if (io_WM2RG_read_phase0 | io_WM2RG_write_phase0)
        Last_casBG <= io_WM2RG_dfi_phase0_bg;
      if (io_WM2RG_act_phase1)
        Last_actBG <= io_WM2RG_dfi_phase1_bg;
      else if (io_WM2RG_act_phase0)
        Last_actBG <= io_WM2RG_dfi_phase0_bg;
      if (_GEN_2 & io_arblinkRG_out_preReq_0) begin
        if (_GEN_15)
          page_0 <= _page_T;
        if (_GEN_16)
          page_1 <= _page_T;
        if (_GEN_17)
          page_2 <= _page_T;
        if (&_txn_fifo_io_deq_bits_adr_bank)
          page_3 <= _page_T;
      end
      else if (_GEN_25 & io_arblinkRG_out_actReq_0) begin
        if (_GEN_15)
          page_0 <= _page_T_1;
        if (_GEN_16)
          page_1 <= _page_T_1;
        if (_GEN_17)
          page_2 <= _page_T_1;
        if (&_txn_fifo_io_deq_bits_adr_bank)
          page_3 <= _page_T_1;
      end
      else if (|state) begin
        if (_GEN & io_arblinkRG_out_preReq_0 & _GEN_22)
          page_0 <= 19'h0;
        if (_GEN & io_arblinkRG_out_preReq_0 & _GEN_23)
          page_1 <= 19'h0;
        if (_GEN & io_arblinkRG_out_preReq_0 & _GEN_24)
          page_2 <= 19'h0;
        if (_GEN & io_arblinkRG_out_preReq_0 & (&io_arblinkRG_out_preAdr_bank_0))
          page_3 <= 19'h0;
      end
      else if (io_ReflinkRG_slave_preIss) begin
        page_0 <= _page_3_T;
        page_1 <= _page_3_T;
        page_2 <= _page_3_T;
        page_3 <= _page_3_T;
      end
      if (_GEN_13 & _GEN_14) begin
        if (_txn_fifo_io_deq_valid) begin
          if (_GEN_18)
            closepage_timer_0 <= closepage_timer_0 - 16'h1;
          else if (_GEN_15)
            closepage_timer_0 <= io_closepage_time_init;
          if (_GEN_19)
            closepage_timer_1 <= closepage_timer_1 - 16'h1;
          else if (_GEN_16)
            closepage_timer_1 <= io_closepage_time_init;
          if (_GEN_20)
            closepage_timer_2 <= closepage_timer_2 - 16'h1;
          else if (_GEN_17)
            closepage_timer_2 <= io_closepage_time_init;
          if (_GEN_21)
            closepage_timer_3 <= closepage_timer_3 - 16'h1;
          else if (&_txn_fifo_io_deq_bits_adr_bank)
            closepage_timer_3 <= io_closepage_time_init;
        end
        else begin
          if (_GEN_18)
            closepage_timer_0 <= closepage_timer_0 - 16'h1;
          if (_GEN_19)
            closepage_timer_1 <= closepage_timer_1 - 16'h1;
          if (_GEN_20)
            closepage_timer_2 <= closepage_timer_2 - 16'h1;
          if (_GEN_21)
            closepage_timer_3 <= closepage_timer_3 - 16'h1;
        end
      end
      else if (_GEN & _GEN_14 & io_arblinkRG_out_preReq_0) begin
        if (_GEN_22)
          closepage_timer_0 <= io_closepage_time_init;
        if (_GEN_23)
          closepage_timer_1 <= io_closepage_time_init;
        if (_GEN_24)
          closepage_timer_2 <= io_closepage_time_init;
        if (&io_arblinkRG_out_preAdr_bank_0)
          closepage_timer_3 <= io_closepage_time_init;
      end
      else begin
        if (_GEN_18 & _GEN_14)
          closepage_timer_0 <= closepage_timer_0 - 16'h1;
        if (_GEN_19 & _GEN_14)
          closepage_timer_1 <= closepage_timer_1 - 16'h1;
        if (_GEN_20 & _GEN_14)
          closepage_timer_2 <= closepage_timer_2 - 16'h1;
        if (_GEN_21 & _GEN_14)
          closepage_timer_3 <= closepage_timer_3 - 16'h1;
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[3'h0][2:0];
        Last_casBG = _RANDOM[3'h0][4:3];
        Last_actBG = _RANDOM[3'h0][6:5];
        page_0 = _RANDOM[3'h0][27:9];
        page_1 = {_RANDOM[3'h0][31:28], _RANDOM[3'h1][14:0]};
        page_2 = {_RANDOM[3'h1][31:15], _RANDOM[3'h2][1:0]};
        page_3 = _RANDOM[3'h2][20:2];
        closepage_timer_0 = {_RANDOM[3'h2][31:21], _RANDOM[3'h3][4:0]};
        closepage_timer_1 = _RANDOM[3'h3][20:5];
        closepage_timer_2 = {_RANDOM[3'h3][31:21], _RANDOM[3'h4][4:0]};
        closepage_timer_3 = _RANDOM[3'h4][20:5];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue16_txn_fifo_adr txn_fifo (
    .clock                    (clock),
    .reset                    (reset),
    .io_enq_ready             (_txn_fifo_io_enq_ready),
    .io_enq_valid             (io_trans_valid & ~io_ReflinkRG_slave_flowReq),
    .io_enq_bits_cmdtype      (io_trans_bits_cmdtype[0]),
    .io_enq_bits_adr_rank     (io_trans_bits_adr_rank),
    .io_enq_bits_adr_group    (io_trans_bits_adr_group),
    .io_enq_bits_adr_bank     (io_trans_bits_adr_bank),
    .io_enq_bits_adr_row      (io_trans_bits_adr_row),
    .io_enq_bits_adr_col      (io_trans_bits_adr_col),
    .io_enq_bits_adr_cmdToken (io_trans_bits_adr_cmdToken),
    .io_deq_ready             (_cmd_fifo_io_enq_valid_T & _cmd_fifo_io_enq_ready),
    .io_deq_valid             (_txn_fifo_io_deq_valid),
    .io_deq_bits_cmdtype      (_txn_fifo_io_deq_bits_cmdtype),
    .io_deq_bits_adr_rank     (/* unused */),
    .io_deq_bits_adr_group    (_txn_fifo_io_deq_bits_adr_group),
    .io_deq_bits_adr_bank     (_txn_fifo_io_deq_bits_adr_bank),
    .io_deq_bits_adr_row      (_txn_fifo_io_deq_bits_adr_row),
    .io_deq_bits_adr_col      (_txn_fifo_io_deq_bits_adr_col),
    .io_deq_bits_adr_cmdToken (_txn_fifo_io_deq_bits_adr_cmdToken)
  );
  cmd_fifo cmd_fifo (
    .clock                    (clock),
    .reset                    (reset),
    .io_enq_ready             (_cmd_fifo_io_enq_ready),
    .io_enq_valid             (_cmd_fifo_io_enq_valid_T_1),
    .io_enq_bits_cmdtype      (~_txn_fifo_io_deq_bits_cmdtype),
    .io_enq_bits_adr_group    (_txn_fifo_io_deq_bits_adr_group),
    .io_enq_bits_adr_bank     (_txn_fifo_io_deq_bits_adr_bank),
    .io_enq_bits_adr_col      (_txn_fifo_io_deq_bits_adr_col),
    .io_enq_bits_adr_cmdToken (_txn_fifo_io_deq_bits_adr_cmdToken),
    .io_deq_ready             (io_arblinkRG_out_readReq_0 | io_arblinkRG_out_writeReq_0),
    .io_deq_valid             (_cmd_fifo_io_deq_valid),
    .io_deq_bits_cmdtype      (_cmd_fifo_io_deq_bits_cmdtype),
    .io_deq_bits_adr_group    (_cmd_fifo_io_deq_bits_adr_group),
    .io_deq_bits_adr_bank     (_cmd_fifo_io_deq_bits_adr_bank),
    .io_deq_bits_adr_col      (io_arblinkRG_out_casAdr_col),
    .io_deq_bits_adr_cmdToken (io_arblinkRG_out_casAdr_cmdToken),
    .io_Query_QueryBG         (_GEN ? io_ID : _txn_fifo_io_deq_bits_adr_group),
    .io_Query_QueryBA         (_GEN ? _GEN_1 : _txn_fifo_io_deq_bits_adr_bank),
    .io_Query_Querye_empty    (_cmd_fifo_io_Query_Querye_empty)
  );
  assign io_trans_ready = _txn_fifo_io_enq_ready & ~io_ReflinkRG_slave_flowReq;
  assign io_ReflinkRG_master_flowAck_0 = ~(|state);
  assign io_arblinkRG_out_Cas_PopReq = io_arblinkRG_out_Cas_PopReq_0;
  assign io_arblinkRG_out_Act_PopReq = io_arblinkRG_out_Act_PopReq_0;
  assign io_arblinkRG_out_Pre_PopReq = io_arblinkRG_out_Pre_PopReq_0;
  assign io_arblinkRG_out_preReq = io_arblinkRG_out_preReq_0;
  assign io_arblinkRG_out_actReq = io_arblinkRG_out_actReq_0;
  assign io_arblinkRG_out_readReq = io_arblinkRG_out_readReq_0;
  assign io_arblinkRG_out_writeReq = io_arblinkRG_out_writeReq_0;
  assign io_arblinkRG_out_actAdr_group = _txn_fifo_io_deq_bits_adr_group;
  assign io_arblinkRG_out_actAdr_bank = _txn_fifo_io_deq_bits_adr_bank;
  assign io_arblinkRG_out_actAdr_row = _txn_fifo_io_deq_bits_adr_row;
  assign io_arblinkRG_out_preAdr_group =
    _GEN_2
      ? _txn_fifo_io_deq_bits_adr_group
      : _GEN
        & (_closepage_flag_T | _closepage_flag_T_4 | _closepage_flag_T_9
           | _closepage_flag_T_14)
          ? io_ID
          : 2'h0;
  assign io_arblinkRG_out_preAdr_bank = io_arblinkRG_out_preAdr_bank_0;
  assign io_arblinkRG_out_preAdr_row =
    _GEN_2
      ? _txn_fifo_io_deq_bits_adr_row
      : _GEN
          ? (_closepage_flag_T
               ? page_0[18:1]
               : _closepage_flag_T_4
                   ? page_1[18:1]
                   : _closepage_flag_T_9
                       ? page_2[18:1]
                       : _closepage_flag_T_14 ? page_3[18:1] : 18'h0)
          : 18'h0;
  assign io_arblinkRG_out_casAdr_group = _cmd_fifo_io_deq_bits_adr_group;
  assign io_arblinkRG_out_casAdr_bank = _cmd_fifo_io_deq_bits_adr_bank;
  assign io_RG2TC_act_req = io_arblinkRG_in_Act_PopOK & io_arblinkRG_out_Act_PopReq_0;
  assign io_RG2TC_act_ba = _txn_fifo_io_deq_bits_adr_bank;
  assign io_RG2TC_write_req =
    _cmd_fifo_io_deq_bits_cmdtype & _cmd_fifo_io_deq_valid & io_arblinkRG_in_Cas_PopOK
    & io_arblinkRG_out_Cas_PopReq_0;
  assign io_RG2TC_read_req =
    ~_cmd_fifo_io_deq_bits_cmdtype & _cmd_fifo_io_deq_valid & io_arblinkRG_in_Cas_PopOK
    & io_arblinkRG_out_Cas_PopReq_0;
  assign io_RG2TC_cas_ba = _cmd_fifo_io_deq_bits_adr_bank;
  assign io_RG2TC_pre_req = io_arblinkRG_in_Pre_PopOK & io_arblinkRG_out_Pre_PopReq_0;
  assign io_RG2TC_pre_ba = _GEN_2 | ~_GEN ? _txn_fifo_io_deq_bits_adr_bank : _GEN_1;
  assign io_debug_state = state;
endmodule

module TimingCheck(
  input         clock,
                reset,
                io_CalDone,
  input  [1:0]  io_ID,
  output        io_time_ok_tRRD_L_OK,
                io_time_ok_tRRD_S_OK,
                io_time_ok_tFAW_OK,
                io_time_ok_tRAS_OK_0,
                io_time_ok_tRAS_OK_1,
                io_time_ok_tRAS_OK_2,
                io_time_ok_tRAS_OK_3,
                io_time_ok_tRCD_OK_0,
                io_time_ok_tRCD_OK_1,
                io_time_ok_tRCD_OK_2,
                io_time_ok_tRCD_OK_3,
                io_time_ok_tRP_OK_0,
                io_time_ok_tRP_OK_1,
                io_time_ok_tRP_OK_2,
                io_time_ok_tRP_OK_3,
                io_time_ok_tCCD_L_OK,
                io_time_ok_tCCD_S_OK,
                io_time_ok_tWR_OK_0,
                io_time_ok_tWR_OK_1,
                io_time_ok_tWR_OK_2,
                io_time_ok_tWR_OK_3,
                io_time_ok_tRTW_OK,
                io_time_ok_tRTP_OK_0,
                io_time_ok_tRTP_OK_1,
                io_time_ok_tRTP_OK_2,
                io_time_ok_tRTP_OK_3,
                io_time_ok_tWTR_L_OK,
                io_time_ok_tWTR_S_OK,
  input  [15:0] io_time_parameter_tRRD_S,
                io_time_parameter_tRRD_L,
                io_time_parameter_tFAW,
                io_time_parameter_tRAS,
                io_time_parameter_tRCD,
                io_time_parameter_tRP,
                io_time_parameter_tCCD_S,
                io_time_parameter_tCCD_L,
                io_time_parameter_tWR,
                io_time_parameter_tWTR_S,
                io_time_parameter_tWTR_L,
                io_time_parameter_tRTW,
                io_time_parameter_tRTP,
                io_time_parameter_WL,
                io_time_parameter_BL,
  input         io_won_write_phase0,
                io_won_write_phase1,
                io_won_read_phase0,
                io_won_read_phase1,
                io_won_pre_phase0,
                io_won_pre_phase1,
                io_won_act_phase0,
                io_won_act_phase1,
  input  [1:0]  io_won_dfi_phase0_bg,
                io_won_dfi_phase0_ba,
                io_won_dfi_phase1_bg,
                io_won_dfi_phase1_ba,
  input         io_RG2TC_0_act_req,
  input  [1:0]  io_RG2TC_0_act_ba,
  input         io_RG2TC_0_write_req,
                io_RG2TC_0_read_req,
  input  [1:0]  io_RG2TC_0_cas_ba,
  input         io_RG2TC_0_pre_req,
  input  [1:0]  io_RG2TC_0_pre_ba,
  input         io_RG2TC_1_act_req,
  input  [1:0]  io_RG2TC_1_act_ba,
  input         io_RG2TC_1_write_req,
                io_RG2TC_1_read_req,
  input  [1:0]  io_RG2TC_1_cas_ba,
  input         io_RG2TC_1_pre_req,
  input  [1:0]  io_RG2TC_1_pre_ba,
  input         io_RG2TC_2_act_req,
  input  [1:0]  io_RG2TC_2_act_ba,
  input         io_RG2TC_2_write_req,
                io_RG2TC_2_read_req,
  input  [1:0]  io_RG2TC_2_cas_ba,
  input         io_RG2TC_2_pre_req,
  input  [1:0]  io_RG2TC_2_pre_ba,
  input         io_RG2TC_3_act_req,
  input  [1:0]  io_RG2TC_3_act_ba,
  input         io_RG2TC_3_write_req,
                io_RG2TC_3_read_req,
  input  [1:0]  io_RG2TC_3_cas_ba,
  input         io_RG2TC_3_pre_req,
  input  [1:0]  io_RG2TC_3_pre_ba,
  output        io_TC2REF_RTP_OK,
                io_TC2REF_RAS_OK,
                io_TC2REF_WTP_OK
);

  reg  [15:0]     tFAW_timer_0;
  reg  [15:0]     tFAW_timer_1;
  reg  [15:0]     tFAW_timer_2;
  reg  [15:0]     tFAW_timer_3;
  reg             tFAW_timer_en_0;
  reg             tFAW_timer_en_1;
  reg             tFAW_timer_en_2;
  reg             tFAW_timer_en_3;
  reg  [15:0]     tRRD_L_timer;
  reg             tRRD_L_OK_block;
  reg  [15:0]     tRRD_S_timer;
  reg             tRRD_S_OK_block;
  reg  [15:0]     tRAS_timer_0;
  reg  [15:0]     tRAS_timer_1;
  reg  [15:0]     tRAS_timer_2;
  reg  [15:0]     tRAS_timer_3;
  reg             tRAS_block_0;
  reg             tRAS_block_1;
  reg             tRAS_block_2;
  reg             tRAS_block_3;
  reg  [15:0]     tRCD_timer_0;
  reg  [15:0]     tRCD_timer_1;
  reg  [15:0]     tRCD_timer_2;
  reg  [15:0]     tRCD_timer_3;
  reg             tRCD_block_0;
  reg             tRCD_block_1;
  reg             tRCD_block_2;
  reg             tRCD_block_3;
  reg  [15:0]     tRP_timer_0;
  reg  [15:0]     tRP_timer_1;
  reg  [15:0]     tRP_timer_2;
  reg  [15:0]     tRP_timer_3;
  reg             tRP_block_0;
  reg             tRP_block_1;
  reg             tRP_block_2;
  reg             tRP_block_3;
  reg  [15:0]     tCCD_L_timer;
  reg  [15:0]     tCCD_S_timer;
  reg             tCCD_L_OK_block;
  reg             tCCD_S_OK_block;
  reg  [15:0]     tWR_timer_0;
  reg  [15:0]     tWR_timer_1;
  reg  [15:0]     tWR_timer_2;
  reg  [15:0]     tWR_timer_3;
  reg             tWR_block_0;
  reg             tWR_block_1;
  reg             tWR_block_2;
  reg             tWR_block_3;
  reg  [15:0]     tWTR_L_timer;
  reg  [15:0]     tWTR_S_timer;
  reg             tWTR_S_blcok;
  reg             tWTR_L_block;
  reg  [15:0]     tRTW_timer;
  reg             tRTW_block;
  reg  [15:0]     tRTP_timer_0;
  reg  [15:0]     tRTP_timer_1;
  reg  [15:0]     tRTP_timer_2;
  reg  [15:0]     tRTP_timer_3;
  reg             tRTP_block_0;
  reg             tRTP_block_1;
  reg             tRTP_block_2;
  reg             tRTP_block_3;
  reg  [15:0]     tPREA_timer;
  reg  [15:0]     tRASA_timer;
  reg  [15:0]     tWTPA_timer;
  wire [15:0]     _tRRD_L_timer_T = io_time_parameter_tRRD_L + 16'h1;
  wire [15:0]     _tRRD_S_timer_T = io_time_parameter_tRRD_S + 16'h1;
  wire [15:0]     _tRRD_L_timer_T_5 = io_time_parameter_tRRD_L + 16'h1;
  wire [15:0]     _tRRD_S_timer_T_5 = io_time_parameter_tRRD_S + 16'h1;
  wire [15:0]     _tCCD_L_timer_T = io_time_parameter_tCCD_L + 16'h1;
  wire [15:0]     _tCCD_S_timer_T = io_time_parameter_tCCD_S + 16'h1;
  wire [15:0]     _tCCD_L_timer_T_5 = io_time_parameter_tCCD_L + 16'h1;
  wire [15:0]     _tCCD_S_timer_T_5 = io_time_parameter_tCCD_S + 16'h1;
  wire [15:0]     _tRTW_reload_value_T_12 = io_time_parameter_tRTW + 16'h1;
  wire            act_reload =
    io_RG2TC_0_act_req | io_RG2TC_1_act_req | io_RG2TC_2_act_req | io_RG2TC_3_act_req;
  wire            _write_reload_T = io_RG2TC_0_write_req | io_RG2TC_1_write_req;
  wire            _read_reload_T = io_RG2TC_0_read_req | io_RG2TC_1_read_req;
  wire [1:0]      act = {io_won_act_phase1, io_won_act_phase0};
  wire [1:0]      pre = {io_won_pre_phase1, io_won_pre_phase0};
  wire [1:0]      write = {io_won_write_phase1, io_won_write_phase0};
  wire [1:0]      read = {io_won_read_phase1, io_won_read_phase0};
  wire            tRASA_reload_cond = io_won_act_phase0 | io_won_act_phase1;
  wire [15:0]     _tFAW_timer_fill_T = io_time_parameter_tFAW + 16'h1;
  wire [15:0]     _GEN = {1'h0, _tFAW_timer_fill_T[15:1] - 15'h3};
  wire [3:0]      _GEN_0 =
    {{io_RG2TC_3_act_req},
     {io_RG2TC_2_act_req},
     {io_RG2TC_1_act_req},
     {io_RG2TC_0_act_req}};
  wire [3:0][1:0] _GEN_1 =
    {{io_RG2TC_3_act_ba}, {io_RG2TC_2_act_ba}, {io_RG2TC_1_act_ba}, {io_RG2TC_0_act_ba}};
  wire [3:0]      _GEN_2 =
    {{io_RG2TC_3_write_req},
     {io_RG2TC_2_write_req},
     {io_RG2TC_1_write_req},
     {io_RG2TC_0_write_req}};
  wire [3:0]      _GEN_3 =
    {{io_RG2TC_3_read_req},
     {io_RG2TC_2_read_req},
     {io_RG2TC_1_read_req},
     {io_RG2TC_0_read_req}};
  wire [3:0][1:0] _GEN_4 =
    {{io_RG2TC_3_cas_ba}, {io_RG2TC_2_cas_ba}, {io_RG2TC_1_cas_ba}, {io_RG2TC_0_cas_ba}};
  wire [3:0]      _GEN_5 =
    {{io_RG2TC_3_pre_req},
     {io_RG2TC_2_pre_req},
     {io_RG2TC_1_pre_req},
     {io_RG2TC_0_pre_req}};
  wire [3:0][1:0] _GEN_6 =
    {{io_RG2TC_3_pre_ba}, {io_RG2TC_2_pre_ba}, {io_RG2TC_1_pre_ba}, {io_RG2TC_0_pre_ba}};
  wire            _GEN_7 = _GEN_0[io_ID] & _GEN_1[io_ID] == 2'h0;
  wire            _GEN_8 = io_won_act_phase0 & io_won_dfi_phase0_bg == io_ID;
  wire            _GEN_9 = io_won_act_phase1 & io_won_dfi_phase1_bg == io_ID;
  wire            _GEN_10 = _GEN_0[io_ID] & _GEN_1[io_ID] == 2'h1;
  wire            _GEN_11 = _GEN_0[io_ID] & _GEN_1[io_ID] == 2'h2;
  wire            _GEN_12 = _GEN_0[io_ID] & (&_GEN_1[io_ID]);
  wire            _tRTP_reload_cond_3_T_2 = io_won_dfi_phase0_bg == io_ID;
  wire            _tRTP_reload_cond_3_T_6 = io_won_dfi_phase1_bg == io_ID;
  wire            _tRTP_reload_cond_1_T = io_won_dfi_phase0_ba == 2'h1;
  wire            _tRTP_reload_cond_1_T_4 = io_won_dfi_phase1_ba == 2'h1;
  wire            _tRTP_reload_cond_2_T = io_won_dfi_phase0_ba == 2'h2;
  wire            _tRTP_reload_cond_2_T_4 = io_won_dfi_phase1_ba == 2'h2;
  wire [15:0]     _tRASA_reload_value_T_12 = io_time_parameter_tRAS + 16'h1;
  wire            _tRASA_reload_value_T_5 = act == 2'h1;
  wire            _tRASA_reload_value_T_11 = act == 2'h2;
  wire [15:0]     tRAS_reload_value =
    {1'h0,
     _tRASA_reload_value_T_5
       ? _tRASA_reload_value_T_12[15:1] - 15'h2
       : _tRASA_reload_value_T_11
           ? _tRASA_reload_value_T_12[15:1] - 15'h1
           : _tRASA_reload_value_T_12[15:1] - 15'h2};
  wire            _GEN_13 = io_won_act_phase0 & _tRTP_reload_cond_3_T_2;
  wire            _GEN_14 = io_won_act_phase1 & _tRTP_reload_cond_3_T_6;
  wire [15:0]     _tRCD_reload_value_T_12 = io_time_parameter_tRCD + 16'h1;
  wire [15:0]     tRCD_reload_value =
    {1'h0,
     _tRASA_reload_value_T_5
       ? _tRCD_reload_value_T_12[15:1] - 15'h2
       : _tRASA_reload_value_T_11
           ? _tRCD_reload_value_T_12[15:1] - 15'h1
           : _tRCD_reload_value_T_12[15:1] - 15'h2};
  wire [15:0]     _tRP_reload_value_T_12 = io_time_parameter_tRP + 16'h1;
  wire [15:0]     tRP_reload_value =
    {1'h0,
     pre == 2'h1
       ? _tRP_reload_value_T_12[15:1] - 15'h2
       : pre == 2'h2
           ? _tRP_reload_value_T_12[15:1] - 15'h1
           : _tRP_reload_value_T_12[15:1] - 15'h2};
  wire            _GEN_15 =
    _read_reload_T | io_RG2TC_2_read_req | io_RG2TC_3_read_req | _write_reload_T
    | io_RG2TC_2_write_req | io_RG2TC_3_write_req;
  wire            _GEN_16 = io_won_read_phase0 | io_won_read_phase1;
  wire            _GEN_17 = _GEN_16 | io_won_write_phase0 | io_won_write_phase1;
  wire [15:0]     _tWTP_T = io_time_parameter_tWR + io_time_parameter_WL;
  wire [15:0]     _GEN_18 = {1'h0, io_time_parameter_BL[15:1]};
  wire [15:0]     _tWR_T_5 = _tWTP_T + _GEN_18 + 16'h1;
  wire            _GEN_19 = _GEN_4[io_ID] == 2'h0;
  wire            _GEN_20 = _GEN_4[io_ID] == 2'h1;
  wire            _GEN_21 = _GEN_4[io_ID] == 2'h2;
  wire            _GEN_22 = write == 2'h1 | write != 2'h2;
  wire [15:0]     tWR_reload_value =
    {1'h0, _GEN_22 ? _tWR_T_5[15:1] - 15'h2 : _tWR_T_5[15:1] - 15'h1};
  wire            _GEN_23 = _write_reload_T | io_RG2TC_2_write_req | io_RG2TC_3_write_req;
  wire            _GEN_24 = io_won_write_phase0 | io_won_write_phase1;
  wire            _tRPA_reload_value_T_5 = read == 2'h1;
  wire            _tRPA_reload_value_T_11 = read == 2'h2;
  wire [15:0]     _tRPA_reload_value_T_12 = io_time_parameter_tRTP + 16'h1;
  wire [15:0]     tRTP_reload_value =
    {1'h0,
     _tRPA_reload_value_T_5
       ? _tRPA_reload_value_T_12[15:1] - 15'h2
       : _tRPA_reload_value_T_11
           ? _tRPA_reload_value_T_12[15:1] - 15'h1
           : _tRPA_reload_value_T_12[15:1] - 15'h2};
  wire [15:0]     _tWTR_L_timer_T_5 =
    io_time_parameter_tWTR_L + io_time_parameter_WL + _GEN_18 + 16'h1;
  wire [15:0]     _tWTR_S_timer_T_5 =
    io_time_parameter_tWTR_S + io_time_parameter_WL + _GEN_18 + 16'h1;
  wire [15:0]     _tWTR_L_timer_T_15 =
    io_time_parameter_tWTR_L + io_time_parameter_WL + _GEN_18 + 16'h1;
  wire [15:0]     _tWTR_S_timer_T_15 =
    io_time_parameter_tWTR_S + io_time_parameter_WL + _GEN_18 + 16'h1;
  wire [15:0]     _tWTP_T_5 = _tWTP_T + _GEN_18 + 16'h1;
  always @(posedge clock) begin
    if (reset) begin
      tFAW_timer_0 <= 16'h0;
      tFAW_timer_1 <= 16'h0;
      tFAW_timer_2 <= 16'h0;
      tFAW_timer_3 <= 16'h0;
      tFAW_timer_en_0 <= 1'h0;
      tFAW_timer_en_1 <= 1'h0;
      tFAW_timer_en_2 <= 1'h0;
      tFAW_timer_en_3 <= 1'h0;
      tRRD_L_timer <= 16'h1;
      tRRD_L_OK_block <= 1'h0;
      tRRD_S_timer <= 16'h1;
      tRRD_S_OK_block <= 1'h0;
      tRAS_timer_0 <= 16'h1;
      tRAS_timer_1 <= 16'h1;
      tRAS_timer_2 <= 16'h1;
      tRAS_timer_3 <= 16'h1;
      tRAS_block_0 <= 1'h0;
      tRAS_block_1 <= 1'h0;
      tRAS_block_2 <= 1'h0;
      tRAS_block_3 <= 1'h0;
      tRCD_timer_0 <= 16'h1;
      tRCD_timer_1 <= 16'h1;
      tRCD_timer_2 <= 16'h1;
      tRCD_timer_3 <= 16'h1;
      tRCD_block_0 <= 1'h0;
      tRCD_block_1 <= 1'h0;
      tRCD_block_2 <= 1'h0;
      tRCD_block_3 <= 1'h0;
      tRP_timer_0 <= 16'h1;
      tRP_timer_1 <= 16'h1;
      tRP_timer_2 <= 16'h1;
      tRP_timer_3 <= 16'h1;
      tRP_block_0 <= 1'h0;
      tRP_block_1 <= 1'h0;
      tRP_block_2 <= 1'h0;
      tRP_block_3 <= 1'h0;
      tCCD_L_timer <= 16'h1;
      tCCD_S_timer <= 16'h1;
      tCCD_L_OK_block <= 1'h0;
      tCCD_S_OK_block <= 1'h0;
      tWR_timer_0 <= 16'h1;
      tWR_timer_1 <= 16'h1;
      tWR_timer_2 <= 16'h1;
      tWR_timer_3 <= 16'h1;
      tWR_block_0 <= 1'h0;
      tWR_block_1 <= 1'h0;
      tWR_block_2 <= 1'h0;
      tWR_block_3 <= 1'h0;
      tWTR_L_timer <= 16'h1;
      tWTR_S_timer <= 16'h1;
      tWTR_S_blcok <= 1'h0;
      tWTR_L_block <= 1'h0;
      tRTW_timer <= 16'h8;
      tRTW_block <= 1'h0;
      tRTP_timer_0 <= 16'h1;
      tRTP_timer_1 <= 16'h1;
      tRTP_timer_2 <= 16'h1;
      tRTP_timer_3 <= 16'h1;
      tRTP_block_0 <= 1'h0;
      tRTP_block_1 <= 1'h0;
      tRTP_block_2 <= 1'h0;
      tRTP_block_3 <= 1'h0;
      tPREA_timer <= 16'h1;
      tRASA_timer <= 16'h1;
      tWTPA_timer <= 16'h1;
    end
    else begin
      if (|tFAW_timer_0) begin
        if (tFAW_timer_en_0 & (|tFAW_timer_0) & io_CalDone)
          tFAW_timer_0 <= tFAW_timer_0 - 16'h1;
      end
      else
        tFAW_timer_0 <= _GEN;
      if (|tFAW_timer_1) begin
        if (tFAW_timer_en_1 & (|tFAW_timer_1) & io_CalDone)
          tFAW_timer_1 <= tFAW_timer_1 - 16'h1;
      end
      else
        tFAW_timer_1 <= _GEN;
      if (|tFAW_timer_2) begin
        if (tFAW_timer_en_2 & (|tFAW_timer_2) & io_CalDone)
          tFAW_timer_2 <= tFAW_timer_2 - 16'h1;
      end
      else
        tFAW_timer_2 <= _GEN;
      if (|tFAW_timer_3) begin
        if (tFAW_timer_en_3 & (|tFAW_timer_3) & io_CalDone)
          tFAW_timer_3 <= tFAW_timer_3 - 16'h1;
      end
      else
        tFAW_timer_3 <= _GEN;
      if (tFAW_timer_en_0)
        tFAW_timer_en_0 <= |tFAW_timer_0;
      else
        tFAW_timer_en_0 <= tRASA_reload_cond;
      if (tFAW_timer_en_1)
        tFAW_timer_en_1 <= |tFAW_timer_1;
      else
        tFAW_timer_en_1 <= tRASA_reload_cond & tFAW_timer_en_0;
      if (tFAW_timer_en_2)
        tFAW_timer_en_2 <= |tFAW_timer_2;
      else
        tFAW_timer_en_2 <= tRASA_reload_cond & tFAW_timer_en_0 & tFAW_timer_en_1;
      if (tFAW_timer_en_3)
        tFAW_timer_en_3 <= |tFAW_timer_3;
      else
        tFAW_timer_en_3 <=
          tRASA_reload_cond & tFAW_timer_en_0 & tFAW_timer_en_1 & tFAW_timer_en_2;
      if (io_won_act_phase0) begin
        tRRD_L_timer <= {1'h0, _tRRD_L_timer_T[15:1] - 15'h2};
        tRRD_S_timer <= {1'h0, _tRRD_S_timer_T[15:1] - 15'h2};
      end
      else if (io_won_act_phase1) begin
        tRRD_L_timer <= {1'h0, _tRRD_L_timer_T_5[15:1] - 15'h1};
        tRRD_S_timer <= {1'h0, _tRRD_S_timer_T_5[15:1] - 15'h1};
      end
      else begin
        if ((|tRRD_L_timer) & io_CalDone)
          tRRD_L_timer <= tRRD_L_timer - 16'h1;
        if ((|tRRD_S_timer) & io_CalDone)
          tRRD_S_timer <= tRRD_S_timer - 16'h1;
      end
      tRRD_L_OK_block <= act_reload | ~tRASA_reload_cond & tRRD_L_OK_block;
      tRRD_S_OK_block <= act_reload | ~tRASA_reload_cond & tRRD_S_OK_block;
      if (io_won_act_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRAS_timer_0 <= tRAS_reload_value;
      else if ((|tRAS_timer_0) & io_CalDone)
        tRAS_timer_0 <= tRAS_timer_0 - 16'h1;
      if (io_won_act_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        tRAS_timer_1 <= tRAS_reload_value;
      else if ((|tRAS_timer_1) & io_CalDone)
        tRAS_timer_1 <= tRAS_timer_1 - 16'h1;
      if (io_won_act_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        tRAS_timer_2 <= tRAS_reload_value;
      else if ((|tRAS_timer_2) & io_CalDone)
        tRAS_timer_2 <= tRAS_timer_2 - 16'h1;
      if (io_won_act_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRAS_timer_3 <= tRAS_reload_value;
      else if ((|tRAS_timer_3) & io_CalDone)
        tRAS_timer_3 <= tRAS_timer_3 - 16'h1;
      tRAS_block_0 <=
        _GEN_7 | ~(_GEN_8 & ~(|io_won_dfi_phase0_ba) | _GEN_9 & ~(|io_won_dfi_phase1_ba))
        & tRAS_block_0;
      tRAS_block_1 <=
        _GEN_10
        | ~(_GEN_8 & io_won_dfi_phase0_ba == 2'h1 | _GEN_9 & io_won_dfi_phase1_ba == 2'h1)
        & tRAS_block_1;
      tRAS_block_2 <=
        _GEN_11
        | ~(_GEN_8 & io_won_dfi_phase0_ba == 2'h2 | _GEN_9 & io_won_dfi_phase1_ba == 2'h2)
        & tRAS_block_2;
      tRAS_block_3 <=
        _GEN_12 | ~(_GEN_8 & (&io_won_dfi_phase0_ba) | _GEN_9 & (&io_won_dfi_phase1_ba))
        & tRAS_block_3;
      if (io_won_act_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRCD_timer_0 <= tRCD_reload_value;
      else if ((|tRCD_timer_0) & io_CalDone)
        tRCD_timer_0 <= tRCD_timer_0 - 16'h1;
      if (io_won_act_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        tRCD_timer_1 <= tRCD_reload_value;
      else if ((|tRCD_timer_1) & io_CalDone)
        tRCD_timer_1 <= tRCD_timer_1 - 16'h1;
      if (io_won_act_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        tRCD_timer_2 <= tRCD_reload_value;
      else if ((|tRCD_timer_2) & io_CalDone)
        tRCD_timer_2 <= tRCD_timer_2 - 16'h1;
      if (io_won_act_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_act_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRCD_timer_3 <= tRCD_reload_value;
      else if ((|tRCD_timer_3) & io_CalDone)
        tRCD_timer_3 <= tRCD_timer_3 - 16'h1;
      tRCD_block_0 <=
        _GEN_7
        | ~(_GEN_13 & ~(|io_won_dfi_phase0_ba) | _GEN_14 & ~(|io_won_dfi_phase1_ba))
        & tRCD_block_0;
      tRCD_block_1 <=
        _GEN_10 | ~(_GEN_13 & _tRTP_reload_cond_1_T | _GEN_14 & _tRTP_reload_cond_1_T_4)
        & tRCD_block_1;
      tRCD_block_2 <=
        _GEN_11 | ~(_GEN_13 & _tRTP_reload_cond_2_T | _GEN_14 & _tRTP_reload_cond_2_T_4)
        & tRCD_block_2;
      tRCD_block_3 <=
        _GEN_12 | ~(_GEN_13 & (&io_won_dfi_phase0_ba) | _GEN_14 & (&io_won_dfi_phase1_ba))
        & tRCD_block_3;
      if (io_won_pre_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_pre_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRP_timer_0 <= tRP_reload_value;
      else if ((|tRP_timer_0) & io_CalDone)
        tRP_timer_0 <= tRP_timer_0 - 16'h1;
      if (io_won_pre_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
          | io_won_pre_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        tRP_timer_1 <= tRP_reload_value;
      else if ((|tRP_timer_1) & io_CalDone)
        tRP_timer_1 <= tRP_timer_1 - 16'h1;
      if (io_won_pre_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
          | io_won_pre_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        tRP_timer_2 <= tRP_reload_value;
      else if ((|tRP_timer_2) & io_CalDone)
        tRP_timer_2 <= tRP_timer_2 - 16'h1;
      if (io_won_pre_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_pre_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRP_timer_3 <= tRP_reload_value;
      else if ((|tRP_timer_3) & io_CalDone)
        tRP_timer_3 <= tRP_timer_3 - 16'h1;
      tRP_block_0 <=
        _GEN_5[io_ID] & _GEN_6[io_ID] == 2'h0
        | ~(io_won_pre_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
            | io_won_pre_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        & tRP_block_0;
      tRP_block_1 <=
        _GEN_5[io_ID] & _GEN_6[io_ID] == 2'h1
        | ~(io_won_pre_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
            | io_won_pre_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        & tRP_block_1;
      tRP_block_2 <=
        _GEN_5[io_ID] & _GEN_6[io_ID] == 2'h2
        | ~(io_won_pre_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
            | io_won_pre_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        & tRP_block_2;
      tRP_block_3 <=
        _GEN_5[io_ID] & (&_GEN_6[io_ID])
        | ~(io_won_pre_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
            | io_won_pre_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        & tRP_block_3;
      if (io_won_write_phase0 | io_won_read_phase0) begin
        tCCD_L_timer <= {1'h0, _tCCD_L_timer_T[15:1] - 15'h2};
        tCCD_S_timer <= {1'h0, _tCCD_S_timer_T[15:1] - 15'h2};
      end
      else if (io_won_write_phase1 | io_won_read_phase1) begin
        tCCD_L_timer <= {1'h0, _tCCD_L_timer_T_5[15:1] - 15'h1};
        tCCD_S_timer <= {1'h0, _tCCD_S_timer_T_5[15:1] - 15'h1};
      end
      else begin
        if ((|tCCD_L_timer) & io_CalDone)
          tCCD_L_timer <= tCCD_L_timer - 16'h1;
        if ((|tCCD_S_timer) & io_CalDone)
          tCCD_S_timer <= tCCD_S_timer - 16'h1;
      end
      tCCD_L_OK_block <= _GEN_15 | ~_GEN_17 & tCCD_L_OK_block;
      tCCD_S_OK_block <= _GEN_15 | ~_GEN_17 & tCCD_S_OK_block;
      if (io_won_write_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_write_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tWR_timer_0 <= tWR_reload_value;
      else if ((|tWR_timer_0) & io_CalDone)
        tWR_timer_0 <= tWR_timer_0 - 16'h1;
      if (io_won_write_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
          | io_won_write_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        tWR_timer_1 <= tWR_reload_value;
      else if ((|tWR_timer_1) & io_CalDone)
        tWR_timer_1 <= tWR_timer_1 - 16'h1;
      if (io_won_write_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
          | io_won_write_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        tWR_timer_2 <= tWR_reload_value;
      else if ((|tWR_timer_2) & io_CalDone)
        tWR_timer_2 <= tWR_timer_2 - 16'h1;
      if (io_won_write_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_write_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tWR_timer_3 <= tWR_reload_value;
      else if ((|tWR_timer_3) & io_CalDone)
        tWR_timer_3 <= tWR_timer_3 - 16'h1;
      tWR_block_0 <=
        _GEN_2[io_ID] & _GEN_19
        | ~(io_won_write_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
            | io_won_write_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        & tWR_block_0;
      tWR_block_1 <=
        _GEN_2[io_ID] & _GEN_20
        | ~(io_won_write_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
            | io_won_write_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        & tWR_block_1;
      tWR_block_2 <=
        _GEN_2[io_ID] & _GEN_21
        | ~(io_won_write_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
            | io_won_write_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        & tWR_block_2;
      tWR_block_3 <=
        _GEN_2[io_ID] & (&_GEN_4[io_ID])
        | ~(io_won_write_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
            | io_won_write_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        & tWR_block_3;
      if (io_won_write_phase0) begin
        tWTR_L_timer <= {1'h0, _tWTR_L_timer_T_5[15:1] - 15'h2};
        tWTR_S_timer <= {1'h0, _tWTR_S_timer_T_5[15:1] - 15'h2};
      end
      else if (io_won_write_phase1) begin
        tWTR_L_timer <= {1'h0, _tWTR_L_timer_T_15[15:1] - 15'h1};
        tWTR_S_timer <= {1'h0, _tWTR_S_timer_T_15[15:1] - 15'h1};
      end
      else begin
        if ((|tWTR_L_timer) & io_CalDone)
          tWTR_L_timer <= tWTR_L_timer - 16'h1;
        if ((|tWTR_S_timer) & io_CalDone)
          tWTR_S_timer <= tWTR_S_timer - 16'h1;
      end
      tWTR_S_blcok <= _GEN_23 | ~_GEN_24 & tWTR_S_blcok;
      tWTR_L_block <= _GEN_23 | ~_GEN_24 & tWTR_L_block;
      if (io_won_read_phase0 | io_won_read_phase1) begin
        tRTW_timer <=
          {1'h0,
           _tRPA_reload_value_T_5
             ? _tRTW_reload_value_T_12[15:1] - 15'h2
             : _tRPA_reload_value_T_11
                 ? _tRTW_reload_value_T_12[15:1] - 15'h1
                 : _tRTW_reload_value_T_12[15:1] - 15'h2};
        tPREA_timer <=
          {1'h0,
           _tRPA_reload_value_T_5
             ? _tRPA_reload_value_T_12[15:1] - 15'h2
             : _tRPA_reload_value_T_11
                 ? _tRPA_reload_value_T_12[15:1] - 15'h1
                 : _tRPA_reload_value_T_12[15:1] - 15'h2};
      end
      else begin
        if ((|tRTW_timer) & io_CalDone)
          tRTW_timer <= tRTW_timer - 16'h1;
        if ((|tPREA_timer) & io_CalDone)
          tPREA_timer <= tPREA_timer - 16'h1;
      end
      tRTW_block <=
        _read_reload_T | io_RG2TC_2_read_req | io_RG2TC_3_read_req | ~_GEN_16
        & tRTW_block;
      if (io_won_read_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_read_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRTP_timer_0 <= tRTP_reload_value;
      else if ((|tRTP_timer_0) & io_CalDone)
        tRTP_timer_0 <= tRTP_timer_0 - 16'h1;
      if (io_won_read_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
          | io_won_read_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        tRTP_timer_1 <= tRTP_reload_value;
      else if ((|tRTP_timer_1) & io_CalDone)
        tRTP_timer_1 <= tRTP_timer_1 - 16'h1;
      if (io_won_read_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
          | io_won_read_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        tRTP_timer_2 <= tRTP_reload_value;
      else if ((|tRTP_timer_2) & io_CalDone)
        tRTP_timer_2 <= tRTP_timer_2 - 16'h1;
      if (io_won_read_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
          | io_won_read_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        tRTP_timer_3 <= tRTP_reload_value;
      else if ((|tRTP_timer_3) & io_CalDone)
        tRTP_timer_3 <= tRTP_timer_3 - 16'h1;
      tRTP_block_0 <=
        _GEN_3[io_ID] & _GEN_19
        | ~(io_won_read_phase0 & ~(|io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
            | io_won_read_phase1 & ~(|io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        & tRTP_block_0;
      tRTP_block_1 <=
        _GEN_3[io_ID] & _GEN_20
        | ~(io_won_read_phase0 & _tRTP_reload_cond_1_T & _tRTP_reload_cond_3_T_2
            | io_won_read_phase1 & _tRTP_reload_cond_1_T_4 & _tRTP_reload_cond_3_T_6)
        & tRTP_block_1;
      tRTP_block_2 <=
        _GEN_3[io_ID] & _GEN_21
        | ~(io_won_read_phase0 & _tRTP_reload_cond_2_T & _tRTP_reload_cond_3_T_2
            | io_won_read_phase1 & _tRTP_reload_cond_2_T_4 & _tRTP_reload_cond_3_T_6)
        & tRTP_block_2;
      tRTP_block_3 <=
        _GEN_3[io_ID] & (&_GEN_4[io_ID])
        | ~(io_won_read_phase0 & (&io_won_dfi_phase0_ba) & _tRTP_reload_cond_3_T_2
            | io_won_read_phase1 & (&io_won_dfi_phase1_ba) & _tRTP_reload_cond_3_T_6)
        & tRTP_block_3;
      if (tRASA_reload_cond)
        tRASA_timer <=
          {1'h0,
           _tRASA_reload_value_T_5
             ? _tRASA_reload_value_T_12[15:1] - 15'h2
             : _tRASA_reload_value_T_11
                 ? _tRASA_reload_value_T_12[15:1] - 15'h1
                 : _tRASA_reload_value_T_12[15:1] - 15'h2};
      else if ((|tRASA_timer) & io_CalDone)
        tRASA_timer <= tRASA_timer - 16'h1;
      if (io_won_write_phase0 | io_won_write_phase1)
        tWTPA_timer <=
          {1'h0, _GEN_22 ? _tWTP_T_5[15:1] - 15'h2 : _tWTP_T_5[15:1] - 15'h1};
      else if ((|tWTPA_timer) & io_CalDone)
        tWTPA_timer <= tWTPA_timer - 16'h1;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:17];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h12; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        tFAW_timer_0 = _RANDOM[5'h0][15:0];
        tFAW_timer_1 = _RANDOM[5'h0][31:16];
        tFAW_timer_2 = _RANDOM[5'h1][15:0];
        tFAW_timer_3 = _RANDOM[5'h1][31:16];
        tFAW_timer_en_0 = _RANDOM[5'h2][0];
        tFAW_timer_en_1 = _RANDOM[5'h2][1];
        tFAW_timer_en_2 = _RANDOM[5'h2][2];
        tFAW_timer_en_3 = _RANDOM[5'h2][3];
        tRRD_L_timer = _RANDOM[5'h2][19:4];
        tRRD_L_OK_block = _RANDOM[5'h2][20];
        tRRD_S_timer = {_RANDOM[5'h2][31:21], _RANDOM[5'h3][4:0]};
        tRRD_S_OK_block = _RANDOM[5'h3][5];
        tRAS_timer_0 = _RANDOM[5'h3][21:6];
        tRAS_timer_1 = {_RANDOM[5'h3][31:22], _RANDOM[5'h4][5:0]};
        tRAS_timer_2 = _RANDOM[5'h4][21:6];
        tRAS_timer_3 = {_RANDOM[5'h4][31:22], _RANDOM[5'h5][5:0]};
        tRAS_block_0 = _RANDOM[5'h5][6];
        tRAS_block_1 = _RANDOM[5'h5][7];
        tRAS_block_2 = _RANDOM[5'h5][8];
        tRAS_block_3 = _RANDOM[5'h5][9];
        tRCD_timer_0 = _RANDOM[5'h5][25:10];
        tRCD_timer_1 = {_RANDOM[5'h5][31:26], _RANDOM[5'h6][9:0]};
        tRCD_timer_2 = _RANDOM[5'h6][25:10];
        tRCD_timer_3 = {_RANDOM[5'h6][31:26], _RANDOM[5'h7][9:0]};
        tRCD_block_0 = _RANDOM[5'h7][10];
        tRCD_block_1 = _RANDOM[5'h7][11];
        tRCD_block_2 = _RANDOM[5'h7][12];
        tRCD_block_3 = _RANDOM[5'h7][13];
        tRP_timer_0 = _RANDOM[5'h7][29:14];
        tRP_timer_1 = {_RANDOM[5'h7][31:30], _RANDOM[5'h8][13:0]};
        tRP_timer_2 = _RANDOM[5'h8][29:14];
        tRP_timer_3 = {_RANDOM[5'h8][31:30], _RANDOM[5'h9][13:0]};
        tRP_block_0 = _RANDOM[5'h9][14];
        tRP_block_1 = _RANDOM[5'h9][15];
        tRP_block_2 = _RANDOM[5'h9][16];
        tRP_block_3 = _RANDOM[5'h9][17];
        tCCD_L_timer = {_RANDOM[5'h9][31:18], _RANDOM[5'hA][1:0]};
        tCCD_S_timer = _RANDOM[5'hA][17:2];
        tCCD_L_OK_block = _RANDOM[5'hA][18];
        tCCD_S_OK_block = _RANDOM[5'hA][19];
        tWR_timer_0 = {_RANDOM[5'hA][31:20], _RANDOM[5'hB][3:0]};
        tWR_timer_1 = _RANDOM[5'hB][19:4];
        tWR_timer_2 = {_RANDOM[5'hB][31:20], _RANDOM[5'hC][3:0]};
        tWR_timer_3 = _RANDOM[5'hC][19:4];
        tWR_block_0 = _RANDOM[5'hC][20];
        tWR_block_1 = _RANDOM[5'hC][21];
        tWR_block_2 = _RANDOM[5'hC][22];
        tWR_block_3 = _RANDOM[5'hC][23];
        tWTR_L_timer = {_RANDOM[5'hC][31:24], _RANDOM[5'hD][7:0]};
        tWTR_S_timer = _RANDOM[5'hD][23:8];
        tWTR_S_blcok = _RANDOM[5'hD][24];
        tWTR_L_block = _RANDOM[5'hD][25];
        tRTW_timer = {_RANDOM[5'hD][31:26], _RANDOM[5'hE][9:0]};
        tRTW_block = _RANDOM[5'hE][10];
        tRTP_timer_0 = _RANDOM[5'hE][26:11];
        tRTP_timer_1 = {_RANDOM[5'hE][31:27], _RANDOM[5'hF][10:0]};
        tRTP_timer_2 = _RANDOM[5'hF][26:11];
        tRTP_timer_3 = {_RANDOM[5'hF][31:27], _RANDOM[5'h10][10:0]};
        tRTP_block_0 = _RANDOM[5'h10][11];
        tRTP_block_1 = _RANDOM[5'h10][12];
        tRTP_block_2 = _RANDOM[5'h10][13];
        tRTP_block_3 = _RANDOM[5'h10][14];
        tPREA_timer = _RANDOM[5'h10][30:15];
        tRASA_timer = {_RANDOM[5'h10][31], _RANDOM[5'h11][14:0]};
        tWTPA_timer = _RANDOM[5'h11][30:15];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_time_ok_tRRD_L_OK = tRRD_L_timer == 16'h0 & ~tRRD_L_OK_block;
  assign io_time_ok_tRRD_S_OK = tRRD_S_timer == 16'h0 & ~tRRD_S_OK_block;
  assign io_time_ok_tFAW_OK =
    {tFAW_timer_en_3, tFAW_timer_en_2, tFAW_timer_en_1, tFAW_timer_en_0} != 4'hF;
  assign io_time_ok_tRAS_OK_0 = tRAS_timer_0 == 16'h0 & ~tRAS_block_0;
  assign io_time_ok_tRAS_OK_1 = tRAS_timer_1 == 16'h0 & ~tRAS_block_1;
  assign io_time_ok_tRAS_OK_2 = tRAS_timer_2 == 16'h0 & ~tRAS_block_2;
  assign io_time_ok_tRAS_OK_3 = tRAS_timer_3 == 16'h0 & ~tRAS_block_3;
  assign io_time_ok_tRCD_OK_0 = tRCD_timer_0 == 16'h0 & ~tRCD_block_0;
  assign io_time_ok_tRCD_OK_1 = tRCD_timer_1 == 16'h0 & ~tRCD_block_1;
  assign io_time_ok_tRCD_OK_2 = tRCD_timer_2 == 16'h0 & ~tRCD_block_2;
  assign io_time_ok_tRCD_OK_3 = tRCD_timer_3 == 16'h0 & ~tRCD_block_3;
  assign io_time_ok_tRP_OK_0 = tRP_timer_0 == 16'h0 & ~tRP_block_0;
  assign io_time_ok_tRP_OK_1 = tRP_timer_1 == 16'h0 & ~tRP_block_1;
  assign io_time_ok_tRP_OK_2 = tRP_timer_2 == 16'h0 & ~tRP_block_2;
  assign io_time_ok_tRP_OK_3 = tRP_timer_3 == 16'h0 & ~tRP_block_3;
  assign io_time_ok_tCCD_L_OK = tCCD_L_timer == 16'h0 & ~tCCD_L_OK_block;
  assign io_time_ok_tCCD_S_OK = tCCD_S_timer == 16'h0 & ~tCCD_S_OK_block;
  assign io_time_ok_tWR_OK_0 = tWR_timer_0 == 16'h0 & ~tWR_block_0;
  assign io_time_ok_tWR_OK_1 = tWR_timer_1 == 16'h0 & ~tWR_block_1;
  assign io_time_ok_tWR_OK_2 = tWR_timer_2 == 16'h0 & ~tWR_block_2;
  assign io_time_ok_tWR_OK_3 = tWR_timer_3 == 16'h0 & ~tWR_block_3;
  assign io_time_ok_tRTW_OK = tRTW_timer == 16'h0 & ~tRTW_block;
  assign io_time_ok_tRTP_OK_0 = tRTP_timer_0 == 16'h0 & ~tRTP_block_0;
  assign io_time_ok_tRTP_OK_1 = tRTP_timer_1 == 16'h0 & ~tRTP_block_1;
  assign io_time_ok_tRTP_OK_2 = tRTP_timer_2 == 16'h0 & ~tRTP_block_2;
  assign io_time_ok_tRTP_OK_3 = tRTP_timer_3 == 16'h0 & ~tRTP_block_3;
  assign io_time_ok_tWTR_L_OK = tWTR_L_timer == 16'h0 & ~tWTR_L_block;
  assign io_time_ok_tWTR_S_OK = tWTR_S_timer == 16'h0 & ~tWTR_S_blcok;
  assign io_TC2REF_RTP_OK = tPREA_timer == 16'h0;
  assign io_TC2REF_RAS_OK = tRASA_timer == 16'h0;
  assign io_TC2REF_WTP_OK = tWTPA_timer == 16'h0;
endmodule

// VCS coverage exclude_file
module ram_4x33(
  input  [1:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [32:0] R0_data,
  input  [1:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [32:0] W0_data
);

  reg [32:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [63:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          for (logic [6:0] j = 7'h0; j < 7'h40; j += 7'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;
          end
          Memory[i[1:0]] = _RANDOM_MEM[32:0];
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 33'bx;
endmodule

module Queue4_UInt33(
  input         clock,
                reset,
                io_enq_valid,
  input  [32:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [32:0] io_deq_bits
);

  wire       io_enq_ready;
  reg  [1:0] enq_ptr_value;
  reg  [1:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       do_enq = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~(ptr_match & maybe_full);
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 2'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 2'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][1:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:2];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][4];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_4x33 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_deq_valid = ~empty;
endmodule

module widthMatch_V2(
  input         clock,
                reset,
                io_actReq,
  input  [1:0]  io_winGroupAT,
                io_winBankAT,
  input  [17:0] io_winROW,
  input         io_writeReq,
                io_readReq,
  input  [16:0] io_readToken,
  input  [1:0]  io_groupCas,
                io_bankCas,
  input  [9:0]  io_winCOL,
  input         io_preReq,
  input  [1:0]  io_winGroupP,
                io_winBankP,
  input  [17:0] io_winROWP,
  input         io_preIss,
                io_refIss,
                io_zqIss,
  output        io_W2TC_write_phase0,
                io_W2TC_write_phase1,
                io_W2TC_read_phase0,
                io_W2TC_read_phase1,
                io_W2TC_pre_phase0,
                io_W2TC_pre_phase1,
                io_W2TC_act_phase0,
                io_W2TC_act_phase1,
  output [1:0]  io_W2TC_dfi_phase0_bg,
                io_W2TC_dfi_phase0_ba,
                io_W2TC_dfi_phase1_bg,
                io_W2TC_dfi_phase1_ba,
  input         io_Mrs_Req,
  input  [1:0]  io_Mrs_BG,
                io_Mrs_BA,
  input  [17:0] io_Mrs_ADDR,
  input         io_Zqcl_req,
                io_cke,
                io_init_process,
                io_dram_rst_n,
  output        io_dfiWriteCas,
                io_dfiReadCas,
  output [1:0]  io_writeGroup,
  output [16:0] io_rtokenBuf,
  output [17:0] io_dfiAdr_0,
                io_dfiAdr_1,
  output [1:0]  io_dfiBa_0,
                io_dfiBa_1,
  output        io_dfiRasN_0,
                io_dfiRasN_1,
                io_dfiCasN_0,
                io_dfiCasN_1,
                io_dfiWeN_0,
                io_dfiWeN_1,
                io_dfiCsN_0,
                io_dfiCsN_1,
                io_dfiActN_0,
                io_dfiActN_1,
  output [1:0]  io_dfiBg_0,
                io_dfiBg_1,
  output        io_dfiCke_0,
                io_dfiCke_1,
                io_dfiResetN_0,
                io_dfiResetN_1
);

  wire        _sync_fifo_io_deq_valid;
  wire [32:0] _sync_fifo_io_deq_bits;
  wire        phase1_act = 1'h0;
  wire        io_dfiCke_1_0 = ~io_init_process | io_cke;
  wire        _fifo_ren_T = io_actReq & io_preReq;
  wire        _fifo_wen_T_3 = io_writeReq | io_readReq;
  wire        fifo_wen =
    _fifo_ren_T & _fifo_wen_T_3 | _fifo_wen_T_3 & _sync_fifo_io_deq_valid;
  wire        fifo_ren = ~_fifo_ren_T & _sync_fifo_io_deq_valid;
  wire        _GEN = ~io_Mrs_Req & ~io_Zqcl_req;
  wire        _GEN_0 = ~fifo_ren | io_actReq;
  wire        _GEN_1 = fifo_ren & ~io_actReq;
  wire [17:0] _GEN_2 = {2'h0, io_preReq, 15'h0};
  wire        _GEN_3 = ~io_writeReq & ~io_readReq & ~io_actReq & ~fifo_ren & io_preReq;
  wire        io_dfiWeN_0_0 =
    io_init_process
      ? _GEN
      : ~io_preIss
        & (io_refIss | ~io_zqIss
           & (fifo_wen
                ? ~_GEN_0 & _sync_fifo_io_deq_bits[1:0] != 2'h1
                : fifo_ren
                    ? ~io_actReq & _sync_fifo_io_deq_bits[1:0] != 2'h1
                    : _fifo_wen_T_3 ? ~io_actReq & ~io_writeReq : ~_GEN_3 & ~io_actReq));
  wire        io_dfiCasN_0_0 =
    io_init_process
      ? ~io_Mrs_Req
      : io_preIss | ~io_refIss
        & (io_zqIss | ~(fifo_wen | fifo_ren | _fifo_wen_T_3) & (_GEN_3 | ~io_actReq));
  wire        _GEN_4 = fifo_ren | _fifo_wen_T_3;
  wire        io_dfiRasN_0_0 =
    io_init_process
      ? ~io_Mrs_Req
      : ~(io_preIss | io_refIss)
        & (io_zqIss | (fifo_wen ? _GEN_1 : _GEN_4 ? ~io_actReq : ~_GEN_3 & ~io_actReq));
  wire        _GEN_5 = io_preIss | io_refIss | io_zqIss;
  wire        _GEN_6 = io_init_process | _GEN_5;
  wire        io_dfiActN_0_0 =
    _GEN_6 | (fifo_wen ? _GEN_1 : _GEN_4 ? ~io_actReq : _GEN_3 | ~io_actReq);
  wire        io_dfiCsN_0_0 =
    io_init_process
      ? _GEN
      : ~(io_preIss | io_refIss | io_zqIss | fifo_wen | fifo_ren | _fifo_wen_T_3 | _GEN_3)
        & ~io_actReq;
  wire [1:0]  io_dfiBa_0_0 =
    io_init_process
      ? io_Mrs_BA
      : _GEN_5
          ? 2'h0
          : fifo_wen
              ? (_GEN_0 ? io_winBankAT : _sync_fifo_io_deq_bits[13:12])
              : fifo_ren
                  ? (io_actReq ? io_winBankAT : _sync_fifo_io_deq_bits[13:12])
                  : _fifo_wen_T_3
                      ? (io_actReq ? io_winBankAT : io_bankCas)
                      : _GEN_3 ? io_winBankP : io_actReq ? io_winBankAT : 2'h0;
  wire [1:0]  _GEN_7 =
    fifo_wen
      ? (_GEN_0 ? io_winGroupAT : _sync_fifo_io_deq_bits[15:14])
      : fifo_ren
          ? (io_actReq ? io_winGroupAT : _sync_fifo_io_deq_bits[15:14])
          : _fifo_wen_T_3
              ? (io_actReq ? io_winGroupAT : io_groupCas)
              : _GEN_3 ? io_winGroupP : io_actReq ? io_winGroupAT : 2'h0;
  wire [1:0]  io_dfiBg_0_0 = io_init_process ? io_Mrs_BG : _GEN_5 ? 2'h0 : _GEN_7;
  wire        io_dfiWeN_1_0 =
    _GEN_6
    | (fifo_wen
         ? fifo_ren & (io_actReq ? _sync_fifo_io_deq_bits[1:0] != 2'h1 : ~io_preReq)
         : fifo_ren
             ? (io_actReq ? _sync_fifo_io_deq_bits[1:0] != 2'h1 : ~io_preReq)
             : _fifo_wen_T_3
                 ? (io_actReq ? ~io_writeReq : ~io_preReq)
                 : _GEN_3 | ~io_preReq);
  wire        io_dfiCasN_1_0 =
    _GEN_6
    | (fifo_wen ? ~fifo_ren | ~io_actReq : ~fifo_ren & ~_fifo_wen_T_3 | ~io_actReq);
  wire        io_dfiRasN_1_0 =
    _GEN_6
    | (fifo_wen
         ? fifo_ren & (io_actReq | ~io_preReq)
         : fifo_ren
             ? io_actReq | ~io_preReq
             : _fifo_wen_T_3 ? io_actReq | ~io_preReq : _GEN_3 | ~io_preReq);
  wire        io_dfiCsN_1_0 =
    _GEN_6
    | (fifo_wen
         ? ~_GEN_0 & ~io_preReq
         : fifo_ren
             ? ~io_actReq & ~io_preReq
             : _fifo_wen_T_3 ? ~io_actReq & ~io_preReq : _GEN_3 | ~io_preReq);
  wire        _GEN_8 = _GEN_3 | ~io_preReq;
  wire [1:0]  io_dfiBa_1_0 =
    io_init_process
      ? io_Mrs_BA
      : _GEN_5
          ? 2'h0
          : fifo_wen
              ? (fifo_ren
                   ? (io_actReq
                        ? _sync_fifo_io_deq_bits[13:12]
                        : io_preReq ? io_winBankP : 2'h0)
                   : io_winBankP)
              : fifo_ren
                  ? (io_actReq
                       ? _sync_fifo_io_deq_bits[13:12]
                       : io_preReq ? io_winBankP : 2'h0)
                  : _fifo_wen_T_3
                      ? (io_actReq ? io_bankCas : io_preReq ? io_winBankP : 2'h0)
                      : _GEN_8 ? 2'h0 : io_winBankP;
  wire [1:0]  _GEN_9 =
    fifo_wen
      ? (fifo_ren
           ? (io_actReq ? _sync_fifo_io_deq_bits[15:14] : io_preReq ? io_winGroupP : 2'h0)
           : io_winGroupP)
      : fifo_ren
          ? (io_actReq ? _sync_fifo_io_deq_bits[15:14] : io_preReq ? io_winGroupP : 2'h0)
          : _fifo_wen_T_3
              ? (io_actReq ? io_groupCas : io_preReq ? io_winGroupP : 2'h0)
              : _GEN_8 ? 2'h0 : io_winGroupP;
  wire [1:0]  io_dfiBg_1_0 = io_init_process ? io_Mrs_BG : _GEN_5 ? 2'h0 : _GEN_9;
  wire        phase0_write =
    ~io_dfiWeN_0_0 & ~io_dfiCasN_0_0 & io_dfiRasN_0_0 & io_dfiActN_0_0 & ~io_dfiCsN_0_0;
  wire        phase1_write =
    ~io_dfiWeN_1_0 & ~io_dfiCasN_1_0 & io_dfiRasN_1_0 & ~io_dfiCsN_1_0;
  wire        phase0_act =
    ~io_dfiWeN_0_0 & ~io_dfiCasN_0_0 & ~io_dfiRasN_0_0 & ~io_dfiActN_0_0 & ~io_dfiCsN_0_0;
  wire        phase0_precharge =
    ~io_dfiWeN_0_0 & io_dfiCasN_0_0 & ~io_dfiRasN_0_0 & io_dfiActN_0_0 & ~io_dfiCsN_0_0;
  wire        phase1_precharge =
    ~io_dfiWeN_1_0 & io_dfiCasN_1_0 & ~io_dfiRasN_1_0 & ~io_dfiCsN_1_0;
  wire        io_dfiWriteCas_0 =
    ~io_dfiWeN_0_0 & ~io_dfiCasN_0_0 & io_dfiRasN_0_0 & io_dfiActN_0_0 & ~io_dfiCsN_0_0
    | ~io_dfiWeN_1_0 & ~io_dfiCasN_1_0 & io_dfiRasN_1_0 & ~io_dfiCsN_1_0;
  Queue4_UInt33 sync_fifo (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (fifo_wen),
    .io_enq_bits
      ({io_readToken, io_groupCas, io_bankCas, io_winCOL, io_readReq, io_writeReq}),
    .io_deq_ready (fifo_ren),
    .io_deq_valid (_sync_fifo_io_deq_valid),
    .io_deq_bits  (_sync_fifo_io_deq_bits)
  );
  assign io_W2TC_write_phase0 = phase0_write;
  assign io_W2TC_write_phase1 = phase1_write;
  assign io_W2TC_read_phase0 =
    io_dfiWeN_0_0 & ~io_dfiCasN_0_0 & io_dfiRasN_0_0 & io_dfiActN_0_0 & ~io_dfiCsN_0_0;
  assign io_W2TC_read_phase1 =
    io_dfiWeN_1_0 & ~io_dfiCasN_1_0 & io_dfiRasN_1_0 & ~io_dfiCsN_1_0;
  assign io_W2TC_pre_phase0 = phase0_precharge;
  assign io_W2TC_pre_phase1 = phase1_precharge;
  assign io_W2TC_act_phase0 = phase0_act;
  assign io_W2TC_act_phase1 = phase1_act;
  assign io_W2TC_dfi_phase0_bg = io_dfiBg_0_0;
  assign io_W2TC_dfi_phase0_ba = io_dfiBa_0_0;
  assign io_W2TC_dfi_phase1_bg = io_dfiBg_1_0;
  assign io_W2TC_dfi_phase1_ba = io_dfiBa_1_0;
  assign io_dfiWriteCas = io_dfiWriteCas_0;
  assign io_dfiReadCas =
    io_dfiWeN_0_0 & ~io_dfiCasN_0_0 & io_dfiRasN_0_0 & io_dfiActN_0_0 & ~io_dfiCsN_0_0
    | io_dfiWeN_1_0 & ~io_dfiCasN_1_0 & io_dfiRasN_1_0 & ~io_dfiCsN_1_0;
  assign io_writeGroup =
    io_dfiWriteCas_0
      ? (io_init_process ? io_Mrs_BG : _GEN_5 ? 2'h0 : phase1_write ? _GEN_9 : _GEN_7)
      : 2'h0;
  assign io_rtokenBuf =
    _GEN_6
      ? 17'h0
      : fifo_wen
          ? (fifo_ren
               ? (io_actReq
                    ? _sync_fifo_io_deq_bits[32:16]
                    : _sync_fifo_io_deq_bits[32:16])
               : 17'h0)
          : fifo_ren
              ? (io_actReq
                   ? _sync_fifo_io_deq_bits[32:16]
                   : _sync_fifo_io_deq_bits[32:16])
              : _fifo_wen_T_3 | ~_GEN_3 ? io_readToken : 17'h0;
  assign io_dfiAdr_0 =
    io_init_process
      ? io_Mrs_ADDR
      : io_preIss
          ? 18'h8400
          : io_refIss
              ? 18'h4000
              : io_zqIss
                  ? 18'h18000
                  : fifo_wen
                      ? (_GEN_0
                           ? io_winROW
                           : {3'h2,
                              _sync_fifo_io_deq_bits[1:0] != 2'h1,
                              4'h4,
                              _sync_fifo_io_deq_bits[11:2]})
                      : fifo_ren
                          ? (io_actReq
                               ? io_winROW
                               : {3'h2,
                                  _sync_fifo_io_deq_bits[1:0] != 2'h1,
                                  4'h4,
                                  _sync_fifo_io_deq_bits[11:2]})
                          : _fifo_wen_T_3
                              ? (io_actReq
                                   ? io_winROW
                                   : {3'h2, ~io_writeReq, 4'h4, io_winCOL})
                              : _GEN_3 ? 18'h8000 : io_actReq ? io_winROW : 18'h0;
  assign io_dfiAdr_1 =
    io_init_process
      ? io_Mrs_ADDR
      : _GEN_5
          ? 18'h0
          : fifo_wen
              ? (fifo_ren
                   ? (io_actReq
                        ? {3'h2,
                           _sync_fifo_io_deq_bits[1:0] != 2'h1,
                           4'h4,
                           _sync_fifo_io_deq_bits[11:2]}
                        : _GEN_2)
                   : 18'h8000)
              : fifo_ren
                  ? (io_actReq
                       ? {3'h2,
                          _sync_fifo_io_deq_bits[1:0] != 2'h1,
                          4'h4,
                          _sync_fifo_io_deq_bits[11:2]}
                       : _GEN_2)
                  : _fifo_wen_T_3
                      ? (io_actReq ? {3'h2, ~io_writeReq, 4'h4, io_winCOL} : _GEN_2)
                      : _GEN_3 ? 18'h0 : _GEN_2;
  assign io_dfiBa_0 = io_dfiBa_0_0;
  assign io_dfiBa_1 = io_dfiBa_1_0;
  assign io_dfiRasN_0 = io_dfiRasN_0_0;
  assign io_dfiRasN_1 = io_dfiRasN_1_0;
  assign io_dfiCasN_0 = io_dfiCasN_0_0;
  assign io_dfiCasN_1 = io_dfiCasN_1_0;
  assign io_dfiWeN_0 = io_dfiWeN_0_0;
  assign io_dfiWeN_1 = io_dfiWeN_1_0;
  assign io_dfiCsN_0 = io_dfiCsN_0_0;
  assign io_dfiCsN_1 = io_dfiCsN_1_0;
  assign io_dfiActN_0 = io_dfiActN_0_0;
  assign io_dfiActN_1 = 1'h1;
  assign io_dfiBg_0 = io_dfiBg_0_0;
  assign io_dfiBg_1 = io_dfiBg_1_0;
  assign io_dfiCke_0 = io_dfiCke_1_0;
  assign io_dfiCke_1 = io_dfiCke_1_0;
  assign io_dfiResetN_0 = io_dram_rst_n;
  assign io_dfiResetN_1 = io_dram_rst_n;
endmodule

module ddr4_init(
  input         clock,
                reset,
                io_apbDone,
  input  [15:0] io_mrs0,
                io_mrs1,
                io_mrs2,
                io_mrs3,
                io_mrs4,
                io_mrs5,
                io_mrs6,
  input  [7:0]  io_mrs_to_other,
  input  [3:0]  io_mrs_to_mrs,
  input  [20:0] io_dram_rstn,
  input         io_phy_dfi_init_complete,
  input  [23:0] io_pre_cke,
  input  [10:0] io_post_cke,
  input  [7:0]  io_sync_gear,
  input  [5:0]  io_cmd_gear,
  input  [7:0]  io_gear_setup,
                io_gear_hold,
  input         io_geardown_mode,
                io_block_tgeardown,
  input  [11:0] io_zqinit,
  output        io_zqlreq,
                io_dram_rst_n,
                io_init_cke,
                io_MrsReq,
                io_geardown_mode_init,
                io_geardown_sync_pulse_init,
                io_cal_on_init,
  output [1:0]  io_MrsBG,
                io_MrsBA,
  output [17:0] io_MrsAddr,
  output        io_end_init_ddr,
                io_init_in_progress,
  output [3:0]  io_init_curr_state,
                io_init_next_state
);

  reg  [3:0]       current_state;
  reg  [3:0]       last_state;
  reg              resetb_ff;
  reg              zqcl_ddr4;
  reg  [20:0]      timer_dram_rstn;
  reg  [23:0]      timer_cke;
  reg  [7:0]       timer_x1;
  reg  [11:0]      timer_zq;
  reg  [7:0]       timer_mode;
  wire             _io_init_cke_T_1 = current_state != 4'h1;
  wire             _io_geardown_sync_pulse_init_T = last_state != current_state;
  wire             _mrs_bg_a_T = current_state == 4'hB;
  wire             _mrs_bg_a_T_1 = current_state == 4'hA;
  wire             _mrs_bg_a_T_2 = current_state == 4'h9;
  wire             _mrs_bg_a_T_3 = current_state == 4'h5;
  wire             _io_cal_on_init_T = current_state == 4'h8;
  wire             _mrs_bg_a_T_7 = current_state == 4'h7;
  wire             _mrs_bg_a_T_8 = current_state == 4'h6;
  wire             _io_geardown_mode_init_T_1 = current_state == 4'h3;
  wire [2:0]       _mrs_bg_a_T_15 =
    _mrs_bg_a_T
      ? 3'h0
      : _mrs_bg_a_T_1
          ? 3'h1
          : _mrs_bg_a_T_2
              ? 3'h2
              : _mrs_bg_a_T_3 | _io_geardown_mode_init_T_1
                  ? 3'h3
                  : _io_cal_on_init_T
                      ? 3'h4
                      : _mrs_bg_a_T_7 ? 3'h5 : _mrs_bg_a_T_8 ? 3'h6 : 3'h0;
  wire [3:0]       _next_ddr_state_T_1 = {3'h0, ~(|timer_dram_rstn)};
  wire             _GEN = timer_x1 == 8'h0;
  wire [15:0][3:0] _GEN_0 =
    {{4'h0},
     {4'h0},
     {4'hD},
     {{3'h6, ~(|timer_zq)}},
     {(|timer_mode) ? 4'hB : 4'hC},
     {{3'h5, _GEN}},
     {(|timer_x1) ? 4'h9 : 4'hA},
     {{3'h4, _GEN}},
     {(|timer_x1) ? 4'h7 : 4'h8},
     {{3'h3, _GEN}},
     {(|timer_x1) ? 4'h5 : 4'h6},
     {{2'h1, ~((|timer_x1) & ~io_block_tgeardown), 1'h0}},
     {(|timer_x1) ? 4'h3 : 4'h4},
     {(|timer_cke) ? 4'h2 : io_geardown_mode ? 4'h3 : 4'h5},
     {(|timer_cke) ? 4'h1 : 4'h2},
     {4'h0}};
  wire [3:0]       _GEN_1 = _GEN_0[current_state];
  wire [3:0]       next_ddr_state = (|current_state) ? _GEN_1 : _next_ddr_state_T_1;
  wire [3:0]       next_state = io_phy_dfi_init_complete ? next_ddr_state : 4'h0;
  wire             _set_timer_zq_T = next_state != current_state;
  wire [7:0]       _GEN_2 = {4'h0, io_mrs_to_mrs};
  always @(posedge clock) begin
    if (reset) begin
      current_state <= 4'h0;
      last_state <= 4'h0;
      resetb_ff <= 1'h0;
      zqcl_ddr4 <= 1'h0;
      timer_dram_rstn <= 21'hFF;
      timer_cke <= 24'h1;
      timer_x1 <= 8'h0;
      timer_zq <= 12'h0;
      timer_mode <= 8'hA;
    end
    else begin
      if (io_phy_dfi_init_complete) begin
        if (|current_state)
          current_state <= _GEN_1;
        else
          current_state <= _next_ddr_state_T_1;
      end
      else
        current_state <= 4'h0;
      last_state <= current_state;
      resetb_ff <= 1'h1;
      zqcl_ddr4 <= current_state == 4'hC & last_state != 4'hC;
      if ((|timer_dram_rstn) & io_apbDone)
        timer_dram_rstn <= timer_dram_rstn - 21'h1;
      else if ((|timer_dram_rstn) & io_apbDone)
        timer_dram_rstn <= io_dram_rstn;
      if (~resetb_ff | ~(|current_state) | current_state == 4'h2
          | current_state == 4'h1) begin
        if (current_state != 4'h2 & next_state == 4'h2 & io_phy_dfi_init_complete
            | _io_init_cke_T_1 & next_state == 4'h1)
          timer_cke <=
            resetb_ff & io_phy_dfi_init_complete & (|current_state)
              ? {13'h0, io_post_cke}
              : io_pre_cke;
        else if (|timer_cke)
          timer_cke <= timer_cke - 24'h1;
      end
      timer_x1 <=
        _set_timer_zq_T & next_ddr_state != 4'h2 & next_state != 4'hD & next_state != 4'h1
        & (|next_state) & next_state != 4'hC & next_state != 4'hB
          ? (next_state == 4'h3
               ? io_sync_gear + io_gear_setup + io_gear_hold
               : next_state == 4'h4
                   ? io_sync_gear + io_gear_setup
                   : io_geardown_mode & ~(io_mrs_to_mrs[0]) ? _GEN_2 + 8'h1 : _GEN_2)
          : (|timer_x1) ? timer_x1 - 8'h1 : timer_x1;
      if (_set_timer_zq_T & next_state == 4'hC)
        timer_zq <= io_zqinit;
      else if (|timer_zq)
        timer_zq <= timer_zq - 12'h1;
      if (current_state == 4'hB) begin
        if (|timer_mode)
          timer_mode <= timer_mode - 8'h1;
      end
      else
        timer_mode <= io_mrs_to_other;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        current_state = _RANDOM[2'h0][3:0];
        last_state = _RANDOM[2'h0][7:4];
        resetb_ff = _RANDOM[2'h0][8];
        zqcl_ddr4 = _RANDOM[2'h0][9];
        timer_dram_rstn = _RANDOM[2'h0][31:11];
        timer_cke = _RANDOM[2'h1][23:0];
        timer_x1 = _RANDOM[2'h1][31:24];
        timer_zq = _RANDOM[2'h2][11:0];
        timer_mode = _RANDOM[2'h2][19:12];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_zqlreq = zqcl_ddr4;
  assign io_dram_rst_n =
    ~(|timer_dram_rstn) & io_phy_dfi_init_complete & (|current_state);
  assign io_init_cke = (|current_state) & _io_init_cke_T_1;
  assign io_MrsReq =
    _io_geardown_sync_pulse_init_T
    & (_mrs_bg_a_T | _mrs_bg_a_T_1 | _mrs_bg_a_T_2 | _mrs_bg_a_T_3 | _io_cal_on_init_T
       | _mrs_bg_a_T_7 | _mrs_bg_a_T_8 | _io_geardown_mode_init_T_1);
  assign io_geardown_mode_init =
    _io_geardown_sync_pulse_init_T & _io_geardown_mode_init_T_1;
  assign io_geardown_sync_pulse_init =
    _io_geardown_sync_pulse_init_T & current_state == 4'h4;
  assign io_cal_on_init = _io_cal_on_init_T & (|(io_mrs4[8:6]));
  assign io_MrsBG = {1'h0, _mrs_bg_a_T_15[2]};
  assign io_MrsBA = _mrs_bg_a_T_15[1:0];
  assign io_MrsAddr =
    _mrs_bg_a_T
      ? {2'h0, io_mrs0}
      : _mrs_bg_a_T_1
          ? {2'h0, io_mrs1}
          : _mrs_bg_a_T_2
              ? {2'h0, io_mrs2}
              : _mrs_bg_a_T_3
                  ? {2'h0, io_mrs3}
                  : _io_cal_on_init_T
                      ? {2'h0, io_mrs4}
                      : _mrs_bg_a_T_7
                          ? {2'h0, io_mrs5}
                          : _mrs_bg_a_T_8
                              ? {2'h0, io_mrs6}
                              : _io_geardown_mode_init_T_1
                                  ? {2'h0,
                                     io_mrs3[15:4],
                                     io_mrs3[3] | io_geardown_mode,
                                     io_mrs3[2:0]}
                                  : 18'hFFFF;
  assign io_end_init_ddr = current_state == 4'hD;
  assign io_init_in_progress = current_state != 4'hD;
  assign io_init_curr_state = current_state;
  assign io_init_next_state = next_state;
endmodule

// VCS coverage exclude_file
module ram_20x17(
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [16:0] R0_data,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [16:0] W0_data
);

  reg [16:0] Memory[0:19];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [31:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [4:0] i = 5'h0; i < 5'h14; i += 5'h1) begin
          _RANDOM_MEM = `RANDOM;
          Memory[i] = _RANDOM_MEM[16:0];
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 17'bx;
endmodule

module Queue20_UInt17(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [16:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [16:0] io_deq_bits
);

  reg  [4:0] enq_ptr_value;
  reg  [4:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 5'h0;
      deq_ptr_value <= 5'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq) begin
        if (enq_ptr_value == 5'h13)
          enq_ptr_value <= 5'h0;
        else
          enq_ptr_value <= enq_ptr_value + 5'h1;
      end
      if (do_deq) begin
        if (deq_ptr_value == 5'h13)
          deq_ptr_value <= 5'h0;
        else
          deq_ptr_value <= deq_ptr_value + 5'h1;
      end
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][4:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][9:5];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][10];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_20x17 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

// VCS coverage exclude_file
module ram_20x512(
  input  [4:0]   R0_addr,
  input          R0_en,
                 R0_clk,
  output [511:0] R0_data,
  input  [4:0]   W0_addr,
  input          W0_en,
                 W0_clk,
  input  [511:0] W0_data
);

  reg [511:0] Memory[0:19];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [511:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [4:0] i = 5'h0; i < 5'h14; i += 5'h1) begin
          for (logic [9:0] j = 10'h0; j < 10'h200; j += 10'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;
          end
          Memory[i] = _RANDOM_MEM;
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 512'bx;
endmodule

module Queue20_UInt512(
  input          clock,
                 reset,
  output         io_enq_ready,
  input          io_enq_valid,
  input  [511:0] io_enq_bits,
  input          io_deq_ready,
  output         io_deq_valid,
  output [511:0] io_deq_bits
);

  reg  [4:0] enq_ptr_value;
  reg  [4:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 5'h0;
      deq_ptr_value <= 5'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq) begin
        if (enq_ptr_value == 5'h13)
          enq_ptr_value <= 5'h0;
        else
          enq_ptr_value <= enq_ptr_value + 5'h1;
      end
      if (do_deq) begin
        if (deq_ptr_value == 5'h13)
          deq_ptr_value <= 5'h0;
        else
          deq_ptr_value <= deq_ptr_value + 5'h1;
      end
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][4:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][9:5];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][10];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_20x512 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module RdDataStorage(
  input          clock,
                 reset,
                 io_winread,
  input  [16:0]  io_readToken,
  input  [511:0] io_rdData,
  input          io_rdDataValid,
  output [511:0] io_data2as,
  output [16:0]  io_token2as,
  input          io_ready,
  output         io_valid
);

  wire _dataFifo_io_enq_ready;
  wire _dataFifo_io_deq_valid;
  wire _tokenFifo_io_enq_ready;
  wire _tokenFifo_io_deq_valid;
  wire ren = _dataFifo_io_deq_valid & _tokenFifo_io_deq_valid;
  Queue20_UInt17 tokenFifo (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_tokenFifo_io_enq_ready),
    .io_enq_valid (io_winread & _tokenFifo_io_enq_ready),
    .io_enq_bits  (io_readToken),
    .io_deq_ready (ren),
    .io_deq_valid (_tokenFifo_io_deq_valid),
    .io_deq_bits  (io_token2as)
  );
  Queue20_UInt512 dataFifo (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_dataFifo_io_enq_ready),
    .io_enq_valid (io_rdDataValid & _dataFifo_io_enq_ready),
    .io_enq_bits  (io_rdData),
    .io_deq_ready (ren),
    .io_deq_valid (_dataFifo_io_deq_valid),
    .io_deq_bits  (io_data2as)
  );
  assign io_valid = io_ready & ren;
endmodule

// VCS coverage exclude_file
module ram_20x576(
  input  [4:0]   R0_addr,
  input          R0_en,
                 R0_clk,
  output [575:0] R0_data,
  input  [4:0]   W0_addr,
  input          W0_en,
                 W0_clk,
  input  [575:0] W0_data
);

  reg [575:0] Memory[0:19];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [575:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [4:0] i = 5'h0; i < 5'h14; i += 5'h1) begin
          for (logic [9:0] j = 10'h0; j < 10'h240; j += 10'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;
          end
          Memory[i] = _RANDOM_MEM;
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 576'bx;
endmodule

module Queue20_UInt576(
  input          clock,
                 reset,
  output         io_enq_ready,
  input          io_enq_valid,
  input  [575:0] io_enq_bits,
  input          io_deq_ready,
  output         io_deq_valid,
  output [575:0] io_deq_bits
);

  reg  [4:0] enq_ptr_value;
  reg  [4:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 5'h0;
      deq_ptr_value <= 5'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq) begin
        if (enq_ptr_value == 5'h13)
          enq_ptr_value <= 5'h0;
        else
          enq_ptr_value <= enq_ptr_value + 5'h1;
      end
      if (do_deq) begin
        if (deq_ptr_value == 5'h13)
          deq_ptr_value <= 5'h0;
        else
          deq_ptr_value <= deq_ptr_value + 5'h1;
      end
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][4:0];
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][9:5];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][10];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_20x576 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module DataStorage(
  input          clock,
                 reset,
                 io_cmd,
                 io_valid,
  input  [1:0]   io_group,
  input  [511:0] io_wrData,
  input  [63:0]  io_dataMask,
  input          io_winWrite,
  input  [1:0]   io_winGroup,
  output [3:0]   io_ready,
  output [511:0] io_dout,
  output [63:0]  io_doutMask
);

  wire              _wdataFifo3_io_enq_ready;
  wire              _wdataFifo3_io_deq_valid;
  wire [575:0]      _wdataFifo3_io_deq_bits;
  wire              _wdataFifo2_io_enq_ready;
  wire              _wdataFifo2_io_deq_valid;
  wire [575:0]      _wdataFifo2_io_deq_bits;
  wire              _wdataFifo1_io_enq_ready;
  wire              _wdataFifo1_io_deq_valid;
  wire [575:0]      _wdataFifo1_io_deq_bits;
  wire              _wdataFifo0_io_enq_ready;
  wire              _wdataFifo0_io_deq_valid;
  wire [575:0]      _wdataFifo0_io_deq_bits;
  wire              _fifoready_0_T = io_group == 2'h0;
  wire [575:0]      _wdataFifo3_io_enq_bits_T = {io_wrData, io_dataMask};
  wire              _fifoready_1_T = io_group == 2'h1;
  wire              _fifoready_2_T = io_group == 2'h2;
  wire [3:0][575:0] _GEN =
    {{_wdataFifo3_io_deq_bits},
     {_wdataFifo2_io_deq_bits},
     {_wdataFifo1_io_deq_bits},
     {_wdataFifo0_io_deq_bits}};
  wire [63:0]       mask2maskP = _GEN[io_winGroup][63:0];
  Queue20_UInt576 wdataFifo0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_wdataFifo0_io_enq_ready),
    .io_enq_valid (~io_cmd & _fifoready_0_T & _wdataFifo0_io_enq_ready & io_valid),
    .io_enq_bits  (_wdataFifo3_io_enq_bits_T),
    .io_deq_ready (io_winWrite & io_winGroup == 2'h0 & _wdataFifo0_io_deq_valid),
    .io_deq_valid (_wdataFifo0_io_deq_valid),
    .io_deq_bits  (_wdataFifo0_io_deq_bits)
  );
  Queue20_UInt576 wdataFifo1 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_wdataFifo1_io_enq_ready),
    .io_enq_valid (~io_cmd & _fifoready_1_T & _wdataFifo1_io_enq_ready & io_valid),
    .io_enq_bits  (_wdataFifo3_io_enq_bits_T),
    .io_deq_ready (io_winWrite & io_winGroup == 2'h1 & _wdataFifo1_io_deq_valid),
    .io_deq_valid (_wdataFifo1_io_deq_valid),
    .io_deq_bits  (_wdataFifo1_io_deq_bits)
  );
  Queue20_UInt576 wdataFifo2 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_wdataFifo2_io_enq_ready),
    .io_enq_valid (~io_cmd & _fifoready_2_T & _wdataFifo2_io_enq_ready & io_valid),
    .io_enq_bits  (_wdataFifo3_io_enq_bits_T),
    .io_deq_ready (io_winWrite & io_winGroup == 2'h2 & _wdataFifo2_io_deq_valid),
    .io_deq_valid (_wdataFifo2_io_deq_valid),
    .io_deq_bits  (_wdataFifo2_io_deq_bits)
  );
  Queue20_UInt576 wdataFifo3 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_wdataFifo3_io_enq_ready),
    .io_enq_valid (~io_cmd & (&io_group) & _wdataFifo3_io_enq_ready & io_valid),
    .io_enq_bits  (_wdataFifo3_io_enq_bits_T),
    .io_deq_ready (io_winWrite & (&io_winGroup) & _wdataFifo3_io_deq_valid),
    .io_deq_valid (_wdataFifo3_io_deq_valid),
    .io_deq_bits  (_wdataFifo3_io_deq_bits)
  );
  assign io_ready =
    {_wdataFifo3_io_enq_ready & (&io_group),
     _wdataFifo2_io_enq_ready & _fifoready_2_T,
     _wdataFifo1_io_enq_ready & _fifoready_1_T,
     _wdataFifo0_io_enq_ready & _fifoready_0_T};
  assign io_dout = _GEN[io_winGroup][575:64];
  assign io_doutMask = mask2maskP;
endmodule

module WrData_offset(
  input          clock,
                 reset,
                 io_vld,
                 io_write_phase0,
                 io_write_phase1,
  input  [15:0]  io_write_latency,
  input  [511:0] io_write_data,
  output [255:0] io_offset_data,
  input          io_dfi_parameter_mode
);

  reg                vld_delay_0_REG;
  reg                vld_delay_1_REG;
  reg                vld_delay_2_REG;
  reg  [255:0]       shift_Reg_0;
  reg  [255:0]       shift_Reg_1;
  reg  [255:0]       shift_Reg_2;
  reg  [255:0]       WrDataDelay_0;
  reg  [255:0]       WrDataDelay_1;
  reg  [255:0]       WrDataDelay_2;
  reg  [255:0]       WrDataDelay_3;
  reg  [255:0]       WrDataDelay_4;
  reg  [255:0]       WrDataDelay_5;
  reg  [255:0]       WrDataDelay_6;
  reg  [255:0]       WrDataDelay_7;
  reg  [255:0]       WrDataDelay_8;
  reg  [255:0]       WrDataDelay_9;
  wire [15:0][255:0] _GEN =
    {{WrDataDelay_0},
     {WrDataDelay_0},
     {WrDataDelay_0},
     {WrDataDelay_0},
     {WrDataDelay_0},
     {WrDataDelay_0},
     {WrDataDelay_9},
     {WrDataDelay_8},
     {WrDataDelay_7},
     {WrDataDelay_6},
     {WrDataDelay_5},
     {WrDataDelay_4},
     {WrDataDelay_3},
     {WrDataDelay_2},
     {WrDataDelay_1},
     {WrDataDelay_0}};
  wire               _GEN_0 =
    (io_write_latency[0] ? ~io_write_phase1 & io_write_phase0 : io_write_phase1)
    & io_dfi_parameter_mode;
  always @(posedge clock) begin
    vld_delay_0_REG <= io_vld;
    vld_delay_1_REG <= vld_delay_0_REG;
    vld_delay_2_REG <= vld_delay_1_REG;
    if (reset) begin
      shift_Reg_0 <= 256'h0;
      shift_Reg_1 <= 256'h0;
      shift_Reg_2 <= 256'h0;
      WrDataDelay_0 <= 256'h0;
      WrDataDelay_1 <= 256'h0;
      WrDataDelay_2 <= 256'h0;
      WrDataDelay_3 <= 256'h0;
      WrDataDelay_4 <= 256'h0;
      WrDataDelay_5 <= 256'h0;
      WrDataDelay_6 <= 256'h0;
      WrDataDelay_7 <= 256'h0;
      WrDataDelay_8 <= 256'h0;
      WrDataDelay_9 <= 256'h0;
    end
    else begin
      if (io_vld) begin
        if (_GEN_0) begin
          shift_Reg_0 <= {io_write_data[127:0], shift_Reg_0[127:0]};
          shift_Reg_2 <= {shift_Reg_2[255:128], io_write_data[511:384]};
        end
        else
          shift_Reg_0 <= io_write_data[255:0];
      end
      else begin
        shift_Reg_0 <= shift_Reg_1;
        shift_Reg_2 <= 256'h0;
      end
      shift_Reg_1 <=
        io_vld ? (_GEN_0 ? io_write_data[383:128] : io_write_data[511:256]) : shift_Reg_2;
      WrDataDelay_0 <=
        (|{vld_delay_2_REG, vld_delay_1_REG, vld_delay_0_REG}) ? shift_Reg_0 : 256'h0;
      WrDataDelay_1 <= WrDataDelay_0;
      WrDataDelay_2 <= WrDataDelay_1;
      WrDataDelay_3 <= WrDataDelay_2;
      WrDataDelay_4 <= WrDataDelay_3;
      WrDataDelay_5 <= WrDataDelay_4;
      WrDataDelay_6 <= WrDataDelay_5;
      WrDataDelay_7 <= WrDataDelay_6;
      WrDataDelay_8 <= WrDataDelay_7;
      WrDataDelay_9 <= WrDataDelay_8;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:104];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [6:0] i = 7'h0; i < 7'h69; i += 7'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        vld_delay_0_REG = _RANDOM[7'h0][0];
        vld_delay_1_REG = _RANDOM[7'h0][1];
        vld_delay_2_REG = _RANDOM[7'h0][2];
        shift_Reg_0 =
          {_RANDOM[7'h0][31:3],
           _RANDOM[7'h1],
           _RANDOM[7'h2],
           _RANDOM[7'h3],
           _RANDOM[7'h4],
           _RANDOM[7'h5],
           _RANDOM[7'h6],
           _RANDOM[7'h7],
           _RANDOM[7'h8][2:0]};
        shift_Reg_1 =
          {_RANDOM[7'h8][31:3],
           _RANDOM[7'h9],
           _RANDOM[7'hA],
           _RANDOM[7'hB],
           _RANDOM[7'hC],
           _RANDOM[7'hD],
           _RANDOM[7'hE],
           _RANDOM[7'hF],
           _RANDOM[7'h10][2:0]};
        shift_Reg_2 =
          {_RANDOM[7'h10][31:3],
           _RANDOM[7'h11],
           _RANDOM[7'h12],
           _RANDOM[7'h13],
           _RANDOM[7'h14],
           _RANDOM[7'h15],
           _RANDOM[7'h16],
           _RANDOM[7'h17],
           _RANDOM[7'h18][2:0]};
        WrDataDelay_0 =
          {_RANDOM[7'h18][31:3],
           _RANDOM[7'h19],
           _RANDOM[7'h1A],
           _RANDOM[7'h1B],
           _RANDOM[7'h1C],
           _RANDOM[7'h1D],
           _RANDOM[7'h1E],
           _RANDOM[7'h1F],
           _RANDOM[7'h20][2:0]};
        WrDataDelay_1 =
          {_RANDOM[7'h20][31:3],
           _RANDOM[7'h21],
           _RANDOM[7'h22],
           _RANDOM[7'h23],
           _RANDOM[7'h24],
           _RANDOM[7'h25],
           _RANDOM[7'h26],
           _RANDOM[7'h27],
           _RANDOM[7'h28][2:0]};
        WrDataDelay_2 =
          {_RANDOM[7'h28][31:3],
           _RANDOM[7'h29],
           _RANDOM[7'h2A],
           _RANDOM[7'h2B],
           _RANDOM[7'h2C],
           _RANDOM[7'h2D],
           _RANDOM[7'h2E],
           _RANDOM[7'h2F],
           _RANDOM[7'h30][2:0]};
        WrDataDelay_3 =
          {_RANDOM[7'h30][31:3],
           _RANDOM[7'h31],
           _RANDOM[7'h32],
           _RANDOM[7'h33],
           _RANDOM[7'h34],
           _RANDOM[7'h35],
           _RANDOM[7'h36],
           _RANDOM[7'h37],
           _RANDOM[7'h38][2:0]};
        WrDataDelay_4 =
          {_RANDOM[7'h38][31:3],
           _RANDOM[7'h39],
           _RANDOM[7'h3A],
           _RANDOM[7'h3B],
           _RANDOM[7'h3C],
           _RANDOM[7'h3D],
           _RANDOM[7'h3E],
           _RANDOM[7'h3F],
           _RANDOM[7'h40][2:0]};
        WrDataDelay_5 =
          {_RANDOM[7'h40][31:3],
           _RANDOM[7'h41],
           _RANDOM[7'h42],
           _RANDOM[7'h43],
           _RANDOM[7'h44],
           _RANDOM[7'h45],
           _RANDOM[7'h46],
           _RANDOM[7'h47],
           _RANDOM[7'h48][2:0]};
        WrDataDelay_6 =
          {_RANDOM[7'h48][31:3],
           _RANDOM[7'h49],
           _RANDOM[7'h4A],
           _RANDOM[7'h4B],
           _RANDOM[7'h4C],
           _RANDOM[7'h4D],
           _RANDOM[7'h4E],
           _RANDOM[7'h4F],
           _RANDOM[7'h50][2:0]};
        WrDataDelay_7 =
          {_RANDOM[7'h50][31:3],
           _RANDOM[7'h51],
           _RANDOM[7'h52],
           _RANDOM[7'h53],
           _RANDOM[7'h54],
           _RANDOM[7'h55],
           _RANDOM[7'h56],
           _RANDOM[7'h57],
           _RANDOM[7'h58][2:0]};
        WrDataDelay_8 =
          {_RANDOM[7'h58][31:3],
           _RANDOM[7'h59],
           _RANDOM[7'h5A],
           _RANDOM[7'h5B],
           _RANDOM[7'h5C],
           _RANDOM[7'h5D],
           _RANDOM[7'h5E],
           _RANDOM[7'h5F],
           _RANDOM[7'h60][2:0]};
        WrDataDelay_9 =
          {_RANDOM[7'h60][31:3],
           _RANDOM[7'h61],
           _RANDOM[7'h62],
           _RANDOM[7'h63],
           _RANDOM[7'h64],
           _RANDOM[7'h65],
           _RANDOM[7'h66],
           _RANDOM[7'h67],
           _RANDOM[7'h68][2:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_offset_data = _GEN[io_write_latency[4:1] - 4'h2];
endmodule

module dfi_en_offset(
  input         clock,
                reset,
                io_vld,
                io_vld_ph0,
                io_vld_ph1,
  input  [15:0] io_latency,
  output [31:0] io_offset_out,
  input         io_dfi_parameter_mode
);

  reg               vld_delay_0_REG;
  reg               vld_delay_1_REG;
  reg               vld_delay_2_REG;
  reg  [31:0]       shift_Reg_0;
  reg  [31:0]       shift_Reg_1;
  reg  [31:0]       shift_Reg_2;
  reg  [31:0]       Delay_0;
  reg  [31:0]       Delay_1;
  reg  [31:0]       Delay_2;
  reg  [31:0]       Delay_3;
  reg  [31:0]       Delay_4;
  reg  [31:0]       Delay_5;
  reg  [31:0]       Delay_6;
  reg  [31:0]       Delay_7;
  reg  [31:0]       Delay_8;
  reg  [31:0]       Delay_9;
  wire [15:0][31:0] _GEN =
    {{Delay_0},
     {Delay_0},
     {Delay_0},
     {Delay_0},
     {Delay_0},
     {Delay_0},
     {Delay_9},
     {Delay_8},
     {Delay_7},
     {Delay_6},
     {Delay_5},
     {Delay_4},
     {Delay_3},
     {Delay_2},
     {Delay_1},
     {Delay_0}};
  always @(posedge clock) begin
    vld_delay_0_REG <= io_vld;
    vld_delay_1_REG <= vld_delay_0_REG;
    vld_delay_2_REG <= vld_delay_1_REG;
    if (reset) begin
      shift_Reg_0 <= 32'h0;
      shift_Reg_1 <= 32'h0;
      shift_Reg_2 <= 32'h0;
      Delay_0 <= 32'h0;
      Delay_1 <= 32'h0;
      Delay_2 <= 32'h0;
      Delay_3 <= 32'h0;
      Delay_4 <= 32'h0;
      Delay_5 <= 32'h0;
      Delay_6 <= 32'h0;
      Delay_7 <= 32'h0;
      Delay_8 <= 32'h0;
      Delay_9 <= 32'h0;
    end
    else begin
      if (io_vld) begin
        if ((io_latency[0] ? ~io_vld_ph1 & io_vld_ph0 : io_vld_ph1)
            & io_dfi_parameter_mode) begin
          shift_Reg_0 <= {16'hFFFF, shift_Reg_0[15:0]};
          shift_Reg_2 <= {shift_Reg_2[31:16], 16'hFFFF};
        end
        else
          shift_Reg_0 <= 32'hFFFFFFFF;
      end
      else begin
        shift_Reg_0 <= shift_Reg_1;
        shift_Reg_2 <= 32'h0;
      end
      shift_Reg_1 <= io_vld ? 32'hFFFFFFFF : shift_Reg_2;
      Delay_0 <=
        (|{vld_delay_2_REG, vld_delay_1_REG, vld_delay_0_REG}) ? shift_Reg_0 : 32'h0;
      Delay_1 <= Delay_0;
      Delay_2 <= Delay_1;
      Delay_3 <= Delay_2;
      Delay_4 <= Delay_3;
      Delay_5 <= Delay_4;
      Delay_6 <= Delay_5;
      Delay_7 <= Delay_6;
      Delay_8 <= Delay_7;
      Delay_9 <= Delay_8;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:13];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hE; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        vld_delay_0_REG = _RANDOM[4'h0][0];
        vld_delay_1_REG = _RANDOM[4'h0][1];
        vld_delay_2_REG = _RANDOM[4'h0][2];
        shift_Reg_0 = {_RANDOM[4'h0][31:3], _RANDOM[4'h1][2:0]};
        shift_Reg_1 = {_RANDOM[4'h1][31:3], _RANDOM[4'h2][2:0]};
        shift_Reg_2 = {_RANDOM[4'h2][31:3], _RANDOM[4'h3][2:0]};
        Delay_0 = {_RANDOM[4'h3][31:3], _RANDOM[4'h4][2:0]};
        Delay_1 = {_RANDOM[4'h4][31:3], _RANDOM[4'h5][2:0]};
        Delay_2 = {_RANDOM[4'h5][31:3], _RANDOM[4'h6][2:0]};
        Delay_3 = {_RANDOM[4'h6][31:3], _RANDOM[4'h7][2:0]};
        Delay_4 = {_RANDOM[4'h7][31:3], _RANDOM[4'h8][2:0]};
        Delay_5 = {_RANDOM[4'h8][31:3], _RANDOM[4'h9][2:0]};
        Delay_6 = {_RANDOM[4'h9][31:3], _RANDOM[4'hA][2:0]};
        Delay_7 = {_RANDOM[4'hA][31:3], _RANDOM[4'hB][2:0]};
        Delay_8 = {_RANDOM[4'hB][31:3], _RANDOM[4'hC][2:0]};
        Delay_9 = {_RANDOM[4'hC][31:3], _RANDOM[4'hD][2:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_offset_out = _GEN[io_latency[4:1] - 4'h2];
endmodule

module offset_odt_delay(
  input        clock,
               reset,
               io_write_vld_phase0,
               io_read_vld_phase0,
               io_write_vld_phase1,
               io_read_vld_phase1,
  input  [4:0] io_wr_odt_delay,
               io_wr_odt_hold,
               io_rd_odt_delay,
               io_rd_odt_hold,
  output [1:0] io_odt_out
);

  reg              wr_shift_reg_0_0;
  reg              wr_shift_reg_0_1;
  reg              wr_shift_reg_0_2;
  reg              wr_shift_reg_0_3;
  reg              wr_shift_reg_0_4;
  reg              wr_shift_reg_0_5;
  reg              wr_shift_reg_0_6;
  reg              wr_shift_reg_0_7;
  reg              wr_shift_reg_0_8;
  reg              wr_shift_reg_0_9;
  reg              wr_shift_reg_0_10;
  reg              wr_shift_reg_0_11;
  reg              wr_shift_reg_0_12;
  reg              wr_shift_reg_0_13;
  reg              wr_shift_reg_0_14;
  reg              wr_shift_reg_0_15;
  reg              wr_shift_reg_0_16;
  reg              wr_shift_reg_0_17;
  reg              wr_shift_reg_0_18;
  reg              wr_shift_reg_0_19;
  reg              wr_shift_reg_0_20;
  reg              wr_shift_reg_0_21;
  reg              wr_shift_reg_0_22;
  reg              wr_shift_reg_0_23;
  reg              wr_shift_reg_0_24;
  reg              wr_shift_reg_0_25;
  reg              wr_shift_reg_0_26;
  reg              wr_shift_reg_0_27;
  reg              wr_shift_reg_0_28;
  reg              wr_shift_reg_0_29;
  reg              wr_shift_reg_1_0;
  reg              wr_shift_reg_1_1;
  reg              wr_shift_reg_1_2;
  reg              wr_shift_reg_1_3;
  reg              wr_shift_reg_1_4;
  reg              wr_shift_reg_1_5;
  reg              wr_shift_reg_1_6;
  reg              wr_shift_reg_1_7;
  reg              wr_shift_reg_1_8;
  reg              wr_shift_reg_1_9;
  reg              wr_shift_reg_1_10;
  reg              wr_shift_reg_1_11;
  reg              wr_shift_reg_1_12;
  reg              wr_shift_reg_1_13;
  reg              wr_shift_reg_1_14;
  reg              wr_shift_reg_1_15;
  reg              wr_shift_reg_1_16;
  reg              wr_shift_reg_1_17;
  reg              wr_shift_reg_1_18;
  reg              wr_shift_reg_1_19;
  reg              wr_shift_reg_1_20;
  reg              wr_shift_reg_1_21;
  reg              wr_shift_reg_1_22;
  reg              wr_shift_reg_1_23;
  reg              wr_shift_reg_1_24;
  reg              wr_shift_reg_1_25;
  reg              wr_shift_reg_1_26;
  reg              wr_shift_reg_1_27;
  reg              wr_shift_reg_1_28;
  reg              wr_shift_reg_1_29;
  reg              rd_shift_reg_0_0;
  reg              rd_shift_reg_0_1;
  reg              rd_shift_reg_0_2;
  reg              rd_shift_reg_0_3;
  reg              rd_shift_reg_0_4;
  reg              rd_shift_reg_0_5;
  reg              rd_shift_reg_0_6;
  reg              rd_shift_reg_0_7;
  reg              rd_shift_reg_0_8;
  reg              rd_shift_reg_0_9;
  reg              rd_shift_reg_0_10;
  reg              rd_shift_reg_0_11;
  reg              rd_shift_reg_0_12;
  reg              rd_shift_reg_0_13;
  reg              rd_shift_reg_0_14;
  reg              rd_shift_reg_0_15;
  reg              rd_shift_reg_0_16;
  reg              rd_shift_reg_0_17;
  reg              rd_shift_reg_0_18;
  reg              rd_shift_reg_0_19;
  reg              rd_shift_reg_0_20;
  reg              rd_shift_reg_0_21;
  reg              rd_shift_reg_0_22;
  reg              rd_shift_reg_0_23;
  reg              rd_shift_reg_0_24;
  reg              rd_shift_reg_0_25;
  reg              rd_shift_reg_0_26;
  reg              rd_shift_reg_0_27;
  reg              rd_shift_reg_0_28;
  reg              rd_shift_reg_0_29;
  reg              rd_shift_reg_1_0;
  reg              rd_shift_reg_1_1;
  reg              rd_shift_reg_1_2;
  reg              rd_shift_reg_1_3;
  reg              rd_shift_reg_1_4;
  reg              rd_shift_reg_1_5;
  reg              rd_shift_reg_1_6;
  reg              rd_shift_reg_1_7;
  reg              rd_shift_reg_1_8;
  reg              rd_shift_reg_1_9;
  reg              rd_shift_reg_1_10;
  reg              rd_shift_reg_1_11;
  reg              rd_shift_reg_1_12;
  reg              rd_shift_reg_1_13;
  reg              rd_shift_reg_1_14;
  reg              rd_shift_reg_1_15;
  reg              rd_shift_reg_1_16;
  reg              rd_shift_reg_1_17;
  reg              rd_shift_reg_1_18;
  reg              rd_shift_reg_1_19;
  reg              rd_shift_reg_1_20;
  reg              rd_shift_reg_1_21;
  reg              rd_shift_reg_1_22;
  reg              rd_shift_reg_1_23;
  reg              rd_shift_reg_1_24;
  reg              rd_shift_reg_1_25;
  reg              rd_shift_reg_1_26;
  reg              rd_shift_reg_1_27;
  reg              rd_shift_reg_1_28;
  reg              rd_shift_reg_1_29;
  reg  [1:0]       wr_delay_0;
  reg  [1:0]       wr_delay_1;
  reg  [1:0]       wr_delay_2;
  reg  [1:0]       wr_delay_3;
  reg  [1:0]       wr_delay_4;
  reg  [1:0]       wr_delay_5;
  reg  [1:0]       wr_delay_6;
  reg  [1:0]       wr_delay_7;
  reg  [1:0]       wr_delay_8;
  reg  [1:0]       wr_delay_9;
  reg  [1:0]       wr_delay_10;
  reg  [1:0]       wr_delay_11;
  reg  [1:0]       wr_delay_12;
  reg  [1:0]       wr_delay_13;
  reg  [1:0]       wr_delay_14;
  reg  [1:0]       wr_delay_15;
  reg  [1:0]       wr_delay_16;
  reg  [1:0]       wr_delay_17;
  reg  [1:0]       wr_delay_18;
  reg  [1:0]       wr_delay_19;
  reg  [1:0]       wr_delay_20;
  reg  [1:0]       wr_delay_21;
  reg  [1:0]       wr_delay_22;
  reg  [1:0]       wr_delay_23;
  reg  [1:0]       wr_delay_24;
  reg  [1:0]       wr_delay_25;
  reg  [1:0]       wr_delay_26;
  reg  [1:0]       wr_delay_27;
  reg  [1:0]       wr_delay_28;
  reg  [1:0]       wr_delay_29;
  reg  [1:0]       wr_delay_30;
  reg  [1:0]       wr_delay_31;
  wire [31:0][1:0] _GEN =
    {{wr_delay_31},
     {wr_delay_30},
     {wr_delay_29},
     {wr_delay_28},
     {wr_delay_27},
     {wr_delay_26},
     {wr_delay_25},
     {wr_delay_24},
     {wr_delay_23},
     {wr_delay_22},
     {wr_delay_21},
     {wr_delay_20},
     {wr_delay_19},
     {wr_delay_18},
     {wr_delay_17},
     {wr_delay_16},
     {wr_delay_15},
     {wr_delay_14},
     {wr_delay_13},
     {wr_delay_12},
     {wr_delay_11},
     {wr_delay_10},
     {wr_delay_9},
     {wr_delay_8},
     {wr_delay_7},
     {wr_delay_6},
     {wr_delay_5},
     {wr_delay_4},
     {wr_delay_3},
     {wr_delay_2},
     {wr_delay_1},
     {wr_delay_0}};
  wire [1:0]       wr_odt = _GEN[{1'h0, io_wr_odt_delay[4:1] - 4'h2}];
  reg  [1:0]       rd_delay_0;
  reg  [1:0]       rd_delay_1;
  reg  [1:0]       rd_delay_2;
  reg  [1:0]       rd_delay_3;
  reg  [1:0]       rd_delay_4;
  reg  [1:0]       rd_delay_5;
  reg  [1:0]       rd_delay_6;
  reg  [1:0]       rd_delay_7;
  reg  [1:0]       rd_delay_8;
  reg  [1:0]       rd_delay_9;
  reg  [1:0]       rd_delay_10;
  reg  [1:0]       rd_delay_11;
  reg  [1:0]       rd_delay_12;
  reg  [1:0]       rd_delay_13;
  reg  [1:0]       rd_delay_14;
  reg  [1:0]       rd_delay_15;
  reg  [1:0]       rd_delay_16;
  reg  [1:0]       rd_delay_17;
  reg  [1:0]       rd_delay_18;
  reg  [1:0]       rd_delay_19;
  reg  [1:0]       rd_delay_20;
  reg  [1:0]       rd_delay_21;
  reg  [1:0]       rd_delay_22;
  reg  [1:0]       rd_delay_23;
  reg  [1:0]       rd_delay_24;
  reg  [1:0]       rd_delay_25;
  reg  [1:0]       rd_delay_26;
  reg  [1:0]       rd_delay_27;
  reg  [1:0]       rd_delay_28;
  reg  [1:0]       rd_delay_29;
  reg  [1:0]       rd_delay_30;
  reg  [1:0]       rd_delay_31;
  wire [31:0][1:0] _GEN_0 =
    {{rd_delay_31},
     {rd_delay_30},
     {rd_delay_29},
     {rd_delay_28},
     {rd_delay_27},
     {rd_delay_26},
     {rd_delay_25},
     {rd_delay_24},
     {rd_delay_23},
     {rd_delay_22},
     {rd_delay_21},
     {rd_delay_20},
     {rd_delay_19},
     {rd_delay_18},
     {rd_delay_17},
     {rd_delay_16},
     {rd_delay_15},
     {rd_delay_14},
     {rd_delay_13},
     {rd_delay_12},
     {rd_delay_11},
     {rd_delay_10},
     {rd_delay_9},
     {rd_delay_8},
     {rd_delay_7},
     {rd_delay_6},
     {rd_delay_5},
     {rd_delay_4},
     {rd_delay_3},
     {rd_delay_2},
     {rd_delay_1},
     {rd_delay_0}};
  wire [1:0]       rd_odt = _GEN_0[{1'h0, io_rd_odt_delay[4:1] - 4'h2}];
  wire             wr_offset_type =
    io_wr_odt_delay[0] ? io_write_vld_phase0 : ~io_write_vld_phase0 & io_write_vld_phase1;
  wire             rd_offset_type =
    io_rd_odt_delay[0] ? io_read_vld_phase0 : ~io_read_vld_phase0 & io_read_vld_phase1;
  wire             _GEN_1 = io_write_vld_phase0 | io_write_vld_phase1;
  wire [4:0]       _wr_shift_reg_1_31_T_1 = io_wr_odt_hold + 5'h1;
  wire             _GEN_2 = io_read_vld_phase0 | io_read_vld_phase1;
  wire [4:0]       _rd_shift_reg_1_31_T_1 = io_rd_odt_hold + 5'h1;
  always @(posedge clock) begin
    if (reset) begin
      wr_shift_reg_0_0 <= 1'h0;
      wr_shift_reg_0_1 <= 1'h0;
      wr_shift_reg_0_2 <= 1'h0;
      wr_shift_reg_0_3 <= 1'h0;
      wr_shift_reg_0_4 <= 1'h0;
      wr_shift_reg_0_5 <= 1'h0;
      wr_shift_reg_0_6 <= 1'h0;
      wr_shift_reg_0_7 <= 1'h0;
      wr_shift_reg_0_8 <= 1'h0;
      wr_shift_reg_0_9 <= 1'h0;
      wr_shift_reg_0_10 <= 1'h0;
      wr_shift_reg_0_11 <= 1'h0;
      wr_shift_reg_0_12 <= 1'h0;
      wr_shift_reg_0_13 <= 1'h0;
      wr_shift_reg_0_14 <= 1'h0;
      wr_shift_reg_0_15 <= 1'h0;
      wr_shift_reg_0_16 <= 1'h0;
      wr_shift_reg_0_17 <= 1'h0;
      wr_shift_reg_0_18 <= 1'h0;
      wr_shift_reg_0_19 <= 1'h0;
      wr_shift_reg_0_20 <= 1'h0;
      wr_shift_reg_0_21 <= 1'h0;
      wr_shift_reg_0_22 <= 1'h0;
      wr_shift_reg_0_23 <= 1'h0;
      wr_shift_reg_0_24 <= 1'h0;
      wr_shift_reg_0_25 <= 1'h0;
      wr_shift_reg_0_26 <= 1'h0;
      wr_shift_reg_0_27 <= 1'h0;
      wr_shift_reg_0_28 <= 1'h0;
      wr_shift_reg_0_29 <= 1'h0;
      wr_shift_reg_1_0 <= 1'h0;
      wr_shift_reg_1_1 <= 1'h0;
      wr_shift_reg_1_2 <= 1'h0;
      wr_shift_reg_1_3 <= 1'h0;
      wr_shift_reg_1_4 <= 1'h0;
      wr_shift_reg_1_5 <= 1'h0;
      wr_shift_reg_1_6 <= 1'h0;
      wr_shift_reg_1_7 <= 1'h0;
      wr_shift_reg_1_8 <= 1'h0;
      wr_shift_reg_1_9 <= 1'h0;
      wr_shift_reg_1_10 <= 1'h0;
      wr_shift_reg_1_11 <= 1'h0;
      wr_shift_reg_1_12 <= 1'h0;
      wr_shift_reg_1_13 <= 1'h0;
      wr_shift_reg_1_14 <= 1'h0;
      wr_shift_reg_1_15 <= 1'h0;
      wr_shift_reg_1_16 <= 1'h0;
      wr_shift_reg_1_17 <= 1'h0;
      wr_shift_reg_1_18 <= 1'h0;
      wr_shift_reg_1_19 <= 1'h0;
      wr_shift_reg_1_20 <= 1'h0;
      wr_shift_reg_1_21 <= 1'h0;
      wr_shift_reg_1_22 <= 1'h0;
      wr_shift_reg_1_23 <= 1'h0;
      wr_shift_reg_1_24 <= 1'h0;
      wr_shift_reg_1_25 <= 1'h0;
      wr_shift_reg_1_26 <= 1'h0;
      wr_shift_reg_1_27 <= 1'h0;
      wr_shift_reg_1_28 <= 1'h0;
      wr_shift_reg_1_29 <= 1'h0;
      rd_shift_reg_0_0 <= 1'h0;
      rd_shift_reg_0_1 <= 1'h0;
      rd_shift_reg_0_2 <= 1'h0;
      rd_shift_reg_0_3 <= 1'h0;
      rd_shift_reg_0_4 <= 1'h0;
      rd_shift_reg_0_5 <= 1'h0;
      rd_shift_reg_0_6 <= 1'h0;
      rd_shift_reg_0_7 <= 1'h0;
      rd_shift_reg_0_8 <= 1'h0;
      rd_shift_reg_0_9 <= 1'h0;
      rd_shift_reg_0_10 <= 1'h0;
      rd_shift_reg_0_11 <= 1'h0;
      rd_shift_reg_0_12 <= 1'h0;
      rd_shift_reg_0_13 <= 1'h0;
      rd_shift_reg_0_14 <= 1'h0;
      rd_shift_reg_0_15 <= 1'h0;
      rd_shift_reg_0_16 <= 1'h0;
      rd_shift_reg_0_17 <= 1'h0;
      rd_shift_reg_0_18 <= 1'h0;
      rd_shift_reg_0_19 <= 1'h0;
      rd_shift_reg_0_20 <= 1'h0;
      rd_shift_reg_0_21 <= 1'h0;
      rd_shift_reg_0_22 <= 1'h0;
      rd_shift_reg_0_23 <= 1'h0;
      rd_shift_reg_0_24 <= 1'h0;
      rd_shift_reg_0_25 <= 1'h0;
      rd_shift_reg_0_26 <= 1'h0;
      rd_shift_reg_0_27 <= 1'h0;
      rd_shift_reg_0_28 <= 1'h0;
      rd_shift_reg_0_29 <= 1'h0;
      rd_shift_reg_1_0 <= 1'h0;
      rd_shift_reg_1_1 <= 1'h0;
      rd_shift_reg_1_2 <= 1'h0;
      rd_shift_reg_1_3 <= 1'h0;
      rd_shift_reg_1_4 <= 1'h0;
      rd_shift_reg_1_5 <= 1'h0;
      rd_shift_reg_1_6 <= 1'h0;
      rd_shift_reg_1_7 <= 1'h0;
      rd_shift_reg_1_8 <= 1'h0;
      rd_shift_reg_1_9 <= 1'h0;
      rd_shift_reg_1_10 <= 1'h0;
      rd_shift_reg_1_11 <= 1'h0;
      rd_shift_reg_1_12 <= 1'h0;
      rd_shift_reg_1_13 <= 1'h0;
      rd_shift_reg_1_14 <= 1'h0;
      rd_shift_reg_1_15 <= 1'h0;
      rd_shift_reg_1_16 <= 1'h0;
      rd_shift_reg_1_17 <= 1'h0;
      rd_shift_reg_1_18 <= 1'h0;
      rd_shift_reg_1_19 <= 1'h0;
      rd_shift_reg_1_20 <= 1'h0;
      rd_shift_reg_1_21 <= 1'h0;
      rd_shift_reg_1_22 <= 1'h0;
      rd_shift_reg_1_23 <= 1'h0;
      rd_shift_reg_1_24 <= 1'h0;
      rd_shift_reg_1_25 <= 1'h0;
      rd_shift_reg_1_26 <= 1'h0;
      rd_shift_reg_1_27 <= 1'h0;
      rd_shift_reg_1_28 <= 1'h0;
      rd_shift_reg_1_29 <= 1'h0;
      wr_delay_0 <= 2'h0;
      wr_delay_1 <= 2'h0;
      wr_delay_2 <= 2'h0;
      wr_delay_3 <= 2'h0;
      wr_delay_4 <= 2'h0;
      wr_delay_5 <= 2'h0;
      wr_delay_6 <= 2'h0;
      wr_delay_7 <= 2'h0;
      wr_delay_8 <= 2'h0;
      wr_delay_9 <= 2'h0;
      wr_delay_10 <= 2'h0;
      wr_delay_11 <= 2'h0;
      wr_delay_12 <= 2'h0;
      wr_delay_13 <= 2'h0;
      wr_delay_14 <= 2'h0;
      wr_delay_15 <= 2'h0;
      wr_delay_16 <= 2'h0;
      wr_delay_17 <= 2'h0;
      wr_delay_18 <= 2'h0;
      wr_delay_19 <= 2'h0;
      wr_delay_20 <= 2'h0;
      wr_delay_21 <= 2'h0;
      wr_delay_22 <= 2'h0;
      wr_delay_23 <= 2'h0;
      wr_delay_24 <= 2'h0;
      wr_delay_25 <= 2'h0;
      wr_delay_26 <= 2'h0;
      wr_delay_27 <= 2'h0;
      wr_delay_28 <= 2'h0;
      wr_delay_29 <= 2'h0;
      wr_delay_30 <= 2'h0;
      wr_delay_31 <= 2'h0;
      rd_delay_0 <= 2'h0;
      rd_delay_1 <= 2'h0;
      rd_delay_2 <= 2'h0;
      rd_delay_3 <= 2'h0;
      rd_delay_4 <= 2'h0;
      rd_delay_5 <= 2'h0;
      rd_delay_6 <= 2'h0;
      rd_delay_7 <= 2'h0;
      rd_delay_8 <= 2'h0;
      rd_delay_9 <= 2'h0;
      rd_delay_10 <= 2'h0;
      rd_delay_11 <= 2'h0;
      rd_delay_12 <= 2'h0;
      rd_delay_13 <= 2'h0;
      rd_delay_14 <= 2'h0;
      rd_delay_15 <= 2'h0;
      rd_delay_16 <= 2'h0;
      rd_delay_17 <= 2'h0;
      rd_delay_18 <= 2'h0;
      rd_delay_19 <= 2'h0;
      rd_delay_20 <= 2'h0;
      rd_delay_21 <= 2'h0;
      rd_delay_22 <= 2'h0;
      rd_delay_23 <= 2'h0;
      rd_delay_24 <= 2'h0;
      rd_delay_25 <= 2'h0;
      rd_delay_26 <= 2'h0;
      rd_delay_27 <= 2'h0;
      rd_delay_28 <= 2'h0;
      rd_delay_29 <= 2'h0;
      rd_delay_30 <= 2'h0;
      rd_delay_31 <= 2'h0;
    end
    else begin
      wr_shift_reg_0_0 <=
        _GEN_1
          ? ~wr_offset_type & (io_wr_odt_hold[0] | (|(io_wr_odt_hold[4:1])))
          : wr_shift_reg_0_1;
      wr_shift_reg_0_1 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (|(_wr_shift_reg_1_31_T_1[4:2]))
                    : (|(io_wr_odt_hold[4:1])))
               : io_wr_odt_hold[0] ? (|(io_wr_odt_hold[4:1])) : (|(io_wr_odt_hold[4:2])))
          : wr_shift_reg_0_2;
      wr_shift_reg_0_2 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h2
                    : (|(io_wr_odt_hold[4:2])))
               : io_wr_odt_hold[0]
                   ? (|(io_wr_odt_hold[4:2]))
                   : io_wr_odt_hold[4:1] > 4'h2)
          : wr_shift_reg_0_3;
      wr_shift_reg_0_3 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (|(_wr_shift_reg_1_31_T_1[4:3]))
                    : io_wr_odt_hold[4:1] > 4'h2)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h2
                   : (|(io_wr_odt_hold[4:3])))
          : wr_shift_reg_0_4;
      wr_shift_reg_0_4 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h4
                    : (|(io_wr_odt_hold[4:3])))
               : io_wr_odt_hold[0]
                   ? (|(io_wr_odt_hold[4:3]))
                   : io_wr_odt_hold[4:1] > 4'h4)
          : wr_shift_reg_0_5;
      wr_shift_reg_0_5 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h5
                    : io_wr_odt_hold[4:1] > 4'h4)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h4
                   : io_wr_odt_hold[4:1] > 4'h5)
          : wr_shift_reg_0_6;
      wr_shift_reg_0_6 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h6
                    : io_wr_odt_hold[4:1] > 4'h5)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h5
                   : io_wr_odt_hold[4:1] > 4'h6)
          : wr_shift_reg_0_7;
      wr_shift_reg_0_7 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4]
                    : io_wr_odt_hold[4:1] > 4'h6)
               : io_wr_odt_hold[0] ? io_wr_odt_hold[4:1] > 4'h6 : io_wr_odt_hold[4])
          : wr_shift_reg_0_8;
      wr_shift_reg_0_8 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h8
                    : io_wr_odt_hold[4])
               : io_wr_odt_hold[0] ? io_wr_odt_hold[4] : io_wr_odt_hold[4:1] > 4'h8)
          : wr_shift_reg_0_9;
      wr_shift_reg_0_9 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h9
                    : io_wr_odt_hold[4:1] > 4'h8)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h8
                   : io_wr_odt_hold[4:1] > 4'h9)
          : wr_shift_reg_0_10;
      wr_shift_reg_0_10 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hA
                    : io_wr_odt_hold[4:1] > 4'h9)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h9
                   : io_wr_odt_hold[4:1] > 4'hA)
          : wr_shift_reg_0_11;
      wr_shift_reg_0_11 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hB
                    : io_wr_odt_hold[4:1] > 4'hA)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hA
                   : io_wr_odt_hold[4:1] > 4'hB)
          : wr_shift_reg_0_12;
      wr_shift_reg_0_12 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hC
                    : io_wr_odt_hold[4:1] > 4'hB)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hB
                   : io_wr_odt_hold[4:1] > 4'hC)
          : wr_shift_reg_0_13;
      wr_shift_reg_0_13 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hD
                    : io_wr_odt_hold[4:1] > 4'hC)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hC
                   : io_wr_odt_hold[4:1] > 4'hD)
          : wr_shift_reg_0_14;
      wr_shift_reg_0_14 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (&(_wr_shift_reg_1_31_T_1[4:1]))
                    : io_wr_odt_hold[4:1] > 4'hD)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hD
                   : (&(io_wr_odt_hold[4:1])))
          : wr_shift_reg_0_15;
      wr_shift_reg_0_15 <=
        _GEN_1
          ? (wr_offset_type
               ? ~(io_wr_odt_hold[0]) & (&(io_wr_odt_hold[4:1]))
               : io_wr_odt_hold[0] & (&(io_wr_odt_hold[4:1])))
          : wr_shift_reg_0_16;
      wr_shift_reg_0_16 <= ~_GEN_1 & wr_shift_reg_0_17;
      wr_shift_reg_0_17 <= ~_GEN_1 & wr_shift_reg_0_18;
      wr_shift_reg_0_18 <= ~_GEN_1 & wr_shift_reg_0_19;
      wr_shift_reg_0_19 <= ~_GEN_1 & wr_shift_reg_0_20;
      wr_shift_reg_0_20 <= ~_GEN_1 & wr_shift_reg_0_21;
      wr_shift_reg_0_21 <= ~_GEN_1 & wr_shift_reg_0_22;
      wr_shift_reg_0_22 <= ~_GEN_1 & wr_shift_reg_0_23;
      wr_shift_reg_0_23 <= ~_GEN_1 & wr_shift_reg_0_24;
      wr_shift_reg_0_24 <= ~_GEN_1 & wr_shift_reg_0_25;
      wr_shift_reg_0_25 <= ~_GEN_1 & wr_shift_reg_0_26;
      wr_shift_reg_0_26 <= ~_GEN_1 & wr_shift_reg_0_27;
      wr_shift_reg_0_27 <= ~_GEN_1 & wr_shift_reg_0_28;
      wr_shift_reg_0_28 <= ~_GEN_1 & wr_shift_reg_0_29;
      wr_shift_reg_0_29 <= 1'h0;
      wr_shift_reg_1_0 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (|(_wr_shift_reg_1_31_T_1[4:1]))
                    : (|(io_wr_odt_hold[4:1])))
               : io_wr_odt_hold[0] ? (|(io_wr_odt_hold[4:1])) : (|(io_wr_odt_hold[4:1])))
          : wr_shift_reg_1_1;
      wr_shift_reg_1_1 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (|(_wr_shift_reg_1_31_T_1[4:2]))
                    : (|(io_wr_odt_hold[4:2])))
               : io_wr_odt_hold[0] ? (|(io_wr_odt_hold[4:2])) : (|(io_wr_odt_hold[4:2])))
          : wr_shift_reg_1_2;
      wr_shift_reg_1_2 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h2
                    : io_wr_odt_hold[4:1] > 4'h2)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h2
                   : io_wr_odt_hold[4:1] > 4'h2)
          : wr_shift_reg_1_3;
      wr_shift_reg_1_3 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (|(_wr_shift_reg_1_31_T_1[4:3]))
                    : (|(io_wr_odt_hold[4:3])))
               : io_wr_odt_hold[0] ? (|(io_wr_odt_hold[4:3])) : (|(io_wr_odt_hold[4:3])))
          : wr_shift_reg_1_4;
      wr_shift_reg_1_4 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h4
                    : io_wr_odt_hold[4:1] > 4'h4)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h4
                   : io_wr_odt_hold[4:1] > 4'h4)
          : wr_shift_reg_1_5;
      wr_shift_reg_1_5 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h5
                    : io_wr_odt_hold[4:1] > 4'h5)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h5
                   : io_wr_odt_hold[4:1] > 4'h5)
          : wr_shift_reg_1_6;
      wr_shift_reg_1_6 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h6
                    : io_wr_odt_hold[4:1] > 4'h6)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h6
                   : io_wr_odt_hold[4:1] > 4'h6)
          : wr_shift_reg_1_7;
      wr_shift_reg_1_7 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0] ? _wr_shift_reg_1_31_T_1[4] : io_wr_odt_hold[4])
               : io_wr_odt_hold[0] ? io_wr_odt_hold[4] : io_wr_odt_hold[4])
          : wr_shift_reg_1_8;
      wr_shift_reg_1_8 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h8
                    : io_wr_odt_hold[4:1] > 4'h8)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h8
                   : io_wr_odt_hold[4:1] > 4'h8)
          : wr_shift_reg_1_9;
      wr_shift_reg_1_9 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'h9
                    : io_wr_odt_hold[4:1] > 4'h9)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'h9
                   : io_wr_odt_hold[4:1] > 4'h9)
          : wr_shift_reg_1_10;
      wr_shift_reg_1_10 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hA
                    : io_wr_odt_hold[4:1] > 4'hA)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hA
                   : io_wr_odt_hold[4:1] > 4'hA)
          : wr_shift_reg_1_11;
      wr_shift_reg_1_11 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hB
                    : io_wr_odt_hold[4:1] > 4'hB)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hB
                   : io_wr_odt_hold[4:1] > 4'hB)
          : wr_shift_reg_1_12;
      wr_shift_reg_1_12 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hC
                    : io_wr_odt_hold[4:1] > 4'hC)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hC
                   : io_wr_odt_hold[4:1] > 4'hC)
          : wr_shift_reg_1_13;
      wr_shift_reg_1_13 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? _wr_shift_reg_1_31_T_1[4:1] > 4'hD
                    : io_wr_odt_hold[4:1] > 4'hD)
               : io_wr_odt_hold[0]
                   ? io_wr_odt_hold[4:1] > 4'hD
                   : io_wr_odt_hold[4:1] > 4'hD)
          : wr_shift_reg_1_14;
      wr_shift_reg_1_14 <=
        _GEN_1
          ? (wr_offset_type
               ? (io_wr_odt_hold[0]
                    ? (&(_wr_shift_reg_1_31_T_1[4:1]))
                    : (&(io_wr_odt_hold[4:1])))
               : io_wr_odt_hold[0] ? (&(io_wr_odt_hold[4:1])) : (&(io_wr_odt_hold[4:1])))
          : wr_shift_reg_1_15;
      wr_shift_reg_1_15 <= ~_GEN_1 & wr_shift_reg_1_16;
      wr_shift_reg_1_16 <= ~_GEN_1 & wr_shift_reg_1_17;
      wr_shift_reg_1_17 <= ~_GEN_1 & wr_shift_reg_1_18;
      wr_shift_reg_1_18 <= ~_GEN_1 & wr_shift_reg_1_19;
      wr_shift_reg_1_19 <= ~_GEN_1 & wr_shift_reg_1_20;
      wr_shift_reg_1_20 <= ~_GEN_1 & wr_shift_reg_1_21;
      wr_shift_reg_1_21 <= ~_GEN_1 & wr_shift_reg_1_22;
      wr_shift_reg_1_22 <= ~_GEN_1 & wr_shift_reg_1_23;
      wr_shift_reg_1_23 <= ~_GEN_1 & wr_shift_reg_1_24;
      wr_shift_reg_1_24 <= ~_GEN_1 & wr_shift_reg_1_25;
      wr_shift_reg_1_25 <= ~_GEN_1 & wr_shift_reg_1_26;
      wr_shift_reg_1_26 <= ~_GEN_1 & wr_shift_reg_1_27;
      wr_shift_reg_1_27 <= ~_GEN_1 & wr_shift_reg_1_28;
      wr_shift_reg_1_28 <= ~_GEN_1 & wr_shift_reg_1_29;
      wr_shift_reg_1_29 <= 1'h0;
      rd_shift_reg_0_0 <=
        _GEN_2
          ? ~rd_offset_type & (io_rd_odt_hold[0] | (|(io_rd_odt_hold[4:1])))
          : rd_shift_reg_0_1;
      rd_shift_reg_0_1 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (|(_rd_shift_reg_1_31_T_1[4:2]))
                    : (|(io_rd_odt_hold[4:1])))
               : io_rd_odt_hold[0] ? (|(io_rd_odt_hold[4:1])) : (|(io_rd_odt_hold[4:2])))
          : rd_shift_reg_0_2;
      rd_shift_reg_0_2 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h2
                    : (|(io_rd_odt_hold[4:2])))
               : io_rd_odt_hold[0]
                   ? (|(io_rd_odt_hold[4:2]))
                   : io_rd_odt_hold[4:1] > 4'h2)
          : rd_shift_reg_0_3;
      rd_shift_reg_0_3 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (|(_rd_shift_reg_1_31_T_1[4:3]))
                    : io_rd_odt_hold[4:1] > 4'h2)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h2
                   : (|(io_rd_odt_hold[4:3])))
          : rd_shift_reg_0_4;
      rd_shift_reg_0_4 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h4
                    : (|(io_rd_odt_hold[4:3])))
               : io_rd_odt_hold[0]
                   ? (|(io_rd_odt_hold[4:3]))
                   : io_rd_odt_hold[4:1] > 4'h4)
          : rd_shift_reg_0_5;
      rd_shift_reg_0_5 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h5
                    : io_rd_odt_hold[4:1] > 4'h4)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h4
                   : io_rd_odt_hold[4:1] > 4'h5)
          : rd_shift_reg_0_6;
      rd_shift_reg_0_6 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h6
                    : io_rd_odt_hold[4:1] > 4'h5)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h5
                   : io_rd_odt_hold[4:1] > 4'h6)
          : rd_shift_reg_0_7;
      rd_shift_reg_0_7 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4]
                    : io_rd_odt_hold[4:1] > 4'h6)
               : io_rd_odt_hold[0] ? io_rd_odt_hold[4:1] > 4'h6 : io_rd_odt_hold[4])
          : rd_shift_reg_0_8;
      rd_shift_reg_0_8 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h8
                    : io_rd_odt_hold[4])
               : io_rd_odt_hold[0] ? io_rd_odt_hold[4] : io_rd_odt_hold[4:1] > 4'h8)
          : rd_shift_reg_0_9;
      rd_shift_reg_0_9 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h9
                    : io_rd_odt_hold[4:1] > 4'h8)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h8
                   : io_rd_odt_hold[4:1] > 4'h9)
          : rd_shift_reg_0_10;
      rd_shift_reg_0_10 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hA
                    : io_rd_odt_hold[4:1] > 4'h9)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h9
                   : io_rd_odt_hold[4:1] > 4'hA)
          : rd_shift_reg_0_11;
      rd_shift_reg_0_11 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hB
                    : io_rd_odt_hold[4:1] > 4'hA)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hA
                   : io_rd_odt_hold[4:1] > 4'hB)
          : rd_shift_reg_0_12;
      rd_shift_reg_0_12 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hC
                    : io_rd_odt_hold[4:1] > 4'hB)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hB
                   : io_rd_odt_hold[4:1] > 4'hC)
          : rd_shift_reg_0_13;
      rd_shift_reg_0_13 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hD
                    : io_rd_odt_hold[4:1] > 4'hC)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hC
                   : io_rd_odt_hold[4:1] > 4'hD)
          : rd_shift_reg_0_14;
      rd_shift_reg_0_14 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (&(_rd_shift_reg_1_31_T_1[4:1]))
                    : io_rd_odt_hold[4:1] > 4'hD)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hD
                   : (&(io_rd_odt_hold[4:1])))
          : rd_shift_reg_0_15;
      rd_shift_reg_0_15 <=
        _GEN_2
          ? (rd_offset_type
               ? ~(io_rd_odt_hold[0]) & (&(io_rd_odt_hold[4:1]))
               : io_rd_odt_hold[0] & (&(io_rd_odt_hold[4:1])))
          : rd_shift_reg_0_16;
      rd_shift_reg_0_16 <= ~_GEN_2 & rd_shift_reg_0_17;
      rd_shift_reg_0_17 <= ~_GEN_2 & rd_shift_reg_0_18;
      rd_shift_reg_0_18 <= ~_GEN_2 & rd_shift_reg_0_19;
      rd_shift_reg_0_19 <= ~_GEN_2 & rd_shift_reg_0_20;
      rd_shift_reg_0_20 <= ~_GEN_2 & rd_shift_reg_0_21;
      rd_shift_reg_0_21 <= ~_GEN_2 & rd_shift_reg_0_22;
      rd_shift_reg_0_22 <= ~_GEN_2 & rd_shift_reg_0_23;
      rd_shift_reg_0_23 <= ~_GEN_2 & rd_shift_reg_0_24;
      rd_shift_reg_0_24 <= ~_GEN_2 & rd_shift_reg_0_25;
      rd_shift_reg_0_25 <= ~_GEN_2 & rd_shift_reg_0_26;
      rd_shift_reg_0_26 <= ~_GEN_2 & rd_shift_reg_0_27;
      rd_shift_reg_0_27 <= ~_GEN_2 & rd_shift_reg_0_28;
      rd_shift_reg_0_28 <= ~_GEN_2 & rd_shift_reg_0_29;
      rd_shift_reg_0_29 <= 1'h0;
      rd_shift_reg_1_0 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (|(_rd_shift_reg_1_31_T_1[4:1]))
                    : (|(io_rd_odt_hold[4:1])))
               : io_rd_odt_hold[0] ? (|(io_rd_odt_hold[4:1])) : (|(io_rd_odt_hold[4:1])))
          : rd_shift_reg_1_1;
      rd_shift_reg_1_1 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (|(_rd_shift_reg_1_31_T_1[4:2]))
                    : (|(io_rd_odt_hold[4:2])))
               : io_rd_odt_hold[0] ? (|(io_rd_odt_hold[4:2])) : (|(io_rd_odt_hold[4:2])))
          : rd_shift_reg_1_2;
      rd_shift_reg_1_2 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h2
                    : io_rd_odt_hold[4:1] > 4'h2)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h2
                   : io_rd_odt_hold[4:1] > 4'h2)
          : rd_shift_reg_1_3;
      rd_shift_reg_1_3 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (|(_rd_shift_reg_1_31_T_1[4:3]))
                    : (|(io_rd_odt_hold[4:3])))
               : io_rd_odt_hold[0] ? (|(io_rd_odt_hold[4:3])) : (|(io_rd_odt_hold[4:3])))
          : rd_shift_reg_1_4;
      rd_shift_reg_1_4 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h4
                    : io_rd_odt_hold[4:1] > 4'h4)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h4
                   : io_rd_odt_hold[4:1] > 4'h4)
          : rd_shift_reg_1_5;
      rd_shift_reg_1_5 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h5
                    : io_rd_odt_hold[4:1] > 4'h5)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h5
                   : io_rd_odt_hold[4:1] > 4'h5)
          : rd_shift_reg_1_6;
      rd_shift_reg_1_6 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h6
                    : io_rd_odt_hold[4:1] > 4'h6)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h6
                   : io_rd_odt_hold[4:1] > 4'h6)
          : rd_shift_reg_1_7;
      rd_shift_reg_1_7 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0] ? _rd_shift_reg_1_31_T_1[4] : io_rd_odt_hold[4])
               : io_rd_odt_hold[0] ? io_rd_odt_hold[4] : io_rd_odt_hold[4])
          : rd_shift_reg_1_8;
      rd_shift_reg_1_8 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h8
                    : io_rd_odt_hold[4:1] > 4'h8)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h8
                   : io_rd_odt_hold[4:1] > 4'h8)
          : rd_shift_reg_1_9;
      rd_shift_reg_1_9 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'h9
                    : io_rd_odt_hold[4:1] > 4'h9)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'h9
                   : io_rd_odt_hold[4:1] > 4'h9)
          : rd_shift_reg_1_10;
      rd_shift_reg_1_10 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hA
                    : io_rd_odt_hold[4:1] > 4'hA)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hA
                   : io_rd_odt_hold[4:1] > 4'hA)
          : rd_shift_reg_1_11;
      rd_shift_reg_1_11 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hB
                    : io_rd_odt_hold[4:1] > 4'hB)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hB
                   : io_rd_odt_hold[4:1] > 4'hB)
          : rd_shift_reg_1_12;
      rd_shift_reg_1_12 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hC
                    : io_rd_odt_hold[4:1] > 4'hC)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hC
                   : io_rd_odt_hold[4:1] > 4'hC)
          : rd_shift_reg_1_13;
      rd_shift_reg_1_13 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? _rd_shift_reg_1_31_T_1[4:1] > 4'hD
                    : io_rd_odt_hold[4:1] > 4'hD)
               : io_rd_odt_hold[0]
                   ? io_rd_odt_hold[4:1] > 4'hD
                   : io_rd_odt_hold[4:1] > 4'hD)
          : rd_shift_reg_1_14;
      rd_shift_reg_1_14 <=
        _GEN_2
          ? (rd_offset_type
               ? (io_rd_odt_hold[0]
                    ? (&(_rd_shift_reg_1_31_T_1[4:1]))
                    : (&(io_rd_odt_hold[4:1])))
               : io_rd_odt_hold[0] ? (&(io_rd_odt_hold[4:1])) : (&(io_rd_odt_hold[4:1])))
          : rd_shift_reg_1_15;
      rd_shift_reg_1_15 <= ~_GEN_2 & rd_shift_reg_1_16;
      rd_shift_reg_1_16 <= ~_GEN_2 & rd_shift_reg_1_17;
      rd_shift_reg_1_17 <= ~_GEN_2 & rd_shift_reg_1_18;
      rd_shift_reg_1_18 <= ~_GEN_2 & rd_shift_reg_1_19;
      rd_shift_reg_1_19 <= ~_GEN_2 & rd_shift_reg_1_20;
      rd_shift_reg_1_20 <= ~_GEN_2 & rd_shift_reg_1_21;
      rd_shift_reg_1_21 <= ~_GEN_2 & rd_shift_reg_1_22;
      rd_shift_reg_1_22 <= ~_GEN_2 & rd_shift_reg_1_23;
      rd_shift_reg_1_23 <= ~_GEN_2 & rd_shift_reg_1_24;
      rd_shift_reg_1_24 <= ~_GEN_2 & rd_shift_reg_1_25;
      rd_shift_reg_1_25 <= ~_GEN_2 & rd_shift_reg_1_26;
      rd_shift_reg_1_26 <= ~_GEN_2 & rd_shift_reg_1_27;
      rd_shift_reg_1_27 <= ~_GEN_2 & rd_shift_reg_1_28;
      rd_shift_reg_1_28 <= ~_GEN_2 & rd_shift_reg_1_29;
      rd_shift_reg_1_29 <= 1'h0;
      wr_delay_0 <= {wr_shift_reg_1_0, wr_shift_reg_0_0};
      wr_delay_1 <= wr_delay_0;
      wr_delay_2 <= wr_delay_1;
      wr_delay_3 <= wr_delay_2;
      wr_delay_4 <= wr_delay_3;
      wr_delay_5 <= wr_delay_4;
      wr_delay_6 <= wr_delay_5;
      wr_delay_7 <= wr_delay_6;
      wr_delay_8 <= wr_delay_7;
      wr_delay_9 <= wr_delay_8;
      wr_delay_10 <= wr_delay_9;
      wr_delay_11 <= wr_delay_10;
      wr_delay_12 <= wr_delay_11;
      wr_delay_13 <= wr_delay_12;
      wr_delay_14 <= wr_delay_13;
      wr_delay_15 <= wr_delay_14;
      wr_delay_16 <= wr_delay_15;
      wr_delay_17 <= wr_delay_16;
      wr_delay_18 <= wr_delay_17;
      wr_delay_19 <= wr_delay_18;
      wr_delay_20 <= wr_delay_19;
      wr_delay_21 <= wr_delay_20;
      wr_delay_22 <= wr_delay_21;
      wr_delay_23 <= wr_delay_22;
      wr_delay_24 <= wr_delay_23;
      wr_delay_25 <= wr_delay_24;
      wr_delay_26 <= wr_delay_25;
      wr_delay_27 <= wr_delay_26;
      wr_delay_28 <= wr_delay_27;
      wr_delay_29 <= wr_delay_28;
      wr_delay_30 <= wr_delay_29;
      wr_delay_31 <= wr_delay_30;
      rd_delay_0 <= {rd_shift_reg_1_0, rd_shift_reg_0_0};
      rd_delay_1 <= rd_delay_0;
      rd_delay_2 <= rd_delay_1;
      rd_delay_3 <= rd_delay_2;
      rd_delay_4 <= rd_delay_3;
      rd_delay_5 <= rd_delay_4;
      rd_delay_6 <= rd_delay_5;
      rd_delay_7 <= rd_delay_6;
      rd_delay_8 <= rd_delay_7;
      rd_delay_9 <= rd_delay_8;
      rd_delay_10 <= rd_delay_9;
      rd_delay_11 <= rd_delay_10;
      rd_delay_12 <= rd_delay_11;
      rd_delay_13 <= rd_delay_12;
      rd_delay_14 <= rd_delay_13;
      rd_delay_15 <= rd_delay_14;
      rd_delay_16 <= rd_delay_15;
      rd_delay_17 <= rd_delay_16;
      rd_delay_18 <= rd_delay_17;
      rd_delay_19 <= rd_delay_18;
      rd_delay_20 <= rd_delay_19;
      rd_delay_21 <= rd_delay_20;
      rd_delay_22 <= rd_delay_21;
      rd_delay_23 <= rd_delay_22;
      rd_delay_24 <= rd_delay_23;
      rd_delay_25 <= rd_delay_24;
      rd_delay_26 <= rd_delay_25;
      rd_delay_27 <= rd_delay_26;
      rd_delay_28 <= rd_delay_27;
      rd_delay_29 <= rd_delay_28;
      rd_delay_30 <= rd_delay_29;
      rd_delay_31 <= rd_delay_30;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;
        end
        wr_shift_reg_0_0 = _RANDOM[3'h0][0];
        wr_shift_reg_0_1 = _RANDOM[3'h0][1];
        wr_shift_reg_0_2 = _RANDOM[3'h0][2];
        wr_shift_reg_0_3 = _RANDOM[3'h0][3];
        wr_shift_reg_0_4 = _RANDOM[3'h0][4];
        wr_shift_reg_0_5 = _RANDOM[3'h0][5];
        wr_shift_reg_0_6 = _RANDOM[3'h0][6];
        wr_shift_reg_0_7 = _RANDOM[3'h0][7];
        wr_shift_reg_0_8 = _RANDOM[3'h0][8];
        wr_shift_reg_0_9 = _RANDOM[3'h0][9];
        wr_shift_reg_0_10 = _RANDOM[3'h0][10];
        wr_shift_reg_0_11 = _RANDOM[3'h0][11];
        wr_shift_reg_0_12 = _RANDOM[3'h0][12];
        wr_shift_reg_0_13 = _RANDOM[3'h0][13];
        wr_shift_reg_0_14 = _RANDOM[3'h0][14];
        wr_shift_reg_0_15 = _RANDOM[3'h0][15];
        wr_shift_reg_0_16 = _RANDOM[3'h0][16];
        wr_shift_reg_0_17 = _RANDOM[3'h0][17];
        wr_shift_reg_0_18 = _RANDOM[3'h0][18];
        wr_shift_reg_0_19 = _RANDOM[3'h0][19];
        wr_shift_reg_0_20 = _RANDOM[3'h0][20];
        wr_shift_reg_0_21 = _RANDOM[3'h0][21];
        wr_shift_reg_0_22 = _RANDOM[3'h0][22];
        wr_shift_reg_0_23 = _RANDOM[3'h0][23];
        wr_shift_reg_0_24 = _RANDOM[3'h0][24];
        wr_shift_reg_0_25 = _RANDOM[3'h0][25];
        wr_shift_reg_0_26 = _RANDOM[3'h0][26];
        wr_shift_reg_0_27 = _RANDOM[3'h0][27];
        wr_shift_reg_0_28 = _RANDOM[3'h0][28];
        wr_shift_reg_0_29 = _RANDOM[3'h0][29];
        wr_shift_reg_1_0 = _RANDOM[3'h1][0];
        wr_shift_reg_1_1 = _RANDOM[3'h1][1];
        wr_shift_reg_1_2 = _RANDOM[3'h1][2];
        wr_shift_reg_1_3 = _RANDOM[3'h1][3];
        wr_shift_reg_1_4 = _RANDOM[3'h1][4];
        wr_shift_reg_1_5 = _RANDOM[3'h1][5];
        wr_shift_reg_1_6 = _RANDOM[3'h1][6];
        wr_shift_reg_1_7 = _RANDOM[3'h1][7];
        wr_shift_reg_1_8 = _RANDOM[3'h1][8];
        wr_shift_reg_1_9 = _RANDOM[3'h1][9];
        wr_shift_reg_1_10 = _RANDOM[3'h1][10];
        wr_shift_reg_1_11 = _RANDOM[3'h1][11];
        wr_shift_reg_1_12 = _RANDOM[3'h1][12];
        wr_shift_reg_1_13 = _RANDOM[3'h1][13];
        wr_shift_reg_1_14 = _RANDOM[3'h1][14];
        wr_shift_reg_1_15 = _RANDOM[3'h1][15];
        wr_shift_reg_1_16 = _RANDOM[3'h1][16];
        wr_shift_reg_1_17 = _RANDOM[3'h1][17];
        wr_shift_reg_1_18 = _RANDOM[3'h1][18];
        wr_shift_reg_1_19 = _RANDOM[3'h1][19];
        wr_shift_reg_1_20 = _RANDOM[3'h1][20];
        wr_shift_reg_1_21 = _RANDOM[3'h1][21];
        wr_shift_reg_1_22 = _RANDOM[3'h1][22];
        wr_shift_reg_1_23 = _RANDOM[3'h1][23];
        wr_shift_reg_1_24 = _RANDOM[3'h1][24];
        wr_shift_reg_1_25 = _RANDOM[3'h1][25];
        wr_shift_reg_1_26 = _RANDOM[3'h1][26];
        wr_shift_reg_1_27 = _RANDOM[3'h1][27];
        wr_shift_reg_1_28 = _RANDOM[3'h1][28];
        wr_shift_reg_1_29 = _RANDOM[3'h1][29];
        rd_shift_reg_0_0 = _RANDOM[3'h2][0];
        rd_shift_reg_0_1 = _RANDOM[3'h2][1];
        rd_shift_reg_0_2 = _RANDOM[3'h2][2];
        rd_shift_reg_0_3 = _RANDOM[3'h2][3];
        rd_shift_reg_0_4 = _RANDOM[3'h2][4];
        rd_shift_reg_0_5 = _RANDOM[3'h2][5];
        rd_shift_reg_0_6 = _RANDOM[3'h2][6];
        rd_shift_reg_0_7 = _RANDOM[3'h2][7];
        rd_shift_reg_0_8 = _RANDOM[3'h2][8];
        rd_shift_reg_0_9 = _RANDOM[3'h2][9];
        rd_shift_reg_0_10 = _RANDOM[3'h2][10];
        rd_shift_reg_0_11 = _RANDOM[3'h2][11];
        rd_shift_reg_0_12 = _RANDOM[3'h2][12];
        rd_shift_reg_0_13 = _RANDOM[3'h2][13];
        rd_shift_reg_0_14 = _RANDOM[3'h2][14];
        rd_shift_reg_0_15 = _RANDOM[3'h2][15];
        rd_shift_reg_0_16 = _RANDOM[3'h2][16];
        rd_shift_reg_0_17 = _RANDOM[3'h2][17];
        rd_shift_reg_0_18 = _RANDOM[3'h2][18];
        rd_shift_reg_0_19 = _RANDOM[3'h2][19];
        rd_shift_reg_0_20 = _RANDOM[3'h2][20];
        rd_shift_reg_0_21 = _RANDOM[3'h2][21];
        rd_shift_reg_0_22 = _RANDOM[3'h2][22];
        rd_shift_reg_0_23 = _RANDOM[3'h2][23];
        rd_shift_reg_0_24 = _RANDOM[3'h2][24];
        rd_shift_reg_0_25 = _RANDOM[3'h2][25];
        rd_shift_reg_0_26 = _RANDOM[3'h2][26];
        rd_shift_reg_0_27 = _RANDOM[3'h2][27];
        rd_shift_reg_0_28 = _RANDOM[3'h2][28];
        rd_shift_reg_0_29 = _RANDOM[3'h2][29];
        rd_shift_reg_1_0 = _RANDOM[3'h3][0];
        rd_shift_reg_1_1 = _RANDOM[3'h3][1];
        rd_shift_reg_1_2 = _RANDOM[3'h3][2];
        rd_shift_reg_1_3 = _RANDOM[3'h3][3];
        rd_shift_reg_1_4 = _RANDOM[3'h3][4];
        rd_shift_reg_1_5 = _RANDOM[3'h3][5];
        rd_shift_reg_1_6 = _RANDOM[3'h3][6];
        rd_shift_reg_1_7 = _RANDOM[3'h3][7];
        rd_shift_reg_1_8 = _RANDOM[3'h3][8];
        rd_shift_reg_1_9 = _RANDOM[3'h3][9];
        rd_shift_reg_1_10 = _RANDOM[3'h3][10];
        rd_shift_reg_1_11 = _RANDOM[3'h3][11];
        rd_shift_reg_1_12 = _RANDOM[3'h3][12];
        rd_shift_reg_1_13 = _RANDOM[3'h3][13];
        rd_shift_reg_1_14 = _RANDOM[3'h3][14];
        rd_shift_reg_1_15 = _RANDOM[3'h3][15];
        rd_shift_reg_1_16 = _RANDOM[3'h3][16];
        rd_shift_reg_1_17 = _RANDOM[3'h3][17];
        rd_shift_reg_1_18 = _RANDOM[3'h3][18];
        rd_shift_reg_1_19 = _RANDOM[3'h3][19];
        rd_shift_reg_1_20 = _RANDOM[3'h3][20];
        rd_shift_reg_1_21 = _RANDOM[3'h3][21];
        rd_shift_reg_1_22 = _RANDOM[3'h3][22];
        rd_shift_reg_1_23 = _RANDOM[3'h3][23];
        rd_shift_reg_1_24 = _RANDOM[3'h3][24];
        rd_shift_reg_1_25 = _RANDOM[3'h3][25];
        rd_shift_reg_1_26 = _RANDOM[3'h3][26];
        rd_shift_reg_1_27 = _RANDOM[3'h3][27];
        rd_shift_reg_1_28 = _RANDOM[3'h3][28];
        rd_shift_reg_1_29 = _RANDOM[3'h3][29];
        wr_delay_0 = _RANDOM[3'h4][1:0];
        wr_delay_1 = _RANDOM[3'h4][3:2];
        wr_delay_2 = _RANDOM[3'h4][5:4];
        wr_delay_3 = _RANDOM[3'h4][7:6];
        wr_delay_4 = _RANDOM[3'h4][9:8];
        wr_delay_5 = _RANDOM[3'h4][11:10];
        wr_delay_6 = _RANDOM[3'h4][13:12];
        wr_delay_7 = _RANDOM[3'h4][15:14];
        wr_delay_8 = _RANDOM[3'h4][17:16];
        wr_delay_9 = _RANDOM[3'h4][19:18];
        wr_delay_10 = _RANDOM[3'h4][21:20];
        wr_delay_11 = _RANDOM[3'h4][23:22];
        wr_delay_12 = _RANDOM[3'h4][25:24];
        wr_delay_13 = _RANDOM[3'h4][27:26];
        wr_delay_14 = _RANDOM[3'h4][29:28];
        wr_delay_15 = _RANDOM[3'h4][31:30];
        wr_delay_16 = _RANDOM[3'h5][1:0];
        wr_delay_17 = _RANDOM[3'h5][3:2];
        wr_delay_18 = _RANDOM[3'h5][5:4];
        wr_delay_19 = _RANDOM[3'h5][7:6];
        wr_delay_20 = _RANDOM[3'h5][9:8];
        wr_delay_21 = _RANDOM[3'h5][11:10];
        wr_delay_22 = _RANDOM[3'h5][13:12];
        wr_delay_23 = _RANDOM[3'h5][15:14];
        wr_delay_24 = _RANDOM[3'h5][17:16];
        wr_delay_25 = _RANDOM[3'h5][19:18];
        wr_delay_26 = _RANDOM[3'h5][21:20];
        wr_delay_27 = _RANDOM[3'h5][23:22];
        wr_delay_28 = _RANDOM[3'h5][25:24];
        wr_delay_29 = _RANDOM[3'h5][27:26];
        wr_delay_30 = _RANDOM[3'h5][29:28];
        wr_delay_31 = _RANDOM[3'h5][31:30];
        rd_delay_0 = _RANDOM[3'h6][1:0];
        rd_delay_1 = _RANDOM[3'h6][3:2];
        rd_delay_2 = _RANDOM[3'h6][5:4];
        rd_delay_3 = _RANDOM[3'h6][7:6];
        rd_delay_4 = _RANDOM[3'h6][9:8];
        rd_delay_5 = _RANDOM[3'h6][11:10];
        rd_delay_6 = _RANDOM[3'h6][13:12];
        rd_delay_7 = _RANDOM[3'h6][15:14];
        rd_delay_8 = _RANDOM[3'h6][17:16];
        rd_delay_9 = _RANDOM[3'h6][19:18];
        rd_delay_10 = _RANDOM[3'h6][21:20];
        rd_delay_11 = _RANDOM[3'h6][23:22];
        rd_delay_12 = _RANDOM[3'h6][25:24];
        rd_delay_13 = _RANDOM[3'h6][27:26];
        rd_delay_14 = _RANDOM[3'h6][29:28];
        rd_delay_15 = _RANDOM[3'h6][31:30];
        rd_delay_16 = _RANDOM[3'h7][1:0];
        rd_delay_17 = _RANDOM[3'h7][3:2];
        rd_delay_18 = _RANDOM[3'h7][5:4];
        rd_delay_19 = _RANDOM[3'h7][7:6];
        rd_delay_20 = _RANDOM[3'h7][9:8];
        rd_delay_21 = _RANDOM[3'h7][11:10];
        rd_delay_22 = _RANDOM[3'h7][13:12];
        rd_delay_23 = _RANDOM[3'h7][15:14];
        rd_delay_24 = _RANDOM[3'h7][17:16];
        rd_delay_25 = _RANDOM[3'h7][19:18];
        rd_delay_26 = _RANDOM[3'h7][21:20];
        rd_delay_27 = _RANDOM[3'h7][23:22];
        rd_delay_28 = _RANDOM[3'h7][25:24];
        rd_delay_29 = _RANDOM[3'h7][27:26];
        rd_delay_30 = _RANDOM[3'h7][29:28];
        rd_delay_31 = _RANDOM[3'h7][31:30];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_odt_out = {wr_odt[1] | rd_odt[1], wr_odt[0] | rd_odt[0]};
endmodule

module Command_Disassembly(
  input          clock,
                 reset,
  input  [35:0]  io_dfi_ctrl_in_dfi_address,
  input  [3:0]   io_dfi_ctrl_in_dfi_bank,
  input  [1:0]   io_dfi_ctrl_in_dfi_ras_n,
                 io_dfi_ctrl_in_dfi_cas_n,
                 io_dfi_ctrl_in_dfi_we_n,
                 io_dfi_ctrl_in_dfi_cs_n,
                 io_dfi_ctrl_in_dfi_act_n,
  input  [3:0]   io_dfi_ctrl_in_dfi_bg,
  input  [1:0]   io_dfi_ctrl_in_dfi_cke,
                 io_dfi_ctrl_in_dfi_reset_n,
  output [35:0]  io_dfi_ctrl_out_dfi_address,
  output [3:0]   io_dfi_ctrl_out_dfi_bank,
  output [1:0]   io_dfi_ctrl_out_dfi_ras_n,
                 io_dfi_ctrl_out_dfi_cas_n,
                 io_dfi_ctrl_out_dfi_we_n,
                 io_dfi_ctrl_out_dfi_cs_n,
                 io_dfi_ctrl_out_dfi_act_n,
  output [3:0]   io_dfi_ctrl_out_dfi_bg,
  output         io_dfi_ctrl_out_dfi_cid,
  output [1:0]   io_dfi_ctrl_out_dfi_cke,
                 io_dfi_ctrl_out_dfi_odt,
                 io_dfi_ctrl_out_dfi_reset_n,
  input  [511:0] io_dfi_wrdata,
  output [31:0]  io_dfi_wrdata_ch_out_dfi_wrdata_en,
  output [255:0] io_dfi_wrdata_ch_out_dfi_wdata,
  output [31:0]  io_dfi_wrdata_ch_out_dfi_wdata_cs_n,
                 io_dfi_rddata_in_dfi_rddata_en,
  input  [255:0] io_dfi_rddata_in_dfi_rddata,
  output [31:0]  io_dfi_rddata_in_dfi_rddata_cs_n,
  input  [31:0]  io_dfi_rddata_in_dfi_rddata_valid,
                 io_dfi_rddata_in_dfi_rddata_dbi_n,
  output [511:0] io_dfi_rddata_out,
  output         io_dfi_rddata_ready,
  input          io_dfi_parameter_mode,
  input  [4:0]   io_tphy_wrlat,
                 io_tphy_wrcslat,
                 io_tphy_wrdata,
                 io_trddata_en,
                 io_tphy_rdcslat,
                 io_tphy_rdlat,
                 io_wr_odt_delay,
                 io_wr_odt_hold,
                 io_rd_odt_delay,
                 io_rd_odt_hold
);

  wire [31:0]  _rddata_cs_delay_io_offset_out;
  wire [31:0]  _wrdata_cs_delay_io_offset_out;
  wire         dfi_write_ph1 =
    {io_dfi_ctrl_in_dfi_cs_n[1],
     io_dfi_ctrl_in_dfi_act_n[1],
     io_dfi_ctrl_in_dfi_ras_n[1],
     io_dfi_ctrl_in_dfi_cas_n[1],
     io_dfi_ctrl_in_dfi_we_n[1]} == 5'hC;
  wire         dfi_read_ph1 =
    {io_dfi_ctrl_in_dfi_cs_n[1],
     io_dfi_ctrl_in_dfi_act_n[1],
     io_dfi_ctrl_in_dfi_ras_n[1],
     io_dfi_ctrl_in_dfi_cas_n[1],
     io_dfi_ctrl_in_dfi_we_n[1]} == 5'hD;
  wire         dfi_write_ph0 =
    {io_dfi_ctrl_in_dfi_cs_n[0],
     io_dfi_ctrl_in_dfi_act_n[0],
     io_dfi_ctrl_in_dfi_ras_n[0],
     io_dfi_ctrl_in_dfi_cas_n[0],
     io_dfi_ctrl_in_dfi_we_n[0]} == 5'hC;
  wire         dfi_read_ph0 =
    {io_dfi_ctrl_in_dfi_cs_n[0],
     io_dfi_ctrl_in_dfi_act_n[0],
     io_dfi_ctrl_in_dfi_ras_n[0],
     io_dfi_ctrl_in_dfi_cas_n[0],
     io_dfi_ctrl_in_dfi_we_n[0]} == 5'hD;
  wire         write_vld = dfi_write_ph1 | dfi_write_ph0;
  wire         read_vld = dfi_read_ph1 | dfi_read_ph0;
  reg          RdValid;
  reg          RdValidCntr;
  reg  [255:0] RdData_buf_0;
  reg  [255:0] RdData_buf_1;
  wire         _GEN = RdValidCntr & (|io_dfi_rddata_in_dfi_rddata_valid);
  always @(posedge clock) begin
    if (reset) begin
      RdValid <= 1'h0;
      RdValidCntr <= 1'h0;
      RdData_buf_0 <= 256'h0;
      RdData_buf_1 <= 256'h0;
    end
    else begin
      RdValid <= _GEN;
      if (|io_dfi_rddata_in_dfi_rddata_valid)
        RdValidCntr <= RdValidCntr - 1'h1;
      if (_GEN | ~(~RdValidCntr & (|io_dfi_rddata_in_dfi_rddata_valid))) begin
      end
      else
        RdData_buf_0 <= io_dfi_rddata_in_dfi_rddata;
      if (_GEN)
        RdData_buf_1 <= io_dfi_rddata_in_dfi_rddata;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        RdValid = _RANDOM[5'h0][0];
        RdValidCntr = _RANDOM[5'h0][1];
        RdData_buf_0 =
          {_RANDOM[5'h0][31:2],
           _RANDOM[5'h1],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8][1:0]};
        RdData_buf_1 =
          {_RANDOM[5'h8][31:2],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10][1:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  WrData_offset wrdata_delay (
    .clock                 (clock),
    .reset                 (reset),
    .io_vld                (write_vld),
    .io_write_phase0       (dfi_write_ph0),
    .io_write_phase1       (dfi_write_ph1),
    .io_write_latency      ({11'h0, io_tphy_wrlat + io_tphy_wrdata}),
    .io_write_data         (io_dfi_wrdata),
    .io_offset_data        (io_dfi_wrdata_ch_out_dfi_wdata),
    .io_dfi_parameter_mode (io_dfi_parameter_mode)
  );
  dfi_en_offset wrdata_en_delay (
    .clock                 (clock),
    .reset                 (reset),
    .io_vld                (write_vld),
    .io_vld_ph0            (dfi_write_ph0),
    .io_vld_ph1            (dfi_write_ph1),
    .io_latency            ({11'h0, io_tphy_wrlat}),
    .io_offset_out         (io_dfi_wrdata_ch_out_dfi_wrdata_en),
    .io_dfi_parameter_mode (io_dfi_parameter_mode)
  );
  dfi_en_offset wrdata_cs_delay (
    .clock                 (clock),
    .reset                 (reset),
    .io_vld                (write_vld),
    .io_vld_ph0            (dfi_write_ph0),
    .io_vld_ph1            (dfi_write_ph1),
    .io_latency            ({11'h0, io_tphy_wrcslat}),
    .io_offset_out         (_wrdata_cs_delay_io_offset_out),
    .io_dfi_parameter_mode (io_dfi_parameter_mode)
  );
  dfi_en_offset rddata_cs_delay (
    .clock                 (clock),
    .reset                 (reset),
    .io_vld                (read_vld),
    .io_vld_ph0            (dfi_read_ph0),
    .io_vld_ph1            (dfi_read_ph1),
    .io_latency            ({11'h0, io_tphy_rdcslat}),
    .io_offset_out         (_rddata_cs_delay_io_offset_out),
    .io_dfi_parameter_mode (io_dfi_parameter_mode)
  );
  dfi_en_offset rddata_en_delay (
    .clock                 (clock),
    .reset                 (reset),
    .io_vld                (read_vld),
    .io_vld_ph0            (dfi_read_ph0),
    .io_vld_ph1            (dfi_read_ph1),
    .io_latency            ({11'h0, io_trddata_en}),
    .io_offset_out         (io_dfi_rddata_in_dfi_rddata_en),
    .io_dfi_parameter_mode (io_dfi_parameter_mode)
  );
  offset_odt_delay odt_delay (
    .clock               (clock),
    .reset               (reset),
    .io_write_vld_phase0 (dfi_write_ph0),
    .io_read_vld_phase0  (dfi_read_ph0),
    .io_write_vld_phase1 (dfi_write_ph1),
    .io_read_vld_phase1  (dfi_read_ph1),
    .io_wr_odt_delay     (io_wr_odt_delay),
    .io_wr_odt_hold      (io_wr_odt_hold),
    .io_rd_odt_delay     (io_rd_odt_delay),
    .io_rd_odt_hold      (io_rd_odt_hold),
    .io_odt_out          (io_dfi_ctrl_out_dfi_odt)
  );
  assign io_dfi_ctrl_out_dfi_address = io_dfi_ctrl_in_dfi_address;
  assign io_dfi_ctrl_out_dfi_bank = io_dfi_ctrl_in_dfi_bank;
  assign io_dfi_ctrl_out_dfi_ras_n = io_dfi_ctrl_in_dfi_ras_n;
  assign io_dfi_ctrl_out_dfi_cas_n = io_dfi_ctrl_in_dfi_cas_n;
  assign io_dfi_ctrl_out_dfi_we_n = io_dfi_ctrl_in_dfi_we_n;
  assign io_dfi_ctrl_out_dfi_cs_n = io_dfi_ctrl_in_dfi_cs_n;
  assign io_dfi_ctrl_out_dfi_act_n = io_dfi_ctrl_in_dfi_act_n;
  assign io_dfi_ctrl_out_dfi_bg = io_dfi_ctrl_in_dfi_bg;
  assign io_dfi_ctrl_out_dfi_cid = 1'h0;
  assign io_dfi_ctrl_out_dfi_cke = io_dfi_ctrl_in_dfi_cke;
  assign io_dfi_ctrl_out_dfi_reset_n = io_dfi_ctrl_in_dfi_reset_n;
  assign io_dfi_wrdata_ch_out_dfi_wdata_cs_n = ~_wrdata_cs_delay_io_offset_out;
  assign io_dfi_rddata_in_dfi_rddata_cs_n = ~_rddata_cs_delay_io_offset_out;
  assign io_dfi_rddata_out = {RdData_buf_1, RdData_buf_0};
  assign io_dfi_rddata_ready = RdValid;
endmodule

module SCG_V2(
  input          clock,
                 reset,
  output [35:0]  io_dfi_dfictrl_dfi_address,
  output [3:0]   io_dfi_dfictrl_dfi_bank,
  output [1:0]   io_dfi_dfictrl_dfi_ras_n,
                 io_dfi_dfictrl_dfi_cas_n,
                 io_dfi_dfictrl_dfi_we_n,
                 io_dfi_dfictrl_dfi_cs_n,
                 io_dfi_dfictrl_dfi_act_n,
  output [3:0]   io_dfi_dfictrl_dfi_bg,
  output         io_dfi_dfictrl_dfi_cid,
  output [1:0]   io_dfi_dfictrl_dfi_cke,
                 io_dfi_dfictrl_dfi_odt,
                 io_dfi_dfictrl_dfi_reset_n,
  output [31:0]  io_dfi_dfiwrdata_dfi_wrdata_en,
  output [255:0] io_dfi_dfiwrdata_dfi_wdata,
  output [31:0]  io_dfi_dfiwrdata_dfi_wdata_cs_n,
                 io_dfi_dfiwrdata_dfi_wdata_mask,
                 io_dfi_dfirddata_dfi_rddata_en,
  input  [255:0] io_dfi_dfirddata_dfi_rddata,
  output [31:0]  io_dfi_dfirddata_dfi_rddata_cs_n,
  input  [31:0]  io_dfi_dfirddata_dfi_rddata_valid,
                 io_dfi_dfirddata_dfi_rddata_dbi_n,
  output         io_dfi_dfiupdate_dfi_ctrlupd_req,
  input          io_dfi_dfiupdate_dfi_ctrlupd_ack,
                 io_dfi_dfiupdate_dfi_phyupd_req,
  input  [1:0]   io_dfi_dfiupdate_dfi_phyupd_type,
  output         io_dfi_dfiupdate_dfi_phyupd_ack,
  output [31:0]  io_dfi_dfistatus_dfi_data_byte_disable,
  output [1:0]   io_dfi_dfistatus_dfi_dram_clk_disable,
                 io_dfi_dfistatus_dfi_freq_ratio,
  output         io_dfi_dfistatus_dfi_init_start,
  input          io_dfi_dfistatus_dfi_init_complete,
  output         io_dfi_dfistatus_dfi_parity_in,
  input  [1:0]   io_dfi_dfistatus_dfi_alert_n,
  input          io_dfi_dfitraining_dfi_rdlvl_req,
  input  [1:0]   io_dfi_dfitraining_dfi_phy_rdlvl_cs_n,
  output         io_dfi_dfitraining_dfi_rdlvl_en,
  input  [3:0]   io_dfi_dfitraining_dfi_rdlvl_resp,
  input          io_dfi_dfitraining_dfi_rdlvl_gate_req,
  input  [1:0]   io_dfi_dfitraining_dfi_phy_rdlvl_gate_cs_n,
  output         io_dfi_dfitraining_dfi_rdlvl_gate_en,
  input  [3:0]   io_dfi_dfitraining_dfi_wrlvl_req,
  input  [1:0]   io_dfi_dfitraining_dfi_phy_wrlvl_cs_n,
  output         io_dfi_dfitraining_dfi_wrlvl_en,
                 io_dfi_dfitraining_dfi_wrlvl_strobe,
  input  [3:0]   io_dfi_dfitraining_dfi_wrlvl_resp,
  output [7:0]   io_dfi_dfitraining_dfi_lvl_pattern,
  output         io_dfi_dfitraining_dfi_lvl_periodic,
  input          io_dfi_dfitraining_dfi_phylvl_req_cs_n,
  output [1:0]   io_dfi_dfitraining_dfi_phylvl_ack_cs_n,
  output         io_dfi_dfilp_dfi_lp_ctrl_req,
                 io_dfi_dfilp_dfi_lp_data_req,
  output [3:0]   io_dfi_dfilp_dfi_lp_wakeup,
  input          io_dfi_dfilp_dfi_lp_ack,
  output         io_As2ScgCmd_ready,
  input          io_As2ScgCmd_valid,
                 io_As2ScgCmd_bits_ADR_cmdtype,
                 io_As2ScgCmd_bits_ADR_adr_rank,
  input  [1:0]   io_As2ScgCmd_bits_ADR_adr_group,
                 io_As2ScgCmd_bits_ADR_adr_bank,
  input  [17:0]  io_As2ScgCmd_bits_ADR_adr_row,
  input  [9:0]   io_As2ScgCmd_bits_ADR_adr_col,
  input  [16:0]  io_As2ScgCmd_bits_ADR_adr_cmdToken,
  input          io_As2ScgCmd_bits_pri,
  input  [511:0] io_As2ScgWrdata_wdata,
  input  [63:0]  io_As2ScgWrdata_wstrb,
  input          io_Scg2AsRddata_ready,
  output         io_Scg2AsRddata_valid,
  output [511:0] io_Scg2AsRddata_bits_rdata,
  output [16:0]  io_Scg2AsRddata_bits_rtoken,
  input  [5:0]   io_scgregio_tRRDS,
                 io_scgregio_tRRDL,
  input  [7:0]   io_scgregio_tFAW,
  input  [5:0]   io_scgregio_tRCD,
                 io_scgregio_tRP,
  input  [7:0]   io_scgregio_tCCDS,
                 io_scgregio_tCCDL,
                 io_scgregio_tWTRS,
                 io_scgregio_tWTRL,
                 io_scgregio_tRTW,
                 io_scgregio_tWR,
                 io_scgregio_tRTP,
                 io_scgregio_tRAS,
                 io_scgregio_AL,
                 io_scgregio_WL,
                 io_scgregio_RL,
                 io_scgregio_BL,
  input  [15:0]  io_scgregio_tREFI,
  input  [31:0]  io_scgregio_tZQINTVL,
  input  [11:0]  io_scgregio_tRFC,
  input  [7:0]   io_scgregio_tZQCS,
                 io_scgregio_tphyWrlat,
                 io_scgregio_tphyWrcslat,
                 io_scgregio_tphyWrdata,
                 io_scgregio_trddataEn,
                 io_scgregio_tphyRdcslat,
                 io_scgregio_tphyRdlat,
                 io_scgregio_wrOdtDelay,
                 io_scgregio_wrOdtHold,
                 io_scgregio_rdOdtDelay,
                 io_scgregio_rdOdtHold,
  input          io_scgregio_dfiMode,
  input  [8:0]   io_scgregio_clspgTmInit,
  input  [1:0]   io_scgregio_prePolicy,
  output [2:0]   io_scgregio_RGState_0,
                 io_scgregio_RGState_1,
                 io_scgregio_RGState_2,
                 io_scgregio_RGState_3,
                 io_scgregio_refState,
  input          io_scgregio_dfiInitStart,
  output         io_scgregio_dfiInitComplete,
                 io_scgregio_ddrInitEnd,
  input  [20:0]  io_scgregio_dramRstn,
  input  [10:0]  io_scgregio_postCke,
  input  [23:0]  io_scgregio_preCke,
  input  [7:0]   io_scgregio_mrs2other,
  input  [3:0]   io_scgregio_mrs2mrs,
  input  [11:0]  io_scgregio_zqinit,
  input  [15:0]  io_scgregio_mrs1,
                 io_scgregio_mrs0,
                 io_scgregio_mrs3,
                 io_scgregio_mrs2,
                 io_scgregio_mrs5,
                 io_scgregio_mrs4,
                 io_scgregio_mrs6,
  input  [5:0]   io_scgregio_cmdGear,
  input  [7:0]   io_scgregio_syncGear,
                 io_scgregio_gearHold,
                 io_scgregio_gearSetup,
  input          io_scgregio_blkTGeardown,
                 io_scgregio_geardownMode,
                 io_calDone
);

  wire [511:0] _u_Command_Disassembly_io_dfi_rddata_out;
  wire         _u_Command_Disassembly_io_dfi_rddata_ready;
  wire [3:0]   _u_DataStorage_io_ready;
  wire [511:0] _u_DataStorage_io_dout;
  wire         _u_ddr_init_io_zqlreq;
  wire         _u_ddr_init_io_dram_rst_n;
  wire         _u_ddr_init_io_init_cke;
  wire         _u_ddr_init_io_MrsReq;
  wire [1:0]   _u_ddr_init_io_MrsBG;
  wire [1:0]   _u_ddr_init_io_MrsBA;
  wire [17:0]  _u_ddr_init_io_MrsAddr;
  wire         _u_ddr_init_io_end_init_ddr;
  wire         _u_ddr_init_io_init_in_progress;
  wire         _u_widthMatch_io_W2TC_write_phase0;
  wire         _u_widthMatch_io_W2TC_write_phase1;
  wire         _u_widthMatch_io_W2TC_read_phase0;
  wire         _u_widthMatch_io_W2TC_read_phase1;
  wire         _u_widthMatch_io_W2TC_pre_phase0;
  wire         _u_widthMatch_io_W2TC_pre_phase1;
  wire         _u_widthMatch_io_W2TC_act_phase0;
  wire         _u_widthMatch_io_W2TC_act_phase1;
  wire [1:0]   _u_widthMatch_io_W2TC_dfi_phase0_bg;
  wire [1:0]   _u_widthMatch_io_W2TC_dfi_phase0_ba;
  wire [1:0]   _u_widthMatch_io_W2TC_dfi_phase1_bg;
  wire [1:0]   _u_widthMatch_io_W2TC_dfi_phase1_ba;
  wire         _u_widthMatch_io_dfiWriteCas;
  wire         _u_widthMatch_io_dfiReadCas;
  wire [1:0]   _u_widthMatch_io_writeGroup;
  wire [16:0]  _u_widthMatch_io_rtokenBuf;
  wire [17:0]  _u_widthMatch_io_dfiAdr_0;
  wire [17:0]  _u_widthMatch_io_dfiAdr_1;
  wire [1:0]   _u_widthMatch_io_dfiBa_0;
  wire [1:0]   _u_widthMatch_io_dfiBa_1;
  wire         _u_widthMatch_io_dfiRasN_0;
  wire         _u_widthMatch_io_dfiRasN_1;
  wire         _u_widthMatch_io_dfiCasN_0;
  wire         _u_widthMatch_io_dfiCasN_1;
  wire         _u_widthMatch_io_dfiWeN_0;
  wire         _u_widthMatch_io_dfiWeN_1;
  wire         _u_widthMatch_io_dfiCsN_0;
  wire         _u_widthMatch_io_dfiCsN_1;
  wire         _u_widthMatch_io_dfiActN_0;
  wire         _u_widthMatch_io_dfiActN_1;
  wire [1:0]   _u_widthMatch_io_dfiBg_0;
  wire [1:0]   _u_widthMatch_io_dfiBg_1;
  wire         _u_widthMatch_io_dfiCke_0;
  wire         _u_widthMatch_io_dfiCke_1;
  wire         _u_widthMatch_io_dfiResetN_0;
  wire         _u_widthMatch_io_dfiResetN_1;
  wire         _u_TimingCheck_3_io_time_ok_tRRD_L_OK;
  wire         _u_TimingCheck_3_io_time_ok_tRRD_S_OK;
  wire         _u_TimingCheck_3_io_time_ok_tFAW_OK;
  wire         _u_TimingCheck_3_io_time_ok_tRAS_OK_0;
  wire         _u_TimingCheck_3_io_time_ok_tRAS_OK_1;
  wire         _u_TimingCheck_3_io_time_ok_tRAS_OK_2;
  wire         _u_TimingCheck_3_io_time_ok_tRAS_OK_3;
  wire         _u_TimingCheck_3_io_time_ok_tRCD_OK_0;
  wire         _u_TimingCheck_3_io_time_ok_tRCD_OK_1;
  wire         _u_TimingCheck_3_io_time_ok_tRCD_OK_2;
  wire         _u_TimingCheck_3_io_time_ok_tRCD_OK_3;
  wire         _u_TimingCheck_3_io_time_ok_tRP_OK_0;
  wire         _u_TimingCheck_3_io_time_ok_tRP_OK_1;
  wire         _u_TimingCheck_3_io_time_ok_tRP_OK_2;
  wire         _u_TimingCheck_3_io_time_ok_tRP_OK_3;
  wire         _u_TimingCheck_3_io_time_ok_tCCD_L_OK;
  wire         _u_TimingCheck_3_io_time_ok_tCCD_S_OK;
  wire         _u_TimingCheck_3_io_time_ok_tWR_OK_0;
  wire         _u_TimingCheck_3_io_time_ok_tWR_OK_1;
  wire         _u_TimingCheck_3_io_time_ok_tWR_OK_2;
  wire         _u_TimingCheck_3_io_time_ok_tWR_OK_3;
  wire         _u_TimingCheck_3_io_time_ok_tRTW_OK;
  wire         _u_TimingCheck_3_io_time_ok_tRTP_OK_0;
  wire         _u_TimingCheck_3_io_time_ok_tRTP_OK_1;
  wire         _u_TimingCheck_3_io_time_ok_tRTP_OK_2;
  wire         _u_TimingCheck_3_io_time_ok_tRTP_OK_3;
  wire         _u_TimingCheck_3_io_time_ok_tWTR_L_OK;
  wire         _u_TimingCheck_3_io_time_ok_tWTR_S_OK;
  wire         _u_TimingCheck_3_io_TC2REF_RTP_OK;
  wire         _u_TimingCheck_3_io_TC2REF_RAS_OK;
  wire         _u_TimingCheck_3_io_TC2REF_WTP_OK;
  wire         _u_TimingCheck_2_io_time_ok_tRRD_L_OK;
  wire         _u_TimingCheck_2_io_time_ok_tRRD_S_OK;
  wire         _u_TimingCheck_2_io_time_ok_tFAW_OK;
  wire         _u_TimingCheck_2_io_time_ok_tRAS_OK_0;
  wire         _u_TimingCheck_2_io_time_ok_tRAS_OK_1;
  wire         _u_TimingCheck_2_io_time_ok_tRAS_OK_2;
  wire         _u_TimingCheck_2_io_time_ok_tRAS_OK_3;
  wire         _u_TimingCheck_2_io_time_ok_tRCD_OK_0;
  wire         _u_TimingCheck_2_io_time_ok_tRCD_OK_1;
  wire         _u_TimingCheck_2_io_time_ok_tRCD_OK_2;
  wire         _u_TimingCheck_2_io_time_ok_tRCD_OK_3;
  wire         _u_TimingCheck_2_io_time_ok_tRP_OK_0;
  wire         _u_TimingCheck_2_io_time_ok_tRP_OK_1;
  wire         _u_TimingCheck_2_io_time_ok_tRP_OK_2;
  wire         _u_TimingCheck_2_io_time_ok_tRP_OK_3;
  wire         _u_TimingCheck_2_io_time_ok_tCCD_L_OK;
  wire         _u_TimingCheck_2_io_time_ok_tCCD_S_OK;
  wire         _u_TimingCheck_2_io_time_ok_tWR_OK_0;
  wire         _u_TimingCheck_2_io_time_ok_tWR_OK_1;
  wire         _u_TimingCheck_2_io_time_ok_tWR_OK_2;
  wire         _u_TimingCheck_2_io_time_ok_tWR_OK_3;
  wire         _u_TimingCheck_2_io_time_ok_tRTW_OK;
  wire         _u_TimingCheck_2_io_time_ok_tRTP_OK_0;
  wire         _u_TimingCheck_2_io_time_ok_tRTP_OK_1;
  wire         _u_TimingCheck_2_io_time_ok_tRTP_OK_2;
  wire         _u_TimingCheck_2_io_time_ok_tRTP_OK_3;
  wire         _u_TimingCheck_2_io_time_ok_tWTR_L_OK;
  wire         _u_TimingCheck_2_io_time_ok_tWTR_S_OK;
  wire         _u_TimingCheck_2_io_TC2REF_RTP_OK;
  wire         _u_TimingCheck_2_io_TC2REF_RAS_OK;
  wire         _u_TimingCheck_2_io_TC2REF_WTP_OK;
  wire         _u_TimingCheck_1_io_time_ok_tRRD_L_OK;
  wire         _u_TimingCheck_1_io_time_ok_tRRD_S_OK;
  wire         _u_TimingCheck_1_io_time_ok_tFAW_OK;
  wire         _u_TimingCheck_1_io_time_ok_tRAS_OK_0;
  wire         _u_TimingCheck_1_io_time_ok_tRAS_OK_1;
  wire         _u_TimingCheck_1_io_time_ok_tRAS_OK_2;
  wire         _u_TimingCheck_1_io_time_ok_tRAS_OK_3;
  wire         _u_TimingCheck_1_io_time_ok_tRCD_OK_0;
  wire         _u_TimingCheck_1_io_time_ok_tRCD_OK_1;
  wire         _u_TimingCheck_1_io_time_ok_tRCD_OK_2;
  wire         _u_TimingCheck_1_io_time_ok_tRCD_OK_3;
  wire         _u_TimingCheck_1_io_time_ok_tRP_OK_0;
  wire         _u_TimingCheck_1_io_time_ok_tRP_OK_1;
  wire         _u_TimingCheck_1_io_time_ok_tRP_OK_2;
  wire         _u_TimingCheck_1_io_time_ok_tRP_OK_3;
  wire         _u_TimingCheck_1_io_time_ok_tCCD_L_OK;
  wire         _u_TimingCheck_1_io_time_ok_tCCD_S_OK;
  wire         _u_TimingCheck_1_io_time_ok_tWR_OK_0;
  wire         _u_TimingCheck_1_io_time_ok_tWR_OK_1;
  wire         _u_TimingCheck_1_io_time_ok_tWR_OK_2;
  wire         _u_TimingCheck_1_io_time_ok_tWR_OK_3;
  wire         _u_TimingCheck_1_io_time_ok_tRTW_OK;
  wire         _u_TimingCheck_1_io_time_ok_tRTP_OK_0;
  wire         _u_TimingCheck_1_io_time_ok_tRTP_OK_1;
  wire         _u_TimingCheck_1_io_time_ok_tRTP_OK_2;
  wire         _u_TimingCheck_1_io_time_ok_tRTP_OK_3;
  wire         _u_TimingCheck_1_io_time_ok_tWTR_L_OK;
  wire         _u_TimingCheck_1_io_time_ok_tWTR_S_OK;
  wire         _u_TimingCheck_1_io_TC2REF_RTP_OK;
  wire         _u_TimingCheck_1_io_TC2REF_RAS_OK;
  wire         _u_TimingCheck_1_io_TC2REF_WTP_OK;
  wire         _u_TimingCheck_0_io_time_ok_tRRD_L_OK;
  wire         _u_TimingCheck_0_io_time_ok_tRRD_S_OK;
  wire         _u_TimingCheck_0_io_time_ok_tFAW_OK;
  wire         _u_TimingCheck_0_io_time_ok_tRAS_OK_0;
  wire         _u_TimingCheck_0_io_time_ok_tRAS_OK_1;
  wire         _u_TimingCheck_0_io_time_ok_tRAS_OK_2;
  wire         _u_TimingCheck_0_io_time_ok_tRAS_OK_3;
  wire         _u_TimingCheck_0_io_time_ok_tRCD_OK_0;
  wire         _u_TimingCheck_0_io_time_ok_tRCD_OK_1;
  wire         _u_TimingCheck_0_io_time_ok_tRCD_OK_2;
  wire         _u_TimingCheck_0_io_time_ok_tRCD_OK_3;
  wire         _u_TimingCheck_0_io_time_ok_tRP_OK_0;
  wire         _u_TimingCheck_0_io_time_ok_tRP_OK_1;
  wire         _u_TimingCheck_0_io_time_ok_tRP_OK_2;
  wire         _u_TimingCheck_0_io_time_ok_tRP_OK_3;
  wire         _u_TimingCheck_0_io_time_ok_tCCD_L_OK;
  wire         _u_TimingCheck_0_io_time_ok_tCCD_S_OK;
  wire         _u_TimingCheck_0_io_time_ok_tWR_OK_0;
  wire         _u_TimingCheck_0_io_time_ok_tWR_OK_1;
  wire         _u_TimingCheck_0_io_time_ok_tWR_OK_2;
  wire         _u_TimingCheck_0_io_time_ok_tWR_OK_3;
  wire         _u_TimingCheck_0_io_time_ok_tRTW_OK;
  wire         _u_TimingCheck_0_io_time_ok_tRTP_OK_0;
  wire         _u_TimingCheck_0_io_time_ok_tRTP_OK_1;
  wire         _u_TimingCheck_0_io_time_ok_tRTP_OK_2;
  wire         _u_TimingCheck_0_io_time_ok_tRTP_OK_3;
  wire         _u_TimingCheck_0_io_time_ok_tWTR_L_OK;
  wire         _u_TimingCheck_0_io_time_ok_tWTR_S_OK;
  wire         _u_TimingCheck_0_io_TC2REF_RTP_OK;
  wire         _u_TimingCheck_0_io_TC2REF_RAS_OK;
  wire         _u_TimingCheck_0_io_TC2REF_WTP_OK;
  wire         _u_RequestGenerate_3_io_trans_ready;
  wire         _u_RequestGenerate_3_io_ReflinkRG_master_flowAck_0;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_Cas_PopReq;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_Act_PopReq;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_Pre_PopReq;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_preReq;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_actReq;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_readReq;
  wire         _u_RequestGenerate_3_io_arblinkRG_out_writeReq;
  wire [1:0]   _u_RequestGenerate_3_io_arblinkRG_out_actAdr_group;
  wire [1:0]   _u_RequestGenerate_3_io_arblinkRG_out_actAdr_bank;
  wire [17:0]  _u_RequestGenerate_3_io_arblinkRG_out_actAdr_row;
  wire [1:0]   _u_RequestGenerate_3_io_arblinkRG_out_preAdr_group;
  wire [1:0]   _u_RequestGenerate_3_io_arblinkRG_out_preAdr_bank;
  wire [17:0]  _u_RequestGenerate_3_io_arblinkRG_out_preAdr_row;
  wire [1:0]   _u_RequestGenerate_3_io_arblinkRG_out_casAdr_group;
  wire [1:0]   _u_RequestGenerate_3_io_arblinkRG_out_casAdr_bank;
  wire [9:0]   _u_RequestGenerate_3_io_arblinkRG_out_casAdr_col;
  wire [16:0]  _u_RequestGenerate_3_io_arblinkRG_out_casAdr_cmdToken;
  wire         _u_RequestGenerate_3_io_RG2TC_act_req;
  wire [1:0]   _u_RequestGenerate_3_io_RG2TC_act_ba;
  wire         _u_RequestGenerate_3_io_RG2TC_write_req;
  wire         _u_RequestGenerate_3_io_RG2TC_read_req;
  wire [1:0]   _u_RequestGenerate_3_io_RG2TC_cas_ba;
  wire         _u_RequestGenerate_3_io_RG2TC_pre_req;
  wire [1:0]   _u_RequestGenerate_3_io_RG2TC_pre_ba;
  wire         _u_RequestGenerate_2_io_trans_ready;
  wire         _u_RequestGenerate_2_io_ReflinkRG_master_flowAck_0;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_Cas_PopReq;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_Act_PopReq;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_Pre_PopReq;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_preReq;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_actReq;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_readReq;
  wire         _u_RequestGenerate_2_io_arblinkRG_out_writeReq;
  wire [1:0]   _u_RequestGenerate_2_io_arblinkRG_out_actAdr_group;
  wire [1:0]   _u_RequestGenerate_2_io_arblinkRG_out_actAdr_bank;
  wire [17:0]  _u_RequestGenerate_2_io_arblinkRG_out_actAdr_row;
  wire [1:0]   _u_RequestGenerate_2_io_arblinkRG_out_preAdr_group;
  wire [1:0]   _u_RequestGenerate_2_io_arblinkRG_out_preAdr_bank;
  wire [17:0]  _u_RequestGenerate_2_io_arblinkRG_out_preAdr_row;
  wire [1:0]   _u_RequestGenerate_2_io_arblinkRG_out_casAdr_group;
  wire [1:0]   _u_RequestGenerate_2_io_arblinkRG_out_casAdr_bank;
  wire [9:0]   _u_RequestGenerate_2_io_arblinkRG_out_casAdr_col;
  wire [16:0]  _u_RequestGenerate_2_io_arblinkRG_out_casAdr_cmdToken;
  wire         _u_RequestGenerate_2_io_RG2TC_act_req;
  wire [1:0]   _u_RequestGenerate_2_io_RG2TC_act_ba;
  wire         _u_RequestGenerate_2_io_RG2TC_write_req;
  wire         _u_RequestGenerate_2_io_RG2TC_read_req;
  wire [1:0]   _u_RequestGenerate_2_io_RG2TC_cas_ba;
  wire         _u_RequestGenerate_2_io_RG2TC_pre_req;
  wire [1:0]   _u_RequestGenerate_2_io_RG2TC_pre_ba;
  wire         _u_RequestGenerate_1_io_trans_ready;
  wire         _u_RequestGenerate_1_io_ReflinkRG_master_flowAck_0;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_Cas_PopReq;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_Act_PopReq;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_Pre_PopReq;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_preReq;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_actReq;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_readReq;
  wire         _u_RequestGenerate_1_io_arblinkRG_out_writeReq;
  wire [1:0]   _u_RequestGenerate_1_io_arblinkRG_out_actAdr_group;
  wire [1:0]   _u_RequestGenerate_1_io_arblinkRG_out_actAdr_bank;
  wire [17:0]  _u_RequestGenerate_1_io_arblinkRG_out_actAdr_row;
  wire [1:0]   _u_RequestGenerate_1_io_arblinkRG_out_preAdr_group;
  wire [1:0]   _u_RequestGenerate_1_io_arblinkRG_out_preAdr_bank;
  wire [17:0]  _u_RequestGenerate_1_io_arblinkRG_out_preAdr_row;
  wire [1:0]   _u_RequestGenerate_1_io_arblinkRG_out_casAdr_group;
  wire [1:0]   _u_RequestGenerate_1_io_arblinkRG_out_casAdr_bank;
  wire [9:0]   _u_RequestGenerate_1_io_arblinkRG_out_casAdr_col;
  wire [16:0]  _u_RequestGenerate_1_io_arblinkRG_out_casAdr_cmdToken;
  wire         _u_RequestGenerate_1_io_RG2TC_act_req;
  wire [1:0]   _u_RequestGenerate_1_io_RG2TC_act_ba;
  wire         _u_RequestGenerate_1_io_RG2TC_write_req;
  wire         _u_RequestGenerate_1_io_RG2TC_read_req;
  wire [1:0]   _u_RequestGenerate_1_io_RG2TC_cas_ba;
  wire         _u_RequestGenerate_1_io_RG2TC_pre_req;
  wire [1:0]   _u_RequestGenerate_1_io_RG2TC_pre_ba;
  wire         _u_RequestGenerate_0_io_trans_ready;
  wire         _u_RequestGenerate_0_io_ReflinkRG_master_flowAck_0;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_Cas_PopReq;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_Act_PopReq;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_Pre_PopReq;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_preReq;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_actReq;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_readReq;
  wire         _u_RequestGenerate_0_io_arblinkRG_out_writeReq;
  wire [1:0]   _u_RequestGenerate_0_io_arblinkRG_out_actAdr_group;
  wire [1:0]   _u_RequestGenerate_0_io_arblinkRG_out_actAdr_bank;
  wire [17:0]  _u_RequestGenerate_0_io_arblinkRG_out_actAdr_row;
  wire [1:0]   _u_RequestGenerate_0_io_arblinkRG_out_preAdr_group;
  wire [1:0]   _u_RequestGenerate_0_io_arblinkRG_out_preAdr_bank;
  wire [17:0]  _u_RequestGenerate_0_io_arblinkRG_out_preAdr_row;
  wire [1:0]   _u_RequestGenerate_0_io_arblinkRG_out_casAdr_group;
  wire [1:0]   _u_RequestGenerate_0_io_arblinkRG_out_casAdr_bank;
  wire [9:0]   _u_RequestGenerate_0_io_arblinkRG_out_casAdr_col;
  wire [16:0]  _u_RequestGenerate_0_io_arblinkRG_out_casAdr_cmdToken;
  wire         _u_RequestGenerate_0_io_RG2TC_act_req;
  wire [1:0]   _u_RequestGenerate_0_io_RG2TC_act_ba;
  wire         _u_RequestGenerate_0_io_RG2TC_write_req;
  wire         _u_RequestGenerate_0_io_RG2TC_read_req;
  wire [1:0]   _u_RequestGenerate_0_io_RG2TC_cas_ba;
  wire         _u_RequestGenerate_0_io_RG2TC_pre_req;
  wire [1:0]   _u_RequestGenerate_0_io_RG2TC_pre_ba;
  wire         _u_Ref_io_linkRG_slave_flowReq;
  wire         _u_Ref_io_linkRG_slave_releaseReq;
  wire         _u_Ref_io_linkRG_slave_preIss;
  wire         _u_Ref_io_linkArb_refIss;
  wire         _u_Ref_io_linkArb_zqIss;
  wire         _u_Ref_io_linkArb_preIss;
  wire         _u_arbitrate_io_arb2RG_arbout_0_Pre_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_0_Cas_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_0_Act_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_1_Pre_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_1_Cas_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_1_Act_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_2_Pre_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_2_Cas_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_2_Act_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_3_Pre_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_3_Cas_PopOK;
  wire         _u_arbitrate_io_arb2RG_arbout_3_Act_PopOK;
  wire         _u_arbitrate_io_arb2WM_actReq;
  wire [1:0]   _u_arbitrate_io_arb2WM_winGroupA;
  wire [1:0]   _u_arbitrate_io_arb2WM_winBankAT;
  wire [17:0]  _u_arbitrate_io_arb2WM_winROW;
  wire [17:0]  _u_arbitrate_io_arb2WM_winROWP;
  wire         _u_arbitrate_io_arb2WM_writeReq;
  wire         _u_arbitrate_io_arb2WM_readReq;
  wire [16:0]  _u_arbitrate_io_arb2WM_readToken;
  wire [1:0]   _u_arbitrate_io_arb2WM_groupCas;
  wire [1:0]   _u_arbitrate_io_arb2WM_bankCas;
  wire [9:0]   _u_arbitrate_io_arb2WM_winCOL;
  wire         _u_arbitrate_io_arb2WM_preReq;
  wire [1:0]   _u_arbitrate_io_arb2WM_winGroupP;
  wire [1:0]   _u_arbitrate_io_arb2WM_winBankP;
  wire         _u_arbitrate_io_arb2WM_arb2WM_refInt_refIss;
  wire         _u_arbitrate_io_arb2WM_arb2WM_refInt_zqIss;
  wire         _u_arbitrate_io_arb2WM_arb2WM_refInt_preIss;
  wire         _u_fifo_wrap_io_din_ready;
  wire         _u_fifo_wrap_io_dout_0_valid;
  wire [2:0]   _u_fifo_wrap_io_dout_0_bits_cmdtype;
  wire         _u_fifo_wrap_io_dout_0_bits_adr_rank;
  wire [1:0]   _u_fifo_wrap_io_dout_0_bits_adr_group;
  wire [1:0]   _u_fifo_wrap_io_dout_0_bits_adr_bank;
  wire [17:0]  _u_fifo_wrap_io_dout_0_bits_adr_row;
  wire [9:0]   _u_fifo_wrap_io_dout_0_bits_adr_col;
  wire [16:0]  _u_fifo_wrap_io_dout_0_bits_adr_cmdToken;
  wire         _u_fifo_wrap_io_dout_1_valid;
  wire [2:0]   _u_fifo_wrap_io_dout_1_bits_cmdtype;
  wire         _u_fifo_wrap_io_dout_1_bits_adr_rank;
  wire [1:0]   _u_fifo_wrap_io_dout_1_bits_adr_group;
  wire [1:0]   _u_fifo_wrap_io_dout_1_bits_adr_bank;
  wire [17:0]  _u_fifo_wrap_io_dout_1_bits_adr_row;
  wire [9:0]   _u_fifo_wrap_io_dout_1_bits_adr_col;
  wire [16:0]  _u_fifo_wrap_io_dout_1_bits_adr_cmdToken;
  wire         _u_fifo_wrap_io_dout_2_valid;
  wire [2:0]   _u_fifo_wrap_io_dout_2_bits_cmdtype;
  wire         _u_fifo_wrap_io_dout_2_bits_adr_rank;
  wire [1:0]   _u_fifo_wrap_io_dout_2_bits_adr_group;
  wire [1:0]   _u_fifo_wrap_io_dout_2_bits_adr_bank;
  wire [17:0]  _u_fifo_wrap_io_dout_2_bits_adr_row;
  wire [9:0]   _u_fifo_wrap_io_dout_2_bits_adr_col;
  wire [16:0]  _u_fifo_wrap_io_dout_2_bits_adr_cmdToken;
  wire         _u_fifo_wrap_io_dout_3_valid;
  wire [2:0]   _u_fifo_wrap_io_dout_3_bits_cmdtype;
  wire         _u_fifo_wrap_io_dout_3_bits_adr_rank;
  wire [1:0]   _u_fifo_wrap_io_dout_3_bits_adr_group;
  wire [1:0]   _u_fifo_wrap_io_dout_3_bits_adr_bank;
  wire [17:0]  _u_fifo_wrap_io_dout_3_bits_adr_row;
  wire [9:0]   _u_fifo_wrap_io_dout_3_bits_adr_col;
  wire [16:0]  _u_fifo_wrap_io_dout_3_bits_adr_cmdToken;
  wire         donttouch_flag = 1'h0;
  wire         _u_TimingCheck_3_io_CalDone_T = _u_ddr_init_io_end_init_ddr & io_calDone;
  wire [15:0]  _GEN = {10'h0, io_scgregio_tRP};
  wire [15:0]  _GEN_0 = {7'h0, io_scgregio_clspgTmInit};
  wire [15:0]  _GEN_1 = {10'h0, io_scgregio_tRRDS};
  wire [15:0]  _GEN_2 = {10'h0, io_scgregio_tRRDL};
  wire [15:0]  _GEN_3 = {8'h0, io_scgregio_tFAW};
  wire [15:0]  _GEN_4 = {8'h0, io_scgregio_tRAS};
  wire [15:0]  _GEN_5 = {10'h0, io_scgregio_tRCD};
  wire [15:0]  _GEN_6 = {8'h0, io_scgregio_tCCDS};
  wire [15:0]  _GEN_7 = {8'h0, io_scgregio_tCCDL};
  wire [15:0]  _GEN_8 = {8'h0, io_scgregio_tWR};
  wire [15:0]  _GEN_9 = {8'h0, io_scgregio_tWTRS};
  wire [15:0]  _GEN_10 = {8'h0, io_scgregio_tWTRL};
  wire [15:0]  _GEN_11 = {8'h0, io_scgregio_tRTW};
  wire [15:0]  _GEN_12 = {8'h0, io_scgregio_tRTP};
  wire [15:0]  _GEN_13 = {8'h0, io_scgregio_WL};
  wire [15:0]  _GEN_14 = {8'h0, io_scgregio_BL};
  wire [1:0]   io_dfi_dfistatus_dfi_freq_ratio_0 = {1'h0, donttouch_flag};
  fifo_wrap u_fifo_wrap (
    .clock                       (clock),
    .reset                       (reset),
    .io_din_ready                (_u_fifo_wrap_io_din_ready),
    .io_din_valid                (io_As2ScgCmd_valid),
    .io_din_bits_cmdtype         ({2'h0, io_As2ScgCmd_bits_ADR_cmdtype}),
    .io_din_bits_adr_rank        (io_As2ScgCmd_bits_ADR_adr_rank),
    .io_din_bits_adr_group       (io_As2ScgCmd_bits_ADR_adr_group),
    .io_din_bits_adr_bank        (io_As2ScgCmd_bits_ADR_adr_bank),
    .io_din_bits_adr_row         (io_As2ScgCmd_bits_ADR_adr_row),
    .io_din_bits_adr_col         (io_As2ScgCmd_bits_ADR_adr_col),
    .io_din_bits_adr_cmdToken    (io_As2ScgCmd_bits_ADR_adr_cmdToken),
    .io_WrDataFifoRdy            (_u_DataStorage_io_ready),
    .io_dout_0_ready             (_u_RequestGenerate_0_io_trans_ready),
    .io_dout_0_valid             (_u_fifo_wrap_io_dout_0_valid),
    .io_dout_0_bits_cmdtype      (_u_fifo_wrap_io_dout_0_bits_cmdtype),
    .io_dout_0_bits_adr_rank     (_u_fifo_wrap_io_dout_0_bits_adr_rank),
    .io_dout_0_bits_adr_group    (_u_fifo_wrap_io_dout_0_bits_adr_group),
    .io_dout_0_bits_adr_bank     (_u_fifo_wrap_io_dout_0_bits_adr_bank),
    .io_dout_0_bits_adr_row      (_u_fifo_wrap_io_dout_0_bits_adr_row),
    .io_dout_0_bits_adr_col      (_u_fifo_wrap_io_dout_0_bits_adr_col),
    .io_dout_0_bits_adr_cmdToken (_u_fifo_wrap_io_dout_0_bits_adr_cmdToken),
    .io_dout_1_ready             (_u_RequestGenerate_1_io_trans_ready),
    .io_dout_1_valid             (_u_fifo_wrap_io_dout_1_valid),
    .io_dout_1_bits_cmdtype      (_u_fifo_wrap_io_dout_1_bits_cmdtype),
    .io_dout_1_bits_adr_rank     (_u_fifo_wrap_io_dout_1_bits_adr_rank),
    .io_dout_1_bits_adr_group    (_u_fifo_wrap_io_dout_1_bits_adr_group),
    .io_dout_1_bits_adr_bank     (_u_fifo_wrap_io_dout_1_bits_adr_bank),
    .io_dout_1_bits_adr_row      (_u_fifo_wrap_io_dout_1_bits_adr_row),
    .io_dout_1_bits_adr_col      (_u_fifo_wrap_io_dout_1_bits_adr_col),
    .io_dout_1_bits_adr_cmdToken (_u_fifo_wrap_io_dout_1_bits_adr_cmdToken),
    .io_dout_2_ready             (_u_RequestGenerate_2_io_trans_ready),
    .io_dout_2_valid             (_u_fifo_wrap_io_dout_2_valid),
    .io_dout_2_bits_cmdtype      (_u_fifo_wrap_io_dout_2_bits_cmdtype),
    .io_dout_2_bits_adr_rank     (_u_fifo_wrap_io_dout_2_bits_adr_rank),
    .io_dout_2_bits_adr_group    (_u_fifo_wrap_io_dout_2_bits_adr_group),
    .io_dout_2_bits_adr_bank     (_u_fifo_wrap_io_dout_2_bits_adr_bank),
    .io_dout_2_bits_adr_row      (_u_fifo_wrap_io_dout_2_bits_adr_row),
    .io_dout_2_bits_adr_col      (_u_fifo_wrap_io_dout_2_bits_adr_col),
    .io_dout_2_bits_adr_cmdToken (_u_fifo_wrap_io_dout_2_bits_adr_cmdToken),
    .io_dout_3_ready             (_u_RequestGenerate_3_io_trans_ready),
    .io_dout_3_valid             (_u_fifo_wrap_io_dout_3_valid),
    .io_dout_3_bits_cmdtype      (_u_fifo_wrap_io_dout_3_bits_cmdtype),
    .io_dout_3_bits_adr_rank     (_u_fifo_wrap_io_dout_3_bits_adr_rank),
    .io_dout_3_bits_adr_group    (_u_fifo_wrap_io_dout_3_bits_adr_group),
    .io_dout_3_bits_adr_bank     (_u_fifo_wrap_io_dout_3_bits_adr_bank),
    .io_dout_3_bits_adr_row      (_u_fifo_wrap_io_dout_3_bits_adr_row),
    .io_dout_3_bits_adr_col      (_u_fifo_wrap_io_dout_3_bits_adr_col),
    .io_dout_3_bits_adr_cmdToken (_u_fifo_wrap_io_dout_3_bits_adr_cmdToken)
  );
  arbitrate u_arbitrate (
    .clock                             (clock),
    .reset                             (reset),
    .io_ref2arb_refIss                 (_u_Ref_io_linkArb_refIss),
    .io_ref2arb_zqIss                  (_u_Ref_io_linkArb_zqIss),
    .io_ref2arb_preIss                 (_u_Ref_io_linkArb_preIss),
    .io_arb2RG_arbout_0_Pre_PopOK      (_u_arbitrate_io_arb2RG_arbout_0_Pre_PopOK),
    .io_arb2RG_arbout_0_Cas_PopOK      (_u_arbitrate_io_arb2RG_arbout_0_Cas_PopOK),
    .io_arb2RG_arbout_0_Act_PopOK      (_u_arbitrate_io_arb2RG_arbout_0_Act_PopOK),
    .io_arb2RG_arbout_1_Pre_PopOK      (_u_arbitrate_io_arb2RG_arbout_1_Pre_PopOK),
    .io_arb2RG_arbout_1_Cas_PopOK      (_u_arbitrate_io_arb2RG_arbout_1_Cas_PopOK),
    .io_arb2RG_arbout_1_Act_PopOK      (_u_arbitrate_io_arb2RG_arbout_1_Act_PopOK),
    .io_arb2RG_arbout_2_Pre_PopOK      (_u_arbitrate_io_arb2RG_arbout_2_Pre_PopOK),
    .io_arb2RG_arbout_2_Cas_PopOK      (_u_arbitrate_io_arb2RG_arbout_2_Cas_PopOK),
    .io_arb2RG_arbout_2_Act_PopOK      (_u_arbitrate_io_arb2RG_arbout_2_Act_PopOK),
    .io_arb2RG_arbout_3_Pre_PopOK      (_u_arbitrate_io_arb2RG_arbout_3_Pre_PopOK),
    .io_arb2RG_arbout_3_Cas_PopOK      (_u_arbitrate_io_arb2RG_arbout_3_Cas_PopOK),
    .io_arb2RG_arbout_3_Act_PopOK      (_u_arbitrate_io_arb2RG_arbout_3_Act_PopOK),
    .io_arb2RG_arbin_0_Cas_PopReq      (_u_RequestGenerate_0_io_arblinkRG_out_Cas_PopReq),
    .io_arb2RG_arbin_0_Act_PopReq      (_u_RequestGenerate_0_io_arblinkRG_out_Act_PopReq),
    .io_arb2RG_arbin_0_Pre_PopReq      (_u_RequestGenerate_0_io_arblinkRG_out_Pre_PopReq),
    .io_arb2RG_arbin_0_preReq          (_u_RequestGenerate_0_io_arblinkRG_out_preReq),
    .io_arb2RG_arbin_0_actReq          (_u_RequestGenerate_0_io_arblinkRG_out_actReq),
    .io_arb2RG_arbin_0_readReq         (_u_RequestGenerate_0_io_arblinkRG_out_readReq),
    .io_arb2RG_arbin_0_writeReq        (_u_RequestGenerate_0_io_arblinkRG_out_writeReq),
    .io_arb2RG_arbin_0_actAdr_group
      (_u_RequestGenerate_0_io_arblinkRG_out_actAdr_group),
    .io_arb2RG_arbin_0_actAdr_bank
      (_u_RequestGenerate_0_io_arblinkRG_out_actAdr_bank),
    .io_arb2RG_arbin_0_actAdr_row      (_u_RequestGenerate_0_io_arblinkRG_out_actAdr_row),
    .io_arb2RG_arbin_0_preAdr_group
      (_u_RequestGenerate_0_io_arblinkRG_out_preAdr_group),
    .io_arb2RG_arbin_0_preAdr_bank
      (_u_RequestGenerate_0_io_arblinkRG_out_preAdr_bank),
    .io_arb2RG_arbin_0_preAdr_row      (_u_RequestGenerate_0_io_arblinkRG_out_preAdr_row),
    .io_arb2RG_arbin_0_casAdr_group
      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_group),
    .io_arb2RG_arbin_0_casAdr_bank
      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_bank),
    .io_arb2RG_arbin_0_casAdr_col      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_col),
    .io_arb2RG_arbin_0_casAdr_cmdToken
      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_cmdToken),
    .io_arb2RG_arbin_1_Cas_PopReq      (_u_RequestGenerate_1_io_arblinkRG_out_Cas_PopReq),
    .io_arb2RG_arbin_1_Act_PopReq      (_u_RequestGenerate_1_io_arblinkRG_out_Act_PopReq),
    .io_arb2RG_arbin_1_Pre_PopReq      (_u_RequestGenerate_1_io_arblinkRG_out_Pre_PopReq),
    .io_arb2RG_arbin_1_preReq          (_u_RequestGenerate_1_io_arblinkRG_out_preReq),
    .io_arb2RG_arbin_1_actReq          (_u_RequestGenerate_1_io_arblinkRG_out_actReq),
    .io_arb2RG_arbin_1_readReq         (_u_RequestGenerate_1_io_arblinkRG_out_readReq),
    .io_arb2RG_arbin_1_writeReq        (_u_RequestGenerate_1_io_arblinkRG_out_writeReq),
    .io_arb2RG_arbin_1_actAdr_group
      (_u_RequestGenerate_1_io_arblinkRG_out_actAdr_group),
    .io_arb2RG_arbin_1_actAdr_bank
      (_u_RequestGenerate_1_io_arblinkRG_out_actAdr_bank),
    .io_arb2RG_arbin_1_actAdr_row      (_u_RequestGenerate_1_io_arblinkRG_out_actAdr_row),
    .io_arb2RG_arbin_1_preAdr_group
      (_u_RequestGenerate_1_io_arblinkRG_out_preAdr_group),
    .io_arb2RG_arbin_1_preAdr_bank
      (_u_RequestGenerate_1_io_arblinkRG_out_preAdr_bank),
    .io_arb2RG_arbin_1_preAdr_row      (_u_RequestGenerate_1_io_arblinkRG_out_preAdr_row),
    .io_arb2RG_arbin_1_casAdr_group
      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_group),
    .io_arb2RG_arbin_1_casAdr_bank
      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_bank),
    .io_arb2RG_arbin_1_casAdr_col      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_col),
    .io_arb2RG_arbin_1_casAdr_cmdToken
      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_cmdToken),
    .io_arb2RG_arbin_2_Cas_PopReq      (_u_RequestGenerate_2_io_arblinkRG_out_Cas_PopReq),
    .io_arb2RG_arbin_2_Act_PopReq      (_u_RequestGenerate_2_io_arblinkRG_out_Act_PopReq),
    .io_arb2RG_arbin_2_Pre_PopReq      (_u_RequestGenerate_2_io_arblinkRG_out_Pre_PopReq),
    .io_arb2RG_arbin_2_preReq          (_u_RequestGenerate_2_io_arblinkRG_out_preReq),
    .io_arb2RG_arbin_2_actReq          (_u_RequestGenerate_2_io_arblinkRG_out_actReq),
    .io_arb2RG_arbin_2_readReq         (_u_RequestGenerate_2_io_arblinkRG_out_readReq),
    .io_arb2RG_arbin_2_writeReq        (_u_RequestGenerate_2_io_arblinkRG_out_writeReq),
    .io_arb2RG_arbin_2_actAdr_group
      (_u_RequestGenerate_2_io_arblinkRG_out_actAdr_group),
    .io_arb2RG_arbin_2_actAdr_bank
      (_u_RequestGenerate_2_io_arblinkRG_out_actAdr_bank),
    .io_arb2RG_arbin_2_actAdr_row      (_u_RequestGenerate_2_io_arblinkRG_out_actAdr_row),
    .io_arb2RG_arbin_2_preAdr_group
      (_u_RequestGenerate_2_io_arblinkRG_out_preAdr_group),
    .io_arb2RG_arbin_2_preAdr_bank
      (_u_RequestGenerate_2_io_arblinkRG_out_preAdr_bank),
    .io_arb2RG_arbin_2_preAdr_row      (_u_RequestGenerate_2_io_arblinkRG_out_preAdr_row),
    .io_arb2RG_arbin_2_casAdr_group
      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_group),
    .io_arb2RG_arbin_2_casAdr_bank
      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_bank),
    .io_arb2RG_arbin_2_casAdr_col      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_col),
    .io_arb2RG_arbin_2_casAdr_cmdToken
      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_cmdToken),
    .io_arb2RG_arbin_3_Cas_PopReq      (_u_RequestGenerate_3_io_arblinkRG_out_Cas_PopReq),
    .io_arb2RG_arbin_3_Act_PopReq      (_u_RequestGenerate_3_io_arblinkRG_out_Act_PopReq),
    .io_arb2RG_arbin_3_Pre_PopReq      (_u_RequestGenerate_3_io_arblinkRG_out_Pre_PopReq),
    .io_arb2RG_arbin_3_preReq          (_u_RequestGenerate_3_io_arblinkRG_out_preReq),
    .io_arb2RG_arbin_3_actReq          (_u_RequestGenerate_3_io_arblinkRG_out_actReq),
    .io_arb2RG_arbin_3_readReq         (_u_RequestGenerate_3_io_arblinkRG_out_readReq),
    .io_arb2RG_arbin_3_writeReq        (_u_RequestGenerate_3_io_arblinkRG_out_writeReq),
    .io_arb2RG_arbin_3_actAdr_group
      (_u_RequestGenerate_3_io_arblinkRG_out_actAdr_group),
    .io_arb2RG_arbin_3_actAdr_bank
      (_u_RequestGenerate_3_io_arblinkRG_out_actAdr_bank),
    .io_arb2RG_arbin_3_actAdr_row      (_u_RequestGenerate_3_io_arblinkRG_out_actAdr_row),
    .io_arb2RG_arbin_3_preAdr_group
      (_u_RequestGenerate_3_io_arblinkRG_out_preAdr_group),
    .io_arb2RG_arbin_3_preAdr_bank
      (_u_RequestGenerate_3_io_arblinkRG_out_preAdr_bank),
    .io_arb2RG_arbin_3_preAdr_row      (_u_RequestGenerate_3_io_arblinkRG_out_preAdr_row),
    .io_arb2RG_arbin_3_casAdr_group
      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_group),
    .io_arb2RG_arbin_3_casAdr_bank
      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_bank),
    .io_arb2RG_arbin_3_casAdr_col      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_col),
    .io_arb2RG_arbin_3_casAdr_cmdToken
      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_cmdToken),
    .io_arb2WM_actReq                  (_u_arbitrate_io_arb2WM_actReq),
    .io_arb2WM_winGroupA               (_u_arbitrate_io_arb2WM_winGroupA),
    .io_arb2WM_winBankAT               (_u_arbitrate_io_arb2WM_winBankAT),
    .io_arb2WM_winROW                  (_u_arbitrate_io_arb2WM_winROW),
    .io_arb2WM_winROWP                 (_u_arbitrate_io_arb2WM_winROWP),
    .io_arb2WM_writeReq                (_u_arbitrate_io_arb2WM_writeReq),
    .io_arb2WM_readReq                 (_u_arbitrate_io_arb2WM_readReq),
    .io_arb2WM_readToken               (_u_arbitrate_io_arb2WM_readToken),
    .io_arb2WM_groupCas                (_u_arbitrate_io_arb2WM_groupCas),
    .io_arb2WM_bankCas                 (_u_arbitrate_io_arb2WM_bankCas),
    .io_arb2WM_winCOL                  (_u_arbitrate_io_arb2WM_winCOL),
    .io_arb2WM_preReq                  (_u_arbitrate_io_arb2WM_preReq),
    .io_arb2WM_winGroupP               (_u_arbitrate_io_arb2WM_winGroupP),
    .io_arb2WM_winBankP                (_u_arbitrate_io_arb2WM_winBankP),
    .io_arb2WM_arb2WM_refInt_refIss    (_u_arbitrate_io_arb2WM_arb2WM_refInt_refIss),
    .io_arb2WM_arb2WM_refInt_zqIss     (_u_arbitrate_io_arb2WM_arb2WM_refInt_zqIss),
    .io_arb2WM_arb2WM_refInt_preIss    (_u_arbitrate_io_arb2WM_arb2WM_refInt_preIss)
  );
  Ref u_Ref (
    .clock                      (clock),
    .reset                      (reset),
    .io_CalDone                 (_u_TimingCheck_3_io_CalDone_T),
    .io_linkRG_slave_flowReq    (_u_Ref_io_linkRG_slave_flowReq),
    .io_linkRG_slave_releaseReq (_u_Ref_io_linkRG_slave_releaseReq),
    .io_linkRG_slave_preIss     (_u_Ref_io_linkRG_slave_preIss),
    .io_linkRG_master_flowAck_0 (_u_RequestGenerate_0_io_ReflinkRG_master_flowAck_0),
    .io_linkRG_master_flowAck_1 (_u_RequestGenerate_1_io_ReflinkRG_master_flowAck_0),
    .io_linkRG_master_flowAck_2 (_u_RequestGenerate_2_io_ReflinkRG_master_flowAck_0),
    .io_linkRG_master_flowAck_3 (_u_RequestGenerate_3_io_ReflinkRG_master_flowAck_0),
    .io_linkArb_refIss          (_u_Ref_io_linkArb_refIss),
    .io_linkArb_zqIss           (_u_Ref_io_linkArb_zqIss),
    .io_linkArb_preIss          (_u_Ref_io_linkArb_preIss),
    .io_time_tZQCS              ({8'h0, io_scgregio_tZQCS}),
    .io_time_tZQINTVL           (io_scgregio_tZQINTVL),
    .io_time_tRP                (_GEN),
    .io_time_tREFI              (io_scgregio_tREFI),
    .io_time_tRFC               ({4'h0, io_scgregio_tRFC}),
    .io_PREA_OK_0               (_u_TimingCheck_0_io_TC2REF_RTP_OK),
    .io_PREA_OK_1               (_u_TimingCheck_1_io_TC2REF_RTP_OK),
    .io_PREA_OK_2               (_u_TimingCheck_2_io_TC2REF_RTP_OK),
    .io_PREA_OK_3               (_u_TimingCheck_3_io_TC2REF_RTP_OK),
    .io_RASA_OK_0               (_u_TimingCheck_0_io_TC2REF_RAS_OK),
    .io_RASA_OK_1               (_u_TimingCheck_1_io_TC2REF_RAS_OK),
    .io_RASA_OK_2               (_u_TimingCheck_2_io_TC2REF_RAS_OK),
    .io_RASA_OK_3               (_u_TimingCheck_3_io_TC2REF_RAS_OK),
    .io_WTPA_OK_0               (_u_TimingCheck_0_io_TC2REF_WTP_OK),
    .io_WTPA_OK_1               (_u_TimingCheck_1_io_TC2REF_WTP_OK),
    .io_WTPA_OK_2               (_u_TimingCheck_2_io_TC2REF_WTP_OK),
    .io_WTPA_OK_3               (_u_TimingCheck_3_io_TC2REF_WTP_OK),
    .io_debug_ref_state         (io_scgregio_refState)
  );
  RequestGenerate u_RequestGenerate_0 (
    .clock                            (clock),
    .reset                            (reset),
    .io_calDone                       (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                            (2'h0),
    .io_pre_policy                    (io_scgregio_prePolicy),
    .io_closepage_time_init           (_GEN_0),
    .io_trans_ready                   (_u_RequestGenerate_0_io_trans_ready),
    .io_trans_valid                   (_u_fifo_wrap_io_dout_0_valid),
    .io_trans_bits_cmdtype            (_u_fifo_wrap_io_dout_0_bits_cmdtype),
    .io_trans_bits_adr_rank           (_u_fifo_wrap_io_dout_0_bits_adr_rank),
    .io_trans_bits_adr_group          (_u_fifo_wrap_io_dout_0_bits_adr_group),
    .io_trans_bits_adr_bank           (_u_fifo_wrap_io_dout_0_bits_adr_bank),
    .io_trans_bits_adr_row            (_u_fifo_wrap_io_dout_0_bits_adr_row),
    .io_trans_bits_adr_col            (_u_fifo_wrap_io_dout_0_bits_adr_col),
    .io_trans_bits_adr_cmdToken       (_u_fifo_wrap_io_dout_0_bits_adr_cmdToken),
    .io_ReflinkRG_slave_flowReq       (_u_Ref_io_linkRG_slave_flowReq),
    .io_ReflinkRG_slave_releaseReq    (_u_Ref_io_linkRG_slave_releaseReq),
    .io_ReflinkRG_slave_preIss        (_u_Ref_io_linkRG_slave_preIss),
    .io_ReflinkRG_master_flowAck_0
      (_u_RequestGenerate_0_io_ReflinkRG_master_flowAck_0),
    .io_TClinkRG_tRRD_L_OK            (_u_TimingCheck_0_io_time_ok_tRRD_L_OK),
    .io_TClinkRG_tRRD_S_OK            (_u_TimingCheck_0_io_time_ok_tRRD_S_OK),
    .io_TClinkRG_tFAW_OK              (_u_TimingCheck_0_io_time_ok_tFAW_OK),
    .io_TClinkRG_tRAS_OK_0            (_u_TimingCheck_0_io_time_ok_tRAS_OK_0),
    .io_TClinkRG_tRAS_OK_1            (_u_TimingCheck_0_io_time_ok_tRAS_OK_1),
    .io_TClinkRG_tRAS_OK_2            (_u_TimingCheck_0_io_time_ok_tRAS_OK_2),
    .io_TClinkRG_tRAS_OK_3            (_u_TimingCheck_0_io_time_ok_tRAS_OK_3),
    .io_TClinkRG_tRCD_OK_0            (_u_TimingCheck_0_io_time_ok_tRCD_OK_0),
    .io_TClinkRG_tRCD_OK_1            (_u_TimingCheck_0_io_time_ok_tRCD_OK_1),
    .io_TClinkRG_tRCD_OK_2            (_u_TimingCheck_0_io_time_ok_tRCD_OK_2),
    .io_TClinkRG_tRCD_OK_3            (_u_TimingCheck_0_io_time_ok_tRCD_OK_3),
    .io_TClinkRG_tRP_OK_0             (_u_TimingCheck_0_io_time_ok_tRP_OK_0),
    .io_TClinkRG_tRP_OK_1             (_u_TimingCheck_0_io_time_ok_tRP_OK_1),
    .io_TClinkRG_tRP_OK_2             (_u_TimingCheck_0_io_time_ok_tRP_OK_2),
    .io_TClinkRG_tRP_OK_3             (_u_TimingCheck_0_io_time_ok_tRP_OK_3),
    .io_TClinkRG_tCCD_L_OK            (_u_TimingCheck_0_io_time_ok_tCCD_L_OK),
    .io_TClinkRG_tCCD_S_OK            (_u_TimingCheck_0_io_time_ok_tCCD_S_OK),
    .io_TClinkRG_tWR_OK_0             (_u_TimingCheck_0_io_time_ok_tWR_OK_0),
    .io_TClinkRG_tWR_OK_1             (_u_TimingCheck_0_io_time_ok_tWR_OK_1),
    .io_TClinkRG_tWR_OK_2             (_u_TimingCheck_0_io_time_ok_tWR_OK_2),
    .io_TClinkRG_tWR_OK_3             (_u_TimingCheck_0_io_time_ok_tWR_OK_3),
    .io_TClinkRG_tRTW_OK              (_u_TimingCheck_0_io_time_ok_tRTW_OK),
    .io_TClinkRG_tRTP_OK_0            (_u_TimingCheck_0_io_time_ok_tRTP_OK_0),
    .io_TClinkRG_tRTP_OK_1            (_u_TimingCheck_0_io_time_ok_tRTP_OK_1),
    .io_TClinkRG_tRTP_OK_2            (_u_TimingCheck_0_io_time_ok_tRTP_OK_2),
    .io_TClinkRG_tRTP_OK_3            (_u_TimingCheck_0_io_time_ok_tRTP_OK_3),
    .io_TClinkRG_tWTR_L_OK            (_u_TimingCheck_0_io_time_ok_tWTR_L_OK),
    .io_TClinkRG_tWTR_S_OK            (_u_TimingCheck_0_io_time_ok_tWTR_S_OK),
    .io_arblinkRG_in_Pre_PopOK        (_u_arbitrate_io_arb2RG_arbout_0_Pre_PopOK),
    .io_arblinkRG_in_Cas_PopOK        (_u_arbitrate_io_arb2RG_arbout_0_Cas_PopOK),
    .io_arblinkRG_in_Act_PopOK        (_u_arbitrate_io_arb2RG_arbout_0_Act_PopOK),
    .io_arblinkRG_out_Cas_PopReq      (_u_RequestGenerate_0_io_arblinkRG_out_Cas_PopReq),
    .io_arblinkRG_out_Act_PopReq      (_u_RequestGenerate_0_io_arblinkRG_out_Act_PopReq),
    .io_arblinkRG_out_Pre_PopReq      (_u_RequestGenerate_0_io_arblinkRG_out_Pre_PopReq),
    .io_arblinkRG_out_preReq          (_u_RequestGenerate_0_io_arblinkRG_out_preReq),
    .io_arblinkRG_out_actReq          (_u_RequestGenerate_0_io_arblinkRG_out_actReq),
    .io_arblinkRG_out_readReq         (_u_RequestGenerate_0_io_arblinkRG_out_readReq),
    .io_arblinkRG_out_writeReq        (_u_RequestGenerate_0_io_arblinkRG_out_writeReq),
    .io_arblinkRG_out_actAdr_group
      (_u_RequestGenerate_0_io_arblinkRG_out_actAdr_group),
    .io_arblinkRG_out_actAdr_bank     (_u_RequestGenerate_0_io_arblinkRG_out_actAdr_bank),
    .io_arblinkRG_out_actAdr_row      (_u_RequestGenerate_0_io_arblinkRG_out_actAdr_row),
    .io_arblinkRG_out_preAdr_group
      (_u_RequestGenerate_0_io_arblinkRG_out_preAdr_group),
    .io_arblinkRG_out_preAdr_bank     (_u_RequestGenerate_0_io_arblinkRG_out_preAdr_bank),
    .io_arblinkRG_out_preAdr_row      (_u_RequestGenerate_0_io_arblinkRG_out_preAdr_row),
    .io_arblinkRG_out_casAdr_group
      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_group),
    .io_arblinkRG_out_casAdr_bank     (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_bank),
    .io_arblinkRG_out_casAdr_col      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_col),
    .io_arblinkRG_out_casAdr_cmdToken
      (_u_RequestGenerate_0_io_arblinkRG_out_casAdr_cmdToken),
    .io_RG2TC_act_req                 (_u_RequestGenerate_0_io_RG2TC_act_req),
    .io_RG2TC_act_ba                  (_u_RequestGenerate_0_io_RG2TC_act_ba),
    .io_RG2TC_write_req               (_u_RequestGenerate_0_io_RG2TC_write_req),
    .io_RG2TC_read_req                (_u_RequestGenerate_0_io_RG2TC_read_req),
    .io_RG2TC_cas_ba                  (_u_RequestGenerate_0_io_RG2TC_cas_ba),
    .io_RG2TC_pre_req                 (_u_RequestGenerate_0_io_RG2TC_pre_req),
    .io_RG2TC_pre_ba                  (_u_RequestGenerate_0_io_RG2TC_pre_ba),
    .io_WM2RG_write_phase0            (_u_widthMatch_io_W2TC_write_phase0),
    .io_WM2RG_write_phase1            (_u_widthMatch_io_W2TC_write_phase1),
    .io_WM2RG_read_phase0             (_u_widthMatch_io_W2TC_read_phase0),
    .io_WM2RG_read_phase1             (_u_widthMatch_io_W2TC_read_phase1),
    .io_WM2RG_act_phase0              (_u_widthMatch_io_W2TC_act_phase0),
    .io_WM2RG_act_phase1              (_u_widthMatch_io_W2TC_act_phase1),
    .io_WM2RG_dfi_phase0_bg           (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_WM2RG_dfi_phase1_bg           (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_debug_state                   (io_scgregio_RGState_0)
  );
  RequestGenerate u_RequestGenerate_1 (
    .clock                            (clock),
    .reset                            (reset),
    .io_calDone                       (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                            (2'h1),
    .io_pre_policy                    (io_scgregio_prePolicy),
    .io_closepage_time_init           (_GEN_0),
    .io_trans_ready                   (_u_RequestGenerate_1_io_trans_ready),
    .io_trans_valid                   (_u_fifo_wrap_io_dout_1_valid),
    .io_trans_bits_cmdtype            (_u_fifo_wrap_io_dout_1_bits_cmdtype),
    .io_trans_bits_adr_rank           (_u_fifo_wrap_io_dout_1_bits_adr_rank),
    .io_trans_bits_adr_group          (_u_fifo_wrap_io_dout_1_bits_adr_group),
    .io_trans_bits_adr_bank           (_u_fifo_wrap_io_dout_1_bits_adr_bank),
    .io_trans_bits_adr_row            (_u_fifo_wrap_io_dout_1_bits_adr_row),
    .io_trans_bits_adr_col            (_u_fifo_wrap_io_dout_1_bits_adr_col),
    .io_trans_bits_adr_cmdToken       (_u_fifo_wrap_io_dout_1_bits_adr_cmdToken),
    .io_ReflinkRG_slave_flowReq       (_u_Ref_io_linkRG_slave_flowReq),
    .io_ReflinkRG_slave_releaseReq    (_u_Ref_io_linkRG_slave_releaseReq),
    .io_ReflinkRG_slave_preIss        (_u_Ref_io_linkRG_slave_preIss),
    .io_ReflinkRG_master_flowAck_0
      (_u_RequestGenerate_1_io_ReflinkRG_master_flowAck_0),
    .io_TClinkRG_tRRD_L_OK            (_u_TimingCheck_1_io_time_ok_tRRD_L_OK),
    .io_TClinkRG_tRRD_S_OK            (_u_TimingCheck_1_io_time_ok_tRRD_S_OK),
    .io_TClinkRG_tFAW_OK              (_u_TimingCheck_1_io_time_ok_tFAW_OK),
    .io_TClinkRG_tRAS_OK_0            (_u_TimingCheck_1_io_time_ok_tRAS_OK_0),
    .io_TClinkRG_tRAS_OK_1            (_u_TimingCheck_1_io_time_ok_tRAS_OK_1),
    .io_TClinkRG_tRAS_OK_2            (_u_TimingCheck_1_io_time_ok_tRAS_OK_2),
    .io_TClinkRG_tRAS_OK_3            (_u_TimingCheck_1_io_time_ok_tRAS_OK_3),
    .io_TClinkRG_tRCD_OK_0            (_u_TimingCheck_1_io_time_ok_tRCD_OK_0),
    .io_TClinkRG_tRCD_OK_1            (_u_TimingCheck_1_io_time_ok_tRCD_OK_1),
    .io_TClinkRG_tRCD_OK_2            (_u_TimingCheck_1_io_time_ok_tRCD_OK_2),
    .io_TClinkRG_tRCD_OK_3            (_u_TimingCheck_1_io_time_ok_tRCD_OK_3),
    .io_TClinkRG_tRP_OK_0             (_u_TimingCheck_1_io_time_ok_tRP_OK_0),
    .io_TClinkRG_tRP_OK_1             (_u_TimingCheck_1_io_time_ok_tRP_OK_1),
    .io_TClinkRG_tRP_OK_2             (_u_TimingCheck_1_io_time_ok_tRP_OK_2),
    .io_TClinkRG_tRP_OK_3             (_u_TimingCheck_1_io_time_ok_tRP_OK_3),
    .io_TClinkRG_tCCD_L_OK            (_u_TimingCheck_1_io_time_ok_tCCD_L_OK),
    .io_TClinkRG_tCCD_S_OK            (_u_TimingCheck_1_io_time_ok_tCCD_S_OK),
    .io_TClinkRG_tWR_OK_0             (_u_TimingCheck_1_io_time_ok_tWR_OK_0),
    .io_TClinkRG_tWR_OK_1             (_u_TimingCheck_1_io_time_ok_tWR_OK_1),
    .io_TClinkRG_tWR_OK_2             (_u_TimingCheck_1_io_time_ok_tWR_OK_2),
    .io_TClinkRG_tWR_OK_3             (_u_TimingCheck_1_io_time_ok_tWR_OK_3),
    .io_TClinkRG_tRTW_OK              (_u_TimingCheck_1_io_time_ok_tRTW_OK),
    .io_TClinkRG_tRTP_OK_0            (_u_TimingCheck_1_io_time_ok_tRTP_OK_0),
    .io_TClinkRG_tRTP_OK_1            (_u_TimingCheck_1_io_time_ok_tRTP_OK_1),
    .io_TClinkRG_tRTP_OK_2            (_u_TimingCheck_1_io_time_ok_tRTP_OK_2),
    .io_TClinkRG_tRTP_OK_3            (_u_TimingCheck_1_io_time_ok_tRTP_OK_3),
    .io_TClinkRG_tWTR_L_OK            (_u_TimingCheck_1_io_time_ok_tWTR_L_OK),
    .io_TClinkRG_tWTR_S_OK            (_u_TimingCheck_1_io_time_ok_tWTR_S_OK),
    .io_arblinkRG_in_Pre_PopOK        (_u_arbitrate_io_arb2RG_arbout_1_Pre_PopOK),
    .io_arblinkRG_in_Cas_PopOK        (_u_arbitrate_io_arb2RG_arbout_1_Cas_PopOK),
    .io_arblinkRG_in_Act_PopOK        (_u_arbitrate_io_arb2RG_arbout_1_Act_PopOK),
    .io_arblinkRG_out_Cas_PopReq      (_u_RequestGenerate_1_io_arblinkRG_out_Cas_PopReq),
    .io_arblinkRG_out_Act_PopReq      (_u_RequestGenerate_1_io_arblinkRG_out_Act_PopReq),
    .io_arblinkRG_out_Pre_PopReq      (_u_RequestGenerate_1_io_arblinkRG_out_Pre_PopReq),
    .io_arblinkRG_out_preReq          (_u_RequestGenerate_1_io_arblinkRG_out_preReq),
    .io_arblinkRG_out_actReq          (_u_RequestGenerate_1_io_arblinkRG_out_actReq),
    .io_arblinkRG_out_readReq         (_u_RequestGenerate_1_io_arblinkRG_out_readReq),
    .io_arblinkRG_out_writeReq        (_u_RequestGenerate_1_io_arblinkRG_out_writeReq),
    .io_arblinkRG_out_actAdr_group
      (_u_RequestGenerate_1_io_arblinkRG_out_actAdr_group),
    .io_arblinkRG_out_actAdr_bank     (_u_RequestGenerate_1_io_arblinkRG_out_actAdr_bank),
    .io_arblinkRG_out_actAdr_row      (_u_RequestGenerate_1_io_arblinkRG_out_actAdr_row),
    .io_arblinkRG_out_preAdr_group
      (_u_RequestGenerate_1_io_arblinkRG_out_preAdr_group),
    .io_arblinkRG_out_preAdr_bank     (_u_RequestGenerate_1_io_arblinkRG_out_preAdr_bank),
    .io_arblinkRG_out_preAdr_row      (_u_RequestGenerate_1_io_arblinkRG_out_preAdr_row),
    .io_arblinkRG_out_casAdr_group
      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_group),
    .io_arblinkRG_out_casAdr_bank     (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_bank),
    .io_arblinkRG_out_casAdr_col      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_col),
    .io_arblinkRG_out_casAdr_cmdToken
      (_u_RequestGenerate_1_io_arblinkRG_out_casAdr_cmdToken),
    .io_RG2TC_act_req                 (_u_RequestGenerate_1_io_RG2TC_act_req),
    .io_RG2TC_act_ba                  (_u_RequestGenerate_1_io_RG2TC_act_ba),
    .io_RG2TC_write_req               (_u_RequestGenerate_1_io_RG2TC_write_req),
    .io_RG2TC_read_req                (_u_RequestGenerate_1_io_RG2TC_read_req),
    .io_RG2TC_cas_ba                  (_u_RequestGenerate_1_io_RG2TC_cas_ba),
    .io_RG2TC_pre_req                 (_u_RequestGenerate_1_io_RG2TC_pre_req),
    .io_RG2TC_pre_ba                  (_u_RequestGenerate_1_io_RG2TC_pre_ba),
    .io_WM2RG_write_phase0            (_u_widthMatch_io_W2TC_write_phase0),
    .io_WM2RG_write_phase1            (_u_widthMatch_io_W2TC_write_phase1),
    .io_WM2RG_read_phase0             (_u_widthMatch_io_W2TC_read_phase0),
    .io_WM2RG_read_phase1             (_u_widthMatch_io_W2TC_read_phase1),
    .io_WM2RG_act_phase0              (_u_widthMatch_io_W2TC_act_phase0),
    .io_WM2RG_act_phase1              (_u_widthMatch_io_W2TC_act_phase1),
    .io_WM2RG_dfi_phase0_bg           (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_WM2RG_dfi_phase1_bg           (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_debug_state                   (io_scgregio_RGState_1)
  );
  RequestGenerate u_RequestGenerate_2 (
    .clock                            (clock),
    .reset                            (reset),
    .io_calDone                       (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                            (2'h2),
    .io_pre_policy                    (io_scgregio_prePolicy),
    .io_closepage_time_init           (_GEN_0),
    .io_trans_ready                   (_u_RequestGenerate_2_io_trans_ready),
    .io_trans_valid                   (_u_fifo_wrap_io_dout_2_valid),
    .io_trans_bits_cmdtype            (_u_fifo_wrap_io_dout_2_bits_cmdtype),
    .io_trans_bits_adr_rank           (_u_fifo_wrap_io_dout_2_bits_adr_rank),
    .io_trans_bits_adr_group          (_u_fifo_wrap_io_dout_2_bits_adr_group),
    .io_trans_bits_adr_bank           (_u_fifo_wrap_io_dout_2_bits_adr_bank),
    .io_trans_bits_adr_row            (_u_fifo_wrap_io_dout_2_bits_adr_row),
    .io_trans_bits_adr_col            (_u_fifo_wrap_io_dout_2_bits_adr_col),
    .io_trans_bits_adr_cmdToken       (_u_fifo_wrap_io_dout_2_bits_adr_cmdToken),
    .io_ReflinkRG_slave_flowReq       (_u_Ref_io_linkRG_slave_flowReq),
    .io_ReflinkRG_slave_releaseReq    (_u_Ref_io_linkRG_slave_releaseReq),
    .io_ReflinkRG_slave_preIss        (_u_Ref_io_linkRG_slave_preIss),
    .io_ReflinkRG_master_flowAck_0
      (_u_RequestGenerate_2_io_ReflinkRG_master_flowAck_0),
    .io_TClinkRG_tRRD_L_OK            (_u_TimingCheck_2_io_time_ok_tRRD_L_OK),
    .io_TClinkRG_tRRD_S_OK            (_u_TimingCheck_2_io_time_ok_tRRD_S_OK),
    .io_TClinkRG_tFAW_OK              (_u_TimingCheck_2_io_time_ok_tFAW_OK),
    .io_TClinkRG_tRAS_OK_0            (_u_TimingCheck_2_io_time_ok_tRAS_OK_0),
    .io_TClinkRG_tRAS_OK_1            (_u_TimingCheck_2_io_time_ok_tRAS_OK_1),
    .io_TClinkRG_tRAS_OK_2            (_u_TimingCheck_2_io_time_ok_tRAS_OK_2),
    .io_TClinkRG_tRAS_OK_3            (_u_TimingCheck_2_io_time_ok_tRAS_OK_3),
    .io_TClinkRG_tRCD_OK_0            (_u_TimingCheck_2_io_time_ok_tRCD_OK_0),
    .io_TClinkRG_tRCD_OK_1            (_u_TimingCheck_2_io_time_ok_tRCD_OK_1),
    .io_TClinkRG_tRCD_OK_2            (_u_TimingCheck_2_io_time_ok_tRCD_OK_2),
    .io_TClinkRG_tRCD_OK_3            (_u_TimingCheck_2_io_time_ok_tRCD_OK_3),
    .io_TClinkRG_tRP_OK_0             (_u_TimingCheck_2_io_time_ok_tRP_OK_0),
    .io_TClinkRG_tRP_OK_1             (_u_TimingCheck_2_io_time_ok_tRP_OK_1),
    .io_TClinkRG_tRP_OK_2             (_u_TimingCheck_2_io_time_ok_tRP_OK_2),
    .io_TClinkRG_tRP_OK_3             (_u_TimingCheck_2_io_time_ok_tRP_OK_3),
    .io_TClinkRG_tCCD_L_OK            (_u_TimingCheck_2_io_time_ok_tCCD_L_OK),
    .io_TClinkRG_tCCD_S_OK            (_u_TimingCheck_2_io_time_ok_tCCD_S_OK),
    .io_TClinkRG_tWR_OK_0             (_u_TimingCheck_2_io_time_ok_tWR_OK_0),
    .io_TClinkRG_tWR_OK_1             (_u_TimingCheck_2_io_time_ok_tWR_OK_1),
    .io_TClinkRG_tWR_OK_2             (_u_TimingCheck_2_io_time_ok_tWR_OK_2),
    .io_TClinkRG_tWR_OK_3             (_u_TimingCheck_2_io_time_ok_tWR_OK_3),
    .io_TClinkRG_tRTW_OK              (_u_TimingCheck_2_io_time_ok_tRTW_OK),
    .io_TClinkRG_tRTP_OK_0            (_u_TimingCheck_2_io_time_ok_tRTP_OK_0),
    .io_TClinkRG_tRTP_OK_1            (_u_TimingCheck_2_io_time_ok_tRTP_OK_1),
    .io_TClinkRG_tRTP_OK_2            (_u_TimingCheck_2_io_time_ok_tRTP_OK_2),
    .io_TClinkRG_tRTP_OK_3            (_u_TimingCheck_2_io_time_ok_tRTP_OK_3),
    .io_TClinkRG_tWTR_L_OK            (_u_TimingCheck_2_io_time_ok_tWTR_L_OK),
    .io_TClinkRG_tWTR_S_OK            (_u_TimingCheck_2_io_time_ok_tWTR_S_OK),
    .io_arblinkRG_in_Pre_PopOK        (_u_arbitrate_io_arb2RG_arbout_2_Pre_PopOK),
    .io_arblinkRG_in_Cas_PopOK        (_u_arbitrate_io_arb2RG_arbout_2_Cas_PopOK),
    .io_arblinkRG_in_Act_PopOK        (_u_arbitrate_io_arb2RG_arbout_2_Act_PopOK),
    .io_arblinkRG_out_Cas_PopReq      (_u_RequestGenerate_2_io_arblinkRG_out_Cas_PopReq),
    .io_arblinkRG_out_Act_PopReq      (_u_RequestGenerate_2_io_arblinkRG_out_Act_PopReq),
    .io_arblinkRG_out_Pre_PopReq      (_u_RequestGenerate_2_io_arblinkRG_out_Pre_PopReq),
    .io_arblinkRG_out_preReq          (_u_RequestGenerate_2_io_arblinkRG_out_preReq),
    .io_arblinkRG_out_actReq          (_u_RequestGenerate_2_io_arblinkRG_out_actReq),
    .io_arblinkRG_out_readReq         (_u_RequestGenerate_2_io_arblinkRG_out_readReq),
    .io_arblinkRG_out_writeReq        (_u_RequestGenerate_2_io_arblinkRG_out_writeReq),
    .io_arblinkRG_out_actAdr_group
      (_u_RequestGenerate_2_io_arblinkRG_out_actAdr_group),
    .io_arblinkRG_out_actAdr_bank     (_u_RequestGenerate_2_io_arblinkRG_out_actAdr_bank),
    .io_arblinkRG_out_actAdr_row      (_u_RequestGenerate_2_io_arblinkRG_out_actAdr_row),
    .io_arblinkRG_out_preAdr_group
      (_u_RequestGenerate_2_io_arblinkRG_out_preAdr_group),
    .io_arblinkRG_out_preAdr_bank     (_u_RequestGenerate_2_io_arblinkRG_out_preAdr_bank),
    .io_arblinkRG_out_preAdr_row      (_u_RequestGenerate_2_io_arblinkRG_out_preAdr_row),
    .io_arblinkRG_out_casAdr_group
      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_group),
    .io_arblinkRG_out_casAdr_bank     (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_bank),
    .io_arblinkRG_out_casAdr_col      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_col),
    .io_arblinkRG_out_casAdr_cmdToken
      (_u_RequestGenerate_2_io_arblinkRG_out_casAdr_cmdToken),
    .io_RG2TC_act_req                 (_u_RequestGenerate_2_io_RG2TC_act_req),
    .io_RG2TC_act_ba                  (_u_RequestGenerate_2_io_RG2TC_act_ba),
    .io_RG2TC_write_req               (_u_RequestGenerate_2_io_RG2TC_write_req),
    .io_RG2TC_read_req                (_u_RequestGenerate_2_io_RG2TC_read_req),
    .io_RG2TC_cas_ba                  (_u_RequestGenerate_2_io_RG2TC_cas_ba),
    .io_RG2TC_pre_req                 (_u_RequestGenerate_2_io_RG2TC_pre_req),
    .io_RG2TC_pre_ba                  (_u_RequestGenerate_2_io_RG2TC_pre_ba),
    .io_WM2RG_write_phase0            (_u_widthMatch_io_W2TC_write_phase0),
    .io_WM2RG_write_phase1            (_u_widthMatch_io_W2TC_write_phase1),
    .io_WM2RG_read_phase0             (_u_widthMatch_io_W2TC_read_phase0),
    .io_WM2RG_read_phase1             (_u_widthMatch_io_W2TC_read_phase1),
    .io_WM2RG_act_phase0              (_u_widthMatch_io_W2TC_act_phase0),
    .io_WM2RG_act_phase1              (_u_widthMatch_io_W2TC_act_phase1),
    .io_WM2RG_dfi_phase0_bg           (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_WM2RG_dfi_phase1_bg           (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_debug_state                   (io_scgregio_RGState_2)
  );
  RequestGenerate u_RequestGenerate_3 (
    .clock                            (clock),
    .reset                            (reset),
    .io_calDone                       (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                            (2'h3),
    .io_pre_policy                    (io_scgregio_prePolicy),
    .io_closepage_time_init           (_GEN_0),
    .io_trans_ready                   (_u_RequestGenerate_3_io_trans_ready),
    .io_trans_valid                   (_u_fifo_wrap_io_dout_3_valid),
    .io_trans_bits_cmdtype            (_u_fifo_wrap_io_dout_3_bits_cmdtype),
    .io_trans_bits_adr_rank           (_u_fifo_wrap_io_dout_3_bits_adr_rank),
    .io_trans_bits_adr_group          (_u_fifo_wrap_io_dout_3_bits_adr_group),
    .io_trans_bits_adr_bank           (_u_fifo_wrap_io_dout_3_bits_adr_bank),
    .io_trans_bits_adr_row            (_u_fifo_wrap_io_dout_3_bits_adr_row),
    .io_trans_bits_adr_col            (_u_fifo_wrap_io_dout_3_bits_adr_col),
    .io_trans_bits_adr_cmdToken       (_u_fifo_wrap_io_dout_3_bits_adr_cmdToken),
    .io_ReflinkRG_slave_flowReq       (_u_Ref_io_linkRG_slave_flowReq),
    .io_ReflinkRG_slave_releaseReq    (_u_Ref_io_linkRG_slave_releaseReq),
    .io_ReflinkRG_slave_preIss        (_u_Ref_io_linkRG_slave_preIss),
    .io_ReflinkRG_master_flowAck_0
      (_u_RequestGenerate_3_io_ReflinkRG_master_flowAck_0),
    .io_TClinkRG_tRRD_L_OK            (_u_TimingCheck_3_io_time_ok_tRRD_L_OK),
    .io_TClinkRG_tRRD_S_OK            (_u_TimingCheck_3_io_time_ok_tRRD_S_OK),
    .io_TClinkRG_tFAW_OK              (_u_TimingCheck_3_io_time_ok_tFAW_OK),
    .io_TClinkRG_tRAS_OK_0            (_u_TimingCheck_3_io_time_ok_tRAS_OK_0),
    .io_TClinkRG_tRAS_OK_1            (_u_TimingCheck_3_io_time_ok_tRAS_OK_1),
    .io_TClinkRG_tRAS_OK_2            (_u_TimingCheck_3_io_time_ok_tRAS_OK_2),
    .io_TClinkRG_tRAS_OK_3            (_u_TimingCheck_3_io_time_ok_tRAS_OK_3),
    .io_TClinkRG_tRCD_OK_0            (_u_TimingCheck_3_io_time_ok_tRCD_OK_0),
    .io_TClinkRG_tRCD_OK_1            (_u_TimingCheck_3_io_time_ok_tRCD_OK_1),
    .io_TClinkRG_tRCD_OK_2            (_u_TimingCheck_3_io_time_ok_tRCD_OK_2),
    .io_TClinkRG_tRCD_OK_3            (_u_TimingCheck_3_io_time_ok_tRCD_OK_3),
    .io_TClinkRG_tRP_OK_0             (_u_TimingCheck_3_io_time_ok_tRP_OK_0),
    .io_TClinkRG_tRP_OK_1             (_u_TimingCheck_3_io_time_ok_tRP_OK_1),
    .io_TClinkRG_tRP_OK_2             (_u_TimingCheck_3_io_time_ok_tRP_OK_2),
    .io_TClinkRG_tRP_OK_3             (_u_TimingCheck_3_io_time_ok_tRP_OK_3),
    .io_TClinkRG_tCCD_L_OK            (_u_TimingCheck_3_io_time_ok_tCCD_L_OK),
    .io_TClinkRG_tCCD_S_OK            (_u_TimingCheck_3_io_time_ok_tCCD_S_OK),
    .io_TClinkRG_tWR_OK_0             (_u_TimingCheck_3_io_time_ok_tWR_OK_0),
    .io_TClinkRG_tWR_OK_1             (_u_TimingCheck_3_io_time_ok_tWR_OK_1),
    .io_TClinkRG_tWR_OK_2             (_u_TimingCheck_3_io_time_ok_tWR_OK_2),
    .io_TClinkRG_tWR_OK_3             (_u_TimingCheck_3_io_time_ok_tWR_OK_3),
    .io_TClinkRG_tRTW_OK              (_u_TimingCheck_3_io_time_ok_tRTW_OK),
    .io_TClinkRG_tRTP_OK_0            (_u_TimingCheck_3_io_time_ok_tRTP_OK_0),
    .io_TClinkRG_tRTP_OK_1            (_u_TimingCheck_3_io_time_ok_tRTP_OK_1),
    .io_TClinkRG_tRTP_OK_2            (_u_TimingCheck_3_io_time_ok_tRTP_OK_2),
    .io_TClinkRG_tRTP_OK_3            (_u_TimingCheck_3_io_time_ok_tRTP_OK_3),
    .io_TClinkRG_tWTR_L_OK            (_u_TimingCheck_3_io_time_ok_tWTR_L_OK),
    .io_TClinkRG_tWTR_S_OK            (_u_TimingCheck_3_io_time_ok_tWTR_S_OK),
    .io_arblinkRG_in_Pre_PopOK        (_u_arbitrate_io_arb2RG_arbout_3_Pre_PopOK),
    .io_arblinkRG_in_Cas_PopOK        (_u_arbitrate_io_arb2RG_arbout_3_Cas_PopOK),
    .io_arblinkRG_in_Act_PopOK        (_u_arbitrate_io_arb2RG_arbout_3_Act_PopOK),
    .io_arblinkRG_out_Cas_PopReq      (_u_RequestGenerate_3_io_arblinkRG_out_Cas_PopReq),
    .io_arblinkRG_out_Act_PopReq      (_u_RequestGenerate_3_io_arblinkRG_out_Act_PopReq),
    .io_arblinkRG_out_Pre_PopReq      (_u_RequestGenerate_3_io_arblinkRG_out_Pre_PopReq),
    .io_arblinkRG_out_preReq          (_u_RequestGenerate_3_io_arblinkRG_out_preReq),
    .io_arblinkRG_out_actReq          (_u_RequestGenerate_3_io_arblinkRG_out_actReq),
    .io_arblinkRG_out_readReq         (_u_RequestGenerate_3_io_arblinkRG_out_readReq),
    .io_arblinkRG_out_writeReq        (_u_RequestGenerate_3_io_arblinkRG_out_writeReq),
    .io_arblinkRG_out_actAdr_group
      (_u_RequestGenerate_3_io_arblinkRG_out_actAdr_group),
    .io_arblinkRG_out_actAdr_bank     (_u_RequestGenerate_3_io_arblinkRG_out_actAdr_bank),
    .io_arblinkRG_out_actAdr_row      (_u_RequestGenerate_3_io_arblinkRG_out_actAdr_row),
    .io_arblinkRG_out_preAdr_group
      (_u_RequestGenerate_3_io_arblinkRG_out_preAdr_group),
    .io_arblinkRG_out_preAdr_bank     (_u_RequestGenerate_3_io_arblinkRG_out_preAdr_bank),
    .io_arblinkRG_out_preAdr_row      (_u_RequestGenerate_3_io_arblinkRG_out_preAdr_row),
    .io_arblinkRG_out_casAdr_group
      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_group),
    .io_arblinkRG_out_casAdr_bank     (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_bank),
    .io_arblinkRG_out_casAdr_col      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_col),
    .io_arblinkRG_out_casAdr_cmdToken
      (_u_RequestGenerate_3_io_arblinkRG_out_casAdr_cmdToken),
    .io_RG2TC_act_req                 (_u_RequestGenerate_3_io_RG2TC_act_req),
    .io_RG2TC_act_ba                  (_u_RequestGenerate_3_io_RG2TC_act_ba),
    .io_RG2TC_write_req               (_u_RequestGenerate_3_io_RG2TC_write_req),
    .io_RG2TC_read_req                (_u_RequestGenerate_3_io_RG2TC_read_req),
    .io_RG2TC_cas_ba                  (_u_RequestGenerate_3_io_RG2TC_cas_ba),
    .io_RG2TC_pre_req                 (_u_RequestGenerate_3_io_RG2TC_pre_req),
    .io_RG2TC_pre_ba                  (_u_RequestGenerate_3_io_RG2TC_pre_ba),
    .io_WM2RG_write_phase0            (_u_widthMatch_io_W2TC_write_phase0),
    .io_WM2RG_write_phase1            (_u_widthMatch_io_W2TC_write_phase1),
    .io_WM2RG_read_phase0             (_u_widthMatch_io_W2TC_read_phase0),
    .io_WM2RG_read_phase1             (_u_widthMatch_io_W2TC_read_phase1),
    .io_WM2RG_act_phase0              (_u_widthMatch_io_W2TC_act_phase0),
    .io_WM2RG_act_phase1              (_u_widthMatch_io_W2TC_act_phase1),
    .io_WM2RG_dfi_phase0_bg           (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_WM2RG_dfi_phase1_bg           (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_debug_state                   (io_scgregio_RGState_3)
  );
  TimingCheck u_TimingCheck_0 (
    .clock                    (clock),
    .reset                    (reset),
    .io_CalDone               (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                    (2'h0),
    .io_time_ok_tRRD_L_OK     (_u_TimingCheck_0_io_time_ok_tRRD_L_OK),
    .io_time_ok_tRRD_S_OK     (_u_TimingCheck_0_io_time_ok_tRRD_S_OK),
    .io_time_ok_tFAW_OK       (_u_TimingCheck_0_io_time_ok_tFAW_OK),
    .io_time_ok_tRAS_OK_0     (_u_TimingCheck_0_io_time_ok_tRAS_OK_0),
    .io_time_ok_tRAS_OK_1     (_u_TimingCheck_0_io_time_ok_tRAS_OK_1),
    .io_time_ok_tRAS_OK_2     (_u_TimingCheck_0_io_time_ok_tRAS_OK_2),
    .io_time_ok_tRAS_OK_3     (_u_TimingCheck_0_io_time_ok_tRAS_OK_3),
    .io_time_ok_tRCD_OK_0     (_u_TimingCheck_0_io_time_ok_tRCD_OK_0),
    .io_time_ok_tRCD_OK_1     (_u_TimingCheck_0_io_time_ok_tRCD_OK_1),
    .io_time_ok_tRCD_OK_2     (_u_TimingCheck_0_io_time_ok_tRCD_OK_2),
    .io_time_ok_tRCD_OK_3     (_u_TimingCheck_0_io_time_ok_tRCD_OK_3),
    .io_time_ok_tRP_OK_0      (_u_TimingCheck_0_io_time_ok_tRP_OK_0),
    .io_time_ok_tRP_OK_1      (_u_TimingCheck_0_io_time_ok_tRP_OK_1),
    .io_time_ok_tRP_OK_2      (_u_TimingCheck_0_io_time_ok_tRP_OK_2),
    .io_time_ok_tRP_OK_3      (_u_TimingCheck_0_io_time_ok_tRP_OK_3),
    .io_time_ok_tCCD_L_OK     (_u_TimingCheck_0_io_time_ok_tCCD_L_OK),
    .io_time_ok_tCCD_S_OK     (_u_TimingCheck_0_io_time_ok_tCCD_S_OK),
    .io_time_ok_tWR_OK_0      (_u_TimingCheck_0_io_time_ok_tWR_OK_0),
    .io_time_ok_tWR_OK_1      (_u_TimingCheck_0_io_time_ok_tWR_OK_1),
    .io_time_ok_tWR_OK_2      (_u_TimingCheck_0_io_time_ok_tWR_OK_2),
    .io_time_ok_tWR_OK_3      (_u_TimingCheck_0_io_time_ok_tWR_OK_3),
    .io_time_ok_tRTW_OK       (_u_TimingCheck_0_io_time_ok_tRTW_OK),
    .io_time_ok_tRTP_OK_0     (_u_TimingCheck_0_io_time_ok_tRTP_OK_0),
    .io_time_ok_tRTP_OK_1     (_u_TimingCheck_0_io_time_ok_tRTP_OK_1),
    .io_time_ok_tRTP_OK_2     (_u_TimingCheck_0_io_time_ok_tRTP_OK_2),
    .io_time_ok_tRTP_OK_3     (_u_TimingCheck_0_io_time_ok_tRTP_OK_3),
    .io_time_ok_tWTR_L_OK     (_u_TimingCheck_0_io_time_ok_tWTR_L_OK),
    .io_time_ok_tWTR_S_OK     (_u_TimingCheck_0_io_time_ok_tWTR_S_OK),
    .io_time_parameter_tRRD_S (_GEN_1),
    .io_time_parameter_tRRD_L (_GEN_2),
    .io_time_parameter_tFAW   (_GEN_3),
    .io_time_parameter_tRAS   (_GEN_4),
    .io_time_parameter_tRCD   (_GEN_5),
    .io_time_parameter_tRP    (_GEN),
    .io_time_parameter_tCCD_S (_GEN_6),
    .io_time_parameter_tCCD_L (_GEN_7),
    .io_time_parameter_tWR    (_GEN_8),
    .io_time_parameter_tWTR_S (_GEN_9),
    .io_time_parameter_tWTR_L (_GEN_10),
    .io_time_parameter_tRTW   (_GEN_11),
    .io_time_parameter_tRTP   (_GEN_12),
    .io_time_parameter_WL     (_GEN_13),
    .io_time_parameter_BL     (_GEN_14),
    .io_won_write_phase0      (_u_widthMatch_io_W2TC_write_phase0),
    .io_won_write_phase1      (_u_widthMatch_io_W2TC_write_phase1),
    .io_won_read_phase0       (_u_widthMatch_io_W2TC_read_phase0),
    .io_won_read_phase1       (_u_widthMatch_io_W2TC_read_phase1),
    .io_won_pre_phase0        (_u_widthMatch_io_W2TC_pre_phase0),
    .io_won_pre_phase1        (_u_widthMatch_io_W2TC_pre_phase1),
    .io_won_act_phase0        (_u_widthMatch_io_W2TC_act_phase0),
    .io_won_act_phase1        (_u_widthMatch_io_W2TC_act_phase1),
    .io_won_dfi_phase0_bg     (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_won_dfi_phase0_ba     (_u_widthMatch_io_W2TC_dfi_phase0_ba),
    .io_won_dfi_phase1_bg     (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_won_dfi_phase1_ba     (_u_widthMatch_io_W2TC_dfi_phase1_ba),
    .io_RG2TC_0_act_req       (_u_RequestGenerate_0_io_RG2TC_act_req),
    .io_RG2TC_0_act_ba        (_u_RequestGenerate_0_io_RG2TC_act_ba),
    .io_RG2TC_0_write_req     (_u_RequestGenerate_0_io_RG2TC_write_req),
    .io_RG2TC_0_read_req      (_u_RequestGenerate_0_io_RG2TC_read_req),
    .io_RG2TC_0_cas_ba        (_u_RequestGenerate_0_io_RG2TC_cas_ba),
    .io_RG2TC_0_pre_req       (_u_RequestGenerate_0_io_RG2TC_pre_req),
    .io_RG2TC_0_pre_ba        (_u_RequestGenerate_0_io_RG2TC_pre_ba),
    .io_RG2TC_1_act_req       (_u_RequestGenerate_1_io_RG2TC_act_req),
    .io_RG2TC_1_act_ba        (_u_RequestGenerate_1_io_RG2TC_act_ba),
    .io_RG2TC_1_write_req     (_u_RequestGenerate_1_io_RG2TC_write_req),
    .io_RG2TC_1_read_req      (_u_RequestGenerate_1_io_RG2TC_read_req),
    .io_RG2TC_1_cas_ba        (_u_RequestGenerate_1_io_RG2TC_cas_ba),
    .io_RG2TC_1_pre_req       (_u_RequestGenerate_1_io_RG2TC_pre_req),
    .io_RG2TC_1_pre_ba        (_u_RequestGenerate_1_io_RG2TC_pre_ba),
    .io_RG2TC_2_act_req       (_u_RequestGenerate_2_io_RG2TC_act_req),
    .io_RG2TC_2_act_ba        (_u_RequestGenerate_2_io_RG2TC_act_ba),
    .io_RG2TC_2_write_req     (_u_RequestGenerate_2_io_RG2TC_write_req),
    .io_RG2TC_2_read_req      (_u_RequestGenerate_2_io_RG2TC_read_req),
    .io_RG2TC_2_cas_ba        (_u_RequestGenerate_2_io_RG2TC_cas_ba),
    .io_RG2TC_2_pre_req       (_u_RequestGenerate_2_io_RG2TC_pre_req),
    .io_RG2TC_2_pre_ba        (_u_RequestGenerate_2_io_RG2TC_pre_ba),
    .io_RG2TC_3_act_req       (_u_RequestGenerate_3_io_RG2TC_act_req),
    .io_RG2TC_3_act_ba        (_u_RequestGenerate_3_io_RG2TC_act_ba),
    .io_RG2TC_3_write_req     (_u_RequestGenerate_3_io_RG2TC_write_req),
    .io_RG2TC_3_read_req      (_u_RequestGenerate_3_io_RG2TC_read_req),
    .io_RG2TC_3_cas_ba        (_u_RequestGenerate_3_io_RG2TC_cas_ba),
    .io_RG2TC_3_pre_req       (_u_RequestGenerate_3_io_RG2TC_pre_req),
    .io_RG2TC_3_pre_ba        (_u_RequestGenerate_3_io_RG2TC_pre_ba),
    .io_TC2REF_RTP_OK         (_u_TimingCheck_0_io_TC2REF_RTP_OK),
    .io_TC2REF_RAS_OK         (_u_TimingCheck_0_io_TC2REF_RAS_OK),
    .io_TC2REF_WTP_OK         (_u_TimingCheck_0_io_TC2REF_WTP_OK)
  );
  TimingCheck u_TimingCheck_1 (
    .clock                    (clock),
    .reset                    (reset),
    .io_CalDone               (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                    (2'h1),
    .io_time_ok_tRRD_L_OK     (_u_TimingCheck_1_io_time_ok_tRRD_L_OK),
    .io_time_ok_tRRD_S_OK     (_u_TimingCheck_1_io_time_ok_tRRD_S_OK),
    .io_time_ok_tFAW_OK       (_u_TimingCheck_1_io_time_ok_tFAW_OK),
    .io_time_ok_tRAS_OK_0     (_u_TimingCheck_1_io_time_ok_tRAS_OK_0),
    .io_time_ok_tRAS_OK_1     (_u_TimingCheck_1_io_time_ok_tRAS_OK_1),
    .io_time_ok_tRAS_OK_2     (_u_TimingCheck_1_io_time_ok_tRAS_OK_2),
    .io_time_ok_tRAS_OK_3     (_u_TimingCheck_1_io_time_ok_tRAS_OK_3),
    .io_time_ok_tRCD_OK_0     (_u_TimingCheck_1_io_time_ok_tRCD_OK_0),
    .io_time_ok_tRCD_OK_1     (_u_TimingCheck_1_io_time_ok_tRCD_OK_1),
    .io_time_ok_tRCD_OK_2     (_u_TimingCheck_1_io_time_ok_tRCD_OK_2),
    .io_time_ok_tRCD_OK_3     (_u_TimingCheck_1_io_time_ok_tRCD_OK_3),
    .io_time_ok_tRP_OK_0      (_u_TimingCheck_1_io_time_ok_tRP_OK_0),
    .io_time_ok_tRP_OK_1      (_u_TimingCheck_1_io_time_ok_tRP_OK_1),
    .io_time_ok_tRP_OK_2      (_u_TimingCheck_1_io_time_ok_tRP_OK_2),
    .io_time_ok_tRP_OK_3      (_u_TimingCheck_1_io_time_ok_tRP_OK_3),
    .io_time_ok_tCCD_L_OK     (_u_TimingCheck_1_io_time_ok_tCCD_L_OK),
    .io_time_ok_tCCD_S_OK     (_u_TimingCheck_1_io_time_ok_tCCD_S_OK),
    .io_time_ok_tWR_OK_0      (_u_TimingCheck_1_io_time_ok_tWR_OK_0),
    .io_time_ok_tWR_OK_1      (_u_TimingCheck_1_io_time_ok_tWR_OK_1),
    .io_time_ok_tWR_OK_2      (_u_TimingCheck_1_io_time_ok_tWR_OK_2),
    .io_time_ok_tWR_OK_3      (_u_TimingCheck_1_io_time_ok_tWR_OK_3),
    .io_time_ok_tRTW_OK       (_u_TimingCheck_1_io_time_ok_tRTW_OK),
    .io_time_ok_tRTP_OK_0     (_u_TimingCheck_1_io_time_ok_tRTP_OK_0),
    .io_time_ok_tRTP_OK_1     (_u_TimingCheck_1_io_time_ok_tRTP_OK_1),
    .io_time_ok_tRTP_OK_2     (_u_TimingCheck_1_io_time_ok_tRTP_OK_2),
    .io_time_ok_tRTP_OK_3     (_u_TimingCheck_1_io_time_ok_tRTP_OK_3),
    .io_time_ok_tWTR_L_OK     (_u_TimingCheck_1_io_time_ok_tWTR_L_OK),
    .io_time_ok_tWTR_S_OK     (_u_TimingCheck_1_io_time_ok_tWTR_S_OK),
    .io_time_parameter_tRRD_S (_GEN_1),
    .io_time_parameter_tRRD_L (_GEN_2),
    .io_time_parameter_tFAW   (_GEN_3),
    .io_time_parameter_tRAS   (_GEN_4),
    .io_time_parameter_tRCD   (_GEN_5),
    .io_time_parameter_tRP    (_GEN),
    .io_time_parameter_tCCD_S (_GEN_6),
    .io_time_parameter_tCCD_L (_GEN_7),
    .io_time_parameter_tWR    (_GEN_8),
    .io_time_parameter_tWTR_S (_GEN_9),
    .io_time_parameter_tWTR_L (_GEN_10),
    .io_time_parameter_tRTW   (_GEN_11),
    .io_time_parameter_tRTP   (_GEN_12),
    .io_time_parameter_WL     (_GEN_13),
    .io_time_parameter_BL     (_GEN_14),
    .io_won_write_phase0      (_u_widthMatch_io_W2TC_write_phase0),
    .io_won_write_phase1      (_u_widthMatch_io_W2TC_write_phase1),
    .io_won_read_phase0       (_u_widthMatch_io_W2TC_read_phase0),
    .io_won_read_phase1       (_u_widthMatch_io_W2TC_read_phase1),
    .io_won_pre_phase0        (_u_widthMatch_io_W2TC_pre_phase0),
    .io_won_pre_phase1        (_u_widthMatch_io_W2TC_pre_phase1),
    .io_won_act_phase0        (_u_widthMatch_io_W2TC_act_phase0),
    .io_won_act_phase1        (_u_widthMatch_io_W2TC_act_phase1),
    .io_won_dfi_phase0_bg     (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_won_dfi_phase0_ba     (_u_widthMatch_io_W2TC_dfi_phase0_ba),
    .io_won_dfi_phase1_bg     (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_won_dfi_phase1_ba     (_u_widthMatch_io_W2TC_dfi_phase1_ba),
    .io_RG2TC_0_act_req       (_u_RequestGenerate_0_io_RG2TC_act_req),
    .io_RG2TC_0_act_ba        (_u_RequestGenerate_0_io_RG2TC_act_ba),
    .io_RG2TC_0_write_req     (_u_RequestGenerate_0_io_RG2TC_write_req),
    .io_RG2TC_0_read_req      (_u_RequestGenerate_0_io_RG2TC_read_req),
    .io_RG2TC_0_cas_ba        (_u_RequestGenerate_0_io_RG2TC_cas_ba),
    .io_RG2TC_0_pre_req       (_u_RequestGenerate_0_io_RG2TC_pre_req),
    .io_RG2TC_0_pre_ba        (_u_RequestGenerate_0_io_RG2TC_pre_ba),
    .io_RG2TC_1_act_req       (_u_RequestGenerate_1_io_RG2TC_act_req),
    .io_RG2TC_1_act_ba        (_u_RequestGenerate_1_io_RG2TC_act_ba),
    .io_RG2TC_1_write_req     (_u_RequestGenerate_1_io_RG2TC_write_req),
    .io_RG2TC_1_read_req      (_u_RequestGenerate_1_io_RG2TC_read_req),
    .io_RG2TC_1_cas_ba        (_u_RequestGenerate_1_io_RG2TC_cas_ba),
    .io_RG2TC_1_pre_req       (_u_RequestGenerate_1_io_RG2TC_pre_req),
    .io_RG2TC_1_pre_ba        (_u_RequestGenerate_1_io_RG2TC_pre_ba),
    .io_RG2TC_2_act_req       (_u_RequestGenerate_2_io_RG2TC_act_req),
    .io_RG2TC_2_act_ba        (_u_RequestGenerate_2_io_RG2TC_act_ba),
    .io_RG2TC_2_write_req     (_u_RequestGenerate_2_io_RG2TC_write_req),
    .io_RG2TC_2_read_req      (_u_RequestGenerate_2_io_RG2TC_read_req),
    .io_RG2TC_2_cas_ba        (_u_RequestGenerate_2_io_RG2TC_cas_ba),
    .io_RG2TC_2_pre_req       (_u_RequestGenerate_2_io_RG2TC_pre_req),
    .io_RG2TC_2_pre_ba        (_u_RequestGenerate_2_io_RG2TC_pre_ba),
    .io_RG2TC_3_act_req       (_u_RequestGenerate_3_io_RG2TC_act_req),
    .io_RG2TC_3_act_ba        (_u_RequestGenerate_3_io_RG2TC_act_ba),
    .io_RG2TC_3_write_req     (_u_RequestGenerate_3_io_RG2TC_write_req),
    .io_RG2TC_3_read_req      (_u_RequestGenerate_3_io_RG2TC_read_req),
    .io_RG2TC_3_cas_ba        (_u_RequestGenerate_3_io_RG2TC_cas_ba),
    .io_RG2TC_3_pre_req       (_u_RequestGenerate_3_io_RG2TC_pre_req),
    .io_RG2TC_3_pre_ba        (_u_RequestGenerate_3_io_RG2TC_pre_ba),
    .io_TC2REF_RTP_OK         (_u_TimingCheck_1_io_TC2REF_RTP_OK),
    .io_TC2REF_RAS_OK         (_u_TimingCheck_1_io_TC2REF_RAS_OK),
    .io_TC2REF_WTP_OK         (_u_TimingCheck_1_io_TC2REF_WTP_OK)
  );
  TimingCheck u_TimingCheck_2 (
    .clock                    (clock),
    .reset                    (reset),
    .io_CalDone               (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                    (2'h2),
    .io_time_ok_tRRD_L_OK     (_u_TimingCheck_2_io_time_ok_tRRD_L_OK),
    .io_time_ok_tRRD_S_OK     (_u_TimingCheck_2_io_time_ok_tRRD_S_OK),
    .io_time_ok_tFAW_OK       (_u_TimingCheck_2_io_time_ok_tFAW_OK),
    .io_time_ok_tRAS_OK_0     (_u_TimingCheck_2_io_time_ok_tRAS_OK_0),
    .io_time_ok_tRAS_OK_1     (_u_TimingCheck_2_io_time_ok_tRAS_OK_1),
    .io_time_ok_tRAS_OK_2     (_u_TimingCheck_2_io_time_ok_tRAS_OK_2),
    .io_time_ok_tRAS_OK_3     (_u_TimingCheck_2_io_time_ok_tRAS_OK_3),
    .io_time_ok_tRCD_OK_0     (_u_TimingCheck_2_io_time_ok_tRCD_OK_0),
    .io_time_ok_tRCD_OK_1     (_u_TimingCheck_2_io_time_ok_tRCD_OK_1),
    .io_time_ok_tRCD_OK_2     (_u_TimingCheck_2_io_time_ok_tRCD_OK_2),
    .io_time_ok_tRCD_OK_3     (_u_TimingCheck_2_io_time_ok_tRCD_OK_3),
    .io_time_ok_tRP_OK_0      (_u_TimingCheck_2_io_time_ok_tRP_OK_0),
    .io_time_ok_tRP_OK_1      (_u_TimingCheck_2_io_time_ok_tRP_OK_1),
    .io_time_ok_tRP_OK_2      (_u_TimingCheck_2_io_time_ok_tRP_OK_2),
    .io_time_ok_tRP_OK_3      (_u_TimingCheck_2_io_time_ok_tRP_OK_3),
    .io_time_ok_tCCD_L_OK     (_u_TimingCheck_2_io_time_ok_tCCD_L_OK),
    .io_time_ok_tCCD_S_OK     (_u_TimingCheck_2_io_time_ok_tCCD_S_OK),
    .io_time_ok_tWR_OK_0      (_u_TimingCheck_2_io_time_ok_tWR_OK_0),
    .io_time_ok_tWR_OK_1      (_u_TimingCheck_2_io_time_ok_tWR_OK_1),
    .io_time_ok_tWR_OK_2      (_u_TimingCheck_2_io_time_ok_tWR_OK_2),
    .io_time_ok_tWR_OK_3      (_u_TimingCheck_2_io_time_ok_tWR_OK_3),
    .io_time_ok_tRTW_OK       (_u_TimingCheck_2_io_time_ok_tRTW_OK),
    .io_time_ok_tRTP_OK_0     (_u_TimingCheck_2_io_time_ok_tRTP_OK_0),
    .io_time_ok_tRTP_OK_1     (_u_TimingCheck_2_io_time_ok_tRTP_OK_1),
    .io_time_ok_tRTP_OK_2     (_u_TimingCheck_2_io_time_ok_tRTP_OK_2),
    .io_time_ok_tRTP_OK_3     (_u_TimingCheck_2_io_time_ok_tRTP_OK_3),
    .io_time_ok_tWTR_L_OK     (_u_TimingCheck_2_io_time_ok_tWTR_L_OK),
    .io_time_ok_tWTR_S_OK     (_u_TimingCheck_2_io_time_ok_tWTR_S_OK),
    .io_time_parameter_tRRD_S (_GEN_1),
    .io_time_parameter_tRRD_L (_GEN_2),
    .io_time_parameter_tFAW   (_GEN_3),
    .io_time_parameter_tRAS   (_GEN_4),
    .io_time_parameter_tRCD   (_GEN_5),
    .io_time_parameter_tRP    (_GEN),
    .io_time_parameter_tCCD_S (_GEN_6),
    .io_time_parameter_tCCD_L (_GEN_7),
    .io_time_parameter_tWR    (_GEN_8),
    .io_time_parameter_tWTR_S (_GEN_9),
    .io_time_parameter_tWTR_L (_GEN_10),
    .io_time_parameter_tRTW   (_GEN_11),
    .io_time_parameter_tRTP   (_GEN_12),
    .io_time_parameter_WL     (_GEN_13),
    .io_time_parameter_BL     (_GEN_14),
    .io_won_write_phase0      (_u_widthMatch_io_W2TC_write_phase0),
    .io_won_write_phase1      (_u_widthMatch_io_W2TC_write_phase1),
    .io_won_read_phase0       (_u_widthMatch_io_W2TC_read_phase0),
    .io_won_read_phase1       (_u_widthMatch_io_W2TC_read_phase1),
    .io_won_pre_phase0        (_u_widthMatch_io_W2TC_pre_phase0),
    .io_won_pre_phase1        (_u_widthMatch_io_W2TC_pre_phase1),
    .io_won_act_phase0        (_u_widthMatch_io_W2TC_act_phase0),
    .io_won_act_phase1        (_u_widthMatch_io_W2TC_act_phase1),
    .io_won_dfi_phase0_bg     (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_won_dfi_phase0_ba     (_u_widthMatch_io_W2TC_dfi_phase0_ba),
    .io_won_dfi_phase1_bg     (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_won_dfi_phase1_ba     (_u_widthMatch_io_W2TC_dfi_phase1_ba),
    .io_RG2TC_0_act_req       (_u_RequestGenerate_0_io_RG2TC_act_req),
    .io_RG2TC_0_act_ba        (_u_RequestGenerate_0_io_RG2TC_act_ba),
    .io_RG2TC_0_write_req     (_u_RequestGenerate_0_io_RG2TC_write_req),
    .io_RG2TC_0_read_req      (_u_RequestGenerate_0_io_RG2TC_read_req),
    .io_RG2TC_0_cas_ba        (_u_RequestGenerate_0_io_RG2TC_cas_ba),
    .io_RG2TC_0_pre_req       (_u_RequestGenerate_0_io_RG2TC_pre_req),
    .io_RG2TC_0_pre_ba        (_u_RequestGenerate_0_io_RG2TC_pre_ba),
    .io_RG2TC_1_act_req       (_u_RequestGenerate_1_io_RG2TC_act_req),
    .io_RG2TC_1_act_ba        (_u_RequestGenerate_1_io_RG2TC_act_ba),
    .io_RG2TC_1_write_req     (_u_RequestGenerate_1_io_RG2TC_write_req),
    .io_RG2TC_1_read_req      (_u_RequestGenerate_1_io_RG2TC_read_req),
    .io_RG2TC_1_cas_ba        (_u_RequestGenerate_1_io_RG2TC_cas_ba),
    .io_RG2TC_1_pre_req       (_u_RequestGenerate_1_io_RG2TC_pre_req),
    .io_RG2TC_1_pre_ba        (_u_RequestGenerate_1_io_RG2TC_pre_ba),
    .io_RG2TC_2_act_req       (_u_RequestGenerate_2_io_RG2TC_act_req),
    .io_RG2TC_2_act_ba        (_u_RequestGenerate_2_io_RG2TC_act_ba),
    .io_RG2TC_2_write_req     (_u_RequestGenerate_2_io_RG2TC_write_req),
    .io_RG2TC_2_read_req      (_u_RequestGenerate_2_io_RG2TC_read_req),
    .io_RG2TC_2_cas_ba        (_u_RequestGenerate_2_io_RG2TC_cas_ba),
    .io_RG2TC_2_pre_req       (_u_RequestGenerate_2_io_RG2TC_pre_req),
    .io_RG2TC_2_pre_ba        (_u_RequestGenerate_2_io_RG2TC_pre_ba),
    .io_RG2TC_3_act_req       (_u_RequestGenerate_3_io_RG2TC_act_req),
    .io_RG2TC_3_act_ba        (_u_RequestGenerate_3_io_RG2TC_act_ba),
    .io_RG2TC_3_write_req     (_u_RequestGenerate_3_io_RG2TC_write_req),
    .io_RG2TC_3_read_req      (_u_RequestGenerate_3_io_RG2TC_read_req),
    .io_RG2TC_3_cas_ba        (_u_RequestGenerate_3_io_RG2TC_cas_ba),
    .io_RG2TC_3_pre_req       (_u_RequestGenerate_3_io_RG2TC_pre_req),
    .io_RG2TC_3_pre_ba        (_u_RequestGenerate_3_io_RG2TC_pre_ba),
    .io_TC2REF_RTP_OK         (_u_TimingCheck_2_io_TC2REF_RTP_OK),
    .io_TC2REF_RAS_OK         (_u_TimingCheck_2_io_TC2REF_RAS_OK),
    .io_TC2REF_WTP_OK         (_u_TimingCheck_2_io_TC2REF_WTP_OK)
  );
  TimingCheck u_TimingCheck_3 (
    .clock                    (clock),
    .reset                    (reset),
    .io_CalDone               (_u_TimingCheck_3_io_CalDone_T),
    .io_ID                    (2'h3),
    .io_time_ok_tRRD_L_OK     (_u_TimingCheck_3_io_time_ok_tRRD_L_OK),
    .io_time_ok_tRRD_S_OK     (_u_TimingCheck_3_io_time_ok_tRRD_S_OK),
    .io_time_ok_tFAW_OK       (_u_TimingCheck_3_io_time_ok_tFAW_OK),
    .io_time_ok_tRAS_OK_0     (_u_TimingCheck_3_io_time_ok_tRAS_OK_0),
    .io_time_ok_tRAS_OK_1     (_u_TimingCheck_3_io_time_ok_tRAS_OK_1),
    .io_time_ok_tRAS_OK_2     (_u_TimingCheck_3_io_time_ok_tRAS_OK_2),
    .io_time_ok_tRAS_OK_3     (_u_TimingCheck_3_io_time_ok_tRAS_OK_3),
    .io_time_ok_tRCD_OK_0     (_u_TimingCheck_3_io_time_ok_tRCD_OK_0),
    .io_time_ok_tRCD_OK_1     (_u_TimingCheck_3_io_time_ok_tRCD_OK_1),
    .io_time_ok_tRCD_OK_2     (_u_TimingCheck_3_io_time_ok_tRCD_OK_2),
    .io_time_ok_tRCD_OK_3     (_u_TimingCheck_3_io_time_ok_tRCD_OK_3),
    .io_time_ok_tRP_OK_0      (_u_TimingCheck_3_io_time_ok_tRP_OK_0),
    .io_time_ok_tRP_OK_1      (_u_TimingCheck_3_io_time_ok_tRP_OK_1),
    .io_time_ok_tRP_OK_2      (_u_TimingCheck_3_io_time_ok_tRP_OK_2),
    .io_time_ok_tRP_OK_3      (_u_TimingCheck_3_io_time_ok_tRP_OK_3),
    .io_time_ok_tCCD_L_OK     (_u_TimingCheck_3_io_time_ok_tCCD_L_OK),
    .io_time_ok_tCCD_S_OK     (_u_TimingCheck_3_io_time_ok_tCCD_S_OK),
    .io_time_ok_tWR_OK_0      (_u_TimingCheck_3_io_time_ok_tWR_OK_0),
    .io_time_ok_tWR_OK_1      (_u_TimingCheck_3_io_time_ok_tWR_OK_1),
    .io_time_ok_tWR_OK_2      (_u_TimingCheck_3_io_time_ok_tWR_OK_2),
    .io_time_ok_tWR_OK_3      (_u_TimingCheck_3_io_time_ok_tWR_OK_3),
    .io_time_ok_tRTW_OK       (_u_TimingCheck_3_io_time_ok_tRTW_OK),
    .io_time_ok_tRTP_OK_0     (_u_TimingCheck_3_io_time_ok_tRTP_OK_0),
    .io_time_ok_tRTP_OK_1     (_u_TimingCheck_3_io_time_ok_tRTP_OK_1),
    .io_time_ok_tRTP_OK_2     (_u_TimingCheck_3_io_time_ok_tRTP_OK_2),
    .io_time_ok_tRTP_OK_3     (_u_TimingCheck_3_io_time_ok_tRTP_OK_3),
    .io_time_ok_tWTR_L_OK     (_u_TimingCheck_3_io_time_ok_tWTR_L_OK),
    .io_time_ok_tWTR_S_OK     (_u_TimingCheck_3_io_time_ok_tWTR_S_OK),
    .io_time_parameter_tRRD_S (_GEN_1),
    .io_time_parameter_tRRD_L (_GEN_2),
    .io_time_parameter_tFAW   (_GEN_3),
    .io_time_parameter_tRAS   (_GEN_4),
    .io_time_parameter_tRCD   (_GEN_5),
    .io_time_parameter_tRP    (_GEN),
    .io_time_parameter_tCCD_S (_GEN_6),
    .io_time_parameter_tCCD_L (_GEN_7),
    .io_time_parameter_tWR    (_GEN_8),
    .io_time_parameter_tWTR_S (_GEN_9),
    .io_time_parameter_tWTR_L (_GEN_10),
    .io_time_parameter_tRTW   (_GEN_11),
    .io_time_parameter_tRTP   (_GEN_12),
    .io_time_parameter_WL     (_GEN_13),
    .io_time_parameter_BL     (_GEN_14),
    .io_won_write_phase0      (_u_widthMatch_io_W2TC_write_phase0),
    .io_won_write_phase1      (_u_widthMatch_io_W2TC_write_phase1),
    .io_won_read_phase0       (_u_widthMatch_io_W2TC_read_phase0),
    .io_won_read_phase1       (_u_widthMatch_io_W2TC_read_phase1),
    .io_won_pre_phase0        (_u_widthMatch_io_W2TC_pre_phase0),
    .io_won_pre_phase1        (_u_widthMatch_io_W2TC_pre_phase1),
    .io_won_act_phase0        (_u_widthMatch_io_W2TC_act_phase0),
    .io_won_act_phase1        (_u_widthMatch_io_W2TC_act_phase1),
    .io_won_dfi_phase0_bg     (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_won_dfi_phase0_ba     (_u_widthMatch_io_W2TC_dfi_phase0_ba),
    .io_won_dfi_phase1_bg     (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_won_dfi_phase1_ba     (_u_widthMatch_io_W2TC_dfi_phase1_ba),
    .io_RG2TC_0_act_req       (_u_RequestGenerate_0_io_RG2TC_act_req),
    .io_RG2TC_0_act_ba        (_u_RequestGenerate_0_io_RG2TC_act_ba),
    .io_RG2TC_0_write_req     (_u_RequestGenerate_0_io_RG2TC_write_req),
    .io_RG2TC_0_read_req      (_u_RequestGenerate_0_io_RG2TC_read_req),
    .io_RG2TC_0_cas_ba        (_u_RequestGenerate_0_io_RG2TC_cas_ba),
    .io_RG2TC_0_pre_req       (_u_RequestGenerate_0_io_RG2TC_pre_req),
    .io_RG2TC_0_pre_ba        (_u_RequestGenerate_0_io_RG2TC_pre_ba),
    .io_RG2TC_1_act_req       (_u_RequestGenerate_1_io_RG2TC_act_req),
    .io_RG2TC_1_act_ba        (_u_RequestGenerate_1_io_RG2TC_act_ba),
    .io_RG2TC_1_write_req     (_u_RequestGenerate_1_io_RG2TC_write_req),
    .io_RG2TC_1_read_req      (_u_RequestGenerate_1_io_RG2TC_read_req),
    .io_RG2TC_1_cas_ba        (_u_RequestGenerate_1_io_RG2TC_cas_ba),
    .io_RG2TC_1_pre_req       (_u_RequestGenerate_1_io_RG2TC_pre_req),
    .io_RG2TC_1_pre_ba        (_u_RequestGenerate_1_io_RG2TC_pre_ba),
    .io_RG2TC_2_act_req       (_u_RequestGenerate_2_io_RG2TC_act_req),
    .io_RG2TC_2_act_ba        (_u_RequestGenerate_2_io_RG2TC_act_ba),
    .io_RG2TC_2_write_req     (_u_RequestGenerate_2_io_RG2TC_write_req),
    .io_RG2TC_2_read_req      (_u_RequestGenerate_2_io_RG2TC_read_req),
    .io_RG2TC_2_cas_ba        (_u_RequestGenerate_2_io_RG2TC_cas_ba),
    .io_RG2TC_2_pre_req       (_u_RequestGenerate_2_io_RG2TC_pre_req),
    .io_RG2TC_2_pre_ba        (_u_RequestGenerate_2_io_RG2TC_pre_ba),
    .io_RG2TC_3_act_req       (_u_RequestGenerate_3_io_RG2TC_act_req),
    .io_RG2TC_3_act_ba        (_u_RequestGenerate_3_io_RG2TC_act_ba),
    .io_RG2TC_3_write_req     (_u_RequestGenerate_3_io_RG2TC_write_req),
    .io_RG2TC_3_read_req      (_u_RequestGenerate_3_io_RG2TC_read_req),
    .io_RG2TC_3_cas_ba        (_u_RequestGenerate_3_io_RG2TC_cas_ba),
    .io_RG2TC_3_pre_req       (_u_RequestGenerate_3_io_RG2TC_pre_req),
    .io_RG2TC_3_pre_ba        (_u_RequestGenerate_3_io_RG2TC_pre_ba),
    .io_TC2REF_RTP_OK         (_u_TimingCheck_3_io_TC2REF_RTP_OK),
    .io_TC2REF_RAS_OK         (_u_TimingCheck_3_io_TC2REF_RAS_OK),
    .io_TC2REF_WTP_OK         (_u_TimingCheck_3_io_TC2REF_WTP_OK)
  );
  widthMatch_V2 u_widthMatch (
    .clock                 (clock),
    .reset                 (reset),
    .io_actReq             (_u_arbitrate_io_arb2WM_actReq),
    .io_winGroupAT         (_u_arbitrate_io_arb2WM_winGroupA),
    .io_winBankAT          (_u_arbitrate_io_arb2WM_winBankAT),
    .io_winROW             (_u_arbitrate_io_arb2WM_winROW),
    .io_writeReq           (_u_arbitrate_io_arb2WM_writeReq),
    .io_readReq            (_u_arbitrate_io_arb2WM_readReq),
    .io_readToken          (_u_arbitrate_io_arb2WM_readToken),
    .io_groupCas           (_u_arbitrate_io_arb2WM_groupCas),
    .io_bankCas            (_u_arbitrate_io_arb2WM_bankCas),
    .io_winCOL             (_u_arbitrate_io_arb2WM_winCOL),
    .io_preReq             (_u_arbitrate_io_arb2WM_preReq),
    .io_winGroupP          (_u_arbitrate_io_arb2WM_winGroupP),
    .io_winBankP           (_u_arbitrate_io_arb2WM_winBankP),
    .io_winROWP            (_u_arbitrate_io_arb2WM_winROWP),
    .io_preIss             (_u_arbitrate_io_arb2WM_arb2WM_refInt_preIss),
    .io_refIss             (_u_arbitrate_io_arb2WM_arb2WM_refInt_refIss),
    .io_zqIss              (_u_arbitrate_io_arb2WM_arb2WM_refInt_zqIss),
    .io_W2TC_write_phase0  (_u_widthMatch_io_W2TC_write_phase0),
    .io_W2TC_write_phase1  (_u_widthMatch_io_W2TC_write_phase1),
    .io_W2TC_read_phase0   (_u_widthMatch_io_W2TC_read_phase0),
    .io_W2TC_read_phase1   (_u_widthMatch_io_W2TC_read_phase1),
    .io_W2TC_pre_phase0    (_u_widthMatch_io_W2TC_pre_phase0),
    .io_W2TC_pre_phase1    (_u_widthMatch_io_W2TC_pre_phase1),
    .io_W2TC_act_phase0    (_u_widthMatch_io_W2TC_act_phase0),
    .io_W2TC_act_phase1    (_u_widthMatch_io_W2TC_act_phase1),
    .io_W2TC_dfi_phase0_bg (_u_widthMatch_io_W2TC_dfi_phase0_bg),
    .io_W2TC_dfi_phase0_ba (_u_widthMatch_io_W2TC_dfi_phase0_ba),
    .io_W2TC_dfi_phase1_bg (_u_widthMatch_io_W2TC_dfi_phase1_bg),
    .io_W2TC_dfi_phase1_ba (_u_widthMatch_io_W2TC_dfi_phase1_ba),
    .io_Mrs_Req            (_u_ddr_init_io_MrsReq),
    .io_Mrs_BG             (_u_ddr_init_io_MrsBG),
    .io_Mrs_BA             (_u_ddr_init_io_MrsBA),
    .io_Mrs_ADDR           (_u_ddr_init_io_MrsAddr),
    .io_Zqcl_req           (_u_ddr_init_io_zqlreq),
    .io_cke                (_u_ddr_init_io_init_cke),
    .io_init_process       (_u_ddr_init_io_init_in_progress),
    .io_dram_rst_n         (_u_ddr_init_io_dram_rst_n),
    .io_dfiWriteCas        (_u_widthMatch_io_dfiWriteCas),
    .io_dfiReadCas         (_u_widthMatch_io_dfiReadCas),
    .io_writeGroup         (_u_widthMatch_io_writeGroup),
    .io_rtokenBuf          (_u_widthMatch_io_rtokenBuf),
    .io_dfiAdr_0           (_u_widthMatch_io_dfiAdr_0),
    .io_dfiAdr_1           (_u_widthMatch_io_dfiAdr_1),
    .io_dfiBa_0            (_u_widthMatch_io_dfiBa_0),
    .io_dfiBa_1            (_u_widthMatch_io_dfiBa_1),
    .io_dfiRasN_0          (_u_widthMatch_io_dfiRasN_0),
    .io_dfiRasN_1          (_u_widthMatch_io_dfiRasN_1),
    .io_dfiCasN_0          (_u_widthMatch_io_dfiCasN_0),
    .io_dfiCasN_1          (_u_widthMatch_io_dfiCasN_1),
    .io_dfiWeN_0           (_u_widthMatch_io_dfiWeN_0),
    .io_dfiWeN_1           (_u_widthMatch_io_dfiWeN_1),
    .io_dfiCsN_0           (_u_widthMatch_io_dfiCsN_0),
    .io_dfiCsN_1           (_u_widthMatch_io_dfiCsN_1),
    .io_dfiActN_0          (_u_widthMatch_io_dfiActN_0),
    .io_dfiActN_1          (_u_widthMatch_io_dfiActN_1),
    .io_dfiBg_0            (_u_widthMatch_io_dfiBg_0),
    .io_dfiBg_1            (_u_widthMatch_io_dfiBg_1),
    .io_dfiCke_0           (_u_widthMatch_io_dfiCke_0),
    .io_dfiCke_1           (_u_widthMatch_io_dfiCke_1),
    .io_dfiResetN_0        (_u_widthMatch_io_dfiResetN_0),
    .io_dfiResetN_1        (_u_widthMatch_io_dfiResetN_1)
  );
  ddr4_init u_ddr_init (
    .clock                       (clock),
    .reset                       (reset),
    .io_apbDone                  (io_calDone),
    .io_mrs0                     (io_scgregio_mrs0),
    .io_mrs1                     (io_scgregio_mrs1),
    .io_mrs2                     (io_scgregio_mrs2),
    .io_mrs3                     (io_scgregio_mrs3),
    .io_mrs4                     (io_scgregio_mrs4),
    .io_mrs5                     (io_scgregio_mrs5),
    .io_mrs6                     (io_scgregio_mrs6),
    .io_mrs_to_other             (io_scgregio_mrs2other),
    .io_mrs_to_mrs               (io_scgregio_mrs2mrs),
    .io_dram_rstn                (io_scgregio_dramRstn),
    .io_phy_dfi_init_complete    (io_dfi_dfistatus_dfi_init_complete),
    .io_pre_cke                  (io_scgregio_preCke),
    .io_post_cke                 (io_scgregio_postCke),
    .io_sync_gear                (io_scgregio_syncGear),
    .io_cmd_gear                 (io_scgregio_cmdGear),
    .io_gear_setup               (io_scgregio_gearSetup),
    .io_gear_hold                (io_scgregio_gearHold),
    .io_geardown_mode            (io_scgregio_geardownMode),
    .io_block_tgeardown          (io_scgregio_blkTGeardown),
    .io_zqinit                   (io_scgregio_zqinit),
    .io_zqlreq                   (_u_ddr_init_io_zqlreq),
    .io_dram_rst_n               (_u_ddr_init_io_dram_rst_n),
    .io_init_cke                 (_u_ddr_init_io_init_cke),
    .io_MrsReq                   (_u_ddr_init_io_MrsReq),
    .io_geardown_mode_init       (/* unused */),
    .io_geardown_sync_pulse_init (/* unused */),
    .io_cal_on_init              (/* unused */),
    .io_MrsBG                    (_u_ddr_init_io_MrsBG),
    .io_MrsBA                    (_u_ddr_init_io_MrsBA),
    .io_MrsAddr                  (_u_ddr_init_io_MrsAddr),
    .io_end_init_ddr             (_u_ddr_init_io_end_init_ddr),
    .io_init_in_progress         (_u_ddr_init_io_init_in_progress),
    .io_init_curr_state          (/* unused */),
    .io_init_next_state          (/* unused */)
  );
  RdDataStorage u_RdDataStorage (
    .clock          (clock),
    .reset          (reset),
    .io_winread     (_u_widthMatch_io_dfiReadCas),
    .io_readToken   (_u_widthMatch_io_rtokenBuf),
    .io_rdData      (_u_Command_Disassembly_io_dfi_rddata_out),
    .io_rdDataValid (_u_Command_Disassembly_io_dfi_rddata_ready),
    .io_data2as     (io_Scg2AsRddata_bits_rdata),
    .io_token2as    (io_Scg2AsRddata_bits_rtoken),
    .io_ready       (io_Scg2AsRddata_ready),
    .io_valid       (io_Scg2AsRddata_valid)
  );
  DataStorage u_DataStorage (
    .clock       (clock),
    .reset       (reset),
    .io_cmd      (io_As2ScgCmd_bits_ADR_cmdtype),
    .io_valid    (io_As2ScgCmd_valid & _u_fifo_wrap_io_din_ready),
    .io_group    (io_As2ScgCmd_bits_ADR_adr_group),
    .io_wrData   (io_As2ScgWrdata_wdata),
    .io_dataMask (io_As2ScgWrdata_wstrb),
    .io_winWrite (_u_widthMatch_io_dfiWriteCas),
    .io_winGroup (_u_widthMatch_io_writeGroup),
    .io_ready    (_u_DataStorage_io_ready),
    .io_dout     (_u_DataStorage_io_dout),
    .io_doutMask (/* unused */)
  );
  Command_Disassembly u_Command_Disassembly (
    .clock                               (clock),
    .reset                               (reset),
    .io_dfi_ctrl_in_dfi_address
      ({_u_widthMatch_io_dfiAdr_1, _u_widthMatch_io_dfiAdr_0}),
    .io_dfi_ctrl_in_dfi_bank
      ({_u_widthMatch_io_dfiBa_1, _u_widthMatch_io_dfiBa_0}),
    .io_dfi_ctrl_in_dfi_ras_n
      ({_u_widthMatch_io_dfiRasN_1, _u_widthMatch_io_dfiRasN_0}),
    .io_dfi_ctrl_in_dfi_cas_n
      ({_u_widthMatch_io_dfiCasN_1, _u_widthMatch_io_dfiCasN_0}),
    .io_dfi_ctrl_in_dfi_we_n
      ({_u_widthMatch_io_dfiWeN_1, _u_widthMatch_io_dfiWeN_0}),
    .io_dfi_ctrl_in_dfi_cs_n
      ({_u_widthMatch_io_dfiCsN_1, _u_widthMatch_io_dfiCsN_0}),
    .io_dfi_ctrl_in_dfi_act_n
      ({_u_widthMatch_io_dfiActN_1, _u_widthMatch_io_dfiActN_0}),
    .io_dfi_ctrl_in_dfi_bg
      ({_u_widthMatch_io_dfiBg_1, _u_widthMatch_io_dfiBg_0}),
    .io_dfi_ctrl_in_dfi_cke
      ({_u_widthMatch_io_dfiCke_1, _u_widthMatch_io_dfiCke_0}),
    .io_dfi_ctrl_in_dfi_reset_n
      ({_u_widthMatch_io_dfiResetN_1, _u_widthMatch_io_dfiResetN_0}),
    .io_dfi_ctrl_out_dfi_address         (io_dfi_dfictrl_dfi_address),
    .io_dfi_ctrl_out_dfi_bank            (io_dfi_dfictrl_dfi_bank),
    .io_dfi_ctrl_out_dfi_ras_n           (io_dfi_dfictrl_dfi_ras_n),
    .io_dfi_ctrl_out_dfi_cas_n           (io_dfi_dfictrl_dfi_cas_n),
    .io_dfi_ctrl_out_dfi_we_n            (io_dfi_dfictrl_dfi_we_n),
    .io_dfi_ctrl_out_dfi_cs_n            (io_dfi_dfictrl_dfi_cs_n),
    .io_dfi_ctrl_out_dfi_act_n           (io_dfi_dfictrl_dfi_act_n),
    .io_dfi_ctrl_out_dfi_bg              (io_dfi_dfictrl_dfi_bg),
    .io_dfi_ctrl_out_dfi_cid             (io_dfi_dfictrl_dfi_cid),
    .io_dfi_ctrl_out_dfi_cke             (io_dfi_dfictrl_dfi_cke),
    .io_dfi_ctrl_out_dfi_odt             (io_dfi_dfictrl_dfi_odt),
    .io_dfi_ctrl_out_dfi_reset_n         (io_dfi_dfictrl_dfi_reset_n),
    .io_dfi_wrdata                       (_u_DataStorage_io_dout),
    .io_dfi_wrdata_ch_out_dfi_wrdata_en  (io_dfi_dfiwrdata_dfi_wrdata_en),
    .io_dfi_wrdata_ch_out_dfi_wdata      (io_dfi_dfiwrdata_dfi_wdata),
    .io_dfi_wrdata_ch_out_dfi_wdata_cs_n (io_dfi_dfiwrdata_dfi_wdata_cs_n),
    .io_dfi_rddata_in_dfi_rddata_en      (io_dfi_dfirddata_dfi_rddata_en),
    .io_dfi_rddata_in_dfi_rddata         (io_dfi_dfirddata_dfi_rddata),
    .io_dfi_rddata_in_dfi_rddata_cs_n    (io_dfi_dfirddata_dfi_rddata_cs_n),
    .io_dfi_rddata_in_dfi_rddata_valid   (io_dfi_dfirddata_dfi_rddata_valid),
    .io_dfi_rddata_in_dfi_rddata_dbi_n   (io_dfi_dfirddata_dfi_rddata_dbi_n),
    .io_dfi_rddata_out                   (_u_Command_Disassembly_io_dfi_rddata_out),
    .io_dfi_rddata_ready                 (_u_Command_Disassembly_io_dfi_rddata_ready),
    .io_dfi_parameter_mode               (io_scgregio_dfiMode),
    .io_tphy_wrlat                       (io_scgregio_tphyWrlat[4:0]),
    .io_tphy_wrcslat                     (io_scgregio_tphyWrcslat[4:0]),
    .io_tphy_wrdata                      (io_scgregio_tphyWrdata[4:0]),
    .io_trddata_en                       (io_scgregio_trddataEn[4:0]),
    .io_tphy_rdcslat                     (io_scgregio_tphyRdcslat[4:0]),
    .io_tphy_rdlat                       (io_scgregio_tphyRdlat[4:0]),
    .io_wr_odt_delay                     (io_scgregio_wrOdtDelay[4:0]),
    .io_wr_odt_hold                      (io_scgregio_wrOdtHold[4:0]),
    .io_rd_odt_delay                     (io_scgregio_rdOdtDelay[4:0]),
    .io_rd_odt_hold                      (io_scgregio_rdOdtHold[4:0])
  );
  assign io_dfi_dfiwrdata_dfi_wdata_mask = 32'hFFFFFFFF;
  assign io_dfi_dfiupdate_dfi_ctrlupd_req = donttouch_flag;
  assign io_dfi_dfiupdate_dfi_phyupd_ack = donttouch_flag;
  assign io_dfi_dfistatus_dfi_data_byte_disable = {31'h0, donttouch_flag};
  assign io_dfi_dfistatus_dfi_dram_clk_disable = io_dfi_dfistatus_dfi_freq_ratio_0;
  assign io_dfi_dfistatus_dfi_freq_ratio = io_dfi_dfistatus_dfi_freq_ratio_0;
  assign io_dfi_dfistatus_dfi_init_start = io_scgregio_dfiInitStart;
  assign io_dfi_dfistatus_dfi_parity_in = donttouch_flag;
  assign io_dfi_dfitraining_dfi_rdlvl_en = donttouch_flag;
  assign io_dfi_dfitraining_dfi_rdlvl_gate_en = donttouch_flag;
  assign io_dfi_dfitraining_dfi_wrlvl_en = donttouch_flag;
  assign io_dfi_dfitraining_dfi_wrlvl_strobe = donttouch_flag;
  assign io_dfi_dfitraining_dfi_lvl_pattern = {7'h0, donttouch_flag};
  assign io_dfi_dfitraining_dfi_lvl_periodic = donttouch_flag;
  assign io_dfi_dfitraining_dfi_phylvl_ack_cs_n = io_dfi_dfistatus_dfi_freq_ratio_0;
  assign io_dfi_dfilp_dfi_lp_ctrl_req = donttouch_flag;
  assign io_dfi_dfilp_dfi_lp_data_req = donttouch_flag;
  assign io_dfi_dfilp_dfi_lp_wakeup = {3'h0, donttouch_flag};
  assign io_As2ScgCmd_ready = _u_fifo_wrap_io_din_ready;
  assign io_scgregio_dfiInitComplete = io_dfi_dfistatus_dfi_init_complete;
  assign io_scgregio_ddrInitEnd = _u_ddr_init_io_end_init_ddr;
endmodule

